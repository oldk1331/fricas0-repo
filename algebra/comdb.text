0`
0`The class of abelian groups,{} \spadignore{i.e.} additive monoids where each element has an additive inverse. \blankline
42`The class of multiplicative monoids,{} \spadignore{i.e.} semigroups with an additive identity element. \blankline
87`Abelian monoid ring elements (not necessarily of finite support) of this ring are of the form formal SUM (r_i * e_i) where the r_i are coefficents and the e_i,{} elements of the ordered abelian monoid,{} are thought of as exponents or monomials. The monomials commute with each other,{} but in general do not commute with the coefficients (which themselves may or may not be commutative). See \spadtype{FiniteAbelian
87`--MonoidRing} for the case of finite support. A useful common model for polynomials and power series. Conceptually at least,{} only the non-zero terms are ever operated on.
175`This category represents products with coordinatewise additive operations.
235`the class of all additive (commutative) semigroups,{} \spadignore{i.e.} a set with a commutative and associative operation \spadop{+}. \blankline
282`The class of all euclidean domains such that \spad{euclideanSize(a*b)=euclideanSize(a)+euclideanSize(b)}.
332`The notion of aggregate serves to model any data structure aggregate,{} designating any collection of objects,{} with heterogenous or homogeneous members,{} with a finite or infinite number of members,{} explicitly or implicitly represented. An aggregate can in principle represent everything from a string of characters to abstract sets such as "the set of \spad{x} satisfying relation {\em r(x)}" An attribute \spadatt{finiteAggregate} is used to assert that a doma
332`--in has a finite number of elements.
370`The category of associative algebras (modules which are themselves rings). \blankline
428`Model for algebraically closed fields.
481`Model for algebraically closed function spaces.
566`An approximation to the real numbers.
610`Approximate numbers with arbitrarily large exponents
660`Approximate numbers for which the user can set the precision for subsequent calculations.
711`Category for the inverse hyperbolic trigonometric functions.
770`Category for the inverse trigonometric functions.
833`An association list is a list of key entry pairs which may be viewed as a table. It is a poor mans version of a table: searching for a key is a linear operation.
915`A bag aggregate is an aggregate for which one can insert and extract objects,{} and where the order in which objects are inserted determines the order of extraction. Examples of bags are stacks,{} queues,{} and dequeues.
965`\spadtype{BasicType} is the basic category for describing a collection of elements with \spadop{=} (equality).
1007`A bialgebra is a coalgebra which at the same time is an algebra such that the comultiplication is also an algebra homomorphism. MxM: Module(\spad{R}) should be replaced by a more restricted category,{} but it is not clear at this point which one.
1081`A \spadtype{BiModule} is both a left and right module with respect to potentially different rings. \blankline
1142`A binary-recursive aggregate has 0,{} 1 or 2 children and serves as a model for a binary tree or a doubly-linked aggregate structure
1204`\spadtype{BinaryTreeCategory(S)} is the category of binary trees: a tree which is either empty or else is a \spadfun{node} consisting of a value and a \spadfun{left} and \spadfun{right},{} both binary trees.
1267`The bit aggregate category models aggregates representing large quantities of Boolean data.
1310`A cachable set is a set whose elements keep an integer as part of their structure.
1354`This is an \spadtype{AbelianMonoid} with the cancellation property,{} \spadignore{i.e.} \spad{ a+b = a+c => b=c }. This is formalised by the partial subtraction operator,{} which satisfies the axioms listed below: \blankline
1411`The class of all domains which have canonical representaion,{} that is if mathematicaly equal elements have the same data structures.
1453`The class of all integral domains such that \spad{unitCanonical(a)*unitCanonical(b) = unitCanonical(a*b)}.
1502`The class of all integral domains such that we can choose a canonical representative for each class of associate elements,{} that is \spad{associates?(a,{} b)} returns \spad{true} if and only if \spad{unitCanonical(a) = unitCanonical(b)}.
1554`Rings of Characteristic Non Zero
1607`Rings of Characteristic Zero.
1656`A coalgebra A over a ring is an \spad{R}-module with a coassociative comultiplication from A to the tensor product of A with itself and which possesses a counit.
1730`A is coercible to \spad{B} means any element of A can automatically be converted into an element of \spad{B} by the interpreter.
1783`A is coercible to \spad{B} means any element of A can automatically be converted into an element of \spad{B} by the interpreter.
1833`A collection is a homogeneous aggregate which can built from list of members. The operation used to build the aggregate is generically named \spadfun{construct}. However,{} each collection provides its own special function with the same name as the data type,{} except with an initial lower case letter,{} \spadignore{e.g.} \spadfun{list} for \spadtype{List},{} \spadfun{flexibleArray} for \spadtype{FlexibleArray},{} and so on.
1881`Category for the usual combinatorial functions.
1941`CombinatorialOpsCategory is the category obtaining by adjoining summations and products to the usual combinatorial operations.
1998`The category of commutative rings with unity,{} \spadignore{i.e.} rings where \spadop{*} is commutative,{} and which have a multiplicative identity. element.
2046`The class of all commutative semigroups in multiplicative notation. In other words domains \spad{D} with \spad{"*": (D,{}D) -> D} which is commutative. Typically applied to rings.
2091`The class of sets equipped with possibly unnatural linear order (needed for technical reasons).
2133`This category represents the extension of a ring by a square root of \spad{-1}.
2199`A is convertible to \spad{B} means any element of A can be converted into an element of \spad{B},{} but not automatically by the interpreter.
2254`A is convertible to \spad{B} means any element of A can be converted into an element of \spad{B},{} but not automatically by the interpreter.
2307`A dequeue is a doubly ended stack,{} that is,{} a bag where first items inserted are the first items extracted,{} at either the front or the back end of the data structure.
2361`A dictionary is an aggregate in which entries can be inserted,{} searched for and removed. Duplicates are thrown away on insertion. This category models the usual notion of dictionary which involves large amounts of data where copying is impractical. Principal operations are thus destructive (non-copying) ones.
2409`This category is a collection of operations common to both categories \spadtype{Dictionary} and \spadtype{MultiDictionary}
2467`Differential extensions of a ring \spad{R}. Given a differentiation on \spad{R},{} extend it to a differentiation on \%.
2527`\spadtype{DifferentialPolynomialCategory} is a category constructor specifying basic functions in an ordinary differential polynomial ring with a given ordered set of differential indeterminates. In addition,{} it implements defaults for the basic functions. The functions \spadfun{order} and \spadfun{weight} are extended from the set of derivatives of differ
2527`--ential indeterminates to the set of differential polynomials. Other operations provided on differential polynomials are \spadfun{leader},{} \spadfun{initial},{} \spadfun{separant},{} \spadfun{differentialVariables},{} and \spadfun{isobaric?}. Furthermore,{} if the ground ring is a differential ring,{} then evaluation (substitution of differential indeterminates by elements of the ground ring or by differential polynomials) is provided by \spadfun{eval}. A convenient way of referencing derivati
2527`--ves is provided by the functions \spadfun{makeVariable}. \blankline To construct a domain using this constructor,{} one needs to provide a ground ring \spad{R},{} an ordered set \spad{S} of differential indeterminates,{} a ranking \spad{V} on the set of derivatives of the differential indeterminates,{} and a set \spad{E} of exponents in bijection with the set of differential monomials in the given differential indeterminates. \blankline
2672`An ordinary differential ring,{} that is,{} a ring with an operation \spadfun{differentiate}. \blankline
2721`\spadtype{DifferentialVariableCategory} constructs the set of derivatives of a given set of (ordinary) differential indeterminates. If \spad{x},{} ...,{} \spad{y} is an ordered set of differential indeterminates,{} and the prime notation is used for differentiation,{} then the set of derivatives (including zero-th order) of the differential indeterminates is \spad{x},{} \spad{x'},{} \spad{x''},{} ...,{} \spad{y},{} \spad{y'},{}
2721`-- \spad{y''},{} ... (Note: in the interpreter,{} the \spad{n}-th derivative of \spad{y} is displayed as \spad{y} with a subscript \spad{n}.) This set is viewed as a set of algebraic indeterminates,{} totally ordered in a way compatible with differentiation and the given order on the differential indeterminates. Such a total order is called a ranking of the differential indeterminates. \blankline A domain in this category is needed to construct a differential polynomial domain. Differential poly
2721`--nomials are ordered by a ranking on the derivatives,{} and by an order (extending the ranking) on on the set of differential monomials. One may thus associate a domain in this category with a ranking of the differential indeterminates,{} just as one associates a domain in the category \spadtype{OrderedAbelianMonoidSup} with an ordering of the set of monomials in a set of algebraic indeterminates. The ranking is specified through the binary relation \spadfun{<}. For example,{} one may define on
2721`--e derivative to be less than another by lexicographically comparing first the \spadfun{order},{} then the given order of the differential indeterminates appearing in the derivatives. This is the default implementation. \blankline The notion of weight generalizes that of degree. A polynomial domain may be made into a graded ring if a weight function is given on the set of indeterminates,{} Very often,{} a grading is the first step in ordering the set of monomials. For differential polynomial do
2721`--mains,{} this constructor provides a function \spadfun{weight},{} which allows the assignment of a non-negative number to each derivative of a differential indeterminate. For example,{} one may define the weight of a derivative to be simply its \spadfun{order} (this is the default assignment). This weight function can then be extended to the set of all differential polynomials,{} providing a graded ring structure.
2795`attribute to indicate an aggregate of finite size
2880`Category of distributions formally given by moments.
2952`A division ring (sometimes called a skew field),{} \spadignore{i.e.} a not necessarily commutative ring where all non-zero elements have multiplicative inverses.
2998`A doubly-linked aggregate serves as a model for a doubly-linked list,{} that is,{} a list which can has links to both next and previous nodes and thus can be efficiently traversed in both directions.
3058`Category for the elementary functions.
3118`An eltable over domains \spad{D} and \spad{I} is a structure which can be viewed as a function from \spad{D} to \spad{I}. Examples of eltable structures range from data structures,{} \spadignore{e.g.} those of type \spadtype{List},{} to algebraic structures,{} \spadignore{e.g.} \spadtype{Polynomial}.
3172`An eltable aggregate is one which can be viewed as a function. For example,{} the list \spad{[1,{} 7,{} 4]} can applied to 0,{} 1,{} and 2 respectively will return the integers 1,{} 7,{} and 4; thus this list may be viewed as mapping 0 to 1,{} 1 to 7 and 2 to 4. In general,{} an aggregate can map members of a domain {\em Dom} to an image domain {\em Im}.
3238`Entire Rings (non-commutative Integral Domains),{} \spadignore{i.e.} a ring not necessarily commutative which has no zero divisors. \blankline
3282`A constructive euclidean domain,{} \spadignore{i.e.} one can divide producing a quotient and a remainder where the remainder is either zero or is smaller (\spadfun{euclideanSize}) than the divisor. \blankline Conditional attributes: \indented{2}{multiplicativeValuation\tab{25}\spad{Size(a*b)=Size(a)*Size(b)}} \indented{2}{additiveValuation\tab{25}\spad{Size(a*b)=Size(a)+Size(b)}}
3330`This category provides \spadfun{eval} operations. A domain may belong to this category if it is possible to make ``evaluation\spad{''} substitutions.
3385`An expression space is a set which is closed under certain operators.
3429`An extensible aggregate is one which allows insertion and deletion of entries. These aggregates are models of lists and streams which are represented by linked structures so as to make insertion,{} deletion,{} and concatenation efficient. However,{} access to elements of these extensible aggregates is generally slow since access is made from the end. See \spadtype{FlexibleArray} for an exception.
3493`ExtensionField {\em F} is the category of fields which extend the field \spad{F}
3544`The category of commutative fields,{} \spadignore{i.e.} commutative rings where all non-zero elements have multiplicative inverses. The \spadfun{factor} operation while trivial is useful to have defined. \blankline
3581`FieldOfPrimeCharacteristic is the category of fields of prime characteristic,{} \spadignore{e.g.} finite fields,{} algebraic closures of fields of prime characteristic,{} transcendental extensions of of fields of prime characteristic.
3637`This category provides an interface to operate on files in the computer\spad{'s} file system. The precise method of naming files is determined by the Name parameter. The type of the contents of the file is determined by \spad{S}.
3714`This category provides an interface to names in the file system.
3762`The category of domains composed of a finite set of elements. We include the functions \spadfun{lookup} and \spadfun{index} to give a bijection between the finite set and an initial segment of positive integers. \blankline
3801`This category is similar to AbelianMonoidRing,{} except that the sum is assumed to be finite. It is a useful model for polynomials,{} but is somewhat more general.
3898`The class of all aggregates with a finite number of elements.
3947`FiniteAlgebraicExtensionField {\em F} is the category of fields which are finite algebraic extensions of the field {\em F}. If {\em F} is finite then any finite algebraic extension of {\em F} is finite,{} too. Let {\em K} be a finite algebraic extension of the finite field {\em F}. The exponentiation of elements of {\em K} defines a \spad{Z}-module structure on the multiplicative group of {\em K}. The additive group of {\em K} becomes
3947`-- a module over the ring of polynomials over {\em F} via the operation \spadfun{linearAssociatedExp}(a: \spad{K},{} \spad{f:} SparseUnivariatePolynomial \spad{F}) which is linear over {\em F},{} \spadignore{i.e.} for elements {\em a} from {\em K},{} {\em c,{} d} from {\em F} and {\em f,{} g} univariate polynomials over {\em F} we have \spadfun{linearAssociatedExp}(a,{} cf+dg) equals {\em c} times \spadfun{linearAssociatedExp}(a,{} \spad{f}) plus {\em d} times \spadfun{linearAssociatedExp}(a,{} 
3947`--\spad{g}). Therefore \spadfun{linearAssociatedExp} is defined completely by its action on monomials from {\em F[X]}: \spadfun{linearAssociatedExp}(a,{} monomial(1,{} \spad{k})\spad{\$}SUP(\spad{F})) is defined to be \spadfun{Frobenius}(a,{} \spad{k}) which is {\em a^(q^k)} where {\em q=size()\$F}. The operations order and discreteLog associated with the multiplicative exponentiation have additive analogues associated to the operation \spadfun{linearAssociatedExp}. These are the functions \spad
3947`--fun{linearAssociatedOrder} and \spadfun{linearAssociatedLog},{} respectively.
4015`This category describes finite rational divisors on a curve,{} that is finite formal sums SUM(\spad{n} * \spad{P}) where the \spad{n}\spad{'s} are integers and the \spad{P}\spad{'s} are finite rational points on the curve.
4206`FiniteFieldCategory is the category of finite fields
4259`Category of finite graphs,{} allows us to model graph theory \blankline
4316`The category of finite groups.
4360`A finite linear aggregate is a linear aggregate of finite length.
4420`A category for finitely generated structures. Exports a list of generators.
4470`A FiniteRankAlgebra is an algebra over a commutative ring \spad{R} which is a free \spad{R}-module of finite rank.
4576`A FiniteRankNonAssociativeAlgebra is a non associative algebra over a commutative ring \spad{R} which is a free \spad{R}-module of finite rank.
4659`A finite-set aggregate models the notion of a finite set,{} that is,{} a collection of elements characterized by membership,{} but not by order or multiplicity. See \spadtype{Set} for an example.
4723`This category is intended as a model for floating point systems. A floating point system is a model for the real numbers. In fact,{} it is an approximation in the sense that not all real numbers are exactly representable by floating point numbers. A floating point system is characterized by the following: \blankline \indented{2}{1: \spadfunFrom{base}{FloatingPointSystem} of the \spadfunFrom{exponent}{FloatingPointSystem}.} \indented{9}{(actual implemena
4723`--tions are usually binary or decimal)} \indented{2}{2: \spadfunFrom{precision}{FloatingPointSystem} of the \spadfunFrom{mantissa}{FloatingPointSystem} (arbitrary or fixed)} \indented{2}{3: rounding error for operations} \blankline Because a Float is an approximation to the real numbers,{} even though it is defined to be a join of a Field and OrderedRing,{} some of the attributes do not hold. In particular associative(\spad{"+"}) does not hold. Algorithms defined over a field need special consid
4723`--erations when the field is a floating point system.
4772`\spadtype{FortranFunctionCategory} is the category of arguments to NAG Library routines which return (sets of) function values.
4828`A category of domains which model machine arithmetic used by machines in the AXIOM-NAG link.
4885`\spadtype{FortranMatrixCategory} provides support for producing Functions and Subroutines when the input to these is an FriCAS object of type \spadtype{Matrix} or in domains involving \spadtype{FortranCode}.
4936`\spadtype{FortranMatrixFunctionCategory} provides support for producing Functions and Subroutines representing matrices of expressions.
4997`\spadtype{FortranProgramCategory} provides various models of FORTRAN subprograms. These can be transformed into actual FORTRAN code.
5053`\spadtype{FortranVectorCategory} provides support for producing Functions and Subroutines when the input to these is an FriCAS object of type \spadtype{Vector} or in domains involving \spadtype{FortranCode}.
5104`\spadtype{FortranVectorFunctionCategory} is the catagory of arguments to NAG Library routines which return the values of vectors of functions.
5165`A \spadtype{FramedAlgebra} is a \spadtype{FiniteRankAlgebra} together with a fixed \spad{R}-module basis.
5267`FramedNonAssociativeAlgebra(\spad{R}) is a \spadtype{FiniteRankNonAssociativeAlgebra} (\spadignore{i.e.} a non associative algebra over \spad{R} which is a free \spad{R}-module of finite rank) over a commutative ring \spad{R} together with a fixed \spad{R}-module basis.
5346`A free abelian monoid on a set \spad{S} is the monoid of finite sums of the form \spad{reduce(+,{} [\spad{ni} * \spad{si}])} where the \spad{si}\spad{'s} are in \spad{S},{} and the \spad{ni}\spad{'s} are in a given abelian monoid. The operation is commutative.
5446`The category of free Lie algebras. It is used by domains of non-commutative algebra: \spadtype{LiePolynomial} and \spadtype{XPBWPolynomial}. \newline Author: Michel Petitot (petitot@lifl.\spad{fr})
5528`A domain of this category implements formal linear combinations of elements from a domain \spad{Basis} with coefficients in a domain \spad{R}. The domain \spad{Basis} needs only to belong to the category \spadtype{SetCategory} and \spad{R} to the category \spadtype{Ring}. Thus the coefficient ring may be non-commutative. See the \spadtype{XDistributedPolynomial} constructor for examples of domains built with the \spadty
5528`--pe{FreeModuleCategory} category constructor. Author: Michel Petitot (petitot@lifl.\spad{fr}) \blankline Note (Franz Lehner,{} June 2009): Since \spad{leadingTerm} makes no sense for unordered base sets,{} and at the time of this writing this domain was never used for such,{} the base set is required to be \spad{Comparable}. \spad{FreeModule} originally was not of FreeModuleCategory. Some functions (like \spad{support},{} \spad{coefficients},{} \spad{monomials},{} ...) from here could be moved 
5528`--to \spad{IndexedDirectProductCategory} but at the moment there is no need for this.
5611`This category provides a selection of evaluation operations depending on what the argument type \spad{R} provides.
5676`\spad{S} is \spadtype{FullyLinearlyExplicitRingOver R} means that \spad{S} is a \spadtype{LinearlyExplicitRingOver R} and,{} in addition,{} if \spad{R} is a \spadtype{LinearlyExplicitRingOver Integer},{} then so is \spad{S}
5746`A set \spad{S} is PatternMatchable over \spad{R} if \spad{S} can lift the pattern-matching functions of \spad{S} over the integers and float to itself (necessary for matching in towers).
5808`\indented{2}{A is fully retractable to \spad{B} means that A is retractable to \spad{B},{} and,{}} \indented{2}{in addition,{} if \spad{B} is retractable to the integers or rational} \indented{2}{numbers then so is A.} \indented{2}{In particular,{} what we are asserting is that there are no integers} \indented{2}{(rationals) in A which don\spad{'t} retract into \spad{B}.} Date Created: March 1990
5867`This category is a model for the function field of a plane algebraic curve.
6036`A space of formal functions with arguments in an arbitrary ordered set.
6091`This category describes domains where \spadfun{\spad{gcd}} can be computed but where there is no guarantee of the existence of \spadfun{factor} operation for factorisation into irreducibles. However,{} if such a \spadfun{factor} operation exist,{} factorization will be unique up to order and units.
6133`GradedAlgebra(\spad{R},{} \spad{E}) denotes ``E-graded \spad{R}-algebra\spad{''}. A graded algebra is a graded module together with a degree preserving \spad{R}-linear map,{} called the {\em product}. \blankline The name ``product\spad{''} is written out in full so inner and outer products with the same mapping type can be distinguished by name.
6212`GradedModule(\spad{R},{} \spad{E}) denotes ``E-graded \spad{R}-module\spad{''},{} \spadignore{i.e.} collection of \spad{R}-modules indexed by an abelian monoid \spad{E}. An element \spad{g} of \spad{G[s]} for some specific \spad{s} in \spad{E} is said to be an element of \spad{G} with {\em degree} \spad{s}. Sums are defined in each module \spad{G[s]} so two elements of \spad{G} have a sum if they have the same degree. \blank
6212`--line Morphisms can be defined and composed by degree to give the mathematical category of graded modules.
6290`The class of multiplicative groups,{} \spadignore{i.e.} monoids with multiplicative inverses. \blankline
6327`A homogeneous aggregate is an aggregate of elements all of the same type. In the current system,{} all aggregates are homogeneous. Two attributes characterize classes of aggregates. Aggregates from domains with attribute \spadatt{finiteAggregate} have a finite number of members. Of course,{} such a domain may have an infinite number of elements,{} like,{} for example \spadtype{List}. Those domains with attribute \spadatt{shallowlyMutable} allo
6327`--w an element to be modified or updated without changing its overall value.
6386`A Hopf algebra is a bialgebra with antipode.
6465`Category for the hyperbolic trigonometric functions.
6524`An indexed aggregate is a many-to-one mapping of indices to entries. For example,{} a one-dimensional-array is an indexed aggregate where the index is an integer. Also,{} a table is an indexed aggregate where the indices and entries may have any type.
6594`This category represents the direct product of some set with respect to an ordered indexing set. The ordered set \spad{S} is considered as the ``basis elements\spad{''} and the elements from \spad{A} as ``coefficients\spad{''}.
6680`This category provides \spadfun{eval} operations. A domain may belong to this category if it is possible to make ``evaluation\spad{''} substitutions. The difference between this and \spadtype{Evalable} is that the operations in this category specify the substitution as a pair of arguments rather than as an equation.
6748`An \spad{IntegerNumberSystem} is a model for the integers.
6797`The category of commutative integral domains,{} \spadignore{i.e.} commutative rings with no zero divisors. \blankline
6844`\indented{1}{+ Author: Mike Dewar} + Date Created: November 1996 + Basic Functions: + Related Constructors: + Also See: + AMS Classifications: + Keywords: + References: + Description: + This category implements of interval arithmetic and transcendental + functions over intervals.
6925`\spadtype{JetBundleBaseFunctionCategory} defines the category of functions (local sections) of the base space of a jet bundle,{} \spadignore{i.e.} functions depending only on the independent variables. Such a category is needed \spadignore{e.g.} for the representation of solutions.
7007`\spadtype{JetBundleCategory} provides basic data structures and procedures for jet bundles. Nearly all necessary functions are implemented already here. Only the representation and functions which direct access to it must be implemented in a domain. Two notations of derivatives are supported. Default is multi-index notation,{} where the \spad{i}-th entry of the index denotes the number of differentiations taken with respect to \spad{x^i}. In repeated inde
7007`--x notation each entry \spad{i} in the index denotes a differentiation with respect to \spad{x^i}. The choice affects,{} however,{} only in- and output. Internally,{} multi-index notation is used throughout.
7054`\spadtype{JetBundleFunctionCategory} defines the category of functions (local sections) over a jet bundle. The formal derivative is defined already here. It uses the Jacobi matrix of the functions. The columns of the matrices are enumerated by jet variables. Thus they are represented as a \spadtype{Record} of the matrix and a list of the jet variables. Several simplification routines are implemented already here.
7131`A keyed dictionary is a dictionary of key-entry pairs for which there is a unique entry for each key.
7198`The class of all domains which have have lazy representation
7247`LazyStreamAggregate is the category of streams with lazy evaluation. It is understood that the function 'empty?' will cause lazy evaluation if necessary to determine if there are entries. Functions which call 'empty?',{} \spadignore{e.g.} 'first' and 'rest',{} will also cause lazy evaluation if necessary.
7307`The category of all left algebras over an arbitrary ring.
7356`The category of left modules over an \spad{rng} (ring not necessarily with unit). This is an abelian group which supports left multiplation by elements of the \spad{rng}. \blankline
7410`This is category of left ore rings,{} that is noncommutaive rings without zero divisors where we can compute least left common multiple
7453`The category of Lie Algebras. It is used by the following domains of non-commutative algebra: \spadtype{LiePolynomial} and \spadtype{XPBWPolynomial}. \newline Author : Michel Petitot (petitot@lifl.\spad{fr}).
7514`A linear aggregate is an aggregate whose elements are indexed by integers. Examples of linear aggregates are strings,{} lists,{} and arrays. Most of the exported operations for linear aggregates are non-destructive but are not always efficient for a particular aggregate. For example,{} \spadfun{concat} of two lists needs only to copy its first argument,{} whereas \spadfun{concat} of two arrays needs to copy both arguments. Most of the operations ex
7514`--ported here apply to infinite objects (\spadignore{e.g.} streams) as well to finite ones. If the aggreagate is a finite aggregate then it has several additional exports exports such as \spadfun{reverse},{} \spadfun{sort},{} and so on.
7568`An extension ring with an explicit linear dependence test.
7632`\spad{LinearOrdinaryDifferentialOperatorCategory} is the category of differential operators with coefficients in a ring A with a given derivation. Multiplication of operators corresponds to functional composition: \indented{4}{\spad{(L1 * L2).(f) = L1 L2 f}}
7715`Category for the transcendental Liouvillian functions.
7774`A list aggregate is a model for a linked list data structure. A linked list is a versatile data structure. Insertion and deletion are efficient and searching is a linear operation.
7826``Logic' provides the basic operations for lattices,{} \spadignore{e.g.} boolean algebra.
7863`Magma is the class of all multiplicative magmas,{} \spadignore{i.e.} sets with a binary operation.
7900`\indented{1}{MagmaWithUnit is the class of multiplicative monads with unit,{}} \indented{1}{\spadignore{i.e.} sets with a binary operation and a unit element.} Axioms \indented{3}{leftIdentity("*":(\%,{}\%)\spad{->}\%,{}1)\space{3}\tab{30} 1*x=x} \indented{3}{rightIdentity("*":(\%,{}\%)\spad{->}\%,{}1)\space{2}\tab{30} x*1=x} Common Additional Axioms \indented{3}{unitsKnown
7900`---if "recip" says "failed",{} that PROVES input wasn\spad{'t} a unit}
7947`\spadtype{MatrixCategory} is a general matrix category which allows different representations and indexing schemes. Rows and columns may be extracted with rows returned as objects of type Row and colums returned as objects of type Col. A domain belonging to this category will be shallowly mutable. The index of the 'first' row may be obtained by calling the function \spadfun{mi
7947`--nRowIndex}. The index of the 'first' column may be obtained by calling the function \spadfun{minColIndex}. The index of the first element of a Row is the same as the index of the first column in a matrix and vice versa.
8074`The category for general multi-variate possibly skew polynomials over a ring \spad{R},{} in variables from VarSet,{} with exponents from the \spadtype{OrderedAbelianMonoidSup}.
8199`This category specifies operations needed by \indented{1}{ModularAlgebraicGcd package.\space{2}Since we have multiple} \indented{1}{implementations we specify interface here and put} \indented{1}{implementations in separate packages.\space{2}Most operations} \indented{1}{are done using special purpose abstract representation.} \indented{1}{Apropriate types are passesd as parametes: \spad{MPT} is type} \indented{1}{
8199`--of modular polynomials in one variable with coefficients} \indented{1}{in some algebraic extension.\space{2}\spad{MD} is type of modulus.} \indented{1}{Final results are converted to packed representation,{}} \indented{1}{with coefficients (from prime field) stored in one} \indented{1}{array and exponents (in main variable and in auxilary} \indented{1}{variables representing generators of algebrac extension)} \indented{1}{stored in parallel array.}
8287`ModularEvaluationCategory(\spad{PT},{} \spad{MP}) defines interface \indented{1}{to evaluation functions for \spad{ModularAlgebraicGcd2}.}
8361`The category of modules over a commutative ring. \blankline
8418`A \spadtype{MonogenicAlgebra} is an algebra of finite rank which can be generated by a single element.
8523`The class of multiplicative monoids,{} \spadignore{i.e.} semigroups with a multiplicative identity element. \blankline
8562`\spadtype{MonoidRingCategory}(\spad{R},{} \spad{M}) defines the algebra of all maps from the monoid \spad{M} to the commutative ring \spad{R} with finite support.
8628`A multi-dictionary is a dictionary which may contain duplicates. As for any dictionary,{} its size is assumed large so that copying (non-destructive) operations are generally to be avoided.
8689`The class of all euclidean domains such that \spad{euclideanSize(a*b)=euclideanSize(a)*euclideanSize(b)}.
8746`A multi-set aggregate is a set which keeps track of the multiplicity of its elements.
8923`\spadtype{MultivariateTaylorSeriesCategory} is the most general multivariate Taylor series category.
9013`NonAssociativeAlgebra is the category of non associative algebras (modules which are themselves non associative rngs). Axioms \indented{3}{\spad{r*}(a*b) = (r*a)\spad{*b} = a*(\spad{r*b})}
9084`A NonAssociativeRing is a non associative \spad{rng} which has a unit,{} the multiplication is not necessarily commutative or associative.
9135`NonAssociativeRng is a basic ring-type structure,{} not necessarily commutative or associative,{} and not necessarily with unit. Axioms \indented{2}{\spad{x*}(\spad{y+z}) = x*y + \spad{x*z}} \indented{2}{(x+y)\spad{*z} = \spad{x*z} + \spad{y*z}} Common Additional Axioms \indented{2}{noZeroDivisors\space{2}ab = 0 \spad{=>} \spad{a=0} or \spad{b=0}}
9184`The category of semirings,{} not necessarily associative,{} not necessarily commutative,{} with 0 and 1.
9240`The category of semirings,{} not necessarily associative,{} not necessarily commutative,{} and not necessarily with a 1.
9294`The category of normalized triangular sets. A triangular set \spad{ts} is said normalized if for every algebraic variable \spad{v} of \spad{ts} the polynomial \spad{select(ts,{} v)} is normalized \spad{w}.\spad{r}.\spad{t}. every polynomial in \spad{collectUnder(ts,{} v)}. A polynomial \spad{p} is said normalized \spad{w}.\spad{r}.\spad{t}. a non
9294`---constant polynomial \spad{q} if \spad{p} is constant or \spad{degree(p,{} mdeg(q)) = 0} and \spad{init(p)} is normalized \spad{w}.\spad{r}.\spad{t}. \spad{q}. One of the important features of normalized triangular sets is that they are regular sets.\newline
9452`The class of all semirings such that \spad{x * y \~~= 0} implies both \spad{x} and \spad{y} are non-zero
9500`OctonionCategory gives the categorial frame for the octonions,{} and eight-dimensional non-associative algebra,{} doubling the the quaternions in the same way as doubling the Complex numbers to get the quaternions.
9563`One-dimensional-array aggregates serves as models for one-dimensional arrays. Categorically,{} these aggregates are finite linear aggregates with the \spadatt{shallowlyMutable} property,{} that is,{} any component of the array may be changed without affecting the identity of the overall array. Array data structures are typically represented by a fixed area in storage and therefore cannot efficiently grow or shrink on demand as can list
9563`-- structures (see however \spadtype{FlexibleArray} for a data structure which is a cross between a list and an array). Iteration over,{} and access to,{} elements of arrays is extremely fast (and often can be optimized to open-code). Insertion and deletion however is generally slow since an entirely new data structure must be created for the result.
9630`\spadtype{OpenMath} provides operations for exporting an object in OpenMath format.
9667`Ordered sets which are also abelian groups,{} such that the addition preserves the ordering.
9720`Ordered sets which are also abelian monoids,{} such that the addition preserves the ordering.
9772`This domain is an OrderedAbelianMonoid with a \spadfun{sup} operation added. The purpose of the \spadfun{sup} operator in this domain is to act as a supremum with respect to the partial order imposed by \spadop{-},{} rather than with respect to the total \spad{>} order (since that is "max"). \blankline
9828`Ordered sets which are also abelian semigroups,{} such that the addition preserves the ordering. \indented{2}{\spad{ x < y => x+z < y+z}}
9883`Ordered sets which are also abelian cancellation monoids,{} such that the addition preserves the ordering.
9948`Ordered finite sets.
9994`The category of ordered commutative integral domains,{} where ordering and the arithmetic operations are compatible \blankline
10049`Ordered sets which are also monoids,{} such that multiplication preserves the ordering. \blankline
10095`to become an in order iterator
10165`Ordered sets which are also rings,{} that is,{} domains where the ring operations are compatible with the ordering. \blankline
10210`Semigroups with compatible ordering.
10260`The class of totally ordered sets,{} that is,{} sets such that for each pair of elements \spad{(a,{} b)} exactly one of the following relations holds \spad{a<b or a=b or b<a} and the relation is transitive,{} \spadignore{i.e.} \spad{a<b and b<c => a<c}. This order should be the natural order on given structure.
10356`This is the catefory of stream-based representations of \indented{2}{the \spad{p}-adic integers.}
10420`A partial differential ring with differentiations indexed by a parameter type \spad{S}. \blankline
10490`The class of partially ordered sets,{} that is sets equipped with transitive and reflexive relation \spad{<=}.
10535`This is the description of any package which provides partial functions on a domain belonging to TranscendentalFunctionCategory.
10606`An object \spad{S} is Patternable over an object \spad{R} if \spad{S} can lift the conversions from \spad{R} into \spadtype{Pattern(Integer)} and \spadtype{Pattern(Float)} to itself.
10656`A set \spad{R} is PatternMatchable over \spad{S} if elements of \spad{R} can be matched to patterns over \spad{S}.
10719`PermutationCategory provides a categorial environment \indented{1}{for subgroups of bijections of a set (\spadignore{i.e.} permutations)}
10786`PlottablePlaneCurveCategory is the category of curves in the plane which may be plotted via the graphics facilities. Functions are provided for obtaining lists of lists of points,{} representing the branches of the curve,{} and for determining the ranges of the \spad{x}-coordinates and \spad{y}-coordinates of the points on the curve.
10847`PlottableSpaceCurveCategory is the category of curves in 3-space which may be plotted via the graphics facilities. Functions are provided for obtaining lists of lists of points,{} representing the branches of the curve,{} and for determining the ranges of the \spad{x-},{} \spad{y-},{} and \spad{z}-coordinates of the points on the curve.
10908`PointCategory is the category of points in space which may be plotted via the graphics facilities. Functions are provided for defining points and handling elements of points.
10960`The category for general multi-variate polynomials over a ring \spad{R},{} in variables from VarSet,{} with exponents from the \spadtype{OrderedAbelianMonoidSup}. Here variables commute with the coefficients.
11076`This is the category of domains that know "enough" about themselves in order to factor univariate polynomials over themselves.
11140`A category for finite subsets of a polynomial ring. Such a set is only regarded as a set of polynomials and not identified to the ideal it generates. So two distinct sets may generate the same the ideal. Furthermore,{} for \spad{R} being an integral domain,{} a set of polynomials may be viewed as a representation of the ideal it generates in the
11140`-- polynomial ring \spad{(R)^(-1) P},{} or the set of its zeros (described for instance by the radical of the previous ideal,{} or a split of the associated affine variety) and so on. So this category provides operations about those different notions.
11299`\spadtype{PowerSeriesCategory} is the most general power series category with exponents in an ordered abelian monoid.
11402`Category for the functions defined by integrals.
11461`The category of constructive principal ideal domains,{} \spadignore{i.e.} where a single generator can be constructively found for any ideal given by a finite set of generators. Note that this constructive definition only implies that finitely generated ideals are principal. It is not clear what we would mean by an infinitely generated ideal.
11511`A priority queue is a bag of items from an ordered set where the item extracted is always the maximum element.
11579`\spadtype{QuaternionCategory} describes the category of quaternions and implements functions that are not representation specific.
11649`A queue is a bag where the first item inserted is the first item extracted.
11702`QuotientField(\spad{S}) is the category of fractions of an Integral Domain \spad{S}.
11772`The \spad{RadicalCategory} is a model for the rational numbers.
11820`\spadtype{RealClosedField} provides common acces functions for all real closed fields.
11869`The category of real numeric domains,{} \spadignore{i.e.} convertible to floats.
11912`The real number system category is intended as a model for the real numbers. The real numbers form an ordered normed field. Note that we have purposely not included \spadtype{DifferentialRing} or the elementary functions (see \spadtype{TranscendentalFunctionCategory}) in the definition.
11958`\spadtype{RealRootCharacterizationCategory} provides common acces functions for all real root codings.
12108`\spadtype{RectangularMatrixCategory} is a category of matrices of fixed dimensions. The dimensions of the matrix will be parameters of the domain. Domains in this category will be \spad{R}-modules and will be non-mutable.
12297`A recursive aggregate over a type \spad{S} is a model for a a directed graph containing values of type \spad{S}. Recursively,{} a recursive aggregate is a {\em node} consisting of a \spadfun{value} from \spad{S} and 0 or more \spadfun{children} which are recursive aggregates. A node with no children is called a \spadfun{leaf} node. A recursive aggregate may be cyclic for which some operations as noted may go into an infinite loop.
12354`A category for general multi-variate polynomials with coefficients in a ring,{} variables in an ordered set,{} and exponents from an ordered abelian monoid,{} with a \spadfun{sup} operation. When not constant,{} such a polynomial is viewed as a univariate polynomial in its main variable \spad{w}. \spad{r}. \spad{t}. to the total ordering on the elements in the ordered set,{} so that some operatio
12354`--ns usually defined for univariate polynomials make sense here.
12461`The category of regular triangular sets,{} introduced under the name regular chains in [1] (and other papers). In [3] it is proved that regular triangular sets and towers of simple extensions of a field are equivalent notions. In the following definitions,{} all polynomials and ideals are taken from the polynomial ring \spad{k[x1,{} ...,{} xn]} whe
12461`--re \spad{k} is the fraction field of \spad{R}. The triangular set \spad{[t1,{} ...,{} tm]} is regular iff for every \spad{i} the initial of \spad{ti+1} is invertible in the tower of simple extensions associated with \spad{[t1,{} ...,{} \spad{ti}]}. A family \spad{[T1,{} ...,{} Ts]} of regular triangular sets is a split of Kalkbrener of a given ideal \spad{I} iff the radical of \spad{I} is equal to the intersection of the radical ideals generated by the saturated ideals of the \spad{[T1,{} ...,
12461`--{} \spad{Ti}]}. A family \spad{[T1,{} ...,{} Ts]} of regular triangular sets is a split of Kalkbrener of a given triangular set \spad{T} iff it is a split of Kalkbrener of the saturated ideal of \spad{T}. Let \spad{K} be an algebraic closure of \spad{k}. Assume that \spad{V} is finite with cardinality \spad{n} and let \spad{A} be the affine space \spad{K^n}. For a regular triangular set \spad{T} let denote by \spad{W(T)} the set of regular zeros of \spad{T}. A family \spad{[T1,{} ...,{} Ts]} o
12461`--f regular triangular sets is a split of Lazard of a given subset \spad{S} of \spad{A} iff the union of the \spad{W(\spad{Ti})} contains \spad{S} and is contained in the closure of \spad{S} (\spad{w}.\spad{r}.\spad{t}. Zariski topology). A family \spad{[T1,{} ...,{} Ts]} of regular triangular sets is a split of Lazard of a given triangular set \spad{T} if it is a split of Lazard of \spad{W(T)}. Note that if \spad{[T1,{} ...,{} Ts]} is a split of Lazard of \spad{T} then it is also a split of Kal
12461`--kbrener of \spad{T}. The converse is \spad{false}. This category provides operations related to both kinds of splits,{} the former being related to ideals decomposition whereas the latter deals with varieties decomposition. See the example illustrating the \spadtype{RegularTriangularSet} constructor for more explanations about decompositions by means of regular triangular sets. \newline
12617`\spad{B} is retractable from A means that some elements in A can be converted into elements of \spad{B} and any element of \spad{B} can be converted into an element of A.
12673`A is retractable to \spad{B} means that some elementsif A can be converted into elements of \spad{B} and any element of \spad{B} can be converted into an element of A.
12727`The category of right modules over an \spad{rng} (ring not necessarily with unit). This is an abelian group which supports right multiplation by elements of the \spad{rng}. \blankline
12782`The category of rings with unity,{} always associative,{} but not necessarily commutative.
12817`The category of associative rings,{} not necessarily commutative,{} and not necessarily with a 1. This is a combination of an abelian group and a semigroup,{} with multiplication distributing over addition. \blankline
12850`This category provides operations on ranges,{} or {\em segments} as they are called.
12905`This category provides an interface for expanding segments to a stream of elements.
13000`the class of all multiplicative semigroups,{} \spadignore{i.e.} a set with an associative operation \spadop{*}. \blankline
13042`The category of associative semirings,{} not necessarily commutative,{} with 0 and 1.
13082`The category of associative semirings,{} not necessarily commutative,{} and not necessarily with a 1.
13120`A category for infinite sequences over a commutative ring. It is a stream with arithmetics.
13188`A set category lists a collection of set-theoretic operations useful for both finite sets and multisets. Note however that finite sets are distinct from multisets. Although the operations defined for set categories are common to both,{} the relationship between the two cannot be described by inclusion or inheritance.
13247`\spadtype{SetCategory} is the basic category for describing a collection of elements with \spadop{=} (equality) and \spadfun{coerce} to output form. \blankline Conditional Attributes: \indented{3}{canonical\tab{15}data structure equality is the same as \spadop{=}}
13291`This category allows the manipulation of Lisp values while keeping the grunge fairly localized.
13407`The class of all domains which have have immediate components that are updateable (mutable).
13457`This is the category of polynomials in noncommutative variables over noncommutative rings. We do not assume that variables and elements of the base ring commute. We assume that the polynomial ring is of solvable type,{} so noncommutative version of Buchberger algorithm works.
13576`Category for the other special functions.
13632`PointCategory is the category of points and vectors in space. Points may be used to represent shapes in a scenegraph such as: the vertices of a cube or points along a line. Shapes such as these may be defined explicitly or may be plotted. We implement SetCategory to allow us to curry transforms from one point to another.
13679`The category of square-free and normalized triangular sets. Thus,{} up to the primitivity axiom of [1],{} these sets are Lazard triangular sets.\newline
13848`The category of square-free regular triangular sets. A regular triangular set \spad{ts} is square-free if the \spad{gcd} of any polynomial \spad{p} in \spad{ts} and \spad{differentiate(p,{} mvar(p))} \spad{w}.\spad{r}.\spad{t}. \spadopFrom{collectUnder}{TriangularSetCategory}(\spad{ts},{} \spadopFrom{mvar}{RecursivePolynomialCategory}(\sp
13848`--ad{p})) has degree zero \spad{w}.\spad{r}.\spad{t}. \spad{mvar(p)}. Thus any square-free regular set defines a tower of square-free simple extensions.\newline
14014`\spadtype{SquareMatrixCategory} is a general square matrix category which allows different representations and indexing schemes. Rows and columns may be extracted with rows returned as objects of type Row and colums returned as objects of type Col.
14187`A stack is a bag where the last item inserted is the first item extracted.
14240`A class of objects which can be 'stepped through'. Repeated applications of \spadfun{nextItem} is guaranteed never to return duplicate items and only return "failed" after exhausting all elements of the domain. This assumes that the sequence starts with \spad{init()}. For infinite domains,{} repeated application of \spadfun{nextItem} is not required to reach all possible domain elements starting from any initial element. \blankline Conditional attributes: \ind
14240`--ented{2}{infinite\tab{15}repeated \spad{nextItem}\spad{'s} are never "failed".}
14282`A stream aggregate is a linear aggregate which possibly has an infinite number of elements. A basic domain constructor which builds stream aggregates is \spadtype{Stream}. From streams,{} a number of infinite structures such as power series can be built.
14336`A string aggregate is a category for strings,{} that is,{} one dimensional arrays of characters.
14383`A category for string-like objects
14431`A table aggregate is a model of a table,{} \spadignore{i.e.} a discrete many-to-one mapping from keys to entries.
14717`Category of tensor powers of modules over commutative rings.
14822`Category of tensor products of modules over commutative rings.
14921`Universal property of tensor products.
15069`The category ThreeSpaceCategory is used for creating three dimensional objects using functions for defining points,{} curves,{} polygons,{} constructs and the subspaces containing them.
15127`Category for the transcendental elementary functions.
15191`The category of triangular sets of multivariate polynomials with coefficients in an integral domain. Let \spad{R} be an integral domain and \spad{V} a finite ordered set of variables,{} say \spad{X1 < X2 < ... < Xn}. A set \spad{S} of polynomials in \spad{R[X1,{} X2,{} ...,{} Xn]} is triangular if no elements of \spad{S} lies in \spad{R},{} and if tw
15191`--o distinct elements of \spad{S} have distinct main variables. Note that the empty set is a triangular set. A triangular set is not necessarily a (lexicographical) Groebner basis and the notion of reduction related to triangular sets is based on the recursive view of polynomials. We recall this notion here and refer to [1] for more details. A polynomial \spad{P} is reduced \spad{w}.\spad{r}.\spad{t} a non-constant polynomial \spad{Q} if the degree of \spad{P} in the main variable of \spad{Q} is
15191`-- less than the main degree of \spad{Q}. A polynomial \spad{P} is reduced \spad{w}.\spad{r}.\spad{t} a triangular set \spad{T} if it is reduced \spad{w}.\spad{r}.\spad{t}. every polynomial of \spad{T}. \newline
15345`Category for the trigonometric functions.
15408`\indented{1}{TwoDimensionalArrayCategory is a general array category which} allows different representations and indexing schemes. Rows and columns may be extracted with rows returned as objects of type Row and columns returned as objects of type Col. The index of the 'first' row may be obtained by calling the function 'minRowIndex'. The index of the 'first' column may 
15408`--be obtained by calling the function 'minColIndex'. The index of the first element of a 'Row' is the same as the index of the first column in an array and vice versa.
15542`The fundamental Type.
15577`A unary-recursive aggregate is a one where nodes may have either 0 or 1 children. This aggregate models,{} though not precisely,{} a linked list possibly with a single cycle. A node with one children models a non-empty list,{} with the \spadfun{value} of the list designating the head,{} or \spadfun{first},{} of the list,{} and the child designating the tail,{} or \spadfun{rest},{} of the list. A node with no child then designates the empty 
15577`--list. Since these aggregates are recursive aggregates,{} they may be cyclic.
15639`A constructive unique factorization domain,{} \spadignore{i.e.} where we can constructively factor members into a product of a finite number of irreducible elements.
15694`The class of all monoids (multiplicative semigroups with a 1) such that the operation \spadfun{recip} can only return "failed" if its argument is not a unit.
15738`\spadtype{UnivariateLaurentSeriesCategory} is the category of Laurent series in one variable.
15812`This is a category of univariate Laurent series constructed from univariate Taylor series. A Laurent series is represented by a pair \spad{[n,{} f(x)]},{} where \spad{n} is an arbitrary integer and \spad{f(x)} is a Taylor series. This pair represents the Laurent series \spad{x^n * f(x)}.
15944`The category of univariate polynomials over a ring \spad{R}. No particular model is assumed - implementations can be either sparse or dense.
16025`\spadtype{UnivariatePowerSeriesCategory} is the most general univariate power series category with exponents in an ordered abelian monoid. Note: this category exports a substitution function if it is possible to multiply exponents. Note: this category exports a derivative operation if it is possible to multiply coefficients by exponents.
16124`\spadtype{UnivariatePuiseuxSeriesCategory} is the category of Puiseux series in one variable.
16199`This is a category of univariate Puiseux series constructed from univariate Laurent series. A Puiseux series is represented by a pair \spad{[r,{} f(x)]},{} where \spad{r} is a positive rational number and \spad{f(x)} is a Laurent series. This pair represents the Puiseux series \spad{f(x^r)}.
16332`This is the category of univariate skew polynomials over an Ore coefficient ring. The multiplication is given by \spad{x a = \sigma(a) x + \delta a}. This category is an evolution of the types \indented{2}{MonogenicLinearOperator,{} OppositeMonogenicLinearOperator,{} and} \indented{2}{NonCommutativeOperatorDivision} developped by Jean Della Dora and Stephen \spad{M}. Watt.
16405`\spadtype{UnivariateTaylorSeriesCategory} is the category of Taylor series in one variable.
16478`VarCat represents a variable in Lambda and Ski domains. Since we are working in terms of functions then a variable will be a function (possibly a constant function) a variable has a name represented by a String. If the Lambda or Ski calculas is typed then the variable will also have a type.
16517`The class of all polynomials domains such that variables commute with coefficients.
16582`\spadtype{VectorCategory} represents the type of vector like objects,{} \spadignore{i.e.} finite sequences indexed by some finite segment of the integers. The operations available on vectors depend on the structure of the underlying components. Many operations from the component domain are defined for vectors componentwise. It can by assumed that extraction or updating components can be done in constant time.
16637`Vector Spaces (not necessarily finite dimensional) over a field.
16689`This is the category of algebras over non-commutative rings. It is used by constructors of non-commutative algebras such as: \indented{4}{\spadtype{XPolynomialRing}.} \indented{4}{\spadtype{XFreeAlgebra}} Author: Michel Petitot (petitot@lifl.\spad{fr})
16735`This category specifies opeations for polynomials and formal series with non-commutative variables.
16800`The Category of polynomial rings with non-commutative variables. The coefficient ring may be non-commutative too. However coefficients commute with variables.
16869`AlgebraGivenByStructuralConstants implements finite rank algebras over a commutative ring,{} given by the structural constants \spad{gamma} with respect to a fixed basis \spad{[a1,{} ..,{} an]},{} where \spad{gamma} is an \spad{n}-vector of \spad{n} by \spad{n} matrices \spad{[(gammaijk) for k in 1..rank()]} defined by \spad{\spad{ai} * 
16869`--aj = gammaij1 * a1 + ... + gammaijn * an}. The symbols for the fixed basis have to be given as a list of symbols.
17036`Function field defined by \spad{f}(\spad{x},{} \spad{y}) = 0.
17238`Algebraic closure of the rational numbers,{} with mathematical =
17299`This domain implements anonymous functions
17350`The domain of antisymmetric polynomials.
17433`\spadtype{Any} implements a type that packages up objects and their types in objects of \spadtype{Any}. Roughly speaking that means that if \spad{s : S} then when converted to \spadtype{Any},{} the new object will include both the original object and its type. This is a way of converting arbitrary objects into a single type without losing any of the original information. Any object can be converted to one of \spadtype{Any}.
17479`A stack represented as a flexible array.
17555`\indented{1}{AssociatedJordanAlgebra takes an algebra \spad{A} and uses \spadfun{*\$A}} \indented{1}{to define the new multiplications \spad{a*b := (a *\$A b + b *\$A a)/2}} \indented{1}{(anticommutator).} \indented{1}{The usual notation \spad{{a,{} b}_+} cannot be used due to} \indented{1}{restrictions in the current language.} \indented{1}{This domain only gives a Jordan
17555`-- algebra if the} \indented{1}{Jordan-identity \spad{(a*b)*c + (b*c)*a + (c*a)*b = 0} holds} \indented{1}{for all \spad{a},{} \spad{b},{} \spad{c} in \spad{A}.} \indented{1}{This relation can be checked by} \indented{1}{\spadfun{jordanAdmissible?()\$A}.} \blankline If the underlying algebra is of type \spadtype{FramedNonAssociativeAlgebra(R)} (\spadignore{i.e.} a non associative algebra over \spad{R} which is a free \spad{R}-module of finite rank,{} together with a fixed \spad{R}-module basis),
17555`--{} then the same is \spad{true} for the associated Jordan algebra. Moreover,{} if the underlying algebra is of type \spadtype{FiniteRankNonAssociativeAlgebra(R)} (\spadignore{i.e.} a non associative algebra over \spad{R} which is a free \spad{R}-module of finite rank),{} then the same \spad{true} for the associated Jordan algebra.
17686`AssociatedLieAlgebra takes an algebra \spad{A} and uses \spadfun{*\$A} to define the Lie bracket \spad{a*b := (a *\$A b - b *\$A a)} (commutator). Note that the notation \spad{[a,{} b]} cannot be used due to restrictions of the current compiler. This domain only gives a Lie algebra if the Jacobi-identity \spad{(a*b)*c + (b*c)*a + (c*a)*b = 0} holds for all \spad{a},{} \spad{b},{
17686`--} \spad{c} in \spad{A}. This relation can be checked by \spad{lieAdmissible?()\$A}. \blankline If the underlying algebra is of type \spadtype{FramedNonAssociativeAlgebra(R)} (\spadignore{i.e.} a non associative algebra over \spad{R} which is a free \spad{R}-module of finite rank,{} together with a fixed \spad{R}-module basis),{} then the same is \spad{true} for the associated Lie algebra. Also,{} if the underlying algebra is of type \spadtype{FiniteRankNonAssociativeAlgebra(R)} (\spadignore{i.
17686`--e.} a non associative algebra over \spad{R} which is a free \spad{R}-module of finite rank),{} then the same is \spad{true} for the associated Lie algebra.
17811`\spadtype{AssociationList} implements association lists. These may be viewed as lists of pairs where the first part is a key and the second is the stored value. For example,{} the key might be a string with a persons employee identification number and the value might be a record with personnel data.
17918`Automorphism \spad{R} is the multiplicative group of automorphisms of \spad{R}.
17978`\spadtype{BalancedBinaryTree(S)} is the domain of balanced binary trees (bbtree). A balanced binary tree of \spad{2^k} leaves,{} for some \spad{k > 0},{} is symmetric,{} that is,{} the left and right subtree of each interior node have identical shape. In general,{} the left and right subtree of a given node can differ by at most leaf node.
18066`Stream-based implementation of \spad{Zp:} \spad{p}-adic numbers are represented as sum(\spad{i} = 0..,{} a[\spad{i}] * p^i),{} where the a[\spad{i}] lie in -(\spad{p} - 1)\spad{/2},{} ...,{} (\spad{p} - 1)\spad{/2}.
18144`Stream-based implementation of \spad{Qp:} numbers are represented as sum(\spad{i} = \spad{k}..,{} a[\spad{i}] * p^i),{} where the a[\spad{i}] lie in -(\spad{p} - 1)\spad{/2},{} ...,{} (\spad{p} - 1)\spad{/2}.
18258`A basic operator is an object that can be applied to a list of arguments from a set,{} the result being a kernel over that set.
18313`This domain allows rational numbers to be presented as repeating binary expansions.
18393`This domain provides an implementation of binary files. Data is accessed one byte at a time as a small integer.
18475`BinarySearchTree(\spad{S}) is the domain of a binary trees where elements are ordered across the tree. A binary search tree is either empty or has a value which is an \spad{S},{} and a right and left which are both BinaryTree(\spad{S}) Elements are ordered across the tree.
18560`\spadtype{BinaryTournament(S)} is the domain of binary trees where elements are ordered down the tree. A binary search tree is either empty or is a node containing a \spadfun{value} of type \spad{S},{} and a \spadfun{right} and a \spadfun{left} which are both \spadtype{BinaryTree(S)}
18645`\spadtype{BinaryTree(S)} is the domain of all binary trees. A binary tree over \spad{S} is either empty or has a \spadfun{value} which is an \spad{S} and a \spadfun{right} and \spadfun{left} which are both binary trees.
18724`\spadtype{Bits} provides logical functions for Indexed Bits.
18773`\indented{1}{\spadtype{Boolean} is the elementary logic with 2 values:} \spad{true} and \spad{false}
18826`Members of the domain CardinalNumber are values indicating the cardinality of sets,{} both finite and infinite. Arithmetic operations are defined on cardinal numbers as follows. \blankline If \spad{x = \#X} and \spad{y = \#Y} then \indented{2}{\spad{x+y\space{2}= \#(X+Y)}\space{3}\tab{30}disjoint union} \indented{2}{\spad{x-y\space{2}= \#(X-Y)}\space{3}\tab{30}relative complement} \indented{2}{\spad{x*y\space{2}= \#(X*Y)}\space{3}\tab{30}cartesi
18826`--an product} \indented{2}{\spad{x^y = \#(X^Y)}\space{2}\tab{30}\spad{X^Y = \{g| g: Y->X\}}} \blankline The non-negative integers have a natural construction as cardinals \indented{2}{\spad{0 = \#\{\}},{} \spad{1 = \{0\}},{} \spad{2 = \{0,{} 1\}},{} ...,{} \spad{n = \{i| 0 <= i < n\}}.} \blankline That \spad{0} acts as a zero for the multiplication of cardinals is equivalent to the axiom of choice. \blankline The generalized continuum hypothesis asserts \center{\spad{2^Aleph i = Aleph(i+1)}} and
18826`-- is independent of the axioms of set theory [Goedel 1940]. \blankline Three commonly encountered cardinal numbers are \indented{3}{\spad{a = \#Z}\space{7}\tab{30}countable infinity} \indented{3}{\spad{c = \#R}\space{7}\tab{30}the continuum} \indented{3}{\spad{f = \#\{g| g: [0,{} 1]->R\}}} \blankline In this domain,{} these values are obtained using \indented{3}{\spad{a := Aleph 0},{} \spad{c := 2^a},{} \spad{f := 2^c}.} \blankline
18883`CartesianTensor(minix,{} dim,{} \spad{R}) provides Cartesian tensors with components belonging to a commutative ring \spad{R}. These tensors can have any number of indices. Each index takes values from \spad{minix} to \spad{minix + dim - 1}.
19110`This domain provides the basic character data type.
19165`This domain allows classes of characters to be defined and manipulated efficiently.
19225`CliffordAlgebra(\spad{n},{} \spad{K},{} bLin) defines a module of dimension \spad{2^n} over \spad{K},{} given a bilinear form bLin on \spad{K^n}. \blankline Examples of Clifford Algebras are: gaussians,{} quaternions,{} exterior algebras and spin algebras.
19330`Color() specifies a domain of 27 colors provided in the \Language{} system (the colors mix additively).
19385`A type for basic commutators
19439`\spadtype {Complex(R)} creates the domain of elements of the form \spad{a + b * i} where \spad{a} and \spad{b} come from the ring \spad{R},{} and \spad{i} is a new element such that \spad{i^2 = -1}.
19518`This is a low-level domain which implements matrices (two dimensional arrays) of complex double precision floating point numbers. Indexing is 0 based,{} there is no bound checking (unless provided by lower level).
19663`This is a low-level domain which implements vectors (one dimensional arrays) of complex double precision floating point numbers. Indexing is 0 based,{} there is no bound checking (unless provided by lower level).
19758`\spadtype{ContinuedFraction} implements general \indented{1}{continued fractions.\space{2}This version is not restricted to simple,{}} \indented{1}{finite fractions and uses the \spadtype{Stream} as a} \indented{1}{representation.\space{2}The arithmetic functions assume that the} \indented{1}{approximants alternate below/above the convergence point.} \indented{1}{This is enforced by ensuring the partial numerators and pa
19758`--rtial} \indented{1}{denominators are greater than 0 in the Euclidean domain view of \spad{R}} \indented{1}{(\spadignore{i.e.} \spad{sizeLess?(0,{} x)}).}
19840`A domain for finite cyclic groups.
19924`\indented{1}{This domain implements a simple view of a database whose fields are} indexed by symbols
20000`This domain provides some nice functions on lists
20071`This domain allows rational numbers to be presented as repeating decimal expansions.
20153`\indented{1}{A Denavit-Hartenberg Matrix is a 4x4 Matrix of the form:} \indented{1}{\spad{nx ox ax px}} \indented{1}{\spad{ny oy ay py}} \indented{1}{\spad{nz oz az pz}} \indented{2}{\spad{0\space{2}0\space{2}0\space{2}1}} (\spad{n},{} \spad{o},{} and a are the direction cosines)
20268`Linked list implementation of a Dequeue
20344`The deRham complex of Euclidean space,{} that is,{} the class of differential forms of arbitary degree over a coefficient ring. See Flanders,{} Harley,{} Differential Forms,{} With Applications to the Physical Sciences,{} New York,{} Academic Press,{} 1963.
20473`\spadtype{DifferentialSparseMultivariatePolynomial} implements an ordinary differential polynomial ring by combining a domain belonging to the category \spadtype{DifferentialVariableCategory} with the domain \spadtype{SparseMultivariatePolynomial}. \blankline
20661`\spad{DihedralGroup(n,{} a,{} b)} is the dihedral group generated by a rotation a of order \spad{n} and a reflection \spad{b}.
20756`Category of directed graphs,{} allows us to model graph theory \blankline
20831`\indented{2}{This type represents the finite direct or cartesian product of an} underlying component type. This contrasts with simple vectors in that the members can be viewed as having constant length. Thus many categorical properties can by lifted from the underlying component type. Component extraction operations are provided but no updating operations. Thus new direct product elements can either be c
20831`--reated by converting vector elements using the \spadfun{directProduct} function or by taking appropriate linear combinations of basis vectors provided by the \spad{unitVector} operation.
20930`This constructor provides a direct product type with a left matrix-module view.
21129`This constructor provides a direct product of \spad{R}-modules with an \spad{R}-module view.
21255`DirichletRing is the ring of arithmetical functions with Dirichlet convolution as multiplication
21318`\spadtype{DistributedJetBundlePolynomial} implements polynomials in a distributed representation. The unknows come from a finite list of jet variables. The implementation is basically a copy of the one of \spadtype{GeneralDistributedMultivariatePolynomial}.
21508`\indented{2}{This type supports distributed multivariate polynomials} whose variables are from a user specified list of symbols. The coefficient ring may be non commutative,{} but the variables are assumed to commute. The term ordering is lexicographic specified by the variable list parameter with the most significant variable fi
21508`--rst in the list.
21683`Domain for distributions formally given by moments. moments and different kinds of cumulants are stored in streams and computed on demand.
21771`\indented{1}{\spadtype{DoubleFloat} is intended to make accessible} hardware floating point arithmetic in \Language{},{} either native double precision,{} or IEEE. On most machines,{} there will be hardware support for the arithmetic operations: \spadfunFrom{+}{DoubleFloat},{} \spadfunFrom{*}{DoubleFloat},{} \spadfunFrom{/}{DoubleFloat} and possibly also the \spadfunFrom{sqrt}{DoubleFloat} operation. The operations \spadfunFrom{exp}{Doub
21771`--leFloat},{} \spadfunFrom{log}{DoubleFloat},{} \spadfunFrom{sin}{DoubleFloat},{} \spadfunFrom{cos}{DoubleFloat},{} \spadfunFrom{atan}{DoubleFloat} are normally coded in software based on minimax polynomial/rational approximations. Some general comments about the accuracy of the operations: the operations \spadfunFrom{+}{DoubleFloat},{} \spadfunFrom{*}{DoubleFloat},{} \spadfunFrom{/}{DoubleFloat} and \spadfunFrom{sqrt}{DoubleFloat} are expected to be fully accurate. The operations \spadfunFrom{e
21771`--xp}{DoubleFloat},{} \spadfunFrom{log}{DoubleFloat},{} \spadfunFrom{sin}{DoubleFloat},{} \spadfunFrom{cos}{DoubleFloat} and \spadfunFrom{atan}{DoubleFloat} are not expected to be fully accurate. In particular,{} \spadfunFrom{sin}{DoubleFloat} and \spadfunFrom{cos}{DoubleFloat} will lose all precision for large arguments. \blankline The \spadtype{Float} domain provides an alternative to the \spad{DoubleFloat} domain. It provides an arbitrary precision model of floating point arithmetic. This mea
21771`--ns that accuracy problems like those above are eliminated by increasing the working precision where necessary. \spadtype{Float} provides some special functions such as \spadfunFrom{erf}{DoubleFloat},{} the error function in addition to the elementary functions. The disadvantage of \spadtype{Float} is that it is much more expensive than small floats when the latter can be used.
21836`This is a low-level domain which implements matrices (two dimensional arrays) of double precision floating point numbers. Indexing is 0 based,{} there is no bound checking (unless provided by lower level).
21950`This is a low-level domain which implements vectors (one dimensional arrays) of double precision floating point numbers. Indexing is 0 based,{} there is no bound checking (unless provided by lower level).
22028`DrawOption allows the user to specify defaults for the creation and rendering of plots.
22328`\indented{1}{This package provides elementary functions on any Laurent series} domain over a field which was constructed from a Taylor series domain. These functions are implemented by calling the corresponding functions on the Taylor series domain. We
22328`-- also provide 'partial functions' which compute transcendental functions of Laurent series when possible and return "failed" when this is not possible.
22582`\indented{1}{This package provides elementary functions on any Laurent series} domain over a field which was constructed from a Taylor series domain. These functions are implemented by calling the correspo
22582`--nding functions on the Taylor series domain. We also provide 'partial functions' which compute transcendental functions of Laurent series when possible and return "failed" when this is not possible.
22883`\spad{Enumeration(a,b,...,c)} is a primitive type in FriCAS used to represent the object composed of the symbols \spad{a},\spad{b},..., and \spad{c}.
22931`This domain provides tables where the keys are compared using \spadfun{eq?}. Thus keys are considered equal only if they are the same instance of a structure.
23030`Equations as mathematical objects. All properties of the basis domain,{} \spadignore{e.g.} being an abelian group are carried over the equation domain,{} by performing the structural operations on the left and on the right hand side.
23080`These domains are used for the factorization and gcds of univariate polynomials over the integers in order to work modulo different primes. See \spadtype{ModularRing},{} \spadtype{ModularField}
23321`A function which does not return directly to its caller should have Exit as its return type. \blankline Note: It is convenient to have a formal \spad{coerce} into each type from type Exit. This allows,{} for example,{} errors to be raised in one half of a type-balanced \spad{if}.
23359`UnivariatePuiseuxSeriesWithExponentialSingularity is a domain used to represent essential singularities of functions. Objects in this domain are quotients of sums,{} where each term in the sum is a univariate Puiseux series times the exponential of a univariate Puiseux s
23359`--eries.
23594`ExponentialOfUnivariatePuiseuxSeries is a domain used to represent essential singularities of functions. An object in this domain is a function of the form \spad{exp(f(x))},{} where \spad{f(x)} is a Puiseux series with no terms of non-negative degree. Objects are ordered according to order of singularity,{} with functions which tend more rapidly to 
23594`--zero or infinity considered to be larger. Thus,{} if \spad{order(f(x)) < order(g(x))},{} \spadignore{i.e.} the first non-zero term of \spad{f(x)} has lower degree than the first non-zero term of \spad{g(x)},{} then \spad{exp(f(x)) > exp(g(x))}. If \spad{order(f(x)) = order(g(x))},{} then the ordering is essentially random. This domain is used in computing limits involving functions with essential singularities.
23749`Expressions involving symbolic functions.
23821`A domain used in the construction of the exterior algebra on a set \spad{X} over a ring \spad{R}. This domain represents the set of all ordered subsets of the set \spad{X},{} assumed to be in correspondance with {1,{} 2,{} 3,{} ...}. The ordered subsets are themselves ordered lexicographically and are in bijective correspondance with an ordered basis of the exterior algebra. In this domain we are dealing strictly with the exponents of basis elements
23821`-- which can only be 0 or 1. \blankline The multiplicative identity element of the exterior algebra corresponds to the empty subset of \spad{X}. A coerce from List Integer to an ordered basis element is provided to allow the convenient input of expressions. Another exported function forgets the ordered structure and simply returns the list corresponding to an ordered subset.
23874`\spadtype{Factored} creates a domain whose objects are kept in factored form as long as possible. Thus certain operations like multiplication and \spad{gcd} are relatively easy to do. Others,{} like addition require somewhat more work,{} and unless the argument domain provides a factor function,{} the result may not be completely factored. Each object consists of a unit and a list of factors,{} where a factor has a member of \spad{R
23874`--} (the "base"),{} and exponent and a flag indicating what is known about the base. A flag may be one of "nil",{} "sqfr",{} "irred" or "prime",{} which respectively mean that nothing is known about the base,{} it is square-free,{} it is irreducible,{} or it is prime. The current restriction to integral domains allows simplification to be performed without worrying about multiplication order.
23944`FakePolynomial is a domain of univariate polynomials \indented{1}{with coefficients beeing fractions of multivariate integer} \indented{1}{polynomials.\space{2}Coefficients are kept in unsimplified form.} \indented{1}{This domain exists to avoid cost of recursive \spad{GCD} calls} \indented{1}{during polynomial evaluation.}
23987`This domain provides a basic model of files to save arbitrary values. The operations provide sequential access to the contents.
24062`This domain provides an interface to names in the file system.
24110`This domains implements finite rational divisors on a curve,{} that is finite formal sums SUM(\spad{n} * \spad{P}) where the \spad{n}\spad{'s} are integers and the \spad{P}\spad{'s} are finite rational points on the curve.
24328`FiniteField(\spad{p},{} \spad{n}) implements finite fields with \spad{p^n} elements. This packages checks that \spad{p} is prime. For a non-checking version,{} see \spadtype{InnerFiniteField}.
24440`FiniteFieldCyclicGroup(\spad{p},{} \spad{n}) implements a finite field extension of degee \spad{n} over the prime field with \spad{p} elements. Its elements are represented by powers of a primitive element,{} \spadignore{i.e.} a generator of the multiplicative (cyclic) group. As primitive element we choose the root of the extension polynomial,{} which is created b
24440`--y {\em createPrimitivePoly} from \spadtype{FiniteFieldPolynomialPackage}. The Zech logarithms are stored in a table of size half of the field size,{} and use \spadtype{SingleInteger} for representing field elements,{} hence,{} there are restrictions on the size of the field.
24580`FiniteFieldCyclicGroupExtension(\spad{GF},{} \spad{n}) implements a extension of degree \spad{n} over the ground field {\em GF}. Its elements are represented by powers of a primitive element,{} \spadignore{i.e.} a generator of the multiplicative (cyclic) group. As primitive element we choose the root of the extension polynomial,{} which is created by {\em crea
24580`--tePrimitivePoly} from \spadtype{FiniteFieldPolynomialPackage}. Zech logarithms are stored in a table of size half of the field size,{} and use \spadtype{SingleInteger} for representing field elements,{} hence,{} there are restrictions on the size of the field.
24724`FiniteFieldCyclicGroupExtensionByPolynomial(\spad{GF},{} defpol) implements a finite extension field of the ground field {\em GF}. Its elements are represented by powers of a primitive element,{} \spadignore{i.e.} a generator of the multiplicative (cyclic) group. As primitive element we choose the root of the extension polynomial 
24724`--{\em defpol},{} which MUST be primitive (user responsibility). Zech logarithms are stored in a table of size half of the field size,{} and use \spadtype{SingleInteger} for representing field elements,{} hence,{} there are restrictions on the size of the field.
24898`FiniteFieldExtensionByPolynomial(\spad{GF},{} \spad{n}) implements an extension of the finite field {\em GF} of degree \spad{n} generated by the extension polynomial constructed by \spadfunFrom{createIrreduciblePoly}{FiniteFieldPolynomialPackage} from \spadtype{FiniteFieldPolynomialPackage}.
25014`FiniteFieldExtensionByPolynomial(\spad{GF},{} defpol) implements the extension of the finite field {\em GF} generated by the extension polynomial {\em defpol} which MUST be irreducible. Note: the user has the responsibility to ensure that {\em defpol} is irreducible.
25165`FiniteFieldNormalBasis(\spad{p},{} \spad{n}) implements a finite extension field of degree \spad{n} over the prime field with \spad{p} elements. The elements are represented by coordinate vectors with respect to a normal basis,{} \spadignore{i.e.} a basis consisting of the conjugates (\spad{q}-powers) of an element,{} in this case called normal element. This is ch
25165`--osen as a root of the extension polynomial created by \spadfunFrom{createNormalPoly}{FiniteFieldPolynomialPackage}.
25305`FiniteFieldNormalBasisExtensionByPolynomial(\spad{GF},{} \spad{n}) implements a finite extension field of degree \spad{n} over the ground field {\em GF}. The elements are represented by coordinate vectors with respect to a normal basis,{} \spadignore{i.e.} a basis consisting of the conjugates (\spad{q}-powers) of an element,{} in this case called normal elemen
25305`--t. This is chosen as a root of the extension polynomial,{} created by {\em createNormalPoly} from \spadtype{FiniteFieldPolynomialPackage}
25449`FiniteFieldNormalBasisExtensionByPolynomial(\spad{GF},{} uni) implements a finite extension of the ground field {\em GF}. The elements are represented by coordinate vectors with respect to. a normal basis,{} \spadignore{i.e.} a basis consisting of the conjugates (\spad{q}-powe
25449`--rs) of an element,{} in this case called normal element,{} where \spad{q} is the size of {\em GF}. The normal element is chosen as a root of the extension polynomial,{} which MUST be normal over {\em GF} (user responsibility)
25678`\indented{1}{A FlexibleArray is the notion of an array intended to allow for growth} at the end only. Hence the following efficient operations \indented{2}{\spad{concat!(a,{} x)} meaning append item \spad{x} at the end of the array \spad{a}} \indented{2}{\spad{delete!(a,{} n)} meaning delete the last item from the array \spad{a}} Flexible arrays support the other operations inherited from \spadtype{ExtensibleLinearAg
25678`--gregate}. However,{} these are not efficient. Flexible arrays combine the \spad{O(1)} access time property of arrays with growing and shrinking at the end in \spad{O(1)} (average) time. This is done by using an ordinary array which may have zero or more empty slots at the end. When the array becomes full it is copied into a new larger (50\% larger) array. Conversely,{} when the array becomes less than 1/2 full,{} it is copied into a smaller array. Flexible arrays provide for an efficient imple
25678`--mentation of many data structures in particular heaps,{} stacks and sets.
25764`\spadtype{Float} implements arbitrary precision floating point arithmetic. The number of significant digits of each operation can be set to an arbitrary value (the default is 20 decimal digits). The operation \spad{float(mantissa,{} exponent,{} \spadfunFrom{base}{FloatingPointSystem})} for integer \spad{mantissa},{} \spad{exponent} specifies the number \spad{mantissa * \spadfunFrom{base}{FloatingPointSystem} ^ exponent} The underlying represent
25764`--ation for floats is binary not decimal. The implications of this are described below. \blankline The model adopted is that arithmetic operations are rounded to to nearest unit in the last place,{} that is,{} accurate to within \spad{2^(-\spadfunFrom{bits}{FloatingPointSystem})}. Also,{} the elementary functions and constants are accurate to one unit in the last place. A float is represented as a record of two integers,{} the mantissa and the exponent. The \spadfunFrom{base}{FloatingPointSystem
25764`--} of the representation is binary,{} hence a \spad{Record(m: mantissa,{} e: exponent)} represents the number \spad{m * 2 ^ e}. Though it is not assumed that the underlying integers are represented with a binary \spadfunFrom{base}{FloatingPointSystem},{} the code will be most efficient when this is the the case (this is \spad{true} in most implementations of Lisp). The decision to choose the \spadfunFrom{base}{FloatingPointSystem} to be binary has some unfortunate consequences. First,{} decimal
25764`-- numbers like 0.3 cannot be represented exactly. Second,{} there is a further loss of accuracy during conversion to decimal for output. To compensate for this,{} if \spad{d} digits of precision are specified,{} \spad{1 + ceiling(log2(10^d))} bits are used. Two numbers that are displayed identically may therefore be not equal. On the other hand,{} a significant efficiency loss would be incurred if we chose to use a decimal \spadfunFrom{base}{FloatingPointSystem} when the underlying integer base
25764`-- is binary. \blankline Algorithms used: For the elementary functions,{} the general approach is to apply identities so that the taylor series can be used,{} and,{} so that it will converge within \spad{O( sqrt n )} steps. For example,{} using the identity \spad{exp(x) = exp(x/2)^2},{} we can compute \spad{exp(1/3)} to \spad{n} digits of precision as follows. We have \spad{exp(1/3) = exp(2 ^ (-sqrt s) / 3) ^ (2 ^ sqrt s)}. The taylor series will converge in less than sqrt \spad{n} steps and the
25764`-- exponentiation requires sqrt \spad{n} multiplications for a total of \spad{2 sqrt n} multiplications. Assuming integer multiplication costs \spad{O( n^2 )} the overall running time is \spad{O( sqrt(n) n^2 )}. This approach is the best known approach for precisions up to about 10,{} 000 digits at which point the methods of Brent which are \spad{O( log(n) n^2 )} become competitive. Note also that summing the terms of the taylor series for the elementary functions is done using integer operation
25764`--s. This avoids the overhead of floating point operations and results in efficient code at low precisions. This implementation makes no attempt to reuse storage,{} relying on the underlying system to do \spadgloss{garbage collection}. \spad{I} estimate that the efficiency of this package at low precisions could be improved by a factor of 2 if in-place operations were available. \blankline Running times: in the following,{} \spad{n} is the number of bits of precision \indented{5}{\spad{*},{} \sp
25764`--ad{/},{} \spad{sqrt},{} \spad{\spad{pi}},{} \spad{exp1},{} \spad{log2},{} \spad{log10}: \spad{ O( n^2 )}} \indented{5}{\spad{exp},{} \spad{log},{} \spad{sin},{} \spad{atan}:\space{2}\spad{ O( sqrt(n) n^2 )}} The other elementary functions are coded in terms of the ones above.
25822`This domain builds representations of program code segments for use with the FortranProgram domain.
25875`A domain of expressions involving functions which can be translated into standard Fortran-77,{} with some extra extensions from the NAG Fortran Library.
26089`\spadtype{FortranProgram} allows the user to build and manipulate simple models of FORTRAN subprograms. These can then be transformed into actual FORTRAN notation.
26268`Creates and manipulates objects which correspond to the basic FORTRAN data types: REAL,{} INTEGER,{} COMPLEX,{} LOGICAL and CHARACTER
26340`Code to manipulate Fortran templates
26417`Creates and manipulates objects which correspond to FORTRAN data types,{} including array dimensions.
26470`\indented{1}{Author: James Davenport} Date Created: 17 April 1992 Basic Functions: Related Constructors: Also See: AMS Classifications: Keywords: References: Description:
26543`\indented{1}{Author: James Davenport} Date Created: 17 April 1992 Basic Functions: Related Constructors: Also See: AMS Classifications: Keywords: References: Description:
26655`\spad{Canonical} means that equal elements are in fact identical.
26737`Fractional ideals in a framed algebra.
26914`Module representation of fractional ideals.
27094`The free abelian group on a set \spad{S} is the monoid of finite sums of the form \spad{reduce(+,{} [\spad{ni} * \spad{si}])} where the \spad{si}\spad{'s} are in \spad{S},{} and the \spad{ni}\spad{'s} are integers. The operation is commutative.
27172`The free abelian monoid on a set \spad{S} is the monoid of finite sums of the form \spad{reduce(+,{} [\spad{ni} * \spad{si}])} where the \spad{si}\spad{'s} are in \spad{S},{} and the \spad{ni}\spad{'s} are non-negative integers. The operation is commutative.
27277`The free group on a set \spad{S} is the group of finite products of the form \spad{reduce(*,{} [\spad{si} ^ \spad{ni}])} where the \spad{si}\spad{'s} are in \spad{S},{} and the \spad{ni}\spad{'s} are integers. The multiplication is not commutative.
27340`This type is the basic representation of parenthesized words (binary trees over arbitrary symbols) useful in \spadtype{LiePolynomial}. \newline Author: Michel Petitot (petitot@lifl.\spad{fr}).
27412`A \spad{bi}-module is a free module over a ring with generators indexed by an ordered set. Each element can be expressed as a finite linear combination of generators. Only non-zero terms are stored. old domain \spad{FreeModule1} was merged to it in May 2009 The description of the latter: \indented{2}{This domain implements linear combinations} \indented{2}{of elements from the domain \spad{S} with coefficients} \i
27412`--ndented{2}{in the domain \spad{R} where \spad{S} is an ordered set} \indented{2}{and \spad{R} is a ring (which may be non-commutative).} \indented{2}{This domain is used by domains of non-commutative algebra such as:} \indented{6}{\spadtype{XDistributedPolynomial},{}} \indented{6}{\spadtype{XRecursivePolynomial}.} \indented{2}{Author: Michel Petitot (petitot@lifl.\spad{fr})}
27501`The free monoid on a set \spad{S} is the monoid of finite products of the form \spad{reduce(*,{} [\spad{si} ^ \spad{ni}])} where the \spad{si}\spad{'s} are in \spad{S},{} and the \spad{ni}\spad{'s} are nonnegative integers. The multiplication is not commutative. When \spad{S} is an OrderedSet,{} then FreeMonoid(\spad{S}) has order: for two elements \spad{x} and \spad{y} the relation \spad{x < y} holds if either \spad{length(x) < length(
27501`--y)} holds or if these lengths are equal and if \spad{x} is smaller than \spad{y} \spad{w}.\spad{r}.\spad{t}. the lexicographical ordering induced by \spad{S}.
27567`Generate the Free Lie Algebra over a ring \spad{R} with identity; A \spad{P}. Hall basis is generated by a package call to HallBasis.
27706`\indented{1}{Full partial fraction expansion of rational functions} Author: Manuel Bronstein Date Created: 9 December 1992 References: \spad{M}.Bronstein & \spad{B}.Salvy,{} \indented{12}{Full Partial Fraction Decomposition of Rational Functions,{}} \indented{12}{in Proceedings of \spad{ISSAC'93},{} Kiev,{} ACM Press.}
27840`This domain implements named functions
27911`allows us to model graph theory \blankline
27987`\indented{2}{This type supports distributed multivariate polynomials} whose variables are from a user specified list of symbols. The coefficient ring may be non commutative,{} but the variables are assumed to commute. The term ordering is specified by its third parameter. Suggested types which define term
27987`-- orderings include: \spadtype{DirectProduct},{} \spadtype{HomogeneousDirectProduct},{} \spadtype{SplitHomogeneousDirectProduct} and finally \spadtype{OrderedDirectProduct} which accepts an arbitrary user function to define a term ordering.
28370`This package \undocumented
28671`A domain for polynomial sets.
28868`\spadtype{GeneralQuaternion} implements general quaternions \indented{2}{over a commutative ring. The main constructor function is} \indented{2}{\spadfun{quatern} which takes 4 arguments: the real part,{}} \indented{2}{the \spad{i} imaginary part,{} the \spad{j} imaginary part and the \spad{k} imaginary part.}
28958`A sparse table has a default entry,{} which is returned if no other value has been explicitly stored for a key.
29108`A domain constructor of the category \spadtype{TriangularSetCategory}. The only requirement for a list of polynomials to be a member of such a domain is the following: no polynomial is constant and two distinct polynomials have distinct main variables. Such a triangular set may not be auto-reduced or consistent. Triangular sets a
29108`--re stored as sorted lists \spad{w}.\spad{r}.\spad{t}. the main variables of their members but they are displayed in reverse order.\newline
29283`This is a category of univariate Puiseux series constructed from univariate Laurent series. A Puiseux series is represented by a pair \spad{[r,{} f(x)]},{} where \spad{r} is a positive rational number and \spad{f(x)} is a Laurent series. This pair represents the Puiseux series \spad{f(x\^r)}.
29427`AlgebraGenericElementPackage allows you to create generic elements of an algebra,{} \spadignore{i.e.} the scalars are extended to include symbolic coefficients
29623`TwoDimensionalGraph creates virtual two dimensional graphs (to be displayed on TwoDimensionalViewports).
29680`GuessOption is a domain whose elements are various options used by \spadtype{Guess}.
29735`\spad{GuessOptionFunctions0} provides operations that extract the values of options for \spadtype{Guess}.
29801`This domain supports incremental computation of hash values.
29840`This domain provides access to the underlying Lisp hash tables. By varying the hashfn parameter,{} tables suited for different purposes can be obtained.
29957`Heap implemented in a flexible array to allow for insertions
30032`This domain allows rational numbers to be presented as repeating hexadecimal expansions.
30118`\indented{2}{This type represents the finite direct or cartesian product of an} underlying ordered component type. The vectors are ordered first by the sum of their components,{} and then refined using a reverse lexicographic ordering. This type is a suitable third argument for \spadtype{GeneralDistributedMultivariatePolynomial}.
30243`\indented{2}{This type supports distributed multivariate polynomials} whose variables are from a user specified list of symbols. The coefficient ring may be non commutative,{} but the variables are assumed to commute. The term ordering is total degree ordering refined by reverse lexicographic ordering with 
30243`--respect to the position that the variables appear in the list of variables parameter.
30441`\spadtype{HtmlFormat} provides a coercion from \spadtype{OutputForm} to html.
30499`This domains implements finite rational divisors on an hyperelliptic curve,{} that is finite formal sums SUM(\spad{n} * \spad{P}) where the \spad{n}\spad{'s} are integers and the \spad{P}\spad{'s} are finite rational points on the curve. The equation of the curve must be \spad{y^2
30499`--} = \spad{f}(\spad{x}) and \spad{f} must have odd degree.
30724`parse result includes term returned and new index
30770`\indented{1}{This domain implements a container of information} about the FriCAS library
30823`\spadtype{IndexedBits} is a domain to compactly represent large quantities of Boolean data.
30891`Indexed direct products of objects over a set \spad{A} of generators indexed by an ordered set \spad{S}. It currently provides the ground for,{} \spadignore{e.g.} \spadtype{FreeModule} which lies at the basis of polynomials of all sorts. All items have finite support. If A is a monoid,{} then only non-zero terms are stored. If A has additive structure,{} it is propagated coordinatewise to the
30891`-- product. Similarly,{} comparisons are propagated using lexicographic ordering.
31002`converts entire exponents to OutputForm
31092`\indented{1}{Author: Michael Monagan \spad{July/87},{} modified \spad{SMW} \spad{June/91}} A FlexibleArray is the notion of an array intended to allow for growth at the end only. Hence the following efficient operations \indented{2}{\spad{concat!(a,{} x)} meaning append item \spad{x} at the end of the array \spad{a}} \indented{2}{\spad{delete!(a,{} n)} meaning delete the last item from the array \s
31092`--pad{a}} Flexible arrays support the other operations inherited from \spadtype{ExtensibleLinearAggregate}. However,{} these are not efficient. Flexible arrays combine the \spad{O(1)} access time property of arrays with growing and shrinking at the end in \spad{O(1)} (average) time. This is done by using an ordinary array which may have zero or more empty slots at the end. When the array becomes full it is copied into a new larger (50\% larger) array. Conversely,{} when the array becomes less th
31092`--an 1/2 full,{} it is copied into a smaller array. Flexible arrays provide for an efficient implementation of many data structures in particular heaps,{} stacks and sets.
31197`\spadtype{JetBundle} provides the standard implementation for a jet bundle with a given number of dependent and independent variables.
31315`\spadtype{IndexedList} is a basic implementation of the functions in \spadtype{ListAggregate},{} often using functions in the underlying LISP system. The second parameter to the constructor (\spad{mn}) is the beginning index of the list. That is,{} if \spad{l} is a list,{} then \spad{elt(l,{} mn)} is the first value. This constructor is probably best viewed as the implementation of singly-linked lists that are addressable by index ra
31315`--ther than as a mere wrapper for LISP lists.
31384`An \spad{IndexedMatrix} is a matrix where the minimal row and column indices are parameters of the type. The domains Row and Col are both IndexedVectors. The index of the 'first' row may be obtained by calling the function \spadfun{minRowIndex}. The index of the 'first' column may be obtained by calling the function \spadfun{minColIndex}. The
31384`-- index of the first element of a 'Row' is the same as the index of the first column in a matrix and vice versa.
31546`\indented{1}{Author Micheal Monagan \spad{Aug/87}} This is the basic one dimensional array data type.
31647`This domain implements low-level strings
31712`\indented{1}{An IndexedTwoDimensionalArray is a 2-dimensional array where} the minimal row and column indices are parameters of the type. Rows and columns are returned as IndexedOneDimensionalArray\spad{'s} with minimal indices matching those of the IndexedTwoDimensionalArray. The index of the 'first' ro
31712`--w may be obtained by calling the function 'minRowIndex'. The index of the 'first' column may be obtained by calling the function 'minColIndex'. The index of the first element of a 'Row' is the same as the index of the first column in an array and vice versa.
31913`\indented{2}{This type represents vector like objects with varying lengths} and a user-specified initial index.
31987`Infinite cyclic groups.
32054`\indented{1}{This package implements 'infinite tuples' for the interpreter.} The representation is a stream.
32132`Algebraic closure of the rational numbers.
32199`InnerFiniteField(\spad{p},{} \spad{n}) implements finite fields with \spad{p^n} elements where \spad{p} is assumed prime but does not check. For a version which checks that \spad{p} is prime,{} see \spadtype{FiniteField}.
32322`Internal implementation of a free abelian monoid.
32448`\indented{1}{This is an internal type which provides an implementation of} 2-dimensional arrays as PrimitiveArray\spad{'s} of PrimitiveArray\spad{'s}.
32647`This domain implements \spad{Zp},{} the \spad{p}-adic completion of the integers. This is an internal domain.
32742`InnerPrimeField(\spad{p}) implements the field with \spad{p} elements. Note: argument \spad{p} MUST be a prime (this domain does not check). See \spadtype{PrimeField} for a domain that does check.
32826`InnerSparseUnivariatePowerSeries is an internal domain \indented{2}{used for creating sparse Taylor and Laurent series.}
32945`This domain is used to provide a conditional "add" domain for the implementation of \spadtype{Table}.
33095`Internal package for dense Taylor series. This is an internal Taylor series type in which Taylor series are represented by a \spadtype{Stream} of \spadtype{Ring} elements. For univariate series,{} the \spad{Stream} elements are the Taylor coefficients. For multivariate series,{} the \spad{n}th Stream element is a form of degree \spad{n} in the power series variables.
33162`Domain of parsed forms which can be passed to the interpreter. This is also the interface between algebra code and facilities in the interpreter.
33260`\spadtype{Integer} provides the domain of arbitrary precision integers.
33318`IntegerMod(\spad{n}) creates the ring of integers reduced modulo the integer \spad{n}.
33394`If a function \spad{f} has an elementary integral \spad{g},{} then \spad{g} can be written in the form \spad{g = h + c1 log(u1) + c2 log(u2) + ... + cn log(un)} where \spad{h},{} which is in the same field than \spad{f},{} is called the rational part of the integral,{} and \spad{c1 log(u1) + ... cn log(un)} is called the logarithmic part of the integral. This domain manipulates integrals represented in that form,{} by kee
33394`--ping both parts separately. The logs are not explicitly computed.
33475`\indented{1}{+ Author: Mike Dewar} + Date Created: November 1996 + Basic Functions: + Related Constructors: + Also See: + AMS Classifications: + Keywords: + References: + Description: + This domain is an implementation of interval arithmetic and transcendental + functions over intervals.
33559`\spad{JetBundle} implements a jet bundle of arbitrary order with given names for the independent and dependent variables. It supports only repeated index notation.
33657`\spadtype{JetBundleExpression} defines expressions over a jet bundle based on \spadtype{Expression Integer}. It allows all kind of algebraic operations. \spad{simplify} is implemented using Groebner bases in polynomials over kernels. Thus it might not work correctly for general expressions. This also affects \spad{dimension}.
33759`\spadtype{JetBundleLinearFunction} implements linear functions over a jet bundle. The coefficients are functions of the independent variables only.
33907`\spadtype{JetBundlePolynomial} implements polynomial sections over a jet bundle. The order is not fixed,{} thus jet variables of any order can appear.
34019`\spad{JetBundleSymAna} is only necessary to have a valid return type for some procedures in \spad{SymmetryAnalysis}. It is essentially identical with \spad{JetBundle} but computes its parameters in a more complicated way.
34168`\spadtype{JetBundleXExpression} implements arbitrary functions in a jet bundle which depend only on the independent variables \spad{x}. Otherwise it is identical with \spadtype{JetBundleExpression}. Such a domain is needed for \spadtype{JetLinearFunction}.
34271`\spad{JetDifferential(JB,{} D)} implements differentials (one-forms) \indented{1}{over the jet bundle \spad{JB} with coefficients from \spad{D}.} \indented{1}{The differentials operate on \spad{JetVectorField(JB,{} D)}.}
34388`\spadtype{JetDifferentialEquation} provides the basic data structures and procedures for differential equations as needed in the geometric theory. Differential equation means here always a submanifold in the jet bundle. The concrete equations which define this submanifold are called system. In an object of the type \spadtype{JetDifferentialEquation} much more than only the system is stored. \spad{
34388`--D} denotes the class of functions allowed as equations. It is assumed that the \spad{simplify} procedure of \spad{D} returns only independent equations and a system with symbol in row echelon form.
34495`\spadtype{JetLazyFunction} takes as argument a domain in \spadtype{JetBundleFunctionCategory} and returns another domain in the same category. This domain has basically the same properties as the argument domain,{} but there is a lazy evaluation mechanism for derivatives. This means that differentiations are not immedately performed. Instead a pointer is established to 
34495`--the function to be differentiated. Only when the exact value of the derivative is needed,{} the differentiation is executed. Special care is taken for leading derivatives and jet variables to avoid as much as possible the need to evaluate expressions. This entails that the result of \spad{jetVariables} may contain spurious variables. Furthermore many functions in \spadtype{JetLazyFunction} destructively change their arguments. This affects,{} however,{} only their internal representation,{} no
34495`--t the value obtained after full evaluation.
34630`\spad{JetVectorField(JB,{} D)} implements vector fields over the jet bundle \spad{JB} with coefficients from \spad{D}. The fields operate on functions from \spad{D}.
34744`A kernel over a set \spad{S} is an operator applied to a given list of arguments from \spad{S}.
34810`This domain allows a random access file to be viewed both as a table and as a file object.
34932`parse result includes term returned and new index
35007`\indented{1}{Univariate polynomials with negative and positive exponents.} Author: Manuel Bronstein Date Created: May 1988
35142`This domain provides a simple way to save values in files.
35208`Management of the Lie Group associated with a free nilpotent Lie algebra. Every Lie bracket with length greater than \spad{Order} are assumed to be null. The implementation inherits from the \spadtype{XPBWPolynomial} domain constructor: Lyndon coordinates are exponential coordinates of the second kind. \newline Author: Michel Petitot (petitot@lifl.\spad{fr}).
35332`This type supports Lie polynomials in Lyndon basis see Free Lie Algebras by \spad{C}. Reutenauer (Oxford science publications). \newline Author: Michel Petitot (petitot@lifl.\spad{fr}).
35442`LieSquareMatrix(\spad{n},{} \spad{R}) implements the Lie algebra of the \spad{n} by \spad{n} matrices over the commutative ring \spad{R}. The Lie bracket (commutator) of the algebra is given by \spad{a*b := (a *\$SQMATRIX(n,{} R) b - b *\$SQMATRIX(n,{} R) a)},{} where \spadfun{*\$SQMATRIX(\spad{n},{} \spad{R})} is the usual matrix multiplication.
35592`\spad{LinearOrdinaryDifferentialOperator1} defines a ring of differential operators with coefficients in a differential ring A. Multiplication of operators corresponds to functional composition: \indented{4}{\spad{(L1 * L2).(f) = L1 L2 f}}
35716`\spad{LinearOrdinaryDifferentialOperator2} defines a ring of differential operators with coefficients in a differential ring A and acting on an A-module \spad{M}. Multiplication of operators corresponds to functional composition: \indented{4}{\spad{(L1 * L2).(f) = L1 L2 f}}
35880`\spad{LinearOrdinaryDifferentialOperator} defines a ring of differential operators with coefficients in a ring A with a given derivation. Multiplication of operators corresponds to functional composition: \indented{4}{\spad{(L1 * L2).(f) = L1 L2 f}}
36004`\spad{LinearOrdinaryDifferentialOperator3} is a ring \indented{1}{differential operators with coefficients in a differential ring \spad{R}.} \indented{1}{Basic derivative is derivative in \spad{R} times variable (monomial} \indented{1}{of degree 1).}
36205`\spadtype{List} implements singly-linked lists that are addressable by indices; the index of the first element is 1. In addition to the operations provided by \spadtype{IndexedList},{} this constructor provides some LISP-like functions such as \spadfun{null} and \spadfun{cons}.
36266`This internal package represents monoid (abelian or not,{} with or without inverses) as lists and provides some common operations to the various flavors of monoids.
36362`The \spadtype{ListMultiDictionary} domain implements a dictionary with duplicates allowed. The representation is a list with duplicates represented explicitly. Hence most operations will be relatively inefficient when the number of entries in the dictionary becomes large. If the objects in the dictionary belong to an ordered set,{} the entries are maintained in ascending order.
36449`LocalAlgebra produces the localization of an algebra,{} \spadignore{i.e.} fractions whose numerators come from some \spad{R} algebra.
36536`Localize(\spad{M},{} \spad{R}) produces fractions with numerators from an \spad{R} module \spad{M} and denominators being the nonzero elements of \spad{R}.
36617`This is used with graph theory code (FiniteGraph,{} DirectedGraph. FunctionGraph,{} and so on) to represent a loop as either a sequence of vertex or arrow indexes depending on context. The main benefit is that the loop is stored in a canonical way so that loops can be quickly compared using \spad{'='}.
36666`Lyndon words over arbitrary (ordered) symbols: see Free Lie Algebras by \spad{C}. Reutenauer (Oxford science publications). A Lyndon word is a word which is smaller than any of its right factors \spad{w}.\spad{r}.\spad{t}. the pure lexicographical ordering. If \spad{a} and \spad{b} are two Lyndon words such that \spad{a < b} holds \spad{w}.\spad{r}.\spad{t} lexicographical ordering then \spad{a*b} is a Lyndon word. Parenthesized L
36666`--yndon words can be generated from symbols by using the following rule: \spad{[[a,{} b],{} c]} is a Lyndon word iff \spad{a*b < c <= b} holds. Lyndon words are internally represented by binary trees using the \spadtype{FreeMagma} domain constructor. Two ordering are provided: lexicographic and length-lexicographic. \newline Author : Michel Petitot (petitot@lifl.\spad{fr}).
36739`A domain which models the complex number representation used by machines in the AXIOM-NAG link.
36815`A domain which models the floating point representation used by machines in the AXIOM-NAG link.
36882`A domain which models the integer representation used by machines in the AXIOM-NAG link.
36956`MakeCachableSet(\spad{S}) returns a cachable set which is equal to \spad{S} as a set.
37033`\spad{Mapping(T,S)} is a primitive type in FriCAS used to represent mappings from source type \spad{S} to target type \spad{T}. Similarly, \spad{Mapping(T,A,B)} denotes a mapping from source type \spad{(A,B)} to target type \spad{T}.
37075`\spadtype{MathMLFormat} provides a coercion from \spadtype{OutputForm} to MathML format.
37135`\spadtype{Matrix} is a matrix domain where 1-based indexing is used for both rows and columns.
37234`This package \undocumented
38258`\indented{1}{These domains are used for the factorization and gcds} of univariate polynomials over the integers in order to work modulo different primes. See \spadtype{ModularRing},{} \spadtype{EuclideanModularRing}
38451`These domains are used for the factorization and gcds of univariate polynomials over the integers in order to work modulo different primes. See \spadtype{EuclideanModularRing} ,{} \spadtype{ModularField}
38641`This package \undocumented
38806`Algebra of ADDITIVE operators on a module.
38886`\indented{1}{MoebiusTransform(\spad{F}) is the domain of fractional linear (Moebius)} transformations over \spad{F}.
38952`\spadtype{MonoidRing}(\spad{R},{} \spad{M}),{} implements the algebra of all maps from the monoid \spad{M} to the commutative ring \spad{R} with finite support. Multiplication of two maps \spad{f} and \spad{g} is defined to map an element \spad{c} of \spad{M} to the (convolution) sum over {\em f(a)g(b)} such that {\em ab = c}. Thus \spad{M} can be identified with a canonical basis and the maps can also be considered as formal l
38952`--inear combinations of the elements in \spad{M}. Scalar multiples of a basis element are called monomials. A prominent example is the class of polynomials where the monoid is a direct product of the natural numbers with pointwise addition. When \spad{M} is \spadtype{FreeMonoid Symbol},{} one gets polynomials in infinitely many non-commuting variables. Another application area is representation theory of finite groups \spad{G},{} where modules over \spadtype{MonoidRing}(\spad{R},{} \spad{G}) are
38952`-- studied.
39028`allows us to model graph theory \blankline
39110`A multiset is a set with multiplicities.
39186`\indented{2}{This type is the basic representation of sparse recursive multivariate} polynomials whose variables are from a user specified list of symbols. The ordering is specified by the position of the variable in the list. The coefficient ring may be non commutative,{} but the variables are assumed to commute.
39345`A post-facto extension for \spadtype{SMP} in order to speed up operations related to pseudo-division and \spad{gcd}. This domain is based on the \spadtype{NSUP} constructor which is itself a post-facto extension of the \spadtype{SUP} constructor.
39504`A post-facto extension for \spadtype{SUP} in order to speed up operations related to pseudo-division and \spad{gcd} for both \spadtype{SUP} and,{} consequently,{} \spadtype{NSMP}.
39605`\spadtype{None} implements an universal type,{} that is type which can represent values of any normal type. It is mainly used in technical situations where such a thing is needed (\spadignore{e.g.} the interpreter and some of the internal \spadtype{Expression} code).
39644`\spadtype{NonNegativeInteger} provides functions for non \indented{2}{negative integers.}
39718`Octonion implements octonions (Cayley-Dixon algebra) over a commutative ring,{} an eight-dimensional non-associative algebra,{} doubling the quaternions in the same way as doubling the complex numbers to get the quaternions the main constructor function is {\em octon} which takes 8 arguments: the real part,{} the \spad{i} imaginary part,{} the \spad{j} imaginary part,{} the \spad{k} imaginary part,{} (as with quaternions) and
39718`-- in addition the imaginary parts \spad{E},{} \spad{I},{} \spad{J},{} \spad{K}.
39796`This is the domain of 1-based one dimensional arrays
39889`Adjunction of a complex infinity to a set. Date Created: 4 Oct 1989
39969`\spadtype{OpenMathConnection} provides low-level functions for handling connections to and from \spadtype{OpenMathDevice}\spad{s}.
40016`\spadtype{OpenMathDevice} provides support for reading and writing openMath objects to files,{} strings etc. It also provides access to low-level operations from within the interpreter.
40058`\spadtype{OpenMathEncoding} is the set of valid OpenMath encodings.
40120`\spadtype{OpenMathError} is the domain of OpenMath errors.
40179`\spadtype{OpenMathErrorKind} represents different kinds of OpenMath errors: specifically parse errors,{} unknown \spad{CD} or symbol errors,{} and read errors.
40243`Algebra of ADDITIVE operators over a ring.
40294`Adjunction of two real infinites quantities to a set. Date Created: 4 Oct 1989
40373`\indented{2}{This type represents the finite direct or cartesian product of an} underlying ordered component type. The ordering on the type is determined by its third argument which represents the less than function on vectors. This type is a suitable third argument for \spadtype{GeneralDistributedMultivariatePolynomial}.
40586`This domain implements ordered variables
40678`\spadtype{OrderlyDifferentialPolynomial} implements an ordinary differential polynomial ring in arbitrary number of differential indeterminates,{} with coefficients in a ring. The ranking on the differential indeterminate is orderly. This is analogous to the domain \spadtype{Polynomial}. \blankline
40879`\spadtype{OrderlyDifferentialVariable} adds a commonly used orderly ranking to the set of derivatives of an ordered list of differential indeterminates. An orderly ranking is a ranking \spadfun{<} of the derivatives with the property that for two derivatives \spad{u} and \spad{v},{} \spad{u} \spadfun{<} \spad{v} if the \spadfun{order} of \spad{u} is less than that of \spad{v}. This domain belongs to \spadtyp
40879`--e{DifferentialVariableCategory}. It defines \spadfun{weight} to be just \spadfun{order},{} and it defines an orderly ranking \spadfun{<} on derivatives \spad{u} via the lexicographic order on the pair (\spadfun{order}(\spad{u}),{} \spadfun{variable}(\spad{u})).
40975`This constructor produces an ordinary differential ring from a partial differential ring by specifying a variable.
41124`This domain represents truncated weighted polynomials over the "Polynomial" type. The variables must be specified,{} as must the weights. The representation is sparse in the sense that only non-zero terms are represented.
41266`\indented{1}{Author : Larry Lambe} Date created : 14 August 1988 Description : A domain used in order to take the free \spad{R}-module on the Integers \spad{I}. This is actually the forgetful functor from OrderedRings to OrderedSets applied to \spad{I}
41319`This domain is used to create and manipulate mathematical expressions for output. It is intended to provide an insulating layer between the expression rendering software (\spadignore{e.g.} TeX,{} or Script) and the output coercions in the various domains.
41377`Stream-based implementation of \spad{Zp:} \spad{p}-adic numbers are represented as sum(\spad{i} = 0..,{} a[\spad{i}] * p^i),{} where the a[\spad{i}] lie in 0,{} 1,{} ...,{} (\spad{p} - 1).
41447`Stream-based implementation of \spad{Qp:} numbers are represented as sum(\spad{i} = \spad{k}..,{} a[\spad{i}] * p^i) where the a[\spad{i}] lie in 0,{} 1,{} ...,{} (\spad{p} - 1).
41546`This is the category of stream-based representations of \spad{Qp}.
41683`This domain describes four groups of color shades (palettes).
41738`ParametricPlaneCurve is used for plotting parametric plane curves in the affine plane.
41812`ParametricSpaceCurve is used for plotting parametric space curves in affine 3-space.
41886`ParametricSurface is used for plotting parametric surfaces in affine 3-space.
41956`PartialDifferentialOperator(\spad{V},{} \spad{R}) defines a ring of partial differential operators in variables from \spad{V} and with coefficients in a partial differential ring \spad{R}. Multiplication of operators corresponds to composition of operators. \blankline
42129`The domain \spadtype{PartialFraction} implements partial fractions over a euclidean domain \spad{R}. This requirement on the argument domain allows us to normalize the fractions. Of particular interest are the 2 forms for these fractions. The ``compact\spad{''} form has only one fractional term per prime in the denominator,{} while the \spad{``p}-adic\spad{''} form expands each numerator \spad{p}-adically via the prime \spad{p} in t
42129`--he denominator. For computational efficiency,{} the compact form is used,{} though the \spad{p}-adic form may be gotten by calling the function \spadfunFrom{padicFraction}{PartialFraction}. For a general euclidean domain,{} it is not known how to factor the denominator. Thus the function \spadfunFrom{partialFraction}{PartialFraction} takes as its second argument an element of \spadtype{Factored(R)}.
42200`\indented{1}{Partition is an OrderedCancellationAbelianMonoid which is used} as the basis for symmetric polynomial representation of the sums of powers in SymmetricPolynomial. Thus,{} \spad{(5 2 2 1)} will represent \spad{s5 * s2^2 * s1}.
42279`Patterns for use by the pattern matcher.
42348`A PatternMatchListResult is an object internally returned by the pattern matcher when matching on lists. It is either a failed match,{} or a pair of PatternMatchResult,{} one for atoms (elements of the list),{} and one for lists.
42469`A PatternMatchResult is an object internally returned by the pattern matcher; It is either a failed match,{} or a list of matches of the form (var,{} expr) meaning that the variable var matches the expression expr.
42564`\indented{1}{A PendantTree(\spad{S})is either a leaf? and is an \spad{S} or has} a left and a right both PendantTree(\spad{S})\spad{'s}
42654`Permutation(\spad{S}) implements the group of all bijections \indented{2}{on a set \spad{S},{} which move only a finite number of points.} \indented{2}{A permutation is considered as a map from \spad{S} into \spad{S}. In particular} \indented{2}{multiplication is defined as composition of maps:} \indented{2}{{\em pi1 * pi2 = pi1 o pi2}.} \indented{2}{The internal representation of permuatations are two lists} \indented{2}{
42654`--of equal length representing preimages and images.}
42735`PermutationGroup implements permutation groups acting on a set \spad{S},{} \spadignore{i.e.} all subgroups of the symmetric group of \spad{S},{} represented as a list of permutations (generators). Note that therefore the objects are not members of the \Language category \spadtype{Group}. Using the idea of base and strong generators by Sims,{} basic routines and algorithms are implemented so that the word problem for permutati
42735`--on groups can be solved.
42813`\indented{1}{Symbolic fractions in \%\spad{pi} with integer coefficients;} \indented{1}{The point for using \spad{Pi} as the default domain for those fractions} \indented{1}{is that \spad{Pi} is coercible to the float types,{} and not Expression.} Date Created: 21 Feb 1990
42856`\indented{1}{Plot a NON-SINGULAR plane algebraic curve \spad{p}(\spad{x},{} \spad{y}) = 0.} Author: Clifton \spad{J}. Williamson Date Created: Fall 1988 Keywords: algebraic curve,{} non-singular,{} plot Examples: References:
42942`The Plot domain supports plotting of functions defined over a real number system. A real number system is a model for the real numbers and as such may be an approximation. For example floating point numbers and infinite continued fractions. The facilities at this point are limited to 2-dimensional plots or either a single function or a parametric function.
43007`Plot3D supports parametric plots defined over a real number system. A real number system is a model for the real numbers and as such may be an approximation. For example,{} floating point numbers and infinite continued fractions are real number systems. The facilities at this point are limited to 3-dimensional parametric plots.
43076`This domain provides the internal representation of polynomials in non-commutative variables written over the Poincare-Birkhoff-Witt basis. See the \spadtype{XPBWPolynomial} domain constructor. See Free Lie Algebras by \spad{C}. Reutenauer (Oxford science publications). \newline Author: Michel Petitot (petitot@lifl.\spad{fr}).
43170`This domain implements points in coordinate space
43223`\indented{2}{This type is the basic representation of sparse recursive multivariate} polynomials whose variables are arbitrary symbols. The ordering is alphabetic determined by the Symbol type. The coefficient ring may be non commutative,{} but the variables are assumed to commute.
43327`This domain represents polynomial ideals with coefficients in any field and supports the basic ideal operations,{} including intersection,{} sum and quotient. An ideal is represented by a list of polynomials (the generators of the ideal) and a boolean that is \spad{true} if the generators are a Groebner basis. The algorithms u
43327`--sed are based on Groebner basis computations. The ordering is determined by the datatype of the input polynomials. Users may use refinements of total degree orderings.
43506`This domain represents generalized polynomials with coefficients (from a not necessarily commutative ring),{} and terms indexed by their exponents (from an arbitrary ordered abelian monoid). This type is used,{} for example,{} by the \spadtype{DistributedMultivariatePolynomial} domain where the exponent domain is a direct product of non negative integers.
43625`\spadtype{PositiveInteger} provides functions for \indented{2}{positive integers.}
43695`PrimeField(\spad{p}) implements the field with \spad{p} elements if \spad{p} is a prime number. Error: if \spad{p} is not prime. Note: this domain does not check that argument is a prime.
43774`\indented{1}{This provides a fast array type with no bound checking on elt\spad{'s}.} Minimum index is 0 in this type,{} cannot be changed
43853`This domain implements cartesian product. If the underlying domains are both Finite then the resulting Product is also Finite and can be enumerated via size(),{} index(),{} location(),{} etc. The index of the second component (\spad{B}) varies most quickly.
43938`This domain provides modest support for quadratic forms.
44026`\spadtype{QuasiAlgebraicSet} constructs a domain representing quasi-algebraic sets,{} which is the intersection of a Zariski closed set,{} defined as the common zeros of a given list of polynomials (the defining polynomials for equations),{} and a principal Zariski open set,{} defined as the complement of the common zeros of a 
44026`--polynomial \spad{f} (the defining polynomial for the inequation). This domain provides simplification of a user-given representation using groebner basis computations. There are two simplification routines: the first function \spadfun{idealSimplify} uses groebner basis of ideals alone,{} while the second,{} \spadfun{simplify} uses both groebner basis and factorization. The resulting defining equations \spad{L} always form a groebner basis,{} and the resulting defining inequation \spad{f} is al
44026`--ways reduced. The function \spadfun{simplify} may be applied several times if desired. A third simplification routine \spadfun{radicalSimplify} is provided in \spadtype{QuasiAlgebraicSet2} for comparison study only,{} as it is inefficient compared to the other two,{} as well as is restricted to only certain coefficient domains. For detail analysis and a comparison of the three methods,{} please consult the reference cited. \blankline A polynomial function \spad{q} defined on the quasi-algebrai
44026`--c set is equivalent to its reduced form with respect to \spad{L}. While this may be obtained using the usual normal form algorithm,{} there is no canonical form for \spad{q}. \blankline The ordering in groebner basis computation is determined by the data type of the input polynomials. If it is possible we suggest to use refinements of total degree orderings.
44204`\spadtype{Quaternion} implements Hamilton quaternions \indented{2}{over a commutative ring.}
44277`This domain implements simple database queries
44349`Linked List implementation of a Queue
44420`Function field defined by \spad{y^n} = \spad{f}(\spad{x}).
44660`This domain allows rational numbers to be presented as repeating decimal expansions or more generally as repeating expansions in any base.
44750`This domain implements the real closure of an ordered field.
44843`\spad{Record(a:A,b:B,...,c:C)} is a primitive type in FriCAS used to represent composite objects made up of objects of type \spad{A}, \spad{B},..., \spad{C} which are indexed by "keys" (identifiers) \spad{a},\spad{b},...,\spad{c}.
44895`\spadtype{RectangularMatrix} is a matrix domain where the number of rows and the number of columns are parameters of the domain.
45085`\indented{1}{\spadtype{Reference} is for making a changeable instance} of something.
45138`A domain for regular chains (\spadignore{i.e.} regular triangular sets) over a \spad{Gcd}-Domain and with a fix list of variables. This is just a front-end for the \spadtype{RegularTriangularSet} domain constructor.
45374`This domain provides an implementation of regular chains. Moreover,{} the operation \spadopFrom{zeroSetSplit}{RegularTriangularSetCategory} is an implementation of a new algorithm for solving polynomial systems by means of regular chains.\newline
45563`ResidueRing is the quotient of a polynomial ring by an ideal. The ideal is given as a list of generators. The elements of the domain are equivalence classes expressed in terms of reduced elements
45759`A domain used to return the results from a call to the NAG Library. It prints as a list of names and types,{} though the user may choose to display values automatically if he or she wishes.
45827`\indented{1}{Rules for the pattern matcher} Author: Manuel Bronstein Date Created: 24 Oct 1988 Keywords: pattern,{} matching,{} rule.
45955`\spadtype{RightOpenIntervalRootCharacterization} provides work with interval root coding.
46178`\spadtype{RomanNumeral} provides functions for converting \indented{1}{integers to roman numerals.}
46244`This domain implements named rules
46312`A ruleset is a set of pattern matching rules grouped together.
46439`\indented{1}{Domain for representing points,{} vectors,{} subspaces and properties} of components in a subspace as complex numbers
46496`\indented{1}{SBoundary implements boundaries for use in scene graph} This defines the outer extent of the scene,{} or of an element in the scene,{} or of some branch in the scene. The difference between this boundary and an \spad{n}-dimensional surface,{} such as IFS,{} is that boundary must always have a well defined inside and an outside. SBoundary does not necessarily follow the exact outer contours of the shape but just constructs a simple bou
46496`--ndary shape where all points of the shape are guaranteed to be inside the boundary. Currently there are the following boundary forms: \indented{1}{Simple types:} \indented{2}{"box"::Symbol which is a \spad{n}-dimensional axis-aligned rectangle.} \indented{2}{"ellipoid"::Symbol which is a \spad{n}-dimensional axis-aligned ellipse.} \indented{1}{Compound types:} \indented{2}{This is a combination of simple and other compound types such} \indented{2}{as union or intersection.} \indented{3}{"union
46496`--"::Symbol represents union of supplied list} \indented{3}{"intersection"::Symbol represents intersection of supplied list} \indented{1}{Null types:} \indented{2}{"none" is used for a node which does not have a boundary in} \indented{6}{space,{} for example,{} when the boundary of a material node} \indented{6}{is requested.} The uses of SBoundary are: 1) So we know how much to scale a given scene to fit in a \indented{3}{given size.} 2) So that we know where to terminate arrows going in out out
46496`-- of \indented{3}{of the shape.} 3) To detect if objects intersect (collision detect),{} or if one \indented{3}{object is contained completely inside another.}
46552`an implementation of PointCategory to represent points and vectors in three dimensional coordinate space
46618`\indented{1}{these are the parameters that can be set for nodes of} various types
46669`Generates various surfaces (2 dimensional subsets of 3D space). When 1 dimensional subspace (a line) needs to be represented in a 3D editor then we convert the line into a tube. Many of the functions here are from NumericTubePlot and related packages. However \spad{I} needed them to be defined over SPointCategory so \spad{I} adapted them here.
46723`Associates points or nodes in Scene structure with names (or a hierarchy of names). The aim is,{} where a point or node is used in several different constructions,{} it only needs to be specified once.
46802`\indented{1}{number of base dimensions (excluding point at infinity and point} at origin)
46879`\spadtype{ScriptFormulaFormat} provides a coercion from \spadtype{OutputForm} to IBM SCRIPT/VS Mathematical Formula Format. The basic SCRIPT formula format object consists of three parts: a prologue,{} a formula part and an epilogue. The functions \spadfun{prologue},{} \spadfun{formula} and \spadfun{epilogue} extract these parts,{} respectively. The central parts of the expression go into the formula part. The other parts can be set (\s
46879`--padfun{setPrologue!},{} \spadfun{setEpilogue!}) so that contain the appropriate tags for printing. For example,{} the prologue and epilogue might simply contain ":df." and ":edf." so that the formula section will be printed in display math mode.
46946`This type is used to specify a range of values from type \spad{S}.
47011`This domain is used to provide the function argument syntax \spad{v=a..b}. This is used,{} for example,{} by the top-level \spadfun{draw} functions.
47073`A domain for infinite sequences over a commutative ring. It is implemented as stream with arithmetics.
47142`\spadtype{SequentialDifferentialPolynomial} implements an ordinary differential polynomial ring in arbitrary number of differential indeterminates,{} with coefficients in a ring. The ranking on the differential indeterminate is sequential. \blankline
47352`\spadtype{OrderlyDifferentialVariable} adds a commonly used sequential ranking to the set of derivatives of an ordered list of differential indeterminates. A sequential ranking is a ranking \spadfun{<} of the derivatives with the property that for any derivative \spad{v},{} there are only a finite number of derivatives \spad{u} with \spad{u} \spadfun{<} \spad{v}. This domain belongs to \spadtype{Different
47352`--ialVariableCategory}. It defines \spadfun{weight} to be just \spadfun{order},{} and it defines a sequential ranking \spadfun{<} on derivatives \spad{u} by the lexicographic order on the pair (\spadfun{variable}(\spad{u}),{} \spadfun{order}(\spad{u})).
47451`A set over a domain \spad{S} models the usual mathematical notion of a finite set of elements from \spad{S}. Sets are unordered collections of distinct elements (that is,{} order and duplication does not matter). The notation \spad{set [a,{} b,{} c]} can be used to create a set and the usual operations such as union and intersection are available to form new sets. If \spad{S} has OrderdSet,{} \Language{} maintains the entries in sorted order.
47451`-- Specifically,{} the parts function returns the entries as a list in ascending order and the extract operation returns the maximum entry. Given two sets \spad{s} and \spad{t} where \spad{\#s = m} and \spad{\#t = n},{} the complexity of \indented{2}{\spad{s = t} is \spad{O(min(n,{} m))}} \indented{2}{\spad{s < t} is \spad{O(max(n,{} m))}} \indented{2}{\spad{union(s,{} t)},{} \spad{intersect(s,{} t)},{} \spad{minus(s,{} t)},{} \spad{symmetricDifference(s,{} t)} is \spad{O(max(n,{} m))}} \indente
47451`--d{2}{\spad{member(x,{} t)} is \spad{O(n log n)}} \indented{2}{\spad{insert(x,{} t)} and \spad{remove(x,{} t)} is \spad{O(n)}}
47512`\spadtype{SetOfMIntegersInOneToN} implements the subsets of \spad{M} integers in the interval \spad{[1..n]}
47611`This domain allows the manipulation of the usual Lisp values.
47699`This domain allows the manipulation of Lisp values over arbitrary atomic types.
47849`Domain which represents simple algebraic extensions of arbitrary rings. The first argument to the domain,{} \spad{R},{} is the underlying ring,{} the second argument is a domain of univariate polynomials over \spad{K},{} while the last argument specifies the defining minimal polynomial. The elements of the domain are canonically represented as polynomials of degr
47849`--ee less than that of the minimal polynomial with coefficients in \spad{R}. The second argument is both the type of the third argument and the underlying representation used by \spadtype{SAE} itself.
48143`\spadtype{SimpleFortranProgram} provides a simple model of some FORTRAN subprograms,{} making it possible to coerce objects of various domains into a FORTRAN subprogram called \spad{f}. These can then be translated into legal FORTRAN code.
48258`SingleInteger is intended to support machine integer arithmetic.
48324`This trivial domain lets us build Univariate Polynomials in an anonymous variable
48389`parse result includes term returned and new index
48473`SmallOrdinal implements ordinal numbers up to \spad{epsilon_0}. \spad{+} and \spad{*} are "natural" addition and multiplication of ordinals. Avaliable separately are "ordered" operataions.
48539`\indented{1}{Domain for storing information about structure of polynomials} as vectors of exponents
48623`\spad{SparseEchelonMatrix(C,{} D)} implements sparse matrices whose columns are enumerated by the \spadtype{OrderedSet} \spad{C} and whose entries belong to the \spadtype{GcdDomain} \spad{D}. The basic operation of this domain is the computation of an row echelon form. The used algorithm tries to maintain the sparsity and is especially adapted to matrices who are already close to a row echelon form.
48720`\indented{2}{This type is the basic representation of sparse recursive multivariate} polynomials. It is parameterized by the coefficient ring and the variable set which may be infinite. The variable ordering is determined by the variable set parameter. The coefficient ring may be non-commutative,{} but the variables are assumed to commute.
49024`SparseMultivariateSkewPolynomial(\spad{R},{} Var,{} sigma,{} delta) defines a mutivariate Ore ring over \spad{R} in variables from \spad{V}. \spad{sigma(v)} gives automorphism of \spad{R} corresponding to variable \spad{v} and \spad{delta(v)} gives corresponding derivative. \blankline
49231`This domain provides multivariate Taylor series with variables from an arbitrary ordered set. A Taylor series is represented by a stream of polynomials from the polynomial domain \spad{SMP}. The \spad{n}th element of the stream is a form of degree \spad{n}. SMTS is an internal domain.
49430`A sparse table has a default entry,{} which is returned if no other value has been explicitly stored for a key.
49531`Sparse Laurent series in one variable \indented{2}{\spadtype{SparseUnivariateLaurentSeries} is a domain representing Laurent} \indented{2}{series in one variable with coefficients in an arbitrary ring.\space{2}The} \indented{2}{parameters of the type specify the coefficient ring,{} the power series} \indented
49531`--{2}{variable,{} and the center of the power series expansion.\space{2}For example,{}} \indented{2}{\spad{SparseUnivariateLaurentSeries(Integer,{} x,{} 3)} represents Laurent} \indented{2}{series in \spad{(x - 3)} with integer coefficients.}
49728`This domain represents univariate polynomials over arbitrary (not necessarily commutative) coefficient rings. The variable is unspecified so that the variable displays as \spad{?} on output. If it is necessary to specify the variable name,{} use type \spadtype{UnivariatePolynomial}. The representation is sparse in the sense that only non-zero terms are represented.
49838`Sparse Puiseux series in one variable \indented{2}{\spadtype{SparseUnivariatePuiseuxSeries} is a domain representing Puiseux} \indented{2}{series in one variable with coefficients in an arbitrary ring.\space{2}The} \indented{2}{parameters of the type specify the coefficient ring,{} the power series} \indent
49838`--ed{2}{variable,{} and the center of the power series expansion.\space{2}For example,{}} \indented{2}{\spad{SparseUnivariatePuiseuxSeries(Integer,{} x,{} 3)} represents Puiseux} \indented{2}{series in \spad{(x - 3)} with \spadtype{Integer} coefficients.}
50037`This is the domain of sparse univariate skew polynomials over an Ore coefficient field. The multiplication is given by \spad{x a = \sigma(a) x + \delta a}.
50182`Sparse Taylor series in one variable \indented{2}{\spadtype{SparseUnivariateTaylorSeries} is a domain representing Taylor} \indented{2}{series in one variable with coefficients in an arbitrary ring.\space{2}The} \indented{2}{parameters of the type specify the coefficient ring,{} the power series} \indented{2}{variable,{} and the center of the power series expansion.\s
50182`--pace{2}For example,{}} \indented{2}{\spadtype{SparseUnivariateTaylorSeries}(Integer,{} \spad{x},{} 3) represents Taylor} \indented{2}{series in \spad{(x - 3)} with \spadtype{Integer} coefficients.}
50319`\indented{2}{This type represents the finite direct or cartesian product of an} underlying ordered component type. The vectors are ordered as if they were split into two blocks. The \spad{dim1} parameter specifies the length of the first block. The ordering is lexicographic between the blocks but acts like \spadtype{HomogeneousDirectProduct} w
50319`--ithin each block. This type is a suitable third argument for \spadtype{GeneralDistributedMultivariatePolynomial}.
50481`This domain exports a modest implementation for the vertices of splitting trees. These vertices are called here splitting nodes. Every of these nodes store 3 informations. The first one is its value,{} that is the current expression to evaluate. The second one is its condition,{} that is the hypothesis under which the value has to be evaluated. The last one is its status,{} that is a boolean f
50481`--lag which is \spad{true} iff the value is the result of its evaluation under its condition. Two splitting vertices are equal iff they have the sane values and the same conditions (so their status do not matter).
50592`This domain exports a modest implementation of splitting trees. Spliiting trees are needed when the evaluation of some quantity under some hypothesis requires to split the hypothesis into sub-cases. For instance by adding some new hypothesis on one hand and its negation on another hand. The computations are terminated is a splitting tree \spad{a} when \spad{status(va
50592`--lue(a))} is \spad{true}. Thus,{} if for the splitting tree \spad{a} the flag \spad{status(value(a))} is \spad{true},{} then \spad{status(value(d))} is \spad{true} for any subtree \spad{d} of \spad{a}. This property of splitting trees is called the termination condition. If no vertex in a splitting tree \spad{a} is equal to another,{} \spad{a} is said to satisfy the no-duplicates condition. The splitting tree \spad{a} will satisfy this condition if nodes are added to \spad{a} by mean of \spad{s
50592`--plitNodeOf!} and if \spad{construct} is only used to create the root of \spad{a} with no children.
50730`This domain provides an implementation of square-free regular chains. Moreover,{} the operation \spadopFrom{zeroSetSplit}{SquareFreeRegularTriangularSetCategory} is an implementation of a new algorithm for solving polynomial systems by means of regular chains.\newline
50940`\spadtype{SquareMatrix} is a matrix domain of square matrices,{} where the number of rows (= number of columns) is a parameter of the type.
51108`Linked List implementation of a Stack
51179`\indented{1}{Domains for transform from SPoint to SPoint} STransform transform domain can by used to represent linear transforms for instance when working with SCartesian where its Representation is a matrix of DoubleFloat Other transform domains may not necessarily be linear and will have different representations
51233`A stream is an implementation of a possibly infinite sequence using a list of terms that have been computed and a function closure to compute additional terms when needed.
51304`This is the domain of character strings.
51360`This domain provides tables where the keys are strings. A specialized hash function for strings is used.
51446`This domain \undocumented
51530`This domain implements some global properties of subspaces.
51604`This domain implements "such that" forms
51690`This domain builds representations of boolean expressions for use with the \spadtype{FortranCode} domain.
51755`Basic and scripted symbols.
51807`Create and manipulate a symbol table for generated FORTRAN code
51877`This domain implements symmetric polynomial
51976`This is the general purpose table type. The keys are hashed to look up the entries. This creates a \spadtype{HashTable} if equal for the Key domain is consistent with Lisp EQUAL otherwise an \spadtype{AssociationList}
52074`\indented{1}{The tableau domain is for printing Young tableaux,{} and} coercions to and from List List \spad{S} where \spad{S} is a set.
52155`\spadtype{TaylorSeries} is a general multivariate Taylor series domain over the ring Coef and with variables of type Symbol.
53344`Tensor powers of a free module over a commutative ring. It is represented as a free module over the cartesian power of the basis.
53502`Tensor product of free modules over a commutative ring. It is represented as a free module over the direct product of the respective bases. The factor domains must provide operations \spad{listOfTerms},{} whose result is assumed to be stored in reverse order.
53697`\spadtype{TexFormat} provides a coercion from \spadtype{OutputForm} to \TeX{} format. The particular dialect of \TeX{} used is \LaTeX{}. The basic object consists of three parts: a prologue,{} a tex part and an epilogue. The functions \spadfun{prologue},{} \spadfun{tex} and \spadfun{epilogue} extract these parts,{} respectively. The main guts of the expression go into the tex part. The other parts can be set (\spadfun{setPrologue!},{} \spadfun{setEpi
53697`--logue!}) so that contain the appropriate tags for printing. For example,{} the prologue and epilogue might simply contain \spad{``}\verb+\spad{\[}+\spad{''} and \spad{``}\verb+\spad{\]}+\spad{''},{} respectively,{} so that the TeX section will be printed in LaTeX display math mode.
53750`\spadtype{TexmacsFormat} provides a coercion from \spadtype{OutputForm} to TeXmacs format.
53810`This domain provides an implementation of text files. Text is stored in these files using the native character set of the computer.
53885`Creates and manipulates one global symbol table for FORTRAN code generation,{} containing details of types,{} dimensions,{} and argument lists.
53956`This domain represents three dimensional matrices over a general object type
54048`ThreeDimensionalViewport creates viewports to display graphs
54119`The domain ThreeSpace is used for creating three dimensional objects using functions for defining points,{} curves,{} polygons,{} constructs and the subspaces containing them.
54183`\spadtype{Tree(S)} is a basic domains of tree structures. Each tree is either empty or else is a {\it node} consisting of a value and a list of (sub)trees.
54256`\indented{2}{Package for constructing tubes around 3-dimensional parametric curves.} Domain of tubes around 3-dimensional parametric curves.
54325`\indented{1}{This domain is used to interface with the interpreter\spad{'s} notion} of comma-delimited sequences of values.
54402`\indented{1}{A TwoDimensionalArray is a two dimensional array with} 1-based indexing for both rows and columns.
54530`TwoDimensionalViewport creates viewports to display graphs.
54599`\indented{1}{name of variable} and type of variable
54645`This is a low-level domain which implements matrices (two dimensional arrays) of 16-bit integers. Indexing is 0 based,{} there is no bound checking (unless provided by lower level).
54733`This is a low-level domain which implements vectors (one dimensional arrays) of unsigned 16-bit numbers. Indexing is 0 based,{} there is no bound checking (unless provided by lower level).
54805`This is a low-level domain which implements matrices (two dimensional arrays) of 32-bit integers. Indexing is 0 based,{} there is no bound checking (unless provided by lower level).
54893`This is a low-level domain which implements vectors (one dimensional arrays) of unsigned 32-bit numbers. Indexing is 0 based,{} there is no bound checking (unless provided by lower level).
54965`This is a low-level domain which implements matrices (two dimensional arrays) of 8-bit integers. Indexing is 0 based,{} there is no bound checking (unless provided by lower level).
55049`This is a low-level domain which implements vectors (one dimensional arrays) of unsigned 8-bit numbers. Indexing is 0 based,{} there is no bound checking (unless provided by lower level).
55119`allows us to model graph theory \blankline
55198`\spad{Union(A,B,...,C)} is a primitive type in FriCAS used to represent objects of type \spad{A} or of type \spad{B} or...or of type \spad{C}.
55344`Dense Laurent series in one variable \indented{2}{\spadtype{UnivariateLaurentSeries} is a domain representing Laurent} \indented{2}{series in one variable with coefficients in an arbitrary ring.\space{2}The} \indented{2}{parameters of the type specify the coefficient ring,{} the power series} \indented{2}{variable,{} and 
55344`--the center of the power series expansion.\space{2}For example,{}} \indented{2}{\spad{UnivariateLaurentSeries(Integer,{} x,{} 3)} represents Laurent series in} \indented{2}{\spad{(x - 3)} with integer coefficients.}
55528`This package enables one to construct a univariate Laurent series domain from a univariate Taylor series domain. Univariate Laurent series are represented by a pair \spad{[n,{} f(x)]},{} where \spad{n} is an arbitrary integer and \spad{f(x)} is a Taylor series. This pair represents the Laurent series \spad{x^n * f(x)}.
55701`This domain represents univariate polynomials in some symbol over arbitrary (not necessarily commutative) coefficient rings. The representation is sparse in the sense that only non-zero terms are represented.
55802`Dense Puiseux series in one variable \indented{2}{\spadtype{UnivariatePuiseuxSeries} is a domain representing Puiseux} \indented{2}{series in one variable with coefficients in an arbitrary ring.\space{2}The} \indented{2}{parameters of the type specify the coefficient ring,{} the power series} \indented{2}{variable,{} an
55802`--d the center of the power series expansion.\space{2}For example,{}} \indented{2}{\spad{UnivariatePuiseuxSeries(Integer,{} x,{} 3)} represents Puiseux series in} \indented{2}{\spad{(x - 3)} with \spadtype{Integer} coefficients.}
55988`This package enables one to construct a univariate Puiseux series domain from a univariate Laurent series domain. Univariate Puiseux series are represented by a pair \spad{[r,{} f(x)]},{} where \spad{r} is a positive rational number and \spad{f(x)} is a Laurent series. This pair represents the Puiseux series \spad{f(x^r)}.
56163`UnivariatePuiseuxSeriesWithExponentialSingularity is a domain used to represent functions with essential singularities. Objects in this domain are sums,{} where each term in the sum is a univariate Puiseux series times 
56163`--the exponential of a univariate Puiseux series. Thus,{} the elements of this domain are sums of expressions of the form \spad{g(x) * exp(f(x))},{} where \spad{g}(\spad{x}) is a univariate Puiseux series and \spad{f}(\spad{x}) is a univariate Puiseux series with no terms of non-negative degree.
56451`This is the domain of univariate skew polynomials over an Ore coefficient field in a named variable. The multiplication is given by \spad{x a = \sigma(a) x + \delta a}.
56598`Dense Taylor series in one variable \spadtype{UnivariateTaylorSeries} is a domain representing Taylor series in one variable with coefficients in an arbitrary ring. The parameters of the type specify the coefficient ring,{} the power series variable,{} and the center of the power series expansion. For example,{} \spadtype{UnivariateTaylorSeries}(Integer,{} \spad{x},{} 3) rep
56598`--resents Taylor series in \spad{(x - 3)} with \spadtype{Integer} coefficients.
56728`This domain provides segments which may be half open. That is,{} ranges of the form \spad{a..} or \spad{a..b}.
56805`\indented{1}{At the moment an untyped variable is represented by a string} representing the name of the variable. So why wrap it in a Record structue. The main reason is because \spad{I} am planning to expand this as explained in the text part of this pamphlet. Also it seems like a good idea to keep a similar structure to typed variables. Also \spad{I} could not get it to work unwrapped. \spad{I} vaguely recall that \spad{I} couldn\spad{'t} get the cons
56805`--tructor to return an unwrapped value,{} but it may have been some other issue and that\spad{'s} not the main reason.
56855`This domain implements variables
56923`This type represents vector like objects with varying lengths and indexed by a finite segment of integers starting at 1.
56989`This domain supports modular methods based on \indented{1}{evaluation and rational reconstruction.\space{2}Each evaluation} \indented{1}{is done modulo machine sized prime \spad{p}.\space{2}Both Chinese} \indented{1}{remaindering and (linear) Hensel lift are supported.} \indented{1}{Once enough evaluations are known rational reconstruction} \indented{1}{produces vector of rational numbers or integers.}
57045`This domain supports modular methods based on \indented{1}{evaluation and rational reconstruction.\space{2}All computation} \indented{1}{are done on polynomials modulo machine sized prime \spad{p} \spad{
57045`--} \spad{p} must} \indented{1}{be choosen small enough to avoid overflow in intermediate} \indented{1}{calculations. Each evaluation is supposed to produce vector of} \indented{1}{values. Once enough evaluations are known rational reconstruction} 
57045`--\indented{1}{produces vector of rational functions or multivariate polynomials.}
57101`The domain \spad{VectorSpaceBasis F} implements subspaces of finite dimensional vector spaces over a field \spad{F}. A subspace is represented by a list of linearly independent coordinate vectors which constitute a basis. The empty list represents the space of dimension 0.
57171`This type is used when no value is needed,{} \spadignore{e.g.} in the \spad{then} part of a one armed \spad{if}. All values can be coerced to type Void. Once a value has been coerced to Void,{} it cannot be recovered.
57202`allows us to model weighted graphs This graph assigns a weight to each arrow. This is used when calculating say,{} lowest 'cost' routes. An arrow with a higher weight is more 'costly' in some way and therefore we try to choose the minimum weight. For arrows in series the overall weight is the sum of the individual weights. For arrows in parallel the overall weight is the minimum of the individual weight
57202`--s. \spad{I} may change this in future to allow different cost metrics to be plugged in. \blankline
57303`This domain represents truncated weighted polynomials over a general (not necessarily commutative) polynomial type. The variables must be specified,{} as must the weights. The representation is sparse in the sense that only non-zero terms are represented.
57526`A domain constructor of the category \spadtype{GeneralTriangularSet}. The only requirement for a list of polynomials to be a member of such a domain is the following: no polynomial is constant and two distinct polynomials have distinct main variables. Such a triangular set may not be auto-reduced or consistent. The \
57526`--spadopFrom{construct}{WuWenTsunTriangularSet} operation does not check the previous requirement. Triangular sets are stored as sorted lists \spad{w}.\spad{r}.\spad{t}. the main variables of their members. Furthermore,{} this domain exports operations dealing with the characteristic set method of Wu Wen Tsun and some optimizations mainly proposed by Dong Ming Wang.\newline
57715`\indented{2}{This type supports distributed multivariate polynomials} whose variables do not commute. The coefficient ring may be non-commutative too. However,{} coefficients and variables commute.
57832`An implementation of a hash table that uses equality of the key domain to decide upon equality of keys.
57938`This package provides support for \spad{XML} files \spad{XML} attributes are inside the opening tag: <tagname attributes> and usually have the form: name=value
57978`This package provides support for \spad{XML} files an \spad{XML} element is something which either has the form: <tagname attributes> content </tagname> or <tagname attributes/> where content may be a sequence of sub-elements or unstructured text
58016`This domain constructor implements polynomials in non-commutative variables written in the Poincare-Birkhoff-Witt basis from the Lyndon basis. These polynomials can be used to compute Baker-Campbell-Hausdorff relations. \newline Author: Michel Petitot (petitot@lifl.\spad{fr}).
58131`\indented{2}{This type supports multivariate polynomials} whose set of variables is \spadtype{Symbol}. The representation is recursive. The coefficient ring may be non-commutative and the variables do not commute. However,{} coefficients and variables commute.
58209`This domain represents generalized polynomials with coefficients (from a not necessarily commutative ring),{} and words belonging to an arbitrary \spadtype{OrderedMonoid}. This type is used,{} for instance,{} by the \spadtype{XDistributedPolynomial} domain constructor where the Monoid is free.
58286`\indented{2}{This type supports multivariate polynomials} whose variables do not commute. The representation is recursive. The coefficient ring may be non-commutative. Coefficients and variables commute.
58922`The complement or inverse of a graph is a graph on the same vertices such that there is an arrow if and only if there is not an arrow in its compliment. That is,{} it is the compliment of the arrows but is not the set complement. for more information see: http: //en.wikipedia.org/wiki/Complement_graph
58964`The complement or inverse of a graph is a graph on the same vertices such that there is an arrow if and only if there is not an arrow in its compliment. That is,{} it is the compliment of the arrows but is not the set complement. for more information see: http: //en.wikipedia.org/wiki/Complement_graph
59011`\spad{- f} creates the equivalent prefix form.
59047`\spad{\# p} returns the number of terms in \spad{p}.
59876`\spad{- a} returns the power series negative of \spad{a}: \spad{- [a0,{} a1,{} ...] = [- a0,{} - a1,{} ...]}
59947`\spad{-x} is the additive inverse of \spad{x}.
59985`\spad{-g} is the additive inverse of \spad{g} in the module of elements of the same grade as \spad{g}.
60028`\spad{~(x)} returns the logical complement of \spad{x}.
60059`\spad{-x} returns the negative of the matrix \spad{x}.
60129`\spad{-x} negates all components of the vector \spad{x}.
60191`reverse,{} complement,{} canonical dual basis
60242`\spad{~ n} returns the bit-by-bit logical {\em not } of the single integer \spad{n}.
60281`\spad{\#((a1,{} ...,{} an))} returns \spad{n}.
60348`\spad{\# u} returns the number of items in \spad{u}.
60422`sum : disjoint union of nodes with arrows from appropriate input
60465`+(\spad{x},{} \spad{y}) gives addition add the corresponding elements of the vector or point. The type (vector or point) depends on the following table: vector + vector = vector point + vector = point point + point = invalid (but interpret as vector) Although,{} adding two points is not strictly a valid operation,{} we allow it here by interpreting the point as a vector relative to the origin. We do that because there are some useful short cuts,{} for instance
60465`--,{} to find the central point between two points we can add them together and scalar multiply by 0.5.
60508`\spad{-(x,{} y)} gives subtraction subtract the corresponding elements of the vector or point. The type (vector or point) depends on the following table: vector - vector = vector point - vector = point vector - point = invalid (but interpret as point) point - point = invalid (but interpret as vector) Although,{} subtracting two points is not strictly a valid operation,{} we allow it here by interpreting the result as the vector distance between the two points.
60551`\spad{x*y} returns the tree \spad{[x,{} y]}.
60597`\spad{a * b} returns the input form corresponding to \spad{a * b}.
60635`\spad{a + b} returns the input form corresponding to \spad{a + b}.
60673`\spad{a / b} returns the input form corresponding to \spad{a / b}.
60711`\spad{f * g} creates the equivalent infix form.
60750`\spad{f + g} creates the equivalent infix form.
60789`\spad{f - g} creates the equivalent infix form.
60828`\spad{f / g} creates the equivalent infix form.
60867`\spad{f <= g} creates the equivalent infix form.
60907`\spad{f < g} creates the equivalent infix form.
60946`\spad{f = g} creates the equivalent infix form.
60985`\spad{f >= g} creates the equivalent infix form.
61025`\spad{f > g} creates the equivalent infix form.
61064`\spad{f ^ g} creates the equivalent infix form.
61103`\spad{f ~= g} creates the equivalent infix form.
61143`\spad{a * b} returns the pattern \spad{a * b}.
61182`\spad{a + b} returns the pattern \spad{a + b}.
61221`\spad{a / b} returns the pattern \spad{a / b}.
61260`\spad{a ^ b} returns the pattern \spad{a ^ b}.
61299`\spad{o1^o2} returns \spad{o1} to power \spad{o2},{} where power is inductively defined using succesive natural multiplication from the left
61340`\spad{b1*b2} computes a basis of the intersection of two subspaces.
61388`\spad{B1+B2} computes a basis of the sum of two subspaces.
61436`\spad{jv1 > jv2} checks whether \spad{jv1} is greater than \spad{jv2} in the internal ordering.
61487`return \spad{true} if equal,{} that is names are equal and if there is a type then tey mast also be equal
61527`\spad{x=y} tests for equality
61578`returns \spad{true} (boolean \spad{true}) if intuitionisticLogic values are the same. Translates from Intuitionistic Logic to Boolean Logic
61618`return \spad{true} if equal (deep search) that is: all terms at all levels in tree must be alpha-equivalent to return \spad{true} That is the names,{} but not the deBruijn index,{} of the bound variables can be different. beta-equivalenty is not implemented because it is not decidable.
61662`\spad{a=b} tests if \spad{a} and \spad{b} are equal.
61708`return \spad{true} if equal (deep search) that is: all terms at all levels in tree must be equal to return \spad{true} all terms must be exactly equal,{} not just equivalent,{} that is SKK=I will return \spad{false} even though 'SKK' and 'I' have the same effect
61760`\spad{"*"}(a,{}\spad{b}) returns a tensor product : the tensor product \spad{G*H} of graphs \spad{G} and \spad{H} is a graph such that the vertex set of \spad{G*H} is the Cartesian product \spad{V}(\spad{G}) \times \spad{V}(\spad{H}); and any two vertices (\spad{u},{} u') and (\spad{v},{} \spad{v'}) are adjacent in \spad{G} \times \spad{H} if and only if u' is adjacent with \spad{v'} and \spad{u} is adjacent with \spad{v}.
61830`tensor product : the tensor product \spad{G*H} of graphs \spad{G} and \spad{H} is a graph such that the vertex set of \spad{G*H} is the Cartesian product \spad{V}(\spad{G}) \times \spad{V}(\spad{H}); and any two vertices (\spad{u},{} u') and (\spad{v},{} \spad{v'}) are adjacent in \spad{G} \times \spad{H} if and only if u' is adjacent with \spad{v'} and \spad{u} is adjacent with \spad{v}. Cartesian product does apply to function grap
61830`--h produces two arrows out of every node
61900`tensor product : the tensor product \spad{G*H} of graphs \spad{G} and \spad{H} is a graph such that the vertex set of \spad{G*H} is the Cartesian product \spad{V}(\spad{G}) \times \spad{V}(\spad{H}); and any two vertices (\spad{u},{} u') and (\spad{v},{} \spad{v'}) are adjacent in \spad{G} \times \spad{H} if and only if u' is adjacent with \spad{v'} and \spad{u} is adjacent with \spad{v}.
61980`tensor product : the tensor product \spad{G*H} of graphs \spad{G} and \spad{H} is a graph such that the vertex set of \spad{G*H} is the Cartesian product \spad{V}(\spad{G}) \times \spad{V}(\spad{H}); and any two vertices (\spad{u},{} u') and (\spad{v},{} \spad{v'}) are adjacent in \spad{G} \times \spad{H} if and only if u' is adjacent with \spad{v'} and \spad{u} is adjacent with \spad{v}.
62054`\spad{x/y} division (only works if minimum weight of divisor is zero,{} and if \spad{R} is a Field)
62155`\spad{x/y} division (only works if minimum weight of divisor is zero,{} and if \spad{R} is a Field)
62259`tensor product : the tensor product \spad{G*H} of graphs \spad{G} and \spad{H} is a graph such that the vertex set of \spad{G*H} is the Cartesian product \spad{V}(\spad{G}) \times \spad{V}(\spad{H}); and any two vertices (\spad{u},{} u') and (\spad{v},{} \spad{v'}) are adjacent in \spad{G} \times \spad{H} if and only if u' is adjacent with \spad{v'} and \spad{u} is adjacent with \spad{v}.
62333`\spad{x*c} returns the product of \spad{c} and the series \spad{x}.
62387`\spad{x*i} returns the product of integer \spad{i} and the series \spad{x}.
62444`\spad{a ^ b} returns the input form corresponding to \spad{a ^ b}.
62527`\spad{a ^ b} returns the input form corresponding to \spad{a ^ b}.
62581`\spad{a ^ n} returns the pattern \spad{a ^ n}.
62636`\spad{x^k} constructs the distribution of the \spad{k}th power of the random variable with distribution \spad{X} by picking every \spad{k}-th moment.
62701`\spad{x / d} divides the element \spad{x} by \spad{d}.
62746`\spad{x / d} divides the element \spad{x} by \spad{d}.
62787`\spad{p/r} returns \spad{p*(1/r)}.
62847`\spad{p*r} returns the product of \spad{p} by \spad{r}.
62895`\spad{x * s} returns the product of \spad{x} by \spad{s} on the right.
62935`\spad{x * s} returns the product of \spad{x} by \spad{s} on the right.
63824`\spad{a / d} divides the element \spad{a} by \spad{d}.
63906`\spad{r * a} returns the power series scalar multiplication of \spad{r} by \spad{a}: \spad{r * [a0,{} a1,{} ...] = [r * a0,{} r * a1,{} ...]}
63979`\spad{c*x} returns the product of \spad{c} and the series \spad{x}.
64095`\spad{d*exp} is provided mainly for internal use,{} as basically all calculations should be performed within \spadtype{JetLazyFunction}.
64144`*(\spad{s},{} \spad{x}) gives scalar multiplication Although,{} scalar multiplication is strictly only a valid operation for vectors and not points,{} we allow it here because there are some useful short cuts,{} for instance,{} to find the central point between two points we can add them together and scalar multiply by 0.5.
64196`\spad{s * p} returns a point whose coordinates are the scalar multiple of the point \spad{p} by the scalar \spad{s},{} preserving the color,{} or fourth coordinate,{} of \spad{p}.
64279`\spad{a ^ b} is the formal exponential a^b.
64331`\spad{x ^ q} is \spad{x} raised to the rational power \spad{q}.
65392`\spad{L*A} implements left multiplication with a usual matrix.
65452`\spad{L*A} implements left multiplication with a usual matrix over the quotient field of \spad{D}.
65543`\spad{x ^ n} computes the \spad{n}-th power of a square matrix. The power \spad{n} is assumed greater than 1.
65637`\spad{m / d} divides the element \spad{m} by \spad{d}.
66343`\spad{p*x} \undocumented
66410`\spad{p - q} computes and returns a point whose coordinates are the differences of the coordinates of two points \spad{p} and \spad{q},{} using the color,{} or fourth coordinate,{} of the first point \spad{p} as the color also of the point \spad{q}.
66500`\spad{p + q} computes and returns a point whose coordinates are the sums of the coordinates of the two points \spad{p} and \spad{q},{} using the color,{} or fourth coordinate,{} of the first point \spad{p} as the color also of the point \spad{q}.
67771`\spad{r * v} computes the product of \spad{r} and \spad{v}
67850`\spad{s * x} returns the product of \spad{x} by \spad{s} on the left.
67890`\spad{s * x} returns the product of \spad{x} by \spad{s} on the left.
68726`\spad{s ^ n} returns the product of \spad{s} by itself \spad{n} times.
69065`\spad{smp*ts} multiplies a TaylorSeries by a monomial \spad{SMP}.
69139`\spad{s ^ n} returns the product of \spad{s} by itself \spad{n} times.
73161`\spad{a * r} returns the power series scalar multiplication of \spad{a} by \spad{r:} \spad{[a0,{} a1,{} ...] * r = [a0 * r,{} a1 * r,{} ...]}
73234`\spad{a * b} returns the power series (Cauchy) product of \spad{a} and \spad{b:} \spad{[a0,{} a1,{} ...] * [b0,{} b1,{} ...] = [c0,{} c1,{} ...]} where \spad{ck = sum(i + j = k,{} \spad{ai} * bk)}.
73315`\spad{a - b} returns the power series difference of \spad{a} and \spad{b}: \spad{[a0,{} a1,{} ..] - [b0,{} b1,{} ..] = [a0 - b0,{} a1 - b1,{} ..]}
73396`\spad{a / b} returns the power series quotient of \spad{a} by \spad{b}. An error message is returned if \spad{b} is not invertible. This function is used in fixed point computations.
73477`\spad{a + b} returns the power series sum of \spad{a} and \spad{b}: \spad{[a0,{} a1,{} ..] + [b0,{} b1,{} ..] = [a0 + b0,{} a1 + b1,{} ..]}
73558`\spad{a * b} returns the power series (Cauchy) product of \spad{a} and \spad{b:} \spad{[a0,{} a1,{} ...] * [b0,{} b1,{} ...] = [c0,{} c1,{} ...]} where \spad{ck = sum(i + j = k,{} binomial(k,{} i) * \spad{ai} * bj)}.
73656`\spad{st1 ^ st2} computes the power of a power series \spad{st1} by another power series \spad{st2}.
73750`\spad{st1 ^ st2} computes the power of a power series \spad{st1} by another power series \spad{st2}.
73858`\spad{s ^ r} raises a Laurent series \spad{s} to a rational power \spad{r}
73975`\spad{z ^ r} raises a Puiseaux series \spad{z} to a rational power \spad{r}
74101`\spad{x^n} \undocumented{} See \spadfunFrom{^}{DivisionRing}
74185`\spad{x/y} \undocumented{} See \spadfunFrom{/}{Field}
74272`\spad{x*y} \undocumented{} See \spadfunFrom{*}{SemiGroup}
74359`\spad{x-y} is the difference of \spad{x} and \spad{y} \spadignore{i.e.} \spad{x + (-y)}.
74400`\spad{x+y} computes the sum of \spad{x} and \spad{y}.
74445`\spad{x^y} returns \spad{x} to the power \spad{y}.
74500`\spad{x/y} divides the element \spad{x} by the element \spad{y}. Error: if \spad{y} is 0.
74534`\spad{g-h} is the difference of \spad{g} and \spad{h} in the module of elements of the same degree as \spad{g} and \spad{h}. Error: if \spad{g} and \spad{h} have different degrees.
74580`\spad{g+h} is the sum of \spad{g} and \spad{h} in the module of elements of the same degree as \spad{g} and \spad{h}. Error: if \spad{g} and \spad{h} have different degrees.
74626`\spad{x/y} is the same as \spad{x} times the inverse of \spad{y}.
74660`\spadignore{ \/ } returns the logical `join',{} \spadignore{e.g.} `or'.
74695`\spadignore { /\ }returns the logical `meet',{} \spadignore{e.g.} `and'.
74730`\spad{a*b} is the product of \spad{a} and \spad{b} in a set with a binary operation.
74764`\spad{x - y} is the difference of the matrices \spad{x} and \spad{y}. Error: if the dimensions are incompatible.
74837`\spad{x * y} is the product of the matrices \spad{x} and \spad{y}. Error: if the dimensions are incompatible.
74891`\spad{x + y} is the sum of the matrices \spad{x} and \spad{y}. Error: if the dimensions are incompatible.
74945`\spad{x*y} returns the product of \spad{x} and \spad{y}.
74983`\spad{x - y} returns the component-wise difference of the vectors \spad{x} and \spad{y}. Error: if \spad{x} and \spad{y} are not of the same length.
75048`\spad{x + y} returns the component-wise sum of the vectors \spad{x} and \spad{y}. Error: if \spad{x} and \spad{y} are not of the same length.
75117`\spad{x^y} returns \spad{\#(X^Y)} where \spad{X^Y} is defined \indented{1}{as \spad{\{g| g: Y->X\}}.}
75160`\spad{s*t} is the inner product of the tensors \spad{s} and \spad{t} which contracts the last index of \spad{s} with the first index of \spad{t},{} \spadignore{i.e.} \indented{4}{\spad{t*s = contract(t,{} rank t,{} s,{} 1)}} \indented{4}{\spad{t*s = sum(k=1..N,{} t[i1,{} ..,{} iN,{} k]*s[k,{} j1,{} ..,{} jM])}} This is compatible with the use of \spad{M*v} to denote the matrix-vector inner product.
75217`Implement exterior grassmann product operator need to check precidence when used as an infix operator
75272`Implement regressive inner,{} meet product operator need to check precidence when used as an infix operator
75327`\spad{c1 + c2} additively mixes the two colors \spad{c1} and \spad{c2}.
75361`\spad{db1-db2} returns the difference of databases \spad{db1} and \spad{db2} \spadignore{i.e.} consisting of elements in \spad{db1} but not in \spad{db2}
75401`\spad{db1+db2} returns the merge of databases \spad{db1} and \spad{db2}
75441`\spad{e1/e2} produces a new equation by dividing the left and right hand sides of equations \spad{e1} and \spad{e2}.
75493`\spad{I+J} computes the ideal generated by the union of \spad{I} and \spad{J}.
75559`\spad{I*J} computes the product of the ideal \spad{I} and \spad{J}.
75625`\spad{n} \spad{/\} \spad{m} returns the bit-by-bit logical {\em and} of the single integers \spad{n} and \spad{m}.
75668`\spad{n} \spad{\/} \spad{m} returns the bit-by-bit logical {\em or} of the single integers \spad{n} and \spad{m}.
75711`\spad{x = y} tests if \spad{x} and \spad{y} are equal.
75754`\spad{x~=y} tests if \spad{x} and \spad{y} are not equal.
75798`\spad{x >= y} is a greater than or equal test.
75845`\spad{x > y} is a greater than test.
75891`\spad{x <= y} is a less than or equal test.
75938`\spad{x < y} is a less than test.
75984`\spad{p < q} is an order relation on permutations. Note: this order is only total if and only if \spad{S} is totally ordered or \spad{S} is finite.
76040`\spad{gp1 < gp2} returns \spad{true} if and only if {\em gp1} is a proper subgroup of {\em gp2}.
76093`\spad{gp1 <= gp2} returns \spad{true} if and only if {\em gp1} is a subgroup of {\em gp2}. Note: because of a bug in the parser you have to call this function explicitly by {\em gp1 <=\$(PERMGRP S) gp2}.
76147`\spad{x - y} returns an element \spad{z} such that \spad{z+y=x} or "failed" if no such element exists.
76206`\spad{f(x) ^ a} computes a power of a power series. When the coefficient ring is a field,{} we may raise a series to an exponent from the coefficient ring provided that the constant coefficient of the series is 1.
76288`\spad{x * c} is the product of the matrix \spad{x} and the column vector \spad{c}. Error: if the dimensions are incompatible.
76344`\spad{x * c} is the product of the matrix \spad{x} and the column vector \spad{c}. Error: if the dimensions are incompatible.
76411`\spad{x ^ y} is the rational exponentiation of \spad{x} by the power \spad{y}.
76470`\spad{x^n} returns \spad{x} raised to the integer power \spad{n}.
76516`\spad{x^n} returns \spad{x} raised to the integer power \spad{n}.
76555`\spad{m^n} computes an integral power of the matrix \spad{m}. Error: if matrix is not square or if the matrix is square but not invertible.
76626`\spad{m^n} computes an integral power of the matrix \spad{m}. Error: if the matrix is not invertible.
76708`\spad{x / i} computes the division from \spad{x} by an integer \spad{i}.
76753`\spad{x / i} computes the division from \spad{x} by an integer \spad{i}.
76792`\spad{op^n} \undocumented
76845`\spad{a^n} returns the \spad{n}\spad{-}th power of \spad{a},{} defined by repeated squaring.
76903`\spad{x ^ n} computes a non-negative integral power of the matrix \spad{x}. Error: if the matrix is not square.
76986`\spad{x^n} returns the repeated product of \spad{x} \spad{n} times,{} \spadignore{i.e.} exponentiation.
77037`\spad{I^n} computes the \spad{n}th power of the ideal \spad{I}.
77119`\spad{t*p} applies the dhmatrix \spad{t} to point \spad{p}
77186`\spad{a^n} returns the \spad{n}\spad{-}th power of \spad{a},{} defined by repeated squaring.
77233`\spad{x^n} returns the repeated product of \spad{x} \spad{n} times,{} \spadignore{i.e.} exponentiation.
77284`\spad{p/c} divides \spad{p} by the coefficient \spad{c}.
77346`\spad{y * r} multiplies each component of the vector \spad{y} by the element \spad{r}.
77418`\spad{g*r} is right module multiplication.
77463`\spad{x/r} returns the division of \spad{x} by \spad{r}.
77516`\spad{m/r} divides the elements of \spad{m} by \spad{r}. Error: if \spad{r = 0}.
77581`\spad{x * r} is the right scalar multiple of the scalar \spad{r} and the matrix \spad{x}.
77634`\spad{m/r} divides the elements of \spad{m} by \spad{r}. Error: if \spad{r = 0}.
77714`\spad{x*r} returns the right multiplication of the module element \spad{x} by the ring element \spad{r}.
77756`\spad{y * r} multiplies each component of the vector \spad{y} by the element \spad{r}.
77817`\spad{x * r} returns the product of \spad{x} by \spad{r}. Usefull if \spad{R} is a non-commutative Ring.
77863`\spad{x/y} divides the vector \spad{x} by the scalar \spad{y}.
77905`\spad{eqn-x} produces a new equation by subtracting \spad{x} from both sides of equation eqn.
77963`\spad{eqn+x} produces a new equation by adding \spad{x} to both sides of equation eqn.
78025`\spad{eqn*x} produces a new equation by multiplying both sides of equation eqn by \spad{x}.
78080`\spad{f^n} is the function which is the \spad{n}-fold application \indented{1}{of \spad{f}.}
78151`\spad{f*g} is the function \spad{h} \indented{1}{such that \spad{h x= f(g x)}.}
78214`\spad{s * c},{} returns the color \spad{c},{} whose weighted shade has been scaled by \spad{s}.
78257`\spad{e * s} returns \spad{e} times \spad{s}.
78314`\spad{n*x} is the product of \spad{x} by the integer \spad{n}.
78360`\spad{n * x} is an integer multiple.
78438`\spad{n * y} multiplies each component of the vector \spad{y} by the integer \spad{n}.
78508`\spad{n * x} is left-multiplication by a non negative integer
78566`\spad{n*x} computes the left-multiplication of \spad{x} by the positive integer \spad{n}. This is equivalent to adding \spad{x} to itself \spad{n} times.
78624`\spad{s * c},{} returns the color \spad{c},{} whose weighted shade has been scaled by \spad{s}.
78671`\spad{r * y} multiplies the element \spad{r} times each component of the vector \spad{y}.
78743`\spad{r*g} is left module multiplication.
78788`\spad{r*x} returns the left multiplication of the module element \spad{x} by the ring element \spad{r}.
78829`\spad{r*x} is the left scalar multiple of the scalar \spad{r} and the matrix \spad{x}.
78882`\spad{r * y} multiplies the element \spad{r} times each component of the vector \spad{y}.
78943`\spad{r * x} is the product of the row vector \spad{r} and the matrix \spad{x}. Error: if the dimensions are incompatible.
78999`\spad{r * x} is the product of the row vector \spad{r} and the matrix \spad{x}. Error: if the dimensions are incompatible.
79066`\spad{r*b} returns the product of \spad{r} by \spad{b}.
79116`\spad{s + x} returns the sum of \spad{s} and \spad{x}.
79174`\spad{x-eqn} produces a new equation by subtracting both sides of equation eqn from \spad{x}.
79232`\spad{x+eqn} produces a new equation by adding \spad{x} to both sides of equation eqn.
79294`\spad{x*eqn} produces a new equation by multiplying both sides of equation eqn by \spad{x}.
79349`\spad{p1/p2} returns the quotient of \spad{p1} and \spad{p2} as an element of \%.
79495`\spad{s*r} returns the product \spad{r*s} used by \spadtype{XRecursivePolynomial}
79545`\spad{d1 / d2} returns the fraction \spad{d1} divided by \spad{d2}.
79596`\spad{a=b} creates an equation.
79634`\spad{p + x} returns the sum of \spad{p} and \spad{x}
79697`\spad{v * x} returns the product of a variable \spad{x} by \spad{x}.
79744`\spad{abelianGroup([n1,{} ...,{} nk])} constructs the abelian group that is the direct product of cyclic groups with order {\em \spad{ni}}.
79847`\spad{abs(x)} represents the Fortran intrinsic function ABS
79927`\spad{abs(f)} returns the absolute value operator applied to \spad{f}
80149`\spad{abs(x)} returns the absolute value of \spad{x} = sqrt(norm(\spad{x})).
80218`\spad{abs(x)} returns the absolute value of \spad{x}.
80257`\spad{abs x} returns the absolute value of \spad{x}.
80301`\spad{abs(x)} returns the absolute value of \spad{x}.
80352`\spad{abs(o)} computes the absolute value of an octonion,{} equal to the square root of the \spadfunFrom{norm}{Octonion}.
80421`\spad{abs(q)} computes the absolute value of quaternion \spad{q} (sqrt of norm).
80492`\spad{absolutelyIrreducible?()} tests if the curve absolutely irreducible?
80577`\spad{absolutelyIrreducible?()} tests if the curve absolutely irreducible?
80659`\spad{acos(x)} represents the Fortran intrinsic function ACOS
80740`\spad{acos(x)} applies the inverse cosine operator to \spad{x}
80950`\spad{acos(st)} computes arccosine of a power series \spad{st}.
81034`\spad{acos(st)} computes arccosine of a power series \spad{st}.
81132`\spad{acos(z)} returns the arc-cosine of Laurent series \spad{z}.
81219`\spad{acos(z)} returns the arc-cosine of a Puiseux series \spad{z}.
81315`\spad{acos(x)} returns the arc-cosine of \spad{x}. When evaluated into some subset of the complex numbers,{} one branch cut for acos lies along the negative real axis to the left of \spad{-1} (inclusive),{} continuous with the upper half plane,{} the other along the positive real axis to the right of 1 (inclusive),{} continuous with the lower half plane.
81376`\spad{acosh(x)} applies the inverse hyperbolic cosine operator to \spad{x}
81590`\spad{acosh(st)} computes the inverse hyperbolic cosine of a power series \spad{st}.
81675`\spad{acosh(st)} computes the inverse hyperbolic cosine of a power series \spad{st}.
81774`\spad{acosh(z)} returns the inverse hyperbolic cosine of Laurent series \spad{z}.
81862`\spad{acosh(z)} returns the inverse hyperbolic cosine of a Puiseux series \spad{z}.
81959`\spad{acosh(x)} returns the hyperbolic arc-cosine of \spad{x}.
82018`\spad{acoshIfCan(z)} returns acosh(\spad{z}) if possible,{} and "failed" otherwise.
82100`\spad{acosIfCan(z)} returns acos(\spad{z}) if possible,{} and "failed" otherwise.
82181`\spad{acot(x)} applies the inverse cotangent operator to \spad{x}
82348`\spad{acot(st)} computes arccotangent of a power series \spad{st}.
82432`\spad{acot(st)} computes arccotangent of a power series \spad{st}.
82530`\spad{acot(z)} returns the arc-cotangent of Laurent series \spad{z}.
82617`\spad{acot(z)} returns the arc-cotangent of a Puiseux series \spad{z}.
82713`\spad{acot(x)} returns the arc-cotangent of \spad{x}.
82774`\spad{acoth(x)} applies the inverse hyperbolic cotangent operator to \spad{x}
82944`\spad{acoth(st)} computes the inverse hyperbolic cotangent of a power series \spad{st}.
83029`\spad{acoth(st)} computes the inverse hyperbolic cotangent of a power series \spad{st}.
83128`\spad{acoth(z)} returns the inverse hyperbolic cotangent of Laurent series \spad{z}.
83216`\spad{acoth(z)} returns the inverse hyperbolic cotangent of a Puiseux series \spad{z}.
83313`\spad{acoth(x)} returns the hyperbolic arc-cotangent of \spad{x}.
83372`\spad{acothIfCan(z)} returns acoth(\spad{z}) if possible,{} and "failed" otherwise.
83454`\spad{acotIfCan(z)} returns acot(\spad{z}) if possible,{} and "failed" otherwise.
83535`\spad{acsc(x)} applies the inverse cosecant operator to \spad{x}
83704`\spad{acsc(st)} computes arccosecant of a power series \spad{st}.
83788`\spad{acsc(st)} computes arccosecant of a power series \spad{st}.
83886`\spad{acsc(z)} returns the arc-cosecant of Laurent series \spad{z}.
83973`\spad{acsc(z)} returns the arc-cosecant of a Puiseux series \spad{z}.
84069`\spad{acsc(x)} returns the arc-cosecant of \spad{x}.
84130`\spad{acsch(x)} applies the inverse hyperbolic cosecant operator to \spad{x}
84300`\spad{acsch(st)} computes the inverse hyperbolic cosecant of a power series \spad{st}.
84385`\spad{acsch(st)} computes the inverse hyperbolic cosecant of a power series \spad{st}.
84484`\spad{acsch(z)} returns the inverse hyperbolic cosecant of Laurent series \spad{z}.
84572`\spad{acsch(z)} returns the inverse hyperbolic cosecant of a Puiseux series \spad{z}.
84669`\spad{acsch(x)} returns the hyperbolic arc-cosecant of \spad{x}.
84728`\spad{acschIfCan(z)} returns acsch(\spad{z}) if possible,{} and "failed" otherwise.
84810`\spad{acscIfCan(z)} returns acsc(\spad{z}) if possible,{} and "failed" otherwise.
84891`\spad{aCubic(f,{} g,{} h,{} j)} \undocumented
84957`\spad{adaptive?()} determines whether plotting be done adaptively
84998`\spad{adaptive()} determines whether plotting will be done adaptively.
85050`\spad{adaptive(b)} turns adaptive 2D plotting on if \spad{b} is \spad{true},{} or off if \spad{b} is \spad{false}. This option is expressed in the form \spad{adaptive == b}.
85098`\spad{adaptive(true)} turns adaptive plotting on; \spad{adaptive(false)} turns adaptive plotting off.
85157`\spad{adaptive(l,{} b)} takes the list of draw options,{} \spad{l},{} and checks the list to see if it contains the option \spad{adaptive}. If the option does not exist the value,{} \spad{b} is returned.
85237`\spad{adaptive3D?()} determines whether plotting be done adaptively.
85282`\spad{addArrow!(s,{} nm,{} n1,{} n2)} adds an arrow to the graph \spad{s},{} where: \spad{nm} is the name of the arrow \spad{n1} is the index of the start object \spad{n2} is the index of the end object
85375`\spad{addArrow!(s,{} nm,{} o1,{} o2)} adds an arrow to the graph \spad{s},{} where: \spad{nm} is the name of the arrow \spad{o1} is the start object \spad{o2} is the end object
85578`\spad{addArrow!(s,{} nm,{} n1,{} n2,{} mp)} adds an arrow to the graph \spad{s},{} where: \spad{nm} is the name of the arrow \spad{n1} is the index of the start object \spad{n2} is the index of the end object \spad{mp} is a map represented by this arrow
85810`\spad{addArrows2Din2D(n,{} ptFun,{} uSeg,{} vSeg,{} numPts)} is a convenience function which combines createArrows2Din2D with addChild!
85929`\spad{addBadValue(p,{} v)} adds \spad{v} to the list of "bad values" for \spad{p}. Note: \spad{p} is not allowed to match any of its "bad values".
85979`\spad{addBadValue(p,{} v)} adds \spad{v} to the list of "bad values" for \spad{p}; \spad{p} is not allowed to match any of its "bad values".
86055`\spad{addChild!(n,{} c)} adds the specified child node \spad{'c'} below node \spad{'n'}
86103`\spad{addiag(x)} performs diagonal addition of a stream of streams. if \spad{x} = \spad{[[a<0,{} 0>,{} a<0,{} 1>,{} ..],{} [a<1,{} 0>,{} a<1,{} 1>,{} ..],{} [a<2,{} 0>,{} a<2,{} 1>,{} ..],{} ..]} and \spad{addiag(x) = [b<0,{} b<1>,{} ...],{} then b<k> = sum(i+j=k,{} a<i,{} j>)}.
86187`\spad{additive?(a,{} n)} returns \spad{true} if the first \spad{n} coefficients of a are additive
86261`\spad{addMatch(var,{} expr,{} r)} adds the match (\spad{var},{} \spad{expr}) in \spad{r},{} provided that \spad{expr} satisfies the predicates attached to \spad{var},{} and that \spad{var} is not matched to another expression already.
86330`\spad{addMatchRestricted(var,{} expr,{} r,{} val)} adds the match (\spad{var},{} \spad{expr}) in \spad{r},{} provided that \spad{expr} satisfies the predicates attached to \spad{var},{} that \spad{var} is not matched to another expression already,{} and that either \spad{var} is an optional pattern variable or that \spad{expr} is not equal to val (usually an identity).
86411`\spad{addmod(a,{} b,{} p)},{} \spad{0<=a,{} b<p>1},{} means \spad{a+b mod p}.
86467`\spad{addNode!(n,{} ptName,{} sc)} adds a scene node.
86537`\spad{addObject!(s,{} n)} adds object with coordinates \spad{n} to the graph \spad{s}.
86650`\spad{addObject!(s,{} n)} adds object \spad{n} to the graph \spad{s}. Use this version if you don\spad{'t} intend to create diagrams and therefore don\spad{'t} care about \spad{x},{} \spad{y} coordinates.
86701`\spad{addPlot1Din2D(n,{} f,{} tRange,{} numPts)} is a convenience function which combines createPlot1Din2D with addChild!
86815`\spad{addPlot1Din2D(n,{} f,{} tRange,{} numPts)} is a convenience function which combines createPlot1Din2D with addChild!
86920`\spad{addPlot1Din2Dparametric(n,{} ppc,{} tRange,{} numPts)} is a convenience function which combines createPlot1Din2Dparametric with addChild!
87066`\spad{addPlot1Din3Dparametric(n,{} pcfun,{} tRange,{} numPts)} is a convenience function which combines createPlot1Din3Dparametric with addChild!
87181`\spad{addPlot1Din3Dparametric(n,{} psc,{} tRange,{} numPts)} is a convenience function which combines createPlot1Din3Dparametric with addChild!
87327`\spad{addPlot2Din3D(n,{} f,{} uSeg,{} vSeg,{} numPts)} is a convenience function which combines createPlot2Din3D with addChild!
87474`\spad{addPlot2Din3Dparametric(n,{} f,{} uSeg,{} vSeg,{} numPts)} is a convenience function which combines createPlot2Din3Dparametric with addChild!
87622`\spad{addPlot2Din3Dparametric(n,{} f,{} uSeg,{} vSeg,{} numPts)} is a convenience function which combines createPlot2Din3Dparametric with addChild!
87798`\spad{addPoint2(s,{} p)} adds the 4 dimensional point,{} \spad{p},{} to the 3 dimensional subspace,{} \spad{s}. The subspace \spad{s} is returned with the additional point.
87854`\spad{addPoint(s,{} p)} adds the point,{} \spad{p},{} to the 3 dimensional subspace,{} \spad{s},{} and returns the new total number of points in \spad{s}.
87925`\spad{addPoint(s,{} \spad{li},{} i)} adds the 4 dimensional point indicated by the index location,{} \spad{i},{} to the 3 dimensional subspace,{} \spad{s}. The list of non negative integers,{} \spad{li},{} dictates the path to follow,{} or,{} to look at it another way,{} points to the component in which the point is to be added. It\spad{'s} length should range from 0 to \spad{n - 1} where \spad{n} is the dimension
87925`-- of the subspace. If the length is \spad{n - 1},{} then a specific lowest level component is being referenced. If it is less than \spad{n - 1},{} then some higher level component (0 indicates top level component) is being referenced and a component of that level with the desired point is created. The subspace \spad{s} is returned with the additional point.
88015`\spad{addPoint(s,{} \spad{li},{} p)} adds the 4 dimensional point,{} \spad{p},{} to the 3 dimensional subspace,{} \spad{s}. The list of non negative integers,{} \spad{li},{} dictates the path to follow,{} or,{} to look at it another way,{} points to the component in which the point is to be added. It\spad{'s} length should range from 0 to \spad{n - 1} where \spad{n} is the dimension of the subspace. If the length is \spad{n
88015`-- - 1},{} then a specific lowest level component is being referenced. If it is less than \spad{n - 1},{} then some higher level component (0 indicates top level component) is being referenced and a component of that level with the desired point is created. The subspace \spad{s} is returned with the additional point.
88095`\spad{addPointLast(s,{} s2,{} \spad{li},{} p)} adds the 4 dimensional point,{} \spad{p},{} to the 3 dimensional subspace,{} \spad{s}. \spad{s2} point to the end of the subspace \spad{s}. \spad{n} is the path in the \spad{s2} component. The subspace \spad{s} is returned with the additional point.
88176`\spad{addPoints!(n,{} ptName,{} pts)} adds a points node.
88241`\spad{addSceneArrow(n,{} st,{} en,{} offset,{} mode,{} size)} is a convenience function which combines createSceneArrow with addChild!
88324`\spad{addSceneArrow(n,{} st,{} en,{} offset,{} mode,{} size,{} fontScale)} is a convenience function which combines createSceneArrow with addChild!
88411`\spad{addSceneArrows(n,{} line,{} mode,{} size)} is a convenience function which combines createSceneArrows with addChild!
88493`\spad{addSceneBox(n,{} size)} is a convenience function which combines createSceneBox with addChild!
88550`deprecated: this has been superseded by version with SBoundary(\spad{PT}) do not use,{} may be removed in the future.
88620`\spad{addSceneClip(n,{} bb)} is a convenience function which combines createSceneClip with addChild!
88680`\spad{addSceneDef(n,{} nam,{} nde)} is a convenience function which combines createSceneDef with addChild!
88735`\spad{addSceneGraph(n,{} g,{} x,{} y,{} dispArrowName)} is a convenience function which combines createSceneGraph with addChild!
88850`deprecated: this has been superseded by version with SBoundary(\spad{PT}) do not use,{} may be removed in the future.
88920`\spad{addSceneGrid(n,{} bb)} is a convenience function which combines createSceneGrid with addChild!
88980`deprecated: this has been superseded by version with SBoundary(\spad{PT}) do not use,{} may be removed in the future.
89062`\spad{addSceneGrid(n,{} stepSize,{} bb)} is a convenience function which combines createSceneGrid with addChild!
89134`\spad{addSceneGroup(n)} is a convenience function which combines createSceneGroup with addChild!
89181`\spad{addSceneIFS(n,{} in1)} is a convenience function which combines createSceneIFS with addChild!
89239`\spad{addSceneIFS(n,{} inx,{} pts)} is a convenience function which combines createSceneIFS with addChild!
89324`\spad{addSceneLine(n,{} line)} is a convenience function which combines createSceneLine with addChild!
89379`\spad{addSceneLine(n,{} st,{} en,{} fontScale)} is a convenience function which combines createSceneLine with addChild!
89443`\spad{addSceneLines(n,{} line)} is a convenience function which combines createSceneLines with addChild!
89505`\spad{addSceneMaterial(n,{} mat)} is a convenience function which combines createSceneMaterial with addChild!
89638`\spad{addSceneMaterial(n,{} lineW,{} lineC,{} fillC)} is a convenience function which combines createSceneMaterial with addChild!
89714`\spad{addSceneNamedPoints(n,{} np)} is a convenience function which combines createSceneNamedPoints with addChild!
89788`deprecated: this has been superseded by version with SBoundary(\spad{PT}) do not use,{} may be removed in the future.
89887`\spad{addScenePattern(n,{} ptype,{} step,{} bb)} is a convenience function which combines createScenePattern with addChild!
89976`deprecated: this has been superseded by version with SBoundary(\spad{PT}) do not use,{} may be removed in the future.
90057`\spad{addSceneRuler(n,{} ptype,{} offset,{} bb)} is a convenience function which combines createSceneRuler with addChild!
90128`\spad{addSceneShape(n,{} shape)} is a convenience function which combines createSceneShape with addChild!
90229`\spad{addSceneShape(n,{} shape)} is a convenience function which combines createSceneShape with addChild!
90290`\spad{addSceneText(n,{} text)} is a convenience function which combines createSceneText with addChild!
90401`\spad{addSceneText(n,{} str,{} sz,{} pz)} is a convenience function which combines createSceneText with addChild!
90482`\spad{addSceneText(n,{} str,{} sz,{} pz)} is a convenience function which combines createSceneText with addChild!
90557`\spad{addSceneTransform(n,{} tran)} is a convenience function which combines createSceneTransform with addChild!
90623`\spad{addSceneUse(n,{} nam)} is a convenience function which combines createSceneUse with addChild!
90675`extend reconstructor adding zeros at specified positions.
90751`\spad{addWarning s} is an internal function that adds \spad{s},{} together with an indication of the current testcase and the current testsuite to the list of warnings.
90809`\spad{addWArrow!(s,{} name,{} n1,{} n2,{} w)} adds a weighted arrow to the graph \spad{s},{} where \spad{name} is \spad{name} of the arrow,{} \spad{w} is weight of the arrow,{} \spad{n1} is starting point of the arrow,{} \spad{n2} is endpoint of the arrow.
90909`\spad{adjacencyMatrix(s)} returns an \spad{n} by \spad{n} matrix A,{} where \spad{n} is the number of vertices in the graph. If there is an edge from a vertex \spad{x} to a vertex \spad{y},{} then the element ax,{} \spad{y} is 1 (or in general the number of xy edges),{} otherwise it is 0. In computing,{} this matrix makes it easy to find subgraphs,{} and to reverse a directed graph.
91122`\spad{adjoint(p)} returns the adjoint of operator \spad{p}.
91261`\spad{adjoint(a)} returns the adjoint operator of a.
91338`\spad{adjoint(op)} returns the adjoint of the operator \spad{op}.
91411`\spad{adjoint(m)} returns the ajoint matrix of \spad{m} (\spadignore{i.e.} the matrix \spad{n} such that \spad{m*n} = determinant(\spad{m})*id) and the detrminant of \spad{m}.
91590`\spad{adjoint(op1,{} op2)} sets the adjoint of \spad{op1} to be \spad{op2}. \spad{op1} must be a basic operator
91666`\spad{airyAi(x)} returns the Airy \spad{Ai} function applied to \spad{x}
91725`\spad{airyAi(x)} is the Airy function \spad{\spad{Ai}(x)}.
91779`\spad{airyAi(x)} is the Airy function \spad{\spad{Ai}(x)}. This function satisfies the differential equation: \indented{2}{\spad{\spad{Ai}''(x) - x * \spad{Ai}(x) = 0}.}
91873`\spad{airyAi(x)} is the Airy function \spad{\spad{Ai}(x)}. This function satisfies the differential equation: \indented{2}{\spad{\spad{Ai}''(x) - x * \spad{Ai}(x) = 0}.}
91949`\spad{airyAiPrime(x)} returns the derivative of Airy \spad{Ai} function applied to \spad{x}
92013`\spad{airyAiPrime(x)} is the derivative of the Airy function \spad{\spad{Ai}(x)}.
92072`\spad{airyBi(x)} returns the Airy \spad{Bi} function applied to \spad{x}
92131`\spad{airyBi(x)} is the Airy function \spad{\spad{Bi}(x)}.
92185`\spad{airyBi(x)} is the Airy function \spad{\spad{Bi}(x)}. This function satisfies the differential equation: \indented{2}{\spad{\spad{Bi}''(x) - x * \spad{Bi}(x) = 0}.}
92279`\spad{airyBi(x)} is the Airy function \spad{\spad{Bi}(x)}. This function satisfies the differential equation: \indented{2}{\spad{\spad{Bi}''(x) - x * \spad{Bi}(x) = 0}.}
92355`\spad{airyBiPrime(x)} returns the derivative of Airy \spad{Bi} function applied to \spad{x}
92419`airyBiPrime is the derivative of the Airy function \spad{\spad{Bi}(x)}.
92478`\spad{Aleph(n)} provides the named (infinite) cardinal number.
94568`\spad{algDepHP(list,{} options)} returns a specification for Hermite-Pade approximation looking for 
94568`--algebraic dependencies
98884`\spad{algDsolve(op,{} lg)} is a parametric version of algDsolve(\spad{op},{} \spad{g})
99063`\spad{algDsolve(op,{} g)} returns \spad{["failed",{} []]} if the equation \spad{op y = g} has no solution in \spad{R}. Otherwise,{} it returns \spad{[f,{} [y1,{} ...,{} ym]]} where \spad{f} is a particular rational solution and the \spad{y_i's} form a basis for the solutions in \spad{R} of the homogeneous equation.
99336`\spad{algebraic?(a)} tests whether an element \spad{a} is algebraic with respect to the ground field \spad{F}.
99462`\spad{algebraic?(v,{} ts)} returns \spad{true} iff \spad{v} is the main variable of some polynomial in \spad{ts}.
99622`\spad{algebraicCoefficients?(p,{} ts)} returns \spad{true} iff every variable of \spad{p} which is not the main one of \spad{p} is algebraic \spad{w}.\spad{r}.\spad{t}. \spad{ts}.
100188`\spad{algebraicGcd(x,{} y,{} lm,{} lp,{} v,{} la)} computes \spad{gcd} of \spad{x} and \spad{y} modulo polynomials in \spad{lm}. la is list of algebraic parameters,{} \spad{lp} is a list of transcendental parameters,{} \spad{v} is main variable.
100327`\spad{algebraicOf(char)} is the external number
100465`\spad{algebraicSort(lts)} sorts \spad{lts} \spad{w}.\spad{r}.\spad{t} \spadopFrom{supDimElseRittWu?}{QuasiComponentPackage}.
100548`\spad{algebraicSort(lts)} sorts \spad{lts} \spad{w}.\spad{r}.\spad{t} \spadopFrom{supDimElseRittWu}{QuasiComponentPackage}.
100716`\spad{algebraicVariables(ts)} returns the decreasingly sorted list of the main variables of the polynomials of \spad{ts}.
100794`\spad{algextint
100794`--(der,{} ext,{} rde,{} csolve,{} [g1,{} ...,{} gn])} returns a basis of solutions of the homogeneous system \spad{h' + c1*g1 + ... + cn*gn = 0}. Argument \spad{ext} is an extended integration function on \spad{F},{} \spad{rde} is RDE solver,{} \spad{csolve} is linear solver over constants.
101286`\spad{algextint(x,{} y,{} d,{} ext,{} rde,{} csolve,{} [g1,{} ...,{} gn])} returns \spad{[h,{} [c1,{} ...,{} cn]]} such that \spad{f = dh/dx + sum(\spad{ci} \spad{gi})} and dci/dx = 0,{} if such \spad{[h,{} [c1,{} ...,{} cn]]} exist,{} "failed" otherwise.
101798`\spad{algextint_base(der,{} csolve,{} [g1,{} ...,{} gn])} is like algextint(\spad{der},{} ext,{} rde,{} \spad{csolve},{} [\spad{g1},{} ...,{} \spad{gn}]),{} but assumes that field is algebraic extension of rational functions and that \spad{gi}-\spad{s} have no poles at infinity.
101999`\spad{algextint_base(x,{} y,{} d,{} csolve,{} [g1,{} ...,{} gn])} is like algextint but assumes that \spad{y} and \spad{gi}-\spad{s} are purely algebraic
102218`\spad{algint(f,{} x,{} y,{} d)} returns the integral of \spad{f(x,{} y)dx} where \spad{y} is an algebraic function of \spad{x}; \spad{d} is the derivation to use on \spad{k[x]}.
102374`\spad{algintegrate(f,{} d)} integrates \spad{f} with respect to the derivation \spad{d}.
102471`\spad{alg_reduce0(x,{} m,{} lv,{} z)} performs single reduction step.
102663`\spad{alg_reduce(x,{} lm,{} lv,{} lz)} reduces \spad{x} modulo elements of \spad{lm}.
102939`\spad{alg_split_roots(lf,{} r1,{} r2)} splits each \spad{f} in \spad{lf} into linear combination of product of powers of \spad{r1} and \spad{r2} which must be independent roots.
103193`\spad{algSplitSimple(f,{} D)} returns \spad{[h,{} d,{} d',{} g]} such that \spad{f=h/d},{} \spad{h} is integral at all the normal places \spad{w}.\spad{r}.\spad{t}. \spad{D},{} \spad{d' = Dd},{} \spad{g = gcd(d,{} discriminant())} and \spad{D} is the derivation to use. \spad{f} must have at most simple finite poles.
103434`\spad{algtower(f)} is algtower([\spad{f}])
103518`\spad{algtower([f1,{} ...,{} fn])} returns list of kernels \spad{[ak1,{} ...,{} akl]} such that each toplevel algebraic kernel in one of \spad{f1},{} ...,{} \spad{fn} or in arguments of \spad{ak1},{} ...,{} akl is one of \spad{ak1},{} ...,{} akl.
103608`\spad{alg_trial_division(x,{} y,{} lm,{} lv,{} lz)} checks if \spad{x} is divisible by \spad{y} in algebraic extension defined by \spad{lm}. \spad{lz} is list of algebraic variables,{} \spad{lv} is list of independent (polynomial) variables. Other variables serve as parameters.
103827`\spad{aLinear(f,{} g)} \undocumented
103890`\spad{allDegrees returns} whether all possibilities of the degree vector should be tried,{} the default being \spad{false}.
103966`\spad{allDegrees(d)} specifies whether all possibilities of the degree vector - taking into account maxDegree - should be tried. This is mainly interesting for rational interpolation. This option is expressed in the form \spad{allDegrees == d}.
104017`\spad{allIndices(A)} returns all indices used for enumerating the columns of the matrix \spad{A}.
104081`\spad{allRepeated(ind)} returns a list of all possible realizations of a given multi-index as repeated index.
104181`\spad{allRepeated(ind)} returns a list of all possible realizations of a given multi-index as repeated index.
104767`\spad{allRootsOf(pol)} creates all the roots of \spad{pol} naming each uniquely
104835`\spad{allRootsOf(pol)} creates all the roots of \spad{pol} naming each uniquely
104918`\spad{allRootsOf(pol)} creates all the roots of \spad{pol} naming each uniquely
104991`\spad{allRootsOf(pol)} creates all the roots of \spad{pol} naming each uniquely
105075`\spad{allRootsOf(pol)} creates all the roots of \spad{pol} naming each uniquely
105174`\spad{allRootsOf(pol)} creates all the roots of \spad{pol} naming each uniquely
105263`\spad{allRootsOf(pol)} creates all the roots of \spad{pol} in the Real Closure,{} assumed in order.
105359`\spad{allSimpleCells(lp,{} sym)} returns decomposition into cells such that each \spad{p} in \spad{lp} has constant sign on each member of decomposition
105450`\spad{allSimpleCells(p,{} sym)} is allSimpleCells([\spad{p}],{} \spad{sym})
105535`\spad{alpha(q,{} beta)} computes the Cartan characters for a differential equation of order \spad{q} and with characters \spad{beta}.
105649`\spad{alphabetic()} returns the class of all characters for which \spadfunFrom{alphabetic?}{Character} is \spad{true}.
105696`\spad{alphabetic?(c)} tests if \spad{c} is a letter,{} \spadignore{i.e.} one of a..\spad{z} or A..\spad{Z}.
105746`\spad{alphaHilbert(hp)} computes the Cartan characters for the Hilbert polynomial \spad{hp}.
105869`\spad{alphanumeric()} returns the class of all characters for which \spadfunFrom{alphanumeric?}{Character} is \spad{true}.
105918`\spad{alphanumeric?(c)} tests if \spad{c} is either a letter or number,{} \spadignore{i.e.} one of 0..9,{} a..\spad{z} or A..\spad{Z}.
105970`\spad{alternating n} is the cycle index of the \indented{1}{alternating group of degree \spad{n}.}
106062`\spad{alternatingGroup(\spad{li})} constructs the alternating group acting on the integers in the list {\em \spad{li}},{} generators are in general the {\em n-2}-cycle {\em (\spad{li}.3,{} ...,{} \spad{li}.n)} and the 3-cycle {\em (\spad{li}.1,{} \spad{li}.2,{} \spad{li}.3)},{} if \spad{n} is odd and product of the 2-cycle {\em (\spad{li}.1,{} \spad{li}.2)} with {\em n-2}-cycle {\em (\spad{li}.3,{} ...,{}
106062`-- \spad{li}.n)} and the 3-cycle {\em (\spad{li}.1,{} \spad{li}.2,{} \spad{li}.3)},{} if \spad{n} is even. Note: duplicates in the list will be removed.
106161`\spad{alternatingGroup(n)} constructs the alternating group {\em An} acting on the integers 1,{} ...,{} \spad{n},{} generators are in general the {\em n-2}-cycle {\em (3,{} ...,{} n)} and the 3-cycle {\em (1,{} 2,{} 3)} if \spad{n} is odd and the product of the 2-cycle {\em (1,{} 2)} with {\em n-2}-cycle {\em (3,{} ...,{} n)} and the 3-cycle {\em (1,{} 2,{} 3)} if \spad{n} is even.
106262`\spad{alternative?()} tests if \spad{2*associator(a,{} a,{} b) = 0 = 2*associator(a,{} b,{} b)} for all \spad{a},{} \spad{b} in the algebra. Note: we only can test this; in general we don\spad{'t} know whether \spad{2*a=0} implies \spad{a=0}.
106339`\spad{alternative?()} tests if \spad{2*associator(a,{} a,{} b) = 0 = 2*associator(a,{} b,{} b)} for all \spad{a},{} \spad{b} in the algebra. Note: we only can test this; in general we don\spad{'t} know whether \spad{2*a=0} implies \spad{a=0}.
106413`\spad{An(x)} \undocumented
106462`\spad{analyseSymbol(symb)} computes the multiplicative variables of the symbol \spad{symb}.
106642`\spad{And(n,{} m)} returns the bit-by-bit logical {\em And} of \spad{n} and \spad{m}.
106688`\spad{f and g} creates the equivalent infix form.
106729`\spad{AND(x,{} y)} returns the \spadtype{Switch} expression representing \spad{x and y}.
106938`\spad{a and b} returns the logical {\em and} of bit aggregates \spad{a} and \spad{b}.
106981`\spad{a and b} returns the logical {\em and} of Boolean \spad{a} and \spad{b}.
107019`\spad{And(n,{} m)} returns the bit-by-bit logical {\em and} of the single integers \spad{n} and \spad{m}.
107063`\spad{angerJ(v,{} z)} is the Anger \spad{J} function
107124`\spad{angerJ(v,{} z)} is the Anger \spad{J} function.
107276`\spad{annihilate?(x,{}y)} holds when the product of \spad{x} and \spad{y} is \spad{0}.
107323`\spad{ansatz()} returns a general ansatz for a symmetry generator.
107422`\spad{antiAssociative?()} tests if multiplication in algebra is anti-associative,{} \spadignore{i.e.} \spad{(a*b)*c + a*(b*c) = 0} for all \spad{a},{} \spad{b},{} \spad{c} in the algebra.
107503`\spad{antiAssociative?()} tests if multiplication in algebra is anti-associative,{} \spadignore{i.e.} \spad{(a*b)*c + a*(b*c) = 0} for all \spad{a},{} \spad{b},{} \spad{c} in the algebra.
107581`\spad{antiCommutative?()} tests if \spad{a*a = 0} for all \spad{a} in the algebra. Note: this implies \spad{a*b + b*a = 0} for all \spad{a} and \spad{b}.
107662`\spad{antiCommutative?()} tests if \spad{a*a = 0} for all \spad{a} in the algebra. Note: this implies \spad{a*b + b*a = 0} for all \spad{a} and \spad{b}.
107740`\spad{antiCommutator(a,{} b)} returns \spad{a*b+b*a}.
107862`\spad{anticoord }\undocumented
108048`\spad{antipode(x)} computes the antipode of an element \spad{x}.
108246`\spad{antisymmetric?(m)} returns \spad{true} if the matrix \spad{m} is square and antisymmetric (\spadignore{i.e.} \spad{m[i,{} j] = -m[j,{} i]} for all \spad{i} and \spad{j}) and \spad{false} otherwise.
108334`\spad{antisymmetric?(m)} returns \spad{true} if the matrix \spad{m} is square and antisymmetric (\spadignore{i.e.} \spad{m[i,{} j] = -m[j,{} i]} for all \spad{i} and \spad{j}) and \spad{false} otherwise.
108437`\spad{antisymmetric?(m)} returns \spad{true} if the matrix \spad{m} is square and antisymmetric (\spadignore{i.e.} \spad{m[i,{} j] = -m[j,{} i]} for all \spad{i} and \spad{j}) and \spad{false} otherwise.
108521`\spad{antisymmetricTensors(la,{} n)} applies to each \spad{m}-by-\spad{m} square matrix in the list {\em la} the irreducible,{} polynomial representation of the general linear group {\em GLm} which corresponds to the partition {\em (1,{} 1,{} ...,{} 1,{} 0,{} 0,{} ...,{} 0)} of \spad{n}. Error: if \spad{n} is greater than \spad{m}. Note: this corresponds to the symmetriz
108521`--ation of the representation with the sign representation of the symmetric group {\em Sn}. The carrier spaces of the representation are the antisymmetric tensors of the \spad{n}-fold tensor product.
108655`\spad{antisymmetricTensors(a,{} n)} applies to the square matrix {\em a} the irreducible,{} polynomial representation of the general linear group {\em GLm},{} where \spad{m} is the number of rows of {\em a},{} which corresponds to the partition {\em (1,{} 1,{} ...,{} 1,{} 0,{} 0,{} ...,{} 0)} of \spad{n}. Error: if \spad{n} is greater than \spad{m}. Note: this corresponds to the sym
108655`--metrization of the representation with the sign representation of the symmetric group {\em Sn}. The carrier spaces of the representation are the antisymmetric tensors of the \spad{n}-fold tensor product.
109235`\spad{any?(p,{} u)} tests if \spad{p(x)} is \spad{true} for any element \spad{x} of \spad{u}. Note: for collections,{} \spad{any?(p,{} u) = reduce(or,{} map(f,{} u),{} false,{} true)}. However,{} \spad{any?(p,{} u)} returns as soon as it finds an element for which \spad{p} gives \spad{true}.
109328`\spad{any(type,{} object)} is a technical function for creating an object of \spadtype{Any}. Arugment \spad{type} is a \spadgloss{LISP} form for the \spad{type} of \spad{object}.
109373`\spad{append(u1,{} u2)} appends the elements of list \spad{u1} onto the front of list \spad{u2}. This new list and \spad{u2} will share some structure.
109414`\spad{appendPoint(\spad{gi},{} pt)} appends the point \spad{pt} to the end of the list of points component for the graph,{} \spad{\spad{gi}},{} which is of the domain \spadtype{GraphImage}.
109481`\spad{appendRow!(A,{} r)} appends the row \spad{r} at the end of the matrix \spad{A}.
109582`\spad{apply '}function' represented by this graph to vertex index 'a'
109663`\spad{elt(mm,{} \spad{pi})} returns the product of the entries indexed by the integer partition \spad{pi} (as in partitionend moments)
109787`\spad{apply(m,{} a)} defines a left operation of \spad{n} by \spad{n} matrices where \spad{n} is the rank of the algebra in terms of matrix-vector multiplication,{} this is a substitute for a left module structure. Error: if shape of matrix doesn\spad{'t} fit.
109857`\spad{apply(p,{} d)} computes the distribution of the random variable \spad{p(X)}\$ where \spad{X} has distribution \spad{d}.
109955`\spad{apply '}function' represented by this graph to vertex index 'a'
110060`\spad{apply(p,{} f,{} m)} returns \spad{p(m)} where the action is given by \spad{x m = f(m)}. \spad{f} must be an \spad{R}-pseudo linear map on \spad{M}.
110133`\spad{apply(p,{} c,{} m)} returns \spad{p(m)} where the action is given by \spad{x m = c sigma(m) + delta(m)}.
110201`\spad{apply(p,{} c,{} m,{} sigma,{} delta)} returns \spad{p(m)} where the action is given by \spad{x m = c sigma(m) + delta(m)}.
110410`\spad{applyQuote(foo,{} x)} returns \spad{'foo(x)}.
110468`\spad{applyQuote(foo,{} [x1,{} ...,{} xn])} returns \spad{'foo(x1,{} ...,{} xn)}.
110588`\spad{applyQuote(foo,{} x,{} y)} returns \spad{'foo(x,{} y)}.
110707`\spad{applyQuote(foo,{} x,{} y,{} z)} returns \spad{'foo(x,{} y,{} z)}.
110831`\spad{applyQuote(foo,{} x,{} y,{} z,{} t)} returns \spad{'foo(x,{} y,{} z,{} t)}.
110898`\spad{applyRules([r1,{} ...,{} rn],{} expr)} applies the rules \spad{r1},{} ...,{} \spad{rn} to \spad{f} an unlimited number of times,{} \spadignore{i.e.} until none of \spad{r1},{} ...,{} \spad{rn} is applicable to the expression.
110979`\spad{applyRules([r1,{} ...,{} rn],{} expr,{} n)} applies the rules \spad{r1},{} ...,{} \spad{rn} to \spad{f} a most \spad{n} times.
111076`\spad{apply_taylor(ts,{} s)} applies Taylor series with coefficients \spad{ts} to \spad{s},{} that is computes infinite sum \spad{ts}(0) + \spad{ts}(1)\spad{*s} + \spad{ts}(2)\spad{*s^2} + ... Note: \spad{s} must be of positive order
111178`\spad{apply_taylor(g,{} f)} applies \spad{g} to \spad{f}
111263`\spad{applyTaylor(g,{} f)} applies \spad{g} to \spad{f}
111354`\spad{approximants(x)} returns the stream of approximants of the continued fraction \spadvar{\spad{x}}. If the continued fraction is finite,{} then the stream will be infinite and periodic with period 1.
111506`\spad{approximate(x,{} n)} returns a rational number \spad{y} such that \spad{y = x (mod p^n)}.
111668`\spad{approximate(n,{} p)} gives an approximation of \spad{n} that has precision \spad{p}
111737`\spad{approximate(f)} returns a truncated power series with the series variable viewed as an element of the coefficient domain.
111907`\spad{approximate(x,{} n)} returns an integer \spad{y} such that \spad{y = x (mod p^n)} when \spad{n} is positive,{} and 0 otherwise.
111979`\spad{approximate(term,{} root,{} prec)} gives an approximation of \spad{term} over \spad{root} with precision \spad{prec}
112088`\spad{approxRoot(n,{} r)} returns an approximation \spad{x} to \spad{n^(1/r)} such that \spad{-1 < x - n^(1/r) < 1}
112158`\spad{approxSqrt(n)} returns an approximation \spad{x} to \spad{sqrt(n)} such that \spad{-1 < x - sqrt(n) < 1}. Compute an approximation \spad{s} to \spad{sqrt(n)} such that \indented{10}{\spad{-1 < s - sqrt(n) < 1}} A variable precision Newton iteration is used. The running time is \spad{O( log(n)^2 )}.
112206`\spad{aQuadratic(f,{} g,{} h)} \undocumented
112274`\spad{aQuartic(f,{} g,{} h,{} i,{} k)} \undocumented
112344`\spad{arbFunctions(q,{} j,{} cc)} uses the Cartan characters \spad{cc} to compute the number of arbitrary functions of differentiation order \spad{j} in the general solution of a differential equation of order \spad{q}.
112462`\spad{arcsineDistribution(a)} produces the arcsine distribution of variance \spad{a}.
112573`\spad{areEquivalent?(aG0,{} aG1)} calls {\em areEquivalent?(aG0,{} aG1,{} true,{} 25)}. Note: the choice of 25 was rather arbitrary.
112685`\spad{areEquivalent?(aG0,{} aG1,{} numberOfTries)} calls {\em areEquivalent?(aG0,{} aG1,{} true,{} 25)}. Note: the choice of 25 was rather arbitrary.
112805`\spad{areEquivalent?(aG0,{} aG1,{} randomelements,{} numberOfTries)} tests whether the two lists of matrices,{} all assumed of same square shape,{} can be simultaneously conjugated by a non-singular matrix. If these matrices represent the same group generators,{} the representations are equivalent. The algorithm tries {\em numberOfTries} times to create elements in the generat
112805`--ed algebras in the same fashion. If their ranks differ,{} they are not equivalent. If an isomorphism is assumed,{} then the kernel of an element of the first algebra is mapped to the kernel of the corresponding element in the second algebra. Now consider the one-dimensional ones. If they generate the whole space (\spadignore{e.g.} irreducibility !) we use {\em standardBasisOfCyclicSubmodule} to create the only possible transition matrix. The method checks whether the matrix conjugates all corr
112805`--esponding matrices from {\em aGi}. The way to choose the singular matrices is as in {\em meatAxe}. If the two representations are equivalent,{} this routine returns the transformation matrix {\em TM} with {\em aG0.i * TM = TM * aG1.i} for all \spad{i}. If the representations are not equivalent,{} a small 0-matrix is returned. Note: the case with different sets of group generators cannot be handled.
112933`\spad{arg1(a,{} c)} selects its first argument.
112995`\spad{arg2(a,{} c)} selects its second argument.
113057`\spad{argscript(s,{} [a1,{} ...,{} an])} returns \spad{s} arg-scripted by \spad{[a1,{} ...,{} an]}.
113114`\spad{argument(x)} returns the argument of a given sin/cos expressions
113165`\spad{argument(op(a1,{} ...,{} an))} returns \spad{[a1,{} ...,{} an]}.
113259`\spad{argument(x)} returns the angle made by (0,{} 1) and (0,{} \spad{x}).
113346`\spad{argumentList!(l)} declares that the argument list for the current subprogram in the global symbol table is \spad{l}.
113410`\spad{argumentList!(f,{} l)} declares that the argument list for subprogram \spad{f} in the global symbol table is \spad{l}.
113481`\spad{argumentList!(f,{} l,{} tab)} declares that the argument list for subprogram \spad{f} in symbol table tab is \spad{l}.
113555`\spad{argumentListOf(f,{} tab)} returns the argument list of \spad{f}
113625`\spad{arguments(f)} gives arguments of form \spad{f}. Valid only when atom?(\spad{f}) is \spad{false}
113696`\spad{arity(op)} returns \spad{n} if \spad{op} is \spad{n}-ary,{} and "failed" if \spad{op} has arbitrary arity.
113771`\spad{aromberg(fn,{} a,{} b,{} epsrel,{} epsabs,{} nmin,{} nmax,{} nint)} uses the adaptive romberg method to numerically integrate function \spad{fn} over the closed interval from \spad{a} to \spad{b},{} with relative accuracy \spad{epsrel} and absolute accuracy \spad{epsabs},{} with the refinement levels for convergence checking 
113771`--vary from \spad{nmin} to \spad{nmax},{} and where \spad{nint} is the number of independent intervals to apply the integrator. The value returned is a record containing the value of the integral,{} the estimate of the error in the computation,{} the total number of function evaluations,{} and either a boolean value which is \spad{true} if the integral was computed within the user specified error criterion. See \spadtype{NumericalQuadrature} for details.
113945`\spad{arrayStack([x,{} y,{} ...,{} z])} creates an array stack with first (top) element \spad{x},{} second element \spad{y},{} ...,{} and last element \spad{z}.
113998`\spad{arrowName(s,{} a,{} b)} retrieves the name of arrow a-\spad{>b} if it does not exist then return \spad{"?"}
114175`index of all arrows leading to a given arrow
114362`\spad{arrowsFromNode(s,{} a)} gives list of all arrows leading to a given node
114547`arrowsToArrow: (\spad{s:} \%,{} a: NNI) returns index of all arrows leading from a given arrow
114730`\spad{arrowsToNode(s,{} a)} gives list of all arrows leading from a given node
114911`\spad{asec(x)} applies the inverse secant operator to \spad{x}
115080`\spad{asec(st)} computes arcsecant of a power series \spad{st}.
115164`\spad{asec(st)} computes arcsecant of a power series \spad{st}.
115262`\spad{asec(z)} returns the arc-secant of Laurent series \spad{z}.
115349`\spad{asec(z)} returns the arc-secant of a Puiseux series \spad{z}.
115445`\spad{asec(x)} returns the arc-secant of \spad{x}.
115506`\spad{asech(x)} applies the inverse hyperbolic secant operator to \spad{x}
115676`\spad{asech(st)} computes the inverse hyperbolic secant of a power series \spad{st}.
115761`\spad{asech(st)} computes the inverse hyperbolic secant of a power series \spad{st}.
115860`\spad{asech(z)} returns the inverse hyperbolic secant of Laurent series \spad{z}.
115948`\spad{asech(z)} returns the inverse hyperbolic secant of a Puiseux series \spad{z}.
116045`\spad{asech(x)} returns the hyperbolic arc-secant of \spad{x}.
116104`\spad{asechIfCan(z)} returns asech(\spad{z}) if possible,{} and "failed" otherwise.
116186`\spad{asecIfCan(z)} returns asec(\spad{z}) if possible,{} and "failed" otherwise.
116267`\spad{asimpson(fn,{} a,{} b,{} epsrel,{} epsabs,{} nmin,{} nmax,{} nint)} uses the adaptive simpson method to numerically integrate function \spad{fn} over the closed interval from \spad{a} to \spad{b},{} with relative accuracy \spad{epsrel} and absolute accuracy \spad{epsabs},{} with the refinement levels for convergence checking 
116267`--vary from \spad{nmin} to \spad{nmax},{} and where \spad{nint} is the number of independent intervals to apply the integrator. The value returned is a record containing the value of the integral,{} the estimate of the error in the computation,{} the total number of function evaluations,{} and either a boolean value which is \spad{true} if the integral was computed within the user specified error criterion. See \spadtype{NumericalQuadrature} for details.
116441`\spad{asin(x)} represents the Fortran intrinsic function ASIN
116522`\spad{asin(x)} applies the inverse sine operator to \spad{x}
116732`\spad{asin(st)} computes arcsine of a power series \spad{st}.
116816`\spad{asin(st)} computes arcsine of a power series \spad{st}.
116914`\spad{asin(z)} returns the arc-sine of Laurent series \spad{z}.
117001`\spad{asin(z)} returns the arc-sine of a Puiseux series \spad{z}.
117097`\spad{asin(x)} returns the arc-sine of \spad{x}. When evaluated into some subset of the complex numbers,{} one branch cut for asin lies along the negative real axis to the left of \spad{-1} (inclusive),{} continuous with the upper half plane,{} the other along the positive real axis to the right of 1 (inclusive),{} continuous with the lower half plane.
117158`\spad{asinh(x)} applies the inverse hyperbolic sine operator to \spad{x}
117372`\spad{asinh(st)} computes the inverse hyperbolic sine of a power series \spad{st}.
117457`\spad{asinh(st)} computes the inverse hyperbolic sine of a power series \spad{st}.
117556`\spad{asinh(z)} returns the inverse hyperbolic sine of Laurent series \spad{z}.
117644`\spad{asinh(z)} returns the inverse hyperbolic sine of a Puiseux series \spad{z}.
117741`\spad{asinh(x)} returns the hyperbolic arc-sine of \spad{x}.
117800`\spad{asinhIfCan(z)} returns asinh(\spad{z}) if possible,{} and "failed" otherwise.
117882`\spad{asinIfCan(z)} returns asin(\spad{z}) if possible,{} and "failed" otherwise.
117963`\spad{assert(op,{} s)} attaches property \spad{s} to \spad{op}. Argument \spad{op} is modified "in place",{} \spadignore{i.e.} no copy is made.
118014`\spad{assign(f,{} g)} creates a form for the assignment \spad{f := g}.
118058`\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.
118131`\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.
118195`\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.
118261`\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.
118334`\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.
118405`\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.
118478`\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.
118559`\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.
118631`\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.
118705`\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.
118786`\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.
118865`\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.
118946`\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.
119015`\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.
119082`\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.
119151`\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.
119204`\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.
119285`\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.
119357`\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.
119431`\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.
119512`\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.
119591`\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.
119672`\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.
119741`\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.
119808`\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.
119877`\spad{assign(x,{} l,{} y)} creates a representation of the assignment of \spad{y} to the \spad{l}\spad{'}th element of array \spad{x} (\spad{l} is a list of indices).
119976`\spad{assign(x,{} l,{} y)} creates a representation of the assignment of \spad{y} to the \spad{l}\spad{'}th element of array \spad{x} (\spad{l} is a list of indices).
120066`\spad{assign(x,{} l,{} y)} creates a representation of the assignment of \spad{y} to the \spad{l}\spad{'}th element of array \spad{x} (\spad{l} is a list of indices).
120158`\spad{assign(x,{} l,{} y)} creates a representation of the assignment of \spad{y} to the \spad{l}\spad{'}th element of array \spad{x} (\spad{l} is a list of indices).
120257`\spad{assign(x,{} l,{} y)} creates a representation of the assignment of \spad{y} to the \spad{l}\spad{'}th element of array \spad{x} (\spad{l} is a list of indices).
120354`\spad{assign(x,{} l,{} y)} creates a representation of the assignment of \spad{y} to the \spad{l}\spad{'}th element of array \spad{x} (\spad{l} is a list of indices).
120453`\spad{assoc(k,{} u)} returns the element \spad{x} in association list \spad{u} stored with key \spad{k},{} or "failed" if \spad{u} has no key \spad{k}.
120563`\spad{associatedEquations(op,{} m)} returns \spad{[w,{} eq,{} lw,{} lop]} such that \spad{eq(w) = 0} where \spad{w} is the given minor,{} and \spad{lw_i = lop_i(w)} for all the other minors.
120743`\spad{associatedSystem(op,{} m)} returns \spad{[M,{} w]} such that the \spad{m}-th associated equation system to \spad{L} is \spad{w' = M w}.
120973`\spad{associates?(x,{} y)} tests whether \spad{x} and \spad{y} are associates,{} \spadignore{i.e.} differ by a unit factor.
121027`\spad{associative?()} tests if multiplication in algebra is associative.
121104`\spad{associative?()} tests if multiplication in algebra is associative.
121231`\spad{associator(a,{} b,{} c)} returns \spad{(a*b)*c-a*(b*c)}.
121289`\spad{associatorDependence()} looks for the associator identities,{} \spadignore{i.e.} finds a basis of the solutions of the linear combinations of the six permutations of \spad{associator(a,{} b,{} c)} which yield 0,{} for all \spad{a},{} \spad{b},{} \spad{c} in the algebra. The order of the permutations is \spad{123 231 312 132 321 213}.
121382`\spad{associatorDependence()} looks for the associator identities,{} \spadignore{i.e.} finds a basis of the solutions of the linear combinations of the six permutations of \spad{associator(a,{} b,{} c)} which yield 0,{} for all \spad{a},{} \spad{b},{} \spad{c} in the algebra. The order of the permutations is \spad{123 231 312 132 321 213}.
121599`\spad{atan(x)} represents the Fortran intrinsic function ATAN
121680`\spad{atan(x)} applies the inverse tangent operator to \spad{x}
121834`\spad{atan(st)} computes arctangent of a power series \spad{st}.
121918`\spad{atan(st)} computes arctangent of a power series \spad{st}.
122016`\spad{atan(z)} returns the arc-tangent of Laurent series \spad{z}.
122103`\spad{atan(z)} returns the arc-tangent of a Puiseux series \spad{z}.
122199`\spad{atan(x)} returns the arc-tangent of \spad{x}. When evaluated into some subset of the complex numbers,{} one branch cut for atan lies along the positive imaginary axis above \%\spad{i} (exclusive),{} continuous with the left half plane,{} the other along the negative imaginary axis below -\%\spad{i} (exclusive) continuous with the right half plane. The domain does not contain \%\spad{i} and -\%\spad{i}.
122260`\spad{atan(x,{} y)} computes the arc tangent from \spad{x} with phase \spad{y}.
122303`\spad{atan(x,{} y)} computes the arc tangent from \spad{x} with phase \spad{y}.
122340`\spad{atanh(x)} applies the inverse hyperbolic tangent operator to \spad{x}
122554`\spad{atanh(st)} computes the inverse hyperbolic tangent of a power series \spad{st}.
122639`\spad{atanh(st)} computes the inverse hyperbolic tangent of a power series \spad{st}.
122738`\spad{atanh(z)} returns the inverse hyperbolic tangent of Laurent series \spad{z}.
122826`\spad{atanh(z)} returns the inverse hyperbolic tangent of a Puiseux series \spad{z}.
122923`\spad{atanh(x)} returns the hyperbolic arc-tangent of \spad{x}.
122982`\spad{atanhIfCan(z)} returns atanh(\spad{z}) if possible,{} and "failed" otherwise.
123064`\spad{atanIfCan(z)} returns atan(\spad{z}) if possible,{} and "failed" otherwise.
123145`returns \spad{true} if this is an atom,{} that is a leaf node otherwise return \spad{false} if this is a compound term
123186`returns \spad{true} if this is an atom,{} that is free or bound variable otherwise return \spad{false} if this is a compound or lambda definition
123231`returns \spad{true} if this is an atom,{} that is a leaf node otherwise return \spad{false} if this is a compound term
123284`\spad{atom?(f)} checks if form \spad{f} is atomic,{} \spad{false} means composite
123342`\spad{atom?(s)} is \spad{true} if \spad{s} is a Lisp atom.
123413`\spad{atoms(r)} returns the list of matches that match atoms (elements of the lists).
123493`\spad{atrapezoidal(fn,{} a,{} b,{} epsrel,{} epsabs,{} nmin,{} nmax,{} nint)} uses the adaptive trapezoidal method to numerically integrate function \spad{fn} over the closed interval from \spad{a} to \spad{b},{} with relative accuracy \spad{epsrel} and absolute accuracy \spad{epsabs},{} with the refinement levels for convergen
123493`--ce checking vary from \spad{nmin} to \spad{nmax},{} and where \spad{nint} is the number of independent intervals to apply the integrator. The value returned is a record containing the value of the integral,{} the estimate of the error in the computation,{} the total number of function evaluations,{} and either a boolean value which is \spad{true} if the integral was computed within the user specified error criterion. See \spadtype{NumericalQuadrature} for details.
123671`\spad{atType(f)} returns the input form corresponding to \spad{f@R}
124054`\spad{augment(lp,{} ts)} returns \spad{ts} if \spad{empty? lp},{} \spad{augment(p,{} ts)} if \spad{lp = [p]},{} otherwise \spad{augment(first lp,{} augment(rest lp,{} ts))}
124137`\spad{augment(lp,{} lts)} returns the same as \spad{concat([augment(lp,{} ts) for ts in lts])}
124226`\spad{augment(p,{} ts)} assumes that \spad{p} is a non-constant polynomial whose main variable is greater than any variable of \spad{ts}. This operation assumes also that if \spad{p} is added to \spad{ts} the resulting set,{} say \spad{ts+p},{} is a regular triangular set. Then it returns a split of Kalkbrener of \spad{ts+p}. This may not be \spad{ts+p} itself,{} if for instance \spad{ts+p} is required to be square-free.
124303`\spad{augment(p,{} lts)} returns the same as \spad{concat([augment(p,{} ts) for ts in lts])}
124386`\spad{autoReduce(sys)} tries to simplify a system by solving each equation for its leading term and substituting it into the other equations.
124624`\spad{autoReduced?(ts,{} redOp?)} returns \spad{true} iff every element of \spad{ts} is reduced \spad{w}.\spad{r}.\spad{t} to every other in the sense of \spad{redOp?}
124717`\spad{axes(v,{} s)} displays the axes of the given three-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{ThreeDimensionalViewport},{} if \spad{s} is "on",{} or does not display the axes if \spad{s} is "off".
124779`\spad{axes(v,{} n,{} c)} displays the axes of the graph in field \spad{n} of the given two-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{TwoDimensionalViewport},{} with the axes color set to the given palette color \spad{c}.
124856`\spad{axes(v,{} n,{} s)} displays the axes of the graph in field \spad{n} of the given two-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{TwoDimensionalViewport},{} if \spad{s} is "on",{} or does not display the axes if \spad{s} is "off".
124932`\spad{axesColorDefault()} returns the default color of the axes in a 2D viewport.
124995`\spad{axesColorDefault(p)} sets the default color of the axes in a 2D viewport to the palette \spad{p}.
125065`\spad{B1solve(s)} solves the system (\spad{s}.mat) \spad{z} = \spad{s}.vec for the variables given by the column indices of \spad{s}.cols in terms of the other variables and the right hand side \spad{s}.vec b
125065`--y assuming that the rank is \spad{s}.rank,{} that the system is consistent,{} with the linearly independent equations indexed by the given row indices \spad{s}.rows; the coefficients in \spad{s}.mat involving parameters are treated as polynomials. B1solve(\spad{s}) returns a particular solution to the system and a basis of the homogeneous system (\spad{s}.mat) \spad{z} = 0.
125364`\spad{back(q)} returns the element at the back of the queue. The queue \spad{q} is unchanged by this operation. Error: if \spad{q} is empty.
125409`\spad{backOldPos(genPos)} takes the result produced by \spadfunFrom{generalPosition}{PolynomialIdeal} and performs the inverse transformation,{} returning the original ideal \spad{backOldPos(generalPosition(I,{} listvar))} = \spad{I}.
125531`\spad{badNum(p)} \undocumented
125627`\spad{badNum(u)} \undocumented
125698`\spad{badValues(p)} returns the list of "bad values" for \spad{p}; \spad{p} is not allowed to match any of its "bad values".
125767`\spad{balancedBinaryTree(n,{} s)} creates a balanced binary tree with \spad{n} nodes each with value \spad{s}.
125849`\spad{balancedFactorisation(a,{} [b1,{} ...,{} bn])} returns a factorisation \spad{a = p1^e1 ... pm^em} such that each \spad{pi} is balanced with respect to \spad{[b1,{} ...,{} bm]}.
125941`\spad{balancedFactorisation(a,{} b)} returns a factorisation \spad{a = p1^e1 ... pm^em} such that each \spad{\spad{pi}} is balanced with respect to \spad{b}.
126027`\spad{bandedHessian(v,{} xlist,{} k)} computes the hessian,{} the matrix of second partial derivatives,{} of the scalar field \spad{v},{} \spad{v} a function of the variables listed in \spad{xlist},{} \spad{k} is the semi-bandwidth,{} the number of nonzero subdiagonals,{} 2*k+1 being actual bandwidth. Stores the nonzero band in lower triangle in a matrix,{} dimensions \spad{k+1} by \#xlist,{
126027`--} whose rows are the vectors formed by diagonal,{} subdiagonal,{} etc. of the real,{} full-matrix,{} hessian. (The notation conforms to LAPACK/NAG-\spad{F07} conventions.)
126140`\spad{bandedJacobian(vf,{} xlist,{} kl,{} ku)} computes the jacobian,{} the matrix of first partial derivatives,{} of the vector field \spad{vf},{} \spad{vf} a vector function of the variables listed in \spad{xlist},{} \spad{kl} is the number of nonzero subdiagonals,{} ku is the number of nonzero superdiagonals,{} \spad{kl+ku+1} being actual bandwidth. Stores the nonze
126140`--ro band in a matrix,{} dimensions \spad{kl+ku+1} by \#xlist. The upper triangle is in the top ku rows,{} the diagonal is in row \spad{ku+1},{} the lower triangle in the last \spad{kl} rows. Entries in a column in the band store correspond to entries in same column of full store. (The notation conforms to LAPACK/NAG-\spad{F07} conventions.)
126276`\spad{bandMatrix} returns multiple diagonals out of a matrix. The diagonals are put into a matrix of same shape as the original one. Positive integer arguments select upper off-diagonals,{} negative ones lower off-diagonals.
126354`\spad{bandMatrix} returns multiple diagonals out of a matrix. The diagonals are put into a matrix of same shape as the original one. Positive integer arguments select upper off-diagonals,{} negative ones lower off-diagonals.
126435`\spad{base()} returns the base of the model
126487`\spad{base()} returns the base for the operations of \spad{IntegerNumberSystem}.
126533`\spad{base()} returns the base of the \spadfunFrom{exponent}{FloatingPointSystem}.
126592`\spad{base(b)} sets the base of the model to \spad{b}
126659`\spad{base(gp)} returns a base for the group {\em gp}.
126712`\spad{baseRDEsys(f,{} g1,{} g2)} returns fractions \spad{y_1.y_2} such that \spad{(y1',{} y2') + ((0,{} -f),{} (f,{} 0)) (y1,{} y2) = (g1,{} g2)} if \spad{y_1,{}y_2} exist,{} "failed" otherwise.
126848`\spad{BasicMethod(n)} returns the factorization of integer \spad{n} by trial division
127042`\spad{basicSet(ps,{} redOp?)} returns \spad{[bs,{} ts]} where \spad{concat(bs,{} ts)} is \spad{ps} and \spad{bs} is a basic set in Wu Wen Tsun sense of \spad{ps} \spad{w}.\spad{r}.\spad{t} the reduction-test \spad{redOp?},{} if no non-zero constant polynomial lie in \spad{ps},{} otherwise \spad{"failed"} is returned.
127298`\spad{basicSet(ps,{} pred?,{} redOp?)} returns the same as \spad{basicSet(qs,{} redOp?)} where \spad{qs} consists of the polynomials of \spad{ps} satisfying property \spad{pred?}.
127489`\spad{basis()} returns a fixed basis of \% as \spad{F}-vector space.
127557`\spad{basis()} returns the fixed \spad{R}-module basis.
127612`\spad{basis()} returns the fixed \spad{R}-module basis.
127678`\spad{basis((f1,{} ...,{} fn))} returns the vector \spad{[f1,{} ...,{} fn]}.
127740`\spad{basis((f1,{} ...,{} fn))} = the vector \spad{[f1,{} ...,{} fn]}.
127806`\spad{basis LV} extracts a basis of the subspace spanned by the list of vectors \spad{LV}.
127868`\spad{basis(n)} \undocumented{} See \spadfunFrom{basis}{FiniteAlgebraicExtensionField}
127961`\spad{basis(n)} returns a fixed basis of a subfield of \% as \spad{F}-vector space.
128044`\spad{basis(va)} selects a basis from the elements of \spad{va}.
128129`\spad{basis(numberOfGens,{} maximalWeight)} generates a vector of elements of the form [left,{} weight,{} right] which represents a \spad{P}. Hall basis element for the free lie algebra on \spad{numberOfGens} generators. We only generate those basis elements of weight less than or equal to maximalWeight
128222`\spad{basisOfCenter()} returns a basis of the space of all \spad{x} of \spad{A} satisfying \spad{commutator(x,{} a) = 0} and \spad{associator(x,{} a,{} b) = associator(a,{} x,{} b) = associator(a,{} b,{} x) = 0} for all \spad{a},{} \spad{b} in \spad{A}.
128282`\spad{basisOfCentroid()} returns a basis of the centroid,{} \spadignore{i.e.} the endomorphism ring of \spad{A} considered as \spad{(A,{} A)}-bimodule.
128352`\spad{basisOfCommutingElements()} returns a basis of the space of all \spad{x} of \spad{A} satisfying \spad{0 = commutator(x,{} a)} for all \spad{a} in \spad{A}.
128423`\spad{basisOfLeftAnnihilator(a)} returns a basis of the space of all \spad{x} of \spad{A} satisfying \spad{0 = x*a}.
128493`\spad{basisOfLeftNucleus()} returns a basis of the space of all \spad{x} of \spad{A} satisfying \spad{0 = associator(x,{} a,{} b)} for all \spad{a},{} \spad{b} in \spad{A}.
128558`\spad{basisOfLeftNucloid()} returns a basis of the space of endomorphisms of \spad{A} as right module. Note: left nucloid coincides with left nucleus if \spad{A} has a unit.
128631`\spad{basisOfMiddleNucleus()} returns a basis of the space of all \spad{x} of \spad{A} satisfying \spad{0 = associator(a,{} x,{} b)} for all \spad{a},{} \spad{b} in \spad{A}.
128698`\spad{basisOfNucleus()} returns a basis of the space of all \spad{x} of \spad{A} satisfying \spad{associator(x,{} a,{} b) = associator(a,{} x,{} b) = associator(a,{} b,{} x) = 0} for all \spad{a},{} \spad{b} in \spad{A}.
128759`\spad{basisOfRightAnnihilator(a)} returns a basis of the space of all \spad{x} of \spad{A} satisfying \spad{0 = a*x}.
128830`\spad{basisOfRightNucleus()} returns a basis of the space of all \spad{x} of \spad{A} satisfying \spad{0 = associator(a,{} b,{} x)} for all \spad{a},{} \spad{b} in \spad{A}.
128896`\spad{basisOfRightNucloid()} returns a basis of the space of endomorphisms of \spad{A} as left module. Note: right nucloid coincides with right nucleus if \spad{A} has a unit.
128970`\spad{bat1(llp)} unbumps a tableau \spad{llp}. Operation \spad{bat1} is the inverse of \spad{tab1}.
129045`\spad{bat(ls)} unbumps a tableau \spad{ls}
129116`\spad{beauzamyBound(p)} returns a bound on the larger coefficient of any factor of \spad{p}.
129200`\spad{belong?(op)} is \spad{true} if \spad{op} is an algebraic operator,{} that is,{} an \spad{n}th root or implicit algebraic operator.
129270`\spad{belong?(op)} is \spad{true} if \spad{op} is a combinatorial operator.
129344`\spad{belong?(p)} returns \spad{true} if operator \spad{p} is elementary
129415`\spad{belong?(op)} is \spad{true} if \spad{op} is a special function operator.
129493`\spad{belong?(op)} checks if \spad{op} is Liouvillian
129565`\spad{belong?(op)} tests if \% accepts \spad{op} as applicable to its elements.
129694`\spad{belong?(op)} tests if \% accepts \spad{op} as applicable to its elements.
129757`\spad{bernoulli(n)} returns the \spad{n}th Bernoulli polynomial \spad{B[n](x)}. Note: Bernoulli polynomials denoted \spad{B(n,{} x)} computed by solving the differential equation \spad{differentiate(B(n,{} x),{} x) = n B(n-1,{} x)} where \spad{B(0,{} x) = 1} and initial condition comes from \spad{B(n) = B(n,{} 0)}.
129870`\spad{bernoulli(n)} returns the \spad{n}th Bernoulli number. this is \spad{B(n,{} 0)},{} where \spad{B(n,{} x)} is the \spad{n}th Bernoulli polynomial.
129952`\spad{bernoulliB(n,{} r)} returns value of the \spad{n}th Bernoulli polynomial at \spad{r}.
130074`\spad{bernoulliDistribution01(a)} produces the distribution of a projection of trace a
130156`\spad{besselI(x,{} y)} returns the besseli function applied to \spad{x} and \spad{y}
130218`\spad{besselI(v,{} z)} is the modified Bessel function of the first kind.
130276`\spad{besselI(v,{} x)} is the modified Bessel function of the first kind,{} \spad{I(v,{} x)}. This function satisfies the differential equation: \indented{2}{\spad{x^2 w''(x) + x w'(x) - (x^2+v^2)w(x) = 0}.}
130392`\spad{besselI(v,{} x)} is the modified Bessel function of the first kind,{} \spad{I(v,{} x)}. This function satisfies the differential equation: \indented{2}{\spad{x^2 w''(x) + x w'(x) - (x^2+v^2)w(x) = 0}.}
130481`\spad{besselJ(x,{} y)} returns the besselj function applied to \spad{x} and \spad{y}
130543`\spad{besselJ(v,{} z)} is the Bessel function of the first kind.
130601`\spad{besselJ(v,{} x)} is the Bessel function of the first kind,{} \spad{J(v,{} x)}. This function satisfies the differential equation: \indented{2}{\spad{x^2 w''(x) + x w'(x) + (x^2-v^2)w(x) = 0}.}
130717`\spad{besselJ(v,{} x)} is the Bessel function of the first kind,{} \spad{J(v,{} x)}. This function satisfies the differential equation: \indented{2}{\spad{x^2 w''(x) + x w'(x) + (x^2-v^2)w(x) = 0}.}
130806`\spad{besselK(x,{} y)} returns the besselk function applied to \spad{x} and \spad{y}
130868`\spad{besselK(v,{} z)} is the modified Bessel function of the second kind.
130926`\spad{besselK(v,{} x)} is the modified Bessel function of the second kind,{} \spad{K(v,{} x)}. This function satisfies the differential equation: \indented{2}{\spad{x^2 w''(x) + x w'(x) - (x^2+v^2)w(x) = 0}.} Note: The default implementation uses the relation \indented{2}{\spad{K(v,{} x) = \%pi/2*(I(-v,{} x) - I(v,{} x))/sin(v*\%\spad{pi})}} so is not valid for integer values of \spad{v}.
131042`\spad{besselK(v,{} x)} is the modified Bessel function of the second kind,{} \spad{K(v,{} x)}. This function satisfies the differential equation: \indented{2}{\spad{x^2 w''(x) + x w'(x) - (x^2+v^2)w(x) = 0}.} Note: The default implementation uses the relation \indented{2}{\spad{K(v,{} x) = \%pi/2*(I(-v,{} x) - I(v,{} x))/sin(v*\%\spad{pi})}.} so is not valid for integer values of \spad{v}.
131131`\spad{besselY(x,{} y)} returns the bessely function applied to \spad{x} and \spad{y}
131193`\spad{besselY(v,{} z)} is the Bessel function of the second kind.
131251`\spad{besselY(v,{} x)} is the Bessel function of the second kind,{} \spad{Y(v,{} x)}. This function satisfies the differential equation: \indented{2}{\spad{x^2 w''(x) + x w'(x) + (x^2-v^2)w(x) = 0}.} Note: The default implementation uses the relation \indented{2}{\spad{Y(v,{} x) = (J(v,{} x) cos(v*\%\spad{pi}) - J(-v,{} x))/sin(v*\%\spad{pi})}} so is not valid for integer values of \spad{
131251`--v}.
131367`\spad{besselY(v,{} x)} is the Bessel function of the second kind,{} \spad{Y(v,{} x)}. This function satisfies the differential equation: \indented{2}{\spad{x^2 w''(x) + x w'(x) + (x^2-v^2)w(x) = 0}.} Note: The default implementation uses the relation \indented{2}{\spad{Y(v,{} x) = (J(v,{} x) cos(v*\%\spad{pi}) - J(-v,{} x))/sin(v*\%\spad{pi})}} so is not valid for integer values of \spad{v}.
131456`\spad{Beta(x,{} y)} returns the beta function applied to \spad{x} and \spad{y}
131515`\spad{Beta(n,{} m)} \undocumented
131610`\spad{Beta(x,{} y)} is \spad{Gamma(x) * Gamma(y)/Gamma(x+y)}.
131665`\spad{Beta(x,{} y)} is the Euler beta function,{} \spad{B(x,{} y)},{} defined by \indented{2}{\spad{Beta(x,{} y) = integrate(t^(x-1)*(1-t)^(y-1),{} t=0..1)}.} This is related to \spad{Gamma(x)} by \indented{2}{\spad{Beta(x,{} y) = Gamma(x)*Gamma(y) / Gamma(x + y)}.}
131778`\spad{Beta(x,{} y)} is the Euler Beta function.
131867`\spad{Beta(x,{} y)} is the Euler beta function,{} \spad{B(x,{} y)},{} defined by \indented{2}{\spad{Beta(x,{} y) = integrate(t^(x-1)*(1-t)^(y-1),{} t=0..1)}.} This is related to \spad{Gamma(x)} by \indented{2}{\spad{Beta(x,{} y) = Gamma(x)*Gamma(y) / Gamma(x + y)}.}
131953`\spad{Beta(x,{} y)} is the Euler Beta function.
132015`\spad{bezoutDiscriminant(p)} computes the discriminant of a polynomial \spad{p} by computing the determinant of a Bezout matrix.
132107`\spad{bezoutMatrix(p,{} q)} returns the Bezout matrix for the two polynomials \spad{p} and \spad{q}.
132174`\spad{bezoutResultant(p,{} q)} computes the resultant of the two polynomials \spad{p} and \spad{q} by computing the determinant of a Bezout matrix.
132266`\spad{binary(r)} converts a rational number to a binary expansion.
132327`\spad{binary(op,{} [a1,{} ...,{} an])} returns the input form corresponding to \spad{a1 op a2 op ... op an}.
132376`\spad{binaryFunction(s)} is a local function
132464`\spad{binarySearchTree(l)} \undocumented
132529`\spad{binaryTournament(ls)} creates a binary tournament with the elements of \spad{ls} as values at the nodes.
132594`\spad{binaryTree(v)} is an non-empty binary tree with value \spad{v},{} and left and right empty.
132641`\spad{binaryTree(l,{} v,{} r)} creates a binary tree with value \spad{v} with left subtree \spad{l} and right subtree \spad{r}.
132694`if this is a lambda term then replace string name in sub-nodes with De Bruijn index
132733`\spad{binomial(n,{} m)} creates a form for the binomial coefficient of \spad{n} and \spad{m}.
132779`\spad{binomial(n,{} r)} returns the number of subsets of \spad{r} objects taken among \spad{n} objects,{} \spadignore{i.e.} \spad{n!/}(\spad{r!} * (\spad{n}-\spad{r})!).
132838`\spad{binomial(n,{} f)} \undocumented
132980`\spad{binomial(n,{} r)} returns the \spad{(n,{} r)} binomial coefficient (often denoted in the literature by \spad{C(n,{} r)}). Note: \spad{C(n,{} r) = n!/(r!(n-r)!)} where \spad{n >= r >= 0}.
133045`\spad{binomial(n,{} r)} returns the binomial coefficient \spad{C(n,{} r) = n!/(r! (n-r)!)},{} where \spad{n >= r >= 0}. This is the number of combinations of \spad{n} objects taken \spad{r} at a time.
133191`\spad{binomThmExpt(p,{} q,{} n)} returns \spad{(x+y)^n} by means of the binomial theorem trick.
133301`\spad{bipolar(a)} transforms from bipolar coordinates to Cartesian coordinates: \spad{bipolar(a)} is a function which will map the point \spad{(u,{} v)} to \spad{x = a*sinh(v)/(cosh(v)-cos(u))},{} \spad{y = a*sin(u)/(cosh(v)-cos(u))}.
133370`\spad{bipolarCylindrical(a)} transforms from bipolar cylindrical coordinates to Cartesian coordinates: \spad{bipolarCylindrical(a)} is a function which will map the point \spad{(u,{} v,{} z)} to \spad{x = a*sinh(v)/(cosh(v)-cos(u))},{} \spad{y = a*sin(u)/(cosh(v)-cos(u))},{} \spad{z}.
133450`\spad{biRank(x)} determines the number of linearly independent elements in \spad{x},{} \spad{x*bi},{} \spad{bi*x},{} \spad{bi*x*bj},{} \spad{i,{} j=1,{} ...,{} n},{} where \spad{b=[b1,{} ...,{} bn]} is a basis. Note: if \spad{A} has a unit,{} then \spadfunFrom{doubleRank}{AlgebraPackage},{} \spadfunFrom{weakBiRank}{AlgebraPackage} and \spadfunFrom{biRank}{AlgebraPackage} coincide.
133515`\spad{birth(x)} \undocumented
133611`\spad{bit?(n,{} i)} returns \spad{true} if and only if \spad{i}-th bit of \spad{n} is a 1.
133667`\spad{bitCoef(n,{} m)} returns the coefficient of 2^m in abs(\spad{n})
133728`\spad{bitLength(n)} returns the number of bits to represent abs(\spad{n})
133783`\spad{bits()} returns ceiling\spad{'s} precision in bits.
133842`\spad{bits(n)} set the \spadfunFrom{precision}{FloatingPointSystem} to \spad{n} bits.
133942`\spad{bits(n,{} b)} creates bits with \spad{n} values of \spad{b}
133999`\spad{bitTruth(n,{} m)} returns \spad{true} if coefficient of 2^m in abs(\spad{n}) is 1
134061`\spad{bivariate?(p)} returns \spad{true} iff \spad{p} involves two and only two variables.
134138`\spad{bivariatePolynomials(lp)} returns \spad{bps,{} nbps} where \spad{bps} is a list of the bivariate polynomials,{} and \spad{nbps} are the other ones.
134264`\spad{bivariateSLPEBR(lp,{} p,{} v)} implements the bivariate case of \spadfun{solveLinearPolynomialEquationByRecursion}; its implementation depends on \spad{R}
134471`\spad{blankSeparate(l)} creates the form separating the elements of \spad{l} by blanks.
134525`\spad{block(l)} creates a representation of the statements in \spad{l} as a block.
134654`\spad{blockConcat(ll)} concatenates arrays row and column wise,{} building a array from blocks. The order is row major as in \spad{matrix}.
134740`\spad{blockSplit} splits a matrix into multiple submatrices row and column wise,{} dividing a matrix into blocks.
134857`\spad{blockSplit} splits a matrix into multiple submatrices row and column wise,{} dividing a matrix into blocks.
135218`\spad{blockSplit(a,{} [n1,{}...,{}\spad{ni}],{} [m1,{}...,{}\spad{mi}])} splits a into multiple subarraus row and column wise,{} such that element at position \spad{k},{} \spad{l} has \spad{nk} rows and \spad{ml} columns. Error: if number of rows of a is different than \spad{n1} + ... + \spad{ni} or number of columns of a is different than \spad{m1} + ... + \spad{mj}
135353`\spad{blockSplit(a,{} n,{} m)} splits a into \spad{n*m} subarrays of equal size row and column wise,{} dividing a into blocks. Error: if number of rows of a is not divisible by \spad{n} or number of columns of a is not divisible by \spad{m}.
135470`\spad{blue()} returns the position of the blue hue from total hues.
135502`\spad{bombieriNorm(p)} returns quadratic Bombieri\spad{'s} norm of \spad{p}.
135579`\spad{bombieriNorm(p,{} n)} returns the \spad{n}th Bombieri\spad{'s} norm of \spad{p}.
135672`\spad{booleanConvolution(x,{} y)} returns the boolean convolution of the distributions \spad{x} and \spad{y}
135741`\spad{booleanCumulant2moment(cc)} computes the sequence of moments from the sequence of boolean cumulants \spad{cc}
135822`\spad{booleanCumulant(x,{} n)} returns the \spad{n}-th boolean cumulant of the distribution \spad{x}
135900`\spad{booleanCumulantFromJacobi(n,{} aa,{} bb)} computes the \spad{n}th Boolean cumulant from the given Jacobiparameters \spad{aa} and \spad{bb}.
135993`\spad{booleanCumulants(x)} returns the sequence of boolean cumulants of the distribution \spad{x}.
136066`\spad{bottom(x)} returns the bottom entry of each column.
136136`\spad{bottom(d)} returns the element at the bottom (back) of the dequeue.
136185`\spad{bound(n,{} m,{} q)} computes an upper bound for the number of prolongations needed to make the symbol of an equation of order \spad{q} with \spad{n} independent and \spad{m} dependent variables involutive.
136306`\spad{boundary(n,{} fontScale)} returns the boundary of a given node,{} so if this is called on the root node,{} it will return the boundary of the whole scene. There is a difficulty involving text nodes,{} that is they have a fixed font size. But we want to calculate the boundary in local coordinates,{} to do this conversion we need to know the total boundary size but that is what we are trying to calculate! To get round this contradicti
136306`--on the parameter fontScale is required since fonts are rendered at a fixed size we need a scaling factor so that we can give the boundary in our coordinate system. fontScale should be set to the full width of the diagram (not just the width of this node). If this is not known then choose an approximate value. This only affects text nodes,{} if this node,{} or its subnodes,{} do not contain a text node then its value is not significant.
136371`\spad{boundOfCauchy(p)} bounds the roots of \spad{p}
136493`\spad{box(f)} encloses \spad{f} in a box.
136617`\spad{box(f)} returns \spad{f} with a 'box' around it that prevents \spad{f} from being evaluated when operators are applied to it. For example,{} \spad{log(1)} returns 0,{} but \spad{log(box 1)} returns the formal kernel log(1).
136660`\spad{box([f1,{} ...,{} fn])} returns \spad{(f1,{} ...,{} fn)} with a 'box' around them that prevents the \spad{fi} from being evaluated when operators are applied to them,{} and makes them applicable to a unary operator. For example,{} \spad{atan(box [x,{} 2])} returns the formal kernel \spad{atan(x,{} 2)}.
136709`\spad{boxBoundary(c1,{} c2)} constructs a box boundary (\spad{n}-dimensional axis-aligned rectangle) with given parameters \spad{c1:} \spad{PT} holds minimum coordinates \spad{c2:} \spad{PT} holds maximum coordinates
136807`\spad{brace()}\$\spad{D} (otherwise written {}\$\spad{D}) creates an empty set aggregate of type \spad{D}. This form is considered obsolete. Use \spadfun{set} instead.
136850`\spad{brace(f)} creates the form enclosing \spad{f} in braces (curly brackets).
136890`\spad{brace(lf)} creates the form separating the elements of \spad{lf} by commas and encloses the result in curly brackets.
136989`\spad{brace([x,{} y,{} ...,{} z])} creates a set aggregate containing items \spad{x},{} \spad{y},{} ...,{} \spad{z}. This form is considered obsolete. Use \spadfun{set} instead.
137039`\spad{bracket(f)} creates the form enclosing \spad{f} in square brackets.
137081`\spad{bracket(lf)} creates the form separating the elements of \spad{lf} by commas and encloses the result in square brackets.
137129`\spad{branchIfCan(leq,{} ts,{} lineq,{} b1,{} b2,{} b3,{} b4,{} b5)} is an internal subroutine,{} exported only for developement.
137308`\spad{branchIfCan(leq,{} ts,{} lineq,{} b1,{} b2,{} b3,{} b4,{} b5)} is an internal subroutine,{} exported only for developement.
137497`\spad{branchPoint?(a)} tests whether \spad{x = a} is a branch point.
137570`\spad{branchPoint?(p)} tests whether \spad{p(x) = 0} is a branch point.
137644`\spad{branchPointAtInfinity?()} tests if there is a branch point at infinity.
137726`\spad{bright(c)} sets the shade of a hue,{} \spad{c},{} above dim,{} but below pastel.
137767`\spad{bright(l)} sets the font property of a list of strings,{} \spad{l},{} to bold-face type.
137832`\spad{bright(s)} sets the font property of the string \spad{s} to bold-face type.
137891`\spad{brillhartIrreducible?(p)} returns \spad{true} if \spad{p} can be shown to be irreducible by a remark of Brillhart,{} \spad{false} is inconclusive.
137960`\spad{brillhartIrreducible?(p,{} noLinears)} returns \spad{true} if \spad{p} can be shown to be irreducible by a remark of Brillhart,{} \spad{false} else. If noLinears is \spad{true},{} we are being told \spad{p} has no linear factors \spad{false} does not mean that \spad{p} is reducible.
138037`\spad{brillhartTrials()} returns the number of tests in \spadfun{brillhartIrreducible?}.
138109`\spad{brillhartTrials(n)} sets to \spad{n} the number of tests in \spadfun{brillhartIrreducible?} and returns the previous value.
138199`\spad{bringDown(f)} replaces transcendental kernels in \spad{f} by random integers. Error if \spad{f} contains algebraic kernel.
138271`\spad{bringDown(f,{} k)} is like bringDown(\spad{f}) but \spad{k} is algebraic kernel and the result is reduced modulo minimal polynomial of \spad{k}.
138381`\spad{bsolve(c,{} w,{} r,{} s,{} m)} returns a list of regimes and solutions of the system \spad{c} \spad{z} = \spad{w} for ranks at least \spad{r}; depending on the mode \
138381`--spad{m} chosen,{} it writes the output to a file given by the string \spad{s}.
138716`\spad{btwFact(p,{} sqf,{} pd,{} r)} returns the factorization of \spad{p},{} the result is a Record such that \spad{contp=}content \spad{p},{} \spad{factors=}List of irreducible factors of \spad{p} with exponent. If \spad{sqf=true} the polynomial is assumed to be square free (\spadignore{i.e.} without repeated factors). \spad{pd} is the 
138716`--\spadtype{Set} of possible degrees. \spad{r} is a lower bound for the number of factors of \spad{p}. Please do not use this function in your code because its design may change.
138884`\spad{bubbleSort!(a)} \undocumented
138951`\spad{bubbleSort!(a,{} f)} \undocumented
139016`\spad{build(r,{} i,{} e)} \undocumented
139089`\spad{BumInSepFFE(f)} is a local function,{} exported only because it has multiple conditional definitions.
139291`\spad{bumprow(cf,{} pr,{} r)} is an auxiliary function which bumps a row \spad{r} with a pair \spad{pr} using comparison function \spad{cf},{} and returns a record
139419`\spad{bumptab1(pr,{} t)} bumps a tableau \spad{t} with a pair \spad{pr} using comparison function \spadfun{<},{} returning a new tableau
139512`\spad{bumptab(cf,{} pr,{} t)} bumps a tableau \spad{t} with a pair \spad{pr} using comparison function \spad{cf},{} returning a new tableau
139619`\spad{s by n} creates a new segment in which only every \spad{n}\spad{-}th element is used.
139672`\spad{cAcos(f)} computes the arccosine of the power series \spad{f}. For use when the coefficient ring is commutative.
139776`\spad{cAcosh(f)} computes the inverse hyperbolic cosine of the power series \spad{f}. For use when the coefficient ring is commutative.
139881`\spad{cAcot(f)} computes the arccotangent of the power series \spad{f}. For use when the coefficient ring is commutative.
139985`\spad{cAcoth(f)} computes the inverse hyperbolic cotangent of the power series \spad{f}. For use when the coefficient ring is commutative.
140090`\spad{cAcsc(f)} computes the arccosecant of the power series \spad{f}. For use when the coefficient ring is commutative.
140194`\spad{cAcsch(f)} computes the inverse hyperbolic cosecant of the power series \spad{f}. For use when the coefficient ring is commutative.
140299`\spad{calcRanges(l)} \undocumented
140395`\spad{call(s)} creates a representation of a FORTRAN CALL statement
140439`\spad{canonicalBasis n} builds the canonical basis of the vector space of dimension \spad{n}.
140513`\spad{canonicalIfCan(x,{} m)} tries to divide \spad{x} by its leading coefficient modulo \spad{m}.
140613`\spad{cap(s1,{} s2)},{} introduced by Redfield,{} \indented{1}{is the scalar product of two cycle indices.}
140746`\spad{car((a1,{} ...,{} an))} returns \spad{a1}.
140880`\spad{cardinality(u)} returns the number of elements of \spad{u}. Note: \spad{cardinality(u) = \#u}.
140953`\spad{carmichaelLambda(n)} returns exponent of the multiplicative group of integers modulo \spad{n},{} that is smallest positive integer \spad{k} such that \spad{i^k rem n = 1} for all \spad{i} relatively prime to \spad{n}.
141032`\spad{cartesian(pt)} returns the Cartesian coordinates of point \spad{pt}.
141098`\spad{cartesian(a,{} b)} returns a Cartesian product: the vertex set of \spad{G} \spad{o} \spad{H} is the Cartesian product \spad{V}(\spad{G}) \times \spad{V}(\spad{H}) and any two vertices (\spad{u},{} u') and (\spad{v},{} \spad{v'}) \indented{1}{are adjacent in \spad{G} \spad{o} \spad{H} if and only if either} \spad{u} = \spad{v} and u' is adjacent with \spad{v'} in \spad{H},{} or u' = \spad{v'} and \spad{u} is adjacent wit
141098`--h \spad{v} in \spad{G}.
141176`Cartesian product doubles the size of next list in each object,{} that is it produces two arrows out of every node
141264`Cartesian product: the vertex set of \spad{G} \spad{o} \spad{H} is the Cartesian product \spad{V}(\spad{G}) \times \spad{V}(\spad{H}) and any two vertices (\spad{u},{} u') and (\spad{v},{} \spad{v'}) \indented{1}{are adjacent in \spad{G} \spad{o} \spad{H} if and only if either} \spad{u} = \spad{v} and u' is adjacent with \spad{v'} in \spad{H},{} or u' = \spad{v'} and \spad{u} is adjacent with \spad{v} in \spad{G}.
141346`Cartesian product: the vertex set of \spad{G} \spad{o} \spad{H} is the Cartesian product \spad{V}(\spad{G}) \times \spad{V}(\spad{H}) and any two vertices (\spad{u},{} u') and (\spad{v},{} \spad{v'}) \indented{1}{are adjacent in \spad{G} \spad{o} \spad{H} if and only if either} \spad{u} = \spad{v} and u' is adjacent with \spad{v'} in \spad{H},{} or u' = \spad{v'} and \spad{u} is adjacent with \spad{v} in \spad{G}.
141428`\spad{cAsec(f)} computes the arcsecant of the power series \spad{f}. For use when the coefficient ring is commutative.
141532`\spad{cAsech(f)} computes the inverse hyperbolic secant of the power series \spad{f}. For use when the coefficient ring is commutative.
141637`\spad{cAsin(f)} computes the arcsine of the power series \spad{f}. For use when the coefficient ring is commutative.
141741`\spad{cAsinh(f)} computes the inverse hyperbolic sine of the power series \spad{f}. For use when the coefficient ring is commutative.
141846`\spad{catalan(n)} returns the \spad{n}-th Catalan number
141907`\spad{cAtan(f)} computes the arctangent of the power series \spad{f}. For use when the coefficient ring is commutative.
142011`\spad{cAtanh(f)} computes the inverse hyperbolic tangent of the power series \spad{f}. For use when the coefficient ring is commutative.
142116`\spad{cCos(f)} computes the cosine of the power series \spad{f}. For use when the coefficient ring is commutative.
142219`\spad{cCosh(f)} computes the hyperbolic cosine of the power series \spad{f}. For use when the coefficient ring is commutative.
142323`\spad{cCot(f)} computes the cotangent of the power series \spad{f}. For use when the coefficient ring is commutative.
142426`\spad{cCoth(f)} computes the hyperbolic cotangent of the power series \spad{f}. For use when the coefficient ring is commutative.
142530`\spad{cCsc(f)} computes the cosecant of the power series \spad{f}. For use when the coefficient ring is commutative.
142633`\spad{cCsch(f)} computes the hyperbolic cosecant of the power series \spad{f}. For use when the coefficient ring is commutative.
142737`\spad{cdr((a1,{} ...,{} an))} returns \spad{(a2,{} ...,{} an)}.
142846`\spad{ceiling x} returns the small integer \spad{>= x}.
142894`\spad{ceiling(x)} returns the smallest integral element above \spad{x}.
142975`\spad{center(f)} centers form \spad{f} in total space.
143016`\spad{center(f)} returns the point about which the series \spad{f} is expanded.
143090`\spad{center(f,{} n)} centers form \spad{f} within space of width \spad{n}.
143139`\spad{center(l,{} i,{} s)} takes a list of strings \spad{l},{} and centers them within a list of strings which is \spad{i} characters long,{} in which the remaining spaces are filled with strings composed of as many repetitions as possible of the last string parameter \spad{s}.
143219`\spad{center(s,{} i,{} s)} takes the first string \spad{s},{} and centers it within a string of length \spad{i},{} in which the other elements of the string are composed of as many replications as possible of the second indicated string,{} \spad{s} which must have a length greater than that of an empty string.
143287`\spad{certainlySubVariety?(newlp,{} lp)} returns \spad{true} iff for every \spad{p} in \spad{lp} the remainder of \spad{p} by \spad{newlp} using the division algorithm of Groebner techniques is zero.
143388`\spad{cExp(f)} computes the exponential of the power series \spad{f}. For use when the coefficient ring is commutative.
143491`\spad{chainSubResultants(P,{} Q)} computes the list of non zero subresultants of \spad{P} and \spad{Q}.
143580`\spad{changeBase(exp,{} man,{} base)} \undocumented{}
143656`\spad{changeBase(M,{} A,{} sig,{} der)}: computes the new matrix of a pseudo-linear transform given by the matrix \spad{M} under the change of base A
143763`\spad{changeExprLength(i)} changes limit on expression length by \spad{i}.
143827`\spad{changeVar(+/[\spad{ai} D^i],{} a)} returns the operator \spad{+/[\spad{ai} (D+a)\spad{^i}]}.
143900`\spad{changeVar(+/[\spad{ai} D^i],{} a)} returns the operator \spad{+/[\spad{ai} (D+a)\spad{^i}]}.
143963`\spad{changeWeightLevel(n)} This changes the weight level to the new value given: \spad{NB:} previously calculated terms are not affected
144067`\spad{changeWeightLevel(n)} changes the weight level to the new value given: \spad{NB:} previously calculated terms are not affected
144174`\spad{char(i)} provides a character corresponding to the integer code \spad{i}. It is always \spad{true} that \spad{ord char i = i}.
144217`\spad{char(s)} provides a character from a string \spad{s} of length one.
144259`\spad{character?(t)} tests whether \spad{t} is equivalent to the FORTRAN type CHARACTER.
145034`\spad{characteristic()} returns the characteristic of the ring.
145105`\spad{characteristic()} returns the characteristic of the ring this is the smallest positive integer \spad{n} such that \spad{n*x=0} for all \spad{x} in the ring,{} or zero if no such \spad{n} exists.
145162`\spad{characteristicPolynomial(e)} returns the characteristic polynomial of \spad{e} using resultants
145266`\spad{characteristicPolynomial(m)} returns the characteristic polynomial of the matrix \spad{m}
145593`\spad{characteristicPolynomial(a)} returns the characteristic polynomial of the regular representation of \spad{a} with respect to any basis.
145665`\spad{characteristicPolynomial(m)} returns the characteristic polynomial of the matrix \spad{m} expressed as polynomial over complex rationals with a new symbol as variable.
145813`\spad{characteristicPolynomial(m)} returns the characteristic polynomial of the matrix \spad{m} expressed as polynomial over \spad{RN} with a new symbol as variable.
145940`\spad{characteristicPolynomial(m)} returns the characteristicPolynomial of the matrix \spad{m} using a new generated symbol symbol as the main variable.
146044`\spad{characteristicPolynomial(m,{} x)} returns the characteristic polynomial of the matrix \spad{m} expressed as polynomial over Complex Rationals with variable \spad{x}.
146199`\spad{characteristicPolynomial(m,{} x)} returns the characteristic polynomial of the matrix \spad{m} expressed as polynomial over \spad{RN} with variable \spad{x}. Fraction \spad{P} \spad{RN}.
146333`\spad{characteristicPolynomial(m,{} var)} returns the characteristicPolynomial of the matrix \spad{m} using the symbol var as the main variable.
146444`\spad{characteristicPolynomial(m,{} r)} computes the characteristic polynomial of the matrix \spad{m} evaluated at the point \spad{r}. In particular,{} if \spad{r} is the polynomial \spad{'x},{} then it returns the characteristic polynomial expressed as a polynomial in \spad{'x}.
146535`\spad{characteristicSerie(ps)} returns the same as \spad{characteristicSerie(ps,{} initiallyReduced?,{} initiallyReduce)}.
146621`\spad{characteristicSerie(ps,{} redOp?,{} redOp)} returns a list \spad{lts} of triangular sets such that the zero set of \spad{ps} is the union of the regular zero sets of the members of \spad{lts}. This is made by the Ritt and Wu Wen Tsun process applying the operation \spad{characteristicSet(ps,{} redOp?,{} redOp)} to compute characteristic sets in Wu Wen Tsun sense.
146731`\spad{characteristicSet(ps)} returns the same as \spad{characteristicSet(ps,{} initiallyReduced?,{} initiallyReduce)}.
146825`\spad{characteristicSet(ps,{} redOp?,{} redOp)} returns a non-contradictory characteristic set of \spad{ps} in Wu Wen Tsun sense \spad{w}.\spad{r}.\spad{t} the reduction-test \spad{redOp?} (using \spad{redOp} to reduce polynomials \spad{w}.\spad{r}.\spad{t} a \spad{redOp?} basic set),{} if no non-zero constant polynomial appear during those reductions,{} else \spad{"failed"} is returned
146825`--. The operations \spad{redOp} and \spad{redOp?} must satisfy the following conditions: \spad{redOp?(redOp(p,{} q),{} q)} holds for every polynomials \spad{p,{} q} and there exists an integer \spad{e} and a polynomial \spad{f} such that we have \spad{init(q)^e*p = f*q + redOp(p,{} q)}.
146943`\spad{charClass(l)} creates a character class which contains exactly the characters given in the list \spad{l}.
147004`\spad{charClass(s)} creates a character class which contains exactly the characters given in the string \spad{s}.
147056`\spad{charlierC(n,{} a,{} z)} is the Charlier polynomial
147122`\spad{charlierC(n,{} a,{} z)} is the Charlier polynomial
147185`\spad{charpol(m)} computes the characteristic polynomial of a matrix \spad{m} with entries in \spad{K}. This function returns a polynomial over \spad{K},{} while the general one (that is in EiegenPackage) returns Fraction \spad{P} \spad{K}
147700`\spad{charthRoot(a)} takes the characteristic'th root of {\em a}. Note: such a root is alway defined in finite fields.
147754`\spad{charthRoot(x)} returns the \spad{p}th root of \spad{x} where \spad{p} is the characteristic of the ring.
147826`\spad{charthRoot(r)} returns the \spad{p}\spad{-}th root of \spad{r},{} or "failed" if none exists in the domain.
147937`\spad{chebyshevT(n)} returns the \spad{n}th Chebyshev polynomial \spad{T[n](x)}. Note: Chebyshev polynomials of the first kind,{} denoted \spad{T[n](x)},{} computed from the two term recurrence. The generating function \spad{(1-t*x)/(1-2*t*x+t^2) = sum(T[n](x)*t^n,{} n=0..infinity)}.
148041`\spad{chebyshevT(n,{} x)} is the \spad{n}-th Chebyshev polynomial of the first kind,{} \spad{T[n](x)}. These are defined by \spad{(1-t*x)/(1-2*t*x+t^2) = sum(T[n](x) *t^n,{} n = 0..)}.
148125`\spad{chebyshevU(n)} returns the \spad{n}th Chebyshev polynomial \spad{U[n](x)}. Note: Chebyshev polynomials of the second kind,{} denoted \spad{U[n](x)},{} computed from the two term recurrence. The generating function \spad{1/(1-2*t*x+t^2) = sum(T[n](x)*t^n,{} n=0..infinity)}.
148229`\spad{chebyshevU(n,{} x)} is the \spad{n}-th Chebyshev polynomial of the second kind,{} \spad{U[n](x)}. These are defined by \spad{1/(1-2*t*x+t^2) = sum(T[n](x) *t^n,{} n = 0..)}.
148313`\spad{check(d)} specifies how we want to check the solution. If the value is "skip",{} we return the solutions found by the interpolation routine without checking. If the value is "MonteCarlo",{} we use a probabilistic check. The default is "deterministic".
148419`\spad{check(s)} returns lllpt,{} list of lists of lists of point information about the \spadtype{ThreeSpace} \spad{s}.
148470`\spad{check(d)} specifies how we want to check the solution. If the value is "skip",{} we return the solutions found by the interpolation routine without checking. If the value is "MonteCarlo",{} we use a probabilistic check. This option is expressed in the form \spad{check == d}
148551`\spad{check should} be local
148751`\spad{checkExtraValues(d)} specifies whether we want to check the solution beyond the order given by the degree bounds. The default is \spad{true}.
148833`\spad{checkExtraValues(d)} specifies whether we want to check the solution beyond the order given by the degree bounds. This option is expressed in the form \spad{checkExtraValues == d}
148890`\spad{checkForZero(p,{} a,{} b,{} incl?)} is \spad{true} if \spad{p} has a zero between a and \spad{b},{} \spad{false} otherwise,{} "failed" if this cannot be determined. Check for a and \spad{b} inclusive if incl? is \spad{true},{} exclusive otherwise.
149054`\spad{checkForZero(p,{} x,{} a,{} b,{} incl?)} is \spad{true} if \spad{p} has a zero for \spad{x} between a and \spad{b},{} \spad{false} otherwise,{} "failed" if this cannot be determined. Check for a and \spad{b} inclusive if incl? is \spad{true},{} exclusive otherwise.
149209`\spad{checkOptions checks} whether the given options are consistent,{} and yields an error otherwise
149284`\spad{checkRur(ts,{} lus)} returns \spad{true} if \spad{lus} is a rational univariate representation of \spad{ts}.
149390`one round of modular Monte Carlo check for solutions.
149559`\spad{checkType(t)}
149617`\spad{Chi(f)} denotes the hyperbolic cosine integral
149667`\spad{Chi(x)} returns the hyperbolic cosine integral of \spad{x},{} \spadignore{i.e.} the integral of \spad{cosh(x) / x dx}.
149722`\spad{Chi(f)} denotes the hyperbolic cosine integral
149867`\spad{Chi(f)} denotes the hyperbolic cosine integral
149925`\spad{child(x,{} n)} \undocumented
150100`\spad{child?(u,{} v)} tests if node \spad{u} is a child of node \spad{v}.
150178`\spad{children(x)} \undocumented
150410`\spad{children(u)} returns a list of the children of aggregate \spad{u}.
150470`\spad{chineseRemainder(llv,{} lm)} returns a list of values,{} each of which corresponds to the Chinese remainder of the associated element of \spad{llv} and \spad{lm}. This is more efficient than applying chineseRemainder several times.
150548`\spad{chineseRemainder(lv,{} lm)} returns a value \spad{v} such that,{} if \spad{x} is \spad{lv.i} modulo \spad{lm.i} for all \spad{i},{} then \spad{x} is \spad{v} modulo \spad{lm(1)*lm(2)*...*lm(n)}.
150614`\spad{chineseRemainder(lu,{} lr,{} n)} \undocumented
150836`\spad{chineseRemainder(x1,{} m1,{} x2,{} m2)} returns \spad{w},{} where \spad{w} is such that \spad{w = x1 mod m1} and \spad{w = x2 mod m2}. Note: \spad{m1} and \spad{m2} must be relatively prime.
150939`\spad{chinese_update(v,{} p,{} r)} informs \spad{r} about evaluation at \spad{p}
151024`\spad{chinese_update(v,{} pt,{} r)} informs \spad{r} that evaluation at \spad{pt} gave vector of values \spad{v}
151109`\spad{chiSquare1(n)} \undocumented
151187`\spad{chiSquare(n)} \undocumented
151268`chkLibraryError is an internal function that steps the number of tests.
151321`\spad{choosemon }\undocumented
151499`\spad{chvar(lf,{} p)} is like chvar(\spad{f},{} \spad{p}) but handles list of functions
151655`\spad{chvar(f(x,{} y),{} p(x,{} y))} returns \spad{[g(z,{} t),{} q(z,{} t),{} c1(x),{} c2(x),{} n]} such that under the change of variable \spad{z = c1(x)},{} \spad{t = y * c2(x)},{} one gets \spad{f(x,{} y) = c1'(x)g(c1(x),{} c2(x)y)} The algebraic relation between \spad{x} and \spad{y} is \spad{p(x,{} y) = 0}. The algebraic relation between \spad{z} and \spad
151655`--{t} is \spad{q(z,{} t) = 0}.
151799`\spad{\spad{Ci}(f)} denotes the cosine integral
151848`\spad{\spad{Ci}(x)} returns the cosine integral of \spad{x},{} \spadignore{i.e.} the integral of \spad{cos(x) / x dx}.
151902`\spad{\spad{Ci}(f)} denotes the cosine integral
152045`\spad{\spad{Ci}(f)} denotes the cosine integral
152102`\spad{class(jv)} yields the class of the jet variable \spad{jv} (Class of multi-index for derivative,{} 0 else).
152165`\spad{class(f)} is defined as the highest class of the jet variables effectively occurring in \spad{f}.
152240`\spad{class(ind)} yields the class of the multi-index \spad{ind} (Position for first non-vanishing entry).
152325`\spad{class(ind)} yields the class of the multi-index \spad{ind} (Position for first non-vanishing entry).
152547`\spad{classicalConvolution(x,{} y)} returns the classical convolution of the distributions \spad{x} and \spad{y}
152618`\spad{classicalCumulant(x,{} n)} returns the \spad{n}-th classical cumulant of the distribution \spad{x}
152698`\spad{classicalCumulants(x)} returns sequence of classical cumulants of the distribution \spad{x}
152773`\spad{clearCache()} empties the cache.
152822`\spad{clearDenominator([q1,{} ...,{} qn])} returns \spad{[p1,{} ...,{} pn]} such that \spad{\spad{qi} = pi/d} where \spad{d} is a common denominator for the \spad{qi}\spad{'s}.
152892`\spad{clearDenominator(q)} returns \spad{p} such that \spad{q = p/d} where \spad{d} is a common denominator for the coefficients of \spad{q}.
152974`\spad{clearDenominator([q1,{} ...,{} qn])} returns \spad{[p1,{} ...,{} pn]} such that \spad{\spad{qi} = pi/d} where \spad{d} is a common denominator for the \spad{qi}\spad{'s}.
153037`\spad{clearDenominator(q)} returns \spad{p} such that \spad{q = p/d} where \spad{d} is a common denominator for the elements of \spad{q}.
153201`\spad{clearFortranOutputStack()} clears the Fortran output stack
153283`\spad{clearTable!()} clears the hash-table and assumes that it will no longer be used.
153357`\spad{clearTheSymbolTable()} clears the current symbol table.
153415`\spad{clearTheSymbolTable(x)} removes the symbol \spad{x} from the table
153479`\spad{clear_used_intrinsics()} clear list of used intrinsics
153541`\spad{clip(ll)} performs two-dimensional clipping on a list of lists of points,{} \spad{ll}; the default parameters \spad{1/2} for the fraction and \spad{5/1} for the scale are used in the \fakeAxiomFun{iClipParametric} subroutine,{} which is called by this function.
153724`\spad{clip(l)} performs two-dimensional clipping on a curve \spad{l},{} which is a list of points; the default parameters \spad{1/2} for the fraction and \spad{5/1} for the scale are used in the \fakeAxiomFun{iClipParametric} subroutine,{} which is called by this function.
153901`\spad{clip(p)} performs two-dimensional clipping on a plot,{} \spad{p},{} from the domain \spadtype{Plot} for the graph of one variable,{} \spad{y = f(x)}; the default parameters \spad{1/4} for the fraction and \spad{5/1} for the scale are used in the \spadfun{clip} function.
154058`\spad{clip(b)} turns 2D clipping on if \spad{b} is \spad{true},{} or off if \spad{b} is \spad{false}. This option is expressed in the form \spad{clip == b}.
154102`\spad{clip([l])} provides ranges for user-defined clipping as specified in the list \spad{l}. This option is expressed in the form \spad{clip == [l]}.
154159`\spad{clip(p,{} frac,{} sc)} performs two-dimensional clipping on a plot,{} \spad{p},{} from the domain \spadtype{Plot} for the graph of one variable \spad{y = f(x)}; the fraction parameter is specified by \spad{frac} and the scale parameter is specified by \spad{sc} for use in the \spadfun{clip} function.
154352`\spad{clipBoolean(l,{} b)} takes the list of draw options,{} \spad{l},{} and checks the list to see if it contains the option \spad{clipBoolean}. If the option does not exist the value,{} \spad{b} is returned.
154435`\spad{clipParametric(p)} performs two-dimensional clipping on a plot,{} \spad{p},{} from the domain \spadtype{Plot} for the parametric curve \spad{x = f(t)},{} \spad{y = g(t)}; the default parameters \spad{1/2} for the fraction and \spad{5/1} for the scale are used in the \fakeAxiomFun{iClipParametric} subroutine,{} which is called by thi
154435`--s function.
154602`\spad{clipParametric(p,{} frac,{} sc)} performs two-dimensional clipping on a plot,{} \spad{p},{} from the domain \spadtype{Plot} for the parametric curve \spad{x = f(t)},{} \spad{y = g(t)}; the fraction parameter is specified by \spad{frac} and the scale parameter is specified by \spad{sc} for use in t
154602`--he \fakeAxiomFun{iClipParametric} subroutine,{} which is called by this function.
154805`\spad{clipPointsDefault()} determines whether or not automatic clipping is to be done.
154866`\spad{clipPointsDefault(true)} turns on automatic clipping; \spad{clipPointsDefault(false)} turns off automatic clipping. The default setting is \spad{true}.
154934`\spad{clipSurface(v,{} s)} displays the graph with the specified clipping region removed if \spad{s} is "on",{} or displays the graph without clipping implemented if \spad{s} is "off",{} for the given three-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{ThreeDimensionalViewport}.
155003`\spad{clipWithRanges(pointLists,{} xMin,{} xMax,{} yMin,{} yMax)} performs clipping on a list of lists of points,{} \spad{pointLists}. Clipping is done within the specified ranges of \spad{xMin},{} \spad{xMax} and \spad{yMin},{} \spad{yMax}. This function is used in
155003`--ternally by the \fakeAxiomFun{iClipParametric} subroutine in this package.
155244`\spad{cLog(f)} computes the logarithm of the power series \spad{f}. For use when the coefficient ring is commutative.
155347`\spad{close(v)} closes the viewport window of the given two-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{TwoDimensionalViewport},{} and terminates the corresponding process ID.
155401`\spad{close!(f)} returns the file \spad{f} closed to input and output.
155452`\spad{close!(f)} returns the library \spad{f} closed to input and output.
155490`\spad{close(v)} closes the viewport window of the given three-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{ThreeDimensionalViewport},{} and terminates the corresponding process ID.
155546`\spad{close(x,{} b)} \undocumented
155614`\spad{closeComponent(s,{} \spad{li},{} b)} sets the property of the component in the 3 dimensional subspace,{} \spad{s},{} to be closed if \spad{b} is \spad{true},{} or open if \spad{b} is \spad{false}. The list of non negative integers,{} \spad{li},{} dictates the path to follow,{} or,{} to look at it another way,{} points to the component whose closed property is to be set. The subspace,{} \spad{s},{} is returned wit
155614`--h the component property modification.
155699`\spad{closed?(x)} \undocumented
155761`\spad{closed?(t)} tests whether the given tube plot \spad{t} is closed.
155813`\spad{closedCartesian(a,{} b,{} f)} builds Cartesian product of a and \spad{b} and then maps it back to \% using \spad{f}.
155881`Cartesian product doubles the size of next list in each object,{} that is it produces two arrows out of every node
155954`as Cartesian product but returns \%.
156024`as Cartesian product but returns \%.
156094`\spad{closedCurve?(s)} returns \spad{true} if the \spadtype{ThreeSpace} \spad{s} contains a single closed curve component,{} \spadignore{i.e.} the first element of the curve is also the last element,{} or \spad{false} otherwise.
156157`\spad{closedCurve(s)} checks to see if the \spadtype{ThreeSpace},{} \spad{s},{} is composed of a single closed curve component defined by a list of points in which the first point is also the last point,{} all of which are from the domain \spad{PointDomain(m,{} R)} and if so,{} returns the list of points. An error is signaled otherwise.
156226`\spad{closedCurve(lp)} sets a list of points defined by the first element of \spad{lp} through the last element of \spad{lp} and back to the first elelment again and returns a \spadtype{ThreeSpace} whose component is the closed curve defined by \spad{lp}.
156295`\spad{closedCurve(s,{} [[lr0],{} [lr1],{} ...,{} [lrn],{} [lr0]])} adds a closed curve component defined by a list of points \spad{lr0} through \spad{lrn},{} which are lists of elements from the domain \spad{PointDomain(m,{} R)},{} where \spad{R} is the \spadtype{Ring} over which the point elements are defined and \spad{m} is the dimension of the points,{} in which the last element of the list of points contains a copy of the first 
156295`--element list,{} \spad{lr0}. The closed curve is added to the \spadtype{ThreeSpace},{} \spad{s}.
156366`\spad{closedCurve(s,{} [p0,{} p1,{} ...,{} pn,{} p0])} adds a closed curve component which is a list of points defined by the first element \spad{p0} through the last element \spad{pn} and back to the first element \spad{p0} again,{} to the \spadtype{ThreeSpace} \spad{s}.
156438`\spad{closedTensor(a,{} b,{} f)} builds tensor product of a and \spad{b} and then maps it back to \% using \spad{f}.
156503`as tensor product but returns \%. Cartesian product does apply to function graph produces two arrows out of every node
156568`as tensor product but returns \%.
156638`as tensor product but returns \%.
156705`as tensor product but returns \%.
156772`\spad{cmult(x)} should be local but conditional
156923`given a mapping from this graph this function tries to calculate a unique reverse mapping back to this graph
157036`given a mapping from this graph this function tries to calculate a unique reverse mapping back to this graph
157154`\spad{code(f)} returns the internal representation of the object represented by \spad{f}.
157884`\spad{coef(p,{} e)} extracts the coefficient of the monomial \spad{e}. Returns zero if \spad{e} is not present.
157934`\spad{coef(x,{} y)} returns scalar product of \spad{x} by \spad{y},{} the set of words being regarded as an orthogonal basis.
157983`\spad{coef(x,{} w)} returns the coefficient of the word \spad{w} in \spad{x}.
158044`\spad{coef(x,{} y)} returns the scalar product of \spad{x} by \spad{y},{} the set of words being regarded as an orthogonal basis.
158127`\spad{coefChoose should} be local
158210`\spad{coefficient(df,{} u)},{} where \spad{df} is a differential form,{} returns the coefficient of \spad{df} containing the basis term \spad{u} if such a term exists,{} and 0 otherwise.
158301`\spad{coefficient(p,{} u)} returns the coefficient of the term in \spad{p} containing the basis term \spad{u} if such a term exists,{} and 0 otherwise. Error: if the second argument \spad{u} is not a basis element.
158355`\spad{coefficient(x,{} n)} \undocumented
158421`\spad{coefficient(om,{} jb)} returns the coefficient of \spad{om} for the differential of \spad{jb}.
158480`\spad{coefficient(v,{} jb)} returns the coefficient of \spad{v} in direction \spad{jb}.
158538`\spad{coefficient(s,{} n)} gives the terms of total degree \spad{n}.
158801`\spad{coefficient(p,{} e)} extracts the coefficient of the monomial with exponent \spad{e} from polynomial \spad{p},{} or returns zero if exponent is not present.
158860`\spad{coefficient(x,{} [i1,{} i2,{} ...,{} iN])} extracts the coefficient of \spad{e(i1)*e(i2)*...*e(iN)} in \spad{x}.
158942`\spad{coefficient(f,{} m)} extracts the coefficient of \spad{m} in \spad{f} with respect to the canonical basis \spad{M}.
159002`\spad{coefficient(s,{} n)} gives the terms of total degree \spad{n}.
159089`\spad{coefficient(l,{} k)} is \spad{a(k)} if \indented{2}{\spad{l = sum(monomial(a(i),{} i),{} i = 0..n)}.}
159178`\spad{coefficient(x,{} s)} returns the coefficient of the basis element \spad{s}
159238`\spad{coefficient(s,{} e1 a1 + ... + en an)} returns \spad{ei} such that \spad{ai} = \spad{s},{} or 0 if \spad{s} is not one of the \spad{ai}\spad{'s}.
159305`\spad{coefficient(p,{} lv,{} ln)} views the polynomial \spad{p} as a polynomial in the variables of \spad{lv} and returns the coefficient of the term \spad{lv^ln},{} \spadignore{i.e.} \spad{prod(lv_i ^ ln_i)}.
159418`\spad{coefficient(p,{} v,{} n)} views the polynomial \spad{p} as a univariate polynomial in \spad{v} and returns the coefficient of the \spad{v^n} term.
159913`\spad{coefficient(f,{} [x1,{} x2,{} ...,{} xk],{} [n1,{} n2,{} ...,{} nk])} returns the coefficient of \spad{x1^n1 * ... * xk^nk} in \spad{f}.
160026`\spad{coefficient(f,{} x,{} n)} returns the coefficient of \spad{x^n} in \spad{f}.
160127`\spad{coefficients(om)} yields the coefficients of \spad{om}.
160190`\spad{coefficients(v)} yields the coefficients of \spad{v}.
160252`\spad{coefficients(x)} returns a stream of ring elements. \indented{1}{When \spad{x} is a univariate series,{} this is a stream of Taylor} \indented{1}{coefficients. When \spad{x} is a multivariate series,{} the} \indented{1}{\spad{n}th element of the stream is a form of} \indented{1}{degree \spad{n} in the power series variables.}
160322`\spad{coefficients(s)} gives stream of coefficients of \spad{s},{} \spadignore{i.e.} [coefficient(\spad{s},{}0),{} coefficient(\spad{s},{}1),{} ...]
160553`\spad{coefficients(p)} gives the list of non-zero coefficients of polynomial \spad{p}.
160623`\spad{coefficients(x)} returns the list of coefficients of \spad{x}.
160688`\spad{coefficients(f)} lists all non-zero coefficients.
160753`\spad{coefficients(l)} returns the list of all the nonzero coefficients of \spad{l}.
160830`\spad{coefficients(a0 + a1 x + a2 x^2 + ...)} returns a stream of coefficients: \spad{[a0,{} a1,{} a2,{} ...]}. The entries of the stream may be zero.
161067`\spad{coeffs0(x,{} lv,{} lp)} is used by \spad{coeffs1}
161260`\spad{coeffs1(x,{} lv)} computes list of coefficients of \spad{x} with respect to variables in \spad{lv}. Variables in \spad{lv} must be decreasing and bigger than all other variables of \spad{x}.
161453`\spad{coerce(u)} transforms \spad{u} into a COmplex Float
161510`\spad{coerce(exp)} retracts an element to the base domain \spad{D}. This looses all informations about its leading derivative and its jet variables and requires complete evaluation of the expression.
161694`\spad{coerce(x)} \undocumented{}
161788`\spad{coerce(u)} transforms a MachineFloat to a standard Float
161834`\spad{coerce(x)} returns the element of \spadtype{FreeMagma}(VarSet) corresponding to \spad{x}.
161898`\spad{coerce(x)} returns the element of \spadtype{FreeMonoid}(VarSet) corresponding to \spad{x} by removing parentheses.
161962`\spad{coerce(x)} returns the element of \spadtype{FreeMonoid}(VarSet) corresponding to \spad{x}.
162027`\spad{coerce([l1]*[l2]*...[ln])} returns the word \spad{l1*l2*...*ln},{} where \spad{[l_i]} is the backeted form of the Lyndon word \spad{l_i}.
162113`\spad{coerce(p)} coerces a partition into a list of integers
162164`\spad{coerce(x)} outputs \spad{x} as a list of strings. Each element in the list represents a new line. This is an alternative to creating a long single string with 'newline' embedded in it.
162215`\spad{coerce b} returns the basis as a list of vectors.
162278`\spad{coerce(A)} yields the matrix \spad{A} in the usual matrix type.
162340`\spad{coerce(m)} converts a matrix of type \spadtype{RectangularMatrix} to a matrix of type \spad{Matrix}.
162402`\spad{coerce(m)} converts a matrix of type \spadtype{SquareMatrix} to a matrix of type \spadtype{Matrix}.
162460`output
162513`output
162558`\spad{coerce(f)} returns an object of type OutputForm.
162608`\spad{coerce(x)} provides a printable form for \spad{x}
162658`\spad{coerce(\spad{gi})} returns the indicated graph,{} \spad{\spad{gi}},{} of domain \spadtype{GraphImage} as output of the domain \spadtype{OutputForm}.
162707`output
162752`\spad{coerce(de)} transforms the differential equation \spad{de} to \spadtype{OutputForm}.
162820`output
162869`\spad{coerce(bd)} outputs description of \spad{bd} as formatted text
162921`\spad{coerce(me)} list this instance to the command line
162972`output a full scenegraph could contain a lot of data and so we have to be careful to restrict the output to what is reasonable on the command line. Therefore we do not display all subnodes or the full information from nodes such as IFS.
163020`output
163077`\spad{coerce(tr)} output
163130`\spad{coerce(v)} returns the given two-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{TwoDimensionalViewport} as output of the domain \spadtype{OutputForm}.
163191`convert back into a \spad{"P"},{} ignoring weights
163268`\spad{coerce(p)} converts back into a Polynomial(\spad{R}),{} ignoring weights
163420`\spad{coerce(x)} moves from the domain to the representation type
163523`\spad{coerce(x)} \undocumented
163607`\spad{coerce(x)} \undocumented
163681`\spad{coerce(x)} \undocumented
163754`\spad{coerce(x)} \undocumented
163833`\spad{coerce(a)} transforms a into an element of \spad{S}.
163881`\spad{coerce(x)} returns the \spad{s}-expression associated with \spad{x}
163993`\spad{coerce(x)} returns the uppercase string associated with \spad{x}
164045`\spad{coerce(x)} outputs \spad{x} as a string
164092`\spad{coerce(x)} returns the symbol associated with \spad{x}
164144`\spad{coerce(x)} returns the symbol
164192`\spad{coerce(x)} returns a table view of \spad{x}
164257`\spad{coerce(g)} returns the internal representation of \spad{g}.
164349`\spad{coerce(p)} returns \spad{p} as a distributed polynomial.
164434`\spad{coerce(g)} returns the internal representation of \spad{g}.
164518`\spad{coerce(p)} returns \spad{p} as a recursive polynomial.
165325`\spad{coerce(r)} converts a ring element \spad{r} to a stream with one element.
165615`\spad{coerce(u)} transforms \spad{u} into a MachineComplex
165672`\spad{coerce(u)} transforms \spad{u} into a MachineComplex
165731`\spad{coerce(u)} transforms \spad{u} into a MachineComplex
165795`\spad{coerce(u)} transforms \spad{u} into a MachineComplex
165915`\spad{coerce(d)} coerces an element of \spad{D} into the new domain. This includes the calculation of its leading derivative and its jet variables.
165966`\spad{coerce(e)} returns \spad{1*e}
166016`\spad{coerce(eq)} \undocumented{}
166130`\spad{coerce(eq)} \undocumented{}
166235`\spad{coerce(eq)} \undocumented{}
166342`\spad{coerce(eq)} \undocumented{}
166456`\spad{coerce(eq)} \undocumented{}
166568`\spad{coerce(eq)} \undocumented{}
166682`\spad{coerce(e)} \undocumented{}
166786`\spad{coerce(e)} \undocumented{}
166881`\spad{coerce(e)} \undocumented{}
167111`\spad{coerce(x)} returns \spad{x} with coefficients in the domain
167185`\spad{coerce(e)} \undocumented{}
167289`\spad{coerce(e)} \undocumented{}
167391`\spad{coerce(e)} \undocumented{}
167495`\spad{coerce(e)} takes an object from \spadtype{FortranCode} and \indented{1}{uses it as the body of an ASP.}
167558`\spad{coerce(e)} takes an object from \spadtype{FortranCode} and \indented{1}{uses it as the body of an ASP.}
167619`\spad{coerce(e)} takes an object from \spadtype{FortranCode} and \indented{1}{uses it as the body of an ASP.}
167688`\spad{coerce(e)} takes an object from \spadtype{FortranCode} and \indented{1}{uses it as the body of an ASP.}
167749`\spad{coerce(e)} takes an object from \spadtype{FortranCode} and \indented{1}{uses it as the body of an ASP.}
167818`\spad{coerce(fc)} \undocumented{}
167907`\spad{coerce(t)} creates an element from a scalar type
167964`\spad{coerce(f)} produces the equivalence class of \spad{f} in the residue ring
169265`\spad{coerce(\spad{gi})} converts the indicated \spadtype{GraphImage},{} \spad{gi},{} into the \spadtype{TwoDimensionalViewport} form.
170406`\spad{coerce(jv)} coerces the jet variable \spad{jv} into a local section.
170517`\spad{coerce Lambda} term to SKI combinators. this process is known as abstraction elimination. it is done by applying the following rules until all lambda terms have been eliminated. rule LS1: Lam[\spad{x}] \spad{=>} \spad{x} rule LS2: Lam[(\spad{E1} \spad{E2})] \spad{=>} (Lam[\spad{E1}] Lam[\spad{E2}]) rule LS3: Lam[\spad{\x}.\spad{E}] \spad{=>} (\spad{K} Lam[\spad{E}]) (if \spad{x} does not occur free in \spad{E}) rule LS4: Lam[\spad
170517`--{\x}.\spad{x}] \spad{=>} \spad{I} rule LS5: Lam[\spad{\x}.\y.\spad{E}] \spad{=>} Lam[\spad{\x}.Lam[\y.\spad{E}]] (if \spad{x} occurs free in \spad{E}) rule LS6: Lam[\spad{\x}.(\spad{E1} \spad{E2})] \spad{=>} (\spad{S} Lam[\spad{\x}.\spad{E1}] Lam[\spad{\x}.\spad{E2}])
170584`\spad{coerce(p)} returns \spad{p}.
170744`\spad{coerce(e)} takes an object from \spadtype{List FortranCode} and \indented{1}{uses it as the body of an ASP.}
170813`\spad{coerce(e)} takes an object from \spadtype{List FortranCode} and \indented{1}{uses it as the body of an ASP.}
170880`\spad{coerce(e)} takes an object from \spadtype{List FortranCode} and \indented{1}{uses it as the body of an ASP.}
170955`\spad{coerce(e)} takes an object from \spadtype{List FortranCode} and \indented{1}{uses it as the body of an ASP.}
171022`\spad{coerce(e)} takes an object from \spadtype{List FortranCode} and \indented{1}{uses it as the body of an ASP.}
171097`\spad{coerce(lfc)} \undocumented{}
171192`\spad{coerce(l)} converts a list of 0\spad{'s} and 1\spad{'s} into a basis element,{} where 1 (respectively 0) designates that the variable of the corresponding index of \spad{l} is (respectively,{} is not) present. Error: if an element of \spad{l} is not 0 or 1.
171245`\spad{coerce(llp)} component(\spad{gi},{} \spad{pt}) creates and returns a graph of the domain \spadtype{GraphImage} which is composed of the list of list of points given by \spad{llp},{} and whose point colors,{} line colors and point sizes are determined by the default functions \spadfun{pointColorDefault},{} \spadfun{lineColorDefault},{} and \spadfun{pointSizeDefault}. The graph data is then sent to the viewport manager where it wa
171245`--its to be included in a two-dimensional viewport window.
171314`\spad{coerce List} to graph
171366`\spad{coerce(u)} transforms a MachineInteger into a MachineFloat
171421`\spad{coerce(v)} produces an ASP which returns the value of \spad{v}.
171491`\spad{coerce(o)} changes \spad{o} in the standard output format to html format.
171544`\spad{coerce(p)} coerces \spad{p} into Weighted form,{} applying weights and ignoring terms
171621`\spad{coerce PermutationGroup} to graph
171685`\spad{coerce PermutationGroup} to graph which represents the generators of the group
171819`\spad{coerce(p)} coerces a Polynomial(\spad{R}) into Weighted form,{} applying weights and ignoring terms
172026`\spad{coerce(p)} moves from the representation type (PrimitiveArray PrimitiveArray PrimitiveArray \spad{R}) to the domain
172129`\spad{coerce(a)} makes a tuple from primitive array a
172249`\spad{coerce(x)} \undocumented
172328`\spad{coerce(e)} takes the component of \spad{e} from \spadtype{List FortranCode} and uses it as the body of the ASP,{} making the declarations in the \spadtype{SymbolTable} component.
172435`\spad{coerce(e)} takes the component of \spad{e} from \spadtype{List FortranCode} and uses it as the body of the ASP,{} making the declarations in the \spadtype{SymbolTable} component.
172540`\spad{coerce(e)} takes the component of \spad{e} from \spadtype{List FortranCode} and uses it as the body of the ASP,{} making the declarations in the \spadtype{SymbolTable} component.
172653`\spad{coerce(e)} takes the component of \spad{e} from \spadtype{List FortranCode} and uses it as the body of the ASP,{} making the declarations in the \spadtype{SymbolTable} component.
172758`\spad{coerce(e)} takes the component of \spad{e} from \spadtype{List FortranCode} and uses it as the body of the ASP,{} making the declarations in the \spadtype{SymbolTable} component.
172871`\spad{coerce(r)} \undocumented{}
173004`\spad{coerce(x)} \undocumented
173610`\spad{coerce(a)} transforms a into an element of \%.
173656`\spad{coerce(s)} returns \spad{s} viewed as an element of \%.
174068`\spad{coerce combinators} to intuitionistic logic this is known as the Curry-Howard isomorphism it uses the following rules: rule SI1: Ski[Kab] \spad{=>} a \spad{->} (\spad{b} \spad{->} a),{} rule SI2: Ski[Sabc] \spad{=>} (a \spad{->} (\spad{b} \spad{->} \spad{c})) \spad{->} ((a \spad{->} \spad{b}) \spad{->} (a \spad{->} \spad{c})),{} rule SI3: Ski[a a-\spad{>b}] \spad{=>} \spad{b} the last rule is function application (modus ponens)
174131`\spad{coerce SKI} combinators to Lambda term. this conversion is done by applying the following rules rule SL1: Ski[\spad{I}] = \spad{\x}.0 rule SL2: Ski[\spad{K}] = \spad{\x}.\y.1 rule SL3: Ski[\spad{S}] = \spad{\x}.\y.\spad{\z}.(2 0 (1 0)) rule SL4: Ski[(\spad{E1} \spad{E2})] = (Ski[\spad{E1}] Ski[\spad{E2}])
174324`\spad{coerce(poly)} regroups the terms by total degree and forms a series.
175647`coercion to matrices over ground domain.
175835`\spad{coerce(p)} returns \spad{p} viewed as an algebraic number.
176552`\spad{coerce(x)} creation of elements
176609`\spad{coerce(s)} transforms the string \spad{s} into an element of FortranScalarType provided \spad{s} is one of "real",{} "double precision",{} "complex",{} "logical",{} "integer",{} "character",{} "REAL",{} "COMPLEX",{} "LOGICAL",{} "INTEGER",{} "CHARACTER",{} "DOUBLE PRECISION"
176724`\spad{coerce(s)} transforms the symbol \spad{s} into an element of FortranScalarType provided \spad{s} is one of real,{} complex,{} double precision,{} logical,{} integer,{} character,{} REAL,{} COMPLEX,{} LOGICAL,{} INTEGER,{} CHARACTER,{} DOUBLE PRECISION
176776`\spad{coerce(sy)} allows for the input of jet variables as symbols. Yields an error,{} if the symbol is not contained in \spad{IVar} or \spad{DVar}.
176831`\spad{coerce(s)} allows for the input of jet variables as symbols.
176893`\spad{coerce(s)} \undocumented{}
177038`\spad{coerce(p)} converts a univariate polynomial \spad{p} in the variable \spad{var} to a univariate Taylor series in \spad{var}.
177139`\spad{coerce(p)} converts a univariate polynomial \spad{p} in the variable \spad{var} to a univariate Taylor series in \spad{var}.
177320`\spad{coerce(f)} converts a \spadtype{UnivariatePuiseuxSeries} to an \spadtype{ExponentialExpansion}.
177418`\spad{coerce(var)} converts a variable to a Taylor series
177494`\spad{coerce(var)} converts the series variable \spad{var} into a Laurent series.
177579`\spad{coerce(var)} converts the series variable \spad{var} into a Puiseux series.
177664`\spad{coerce(var)} converts the series variable \spad{var} into a \indented{1}{Taylor series.}
177748`\spad{coerce(var)} converts the series variable \spad{var} into a Laurent series.
177827`\spad{coerce(var)} converts the series variable \spad{var} into a Puiseux series.
177906`\spad{coerce(var)} converts the series variable \spad{var} into a \indented{1}{Taylor series.}
178053`\spad{coerce(x)} returns \spad{x} as a skew-polynomial.
178134`\spad{coerce(v)} return \spad{v}
178274`\spad{coerce(v)} assumes that it is called with a vector of length equal to the dimension of the algebra,{} then a linear combination with the basis element is formed
178376`\spad{coerce(v)} produces an ASP which returns the value of \spad{v}.
178446`\spad{coerce(v)} coerces a vector \spad{v} with entries in \spadtype{Matrix R} as vector over \spadtype{Matrix Fraction Polynomial R}
178618`\spad{coerce(b)} converts a binary expansion to a rational number.
178679`\spad{coerce(d)} converts a decimal expansion to a rational number.
178741`\spad{coerce(h)} converts a hexadecimal expansion to a rational number.
178807`\spad{coerce(rx)} converts a radix expansion to a rational number.
178871`\spad{coerce(p)} sums up the components of the partial fraction and returns a single fraction.
178929`\spad{coerce(gp)} returns the generators of the group {\em gp}.
178997`\spad{coerce(x)} returns the list of elements in \spad{x}
179044`\spad{coerce(s)} returns the \spadtype{ThreeSpace} \spad{s} to Output format.
179104`\spad{coerce(v)} coerces void object to OutputForm.
179147`\spad{coerce(d)} converts a decimal expansion to a radix expansion with base 10.
179210`\spad{coerce(h)} converts a hexadecimal expansion to a radix expansion with base 16.
179277`\spad{coerce(b)} converts a binary expansion to a radix expansion with base 2.
179338`\spad{coerce(p)} views \spad{p} as a valie in the partial differential ring.
179407`\spad{coerce(a)} transforms a into an element of \spad{S}.
179451`\spad{coerce(fn)} produces a string for a file name according to operating system-dependent conventions.
179502`\spad{coerce(x)} \undocumented
179552`\spad{coerce(x)} returns \spad{x} as distributed polynomial.
179637`\spad{coerce(x)} returns \spad{x} as a recursive polynomial.
179720`\spad{coerce(a)} coerces the element \spad{a} of the algebra \spad{A} to an element of the Jordan algebra \spadtype{AssociatedJordanAlgebra}(\spad{R},{} A).
179778`\spad{coerce(a)} coerces the element \spad{a} of the algebra \spad{A} to an element of the Lie algebra \spadtype{AssociatedLieAlgebra}(\spad{R},{} A).
179833`\spad{coerce A} changes its argument into a \indented{1}{nullary function.}
179884`\spad{coerce(c)} returns \spad{c} as a string \spad{s} with the character \spad{c}.
179937`\spad{coerce(col)} converts the column \spad{col} to a column matrix.
179994`\spad{coerce(c)} sets the average shade for the palette to that of the indicated color \spad{c}.
180035`\spad{coerce(v)} views a vector as a rank 1 tensor.
180112`\spad{coerce(x)} coerces a distribution from the ring \spad{R1} to \spad{R2}.
180200`\spad{coerce(e)} is never really evaluated. This coercion is used for formal type correctness when a function will not return directly to its caller.
180259`\spad{coerce(x)} is the homomorphic image of \spad{x} from {\em F1} in {\em F2}. Thus {\em coerce} is a field homomorphism between the fields extensions {\em F1} and {\em F2} both over ground field {\em GF} (the second argument to the package). Error: if the extension degree of {\em F1} doesn\spad{'t} divide the extension degree of {\em F2}. Note that the other coercion function in the \spadtype{FiniteFieldHomomorphisms} is a left inverse
180259`--.
180324`\spad{coerce(x)} is the homomorphic image of \spad{x} from {\em F2} in {\em F1},{} where {\em coerce} is a field homomorphism between the fields extensions {\em F2} and {\em F1} both over ground field {\em GF} (the second argument to the package). Error: if the extension degree of {\em F2} doesn\spad{'t} divide the extension degree of {\em F1}. Note that the other coercion function in the \spadtype{FiniteFieldHomomorphisms} is a left inve
180324`--rse.
180389`\spad{coerce(c)} converts sin/cos terms into Fourier Series
180455`\spad{coerce(f)} takes a fraction with numerator and denominator in factored form and creates a partial fraction. It is necessary for the parts to be factored because it is not known in general how to factor elements of \spad{R} and this is needed to decompose into partial fractions.
180523`\spad{coerce(rf)} converts \spad{rf},{} a fraction of polynomial \spad{p} with algebraic number coefficients to \spadtype{Expression Integer}.
180629`\spad{coerce(f)} returns \spad{f} as an element of \%.
180728`\spad{coerce(q)} returns \spad{q} as an element of \%.
180805`\spad{coerce(n)} coerces the integer \spad{n} to an element of the ring.
180859`\spad{coerce(i)} converts the integer \spad{i} to a member of the given domain.
180899`\spad{coerce(i)} returns the element corresponding to \spad{i}
180945`\spad{coerce([t_1,{} ...,{} t_dim])} allows tensors to be constructed using lists.
181010`\spad{coerce(polyList)} converts the list of polynomials \spad{polyList} to an ideal.
181087`\spad{coerce(lls)} coerces a list of cycles {\em lls} to a permutation,{} each cycle being a list with no repetitions,{} is coerced to the permutation,{} which maps {\em ls.i} to {\em ls.i+1},{} indices modulo the length of the list,{} then these permutations are mutiplied. Error: if repetitions occur in one cycle.
181143`\spad{coerce(ls)} coerces a list of permutations {\em ls} to the group generated by this list.
181211`\spad{coerce([r_1,{} ...,{} r_dim])} allows tensors to be constructed using lists.
181275`\spad{coerce(lt)} converts a list of terms and coefficients to a member of the domain.
181348`\spad{coerce(l)} makes a database out of a list
181395`\spad{coerce(l)} creates a datalist from \spad{l}
181442`\spad{coerce(ls)} coerces a cycle {\em ls},{} \spadignore{i.e.} a list with not repetitions to a permutation,{} which maps {\em ls.i} to {\em ls.i+1},{} indices modulo the length of the list. Error: if repetitions occur.
181492`\spad{coerce(l)} converts a list \spad{l} to a stream.
181537`\spad{coerce(o)} changes \spad{o} in the standard output format to SCRIPT formula format.
181595`\spad{coerce(o)} changes \spad{o} in the standard output format to TeX format.
181643`coerceS(\spad{o}) changes \spad{o} in the standard output format to MathML format.
181698`coerceS(\spad{o}) changes \spad{o} in the standard output format to Texmacs format.
181754`\spad{coerce(f)} returns \spad{f} as an Expression(\spad{R}).
181810`\spad{coerce(p)} converts the polynomial \spad{p} with algebraic number coefficients to \spadtype{Expression Integer}.
181906`\spad{coerce(s)} regroups terms of \spad{s} by total degree \indented{1}{and forms a series.}
181969`\spad{coerce(p)} returns \spad{p} as an element of \%.
182058`\spad{coerce(r)} maps the ring element \spad{r} to a member of the algebra.
182098`\spad{coerce(r)} returns \spad{r} * 1 where 1 is the identity of the left algebra.
182142`\spad{coerce(r)} equals \spad{r*1}.
182183`\spad{coerce(r)} converts coefficients into Fourier Series
182231`\spad{coerce(r)} views \spad{r} as a value in the ordinary differential ring.
182300`\spad{coerce(r)} returns \spad{r} viewed as a rational function over \spad{R}.
182370`\spad{coerce(s)} returns \spad{s},{} viewed as the zero-th order derivative of \spad{s}.
182431`\spad{coerce(a)} transforms a into an element of \%.
182477`\spad{coerce(s)} creates an object of \spadtype{Any} from the object \spad{s} of type \spad{S}.
182524`\spad{coerce(x = a..b)} returns \spad{x = c..d} where \spad{c} and \spad{d} are the numerical values of \spad{a} and \spad{b}.
182619`\spad{coerce(x)} allows \spadtype{Segment} values to be used as \%.
182677`\spad{coerce(x)} changes \spad{x} into an object of type \spadtype{None}.
182726`\spad{coerce(p)} returns \spad{p} viewed as an algebraic number.
182818`\spad{coerce(p)} returns \spad{p} as an element of \%.
182916`\spad{coerce(m)} views a matrix as a rank 2 tensor.
182992`\spad{coerce(s)} provides a direct coercion from an expression \spad{s} of domain \spad{S} to SCRIPT formula format. This allows the user to skip the step of first manually coercing the object to standard output format before it is coerced to SCRIPT formula format.
183062`\spad{coerce(s)} provides a direct coercion from a domain \spad{S} to TeX format. This allows the user to skip the step of first manually coercing the object to standard output format before it is coerced to TeX format.
183112`\spad{coerce(s)} converts a string to a file name according to operating system-dependent conventions.
183163`\spad{coerce(s)} converts \spad{s} into an \spad{IndexCard}. Warning: if \spad{s} is not of the right format then an error will occur when using it.
183207`\spad{coerce(s)} converts the string \spad{s} to a symbol.
183248`\spad{coerce(s)} throws all information about \spad{s} away. This coercion allows values of any type to appear in contexts where they will not be used. For example,{} it allows the resolution of different types in the \spad{then} and \spad{else} branches when an \spad{if} is in a context where the resulting value is not used.
183307`\spad{coerce(u)} creates an OpenMath error object of an appropriate type if \spad{u} is one of \spad{OMParseError},{} \spad{OMReadError},{} \spad{OMUnknownCD} or \spad{OMUnknownSymbol},{} otherwise it raises a runtime error.
183359`\spad{coerce(s)} converts a variable to a Taylor series
183412`\spad{coerce(f(x))} converts the Laurent series \spad{f(x)} to a Puiseux series.
183496`\spad{coerce(f)} converts a Puiseux series to a general power series.
183604`\spad{coerce(f(x))} converts the Taylor series \spad{f(x)} to a Laurent series.
183688`\spad{coerce(var)} converts the series variable \spad{var} into a Puiseux series.
183772`\spad{coerce(x)} converts the variable \spad{x} to a univariate polynomial.
183837`\spad{coerce(x)} returns \spad{x} as a Lie polynomial.
183896`\spad{coerce(v)} converts a vector to a member of the algebra by forming a linear combination with the basis element. Note: the vector is assumed to have length equal to the dimension of the algebra.
183981`\spad{coerce(v)} returns \spad{v}.
184030`\spad{coerceImages(ls)} coerces the list {\em ls} to a permutation whose image is given by {\em ls} and the preimage is fixed to be {\em [1,{} ...,{} n]}. Note: {coerceImages(\spad{ls})=coercePreimagesImages([1,{} ...,{} \spad{n}],{} \spad{ls})}. We assume that both preimage and image do not contain repetitions.
184136`\spad{coerceImages(ls)} coerces the list {\em ls} to a permutation whose image is given by {\em ls} and the preimage is fixed to be {\em [1,{} ...,{} n]}. Note: {coerceImages(\spad{ls})=coercePreimagesImages([1,{} ...,{} \spad{n}],{} \spad{ls})}. We assume that both preimage and image do not contain repetitions.
184218`\spad{coerceL(o)} changes \spad{o} in the standard output format to html format and displays result as one long string.
184272`coerceS(\spad{o}) changes \spad{o} in the standard output format to MathML format and displays result as one long string.
184328`coerceS(\spad{o}) changes \spad{o} in the standard output format to Texmacs format and displays result as one long string.
184385`\spad{coerceListOfPairs(lls)} coerces a list of pairs {\em lls} to a permutation. Error: if not consistent,{} \spadignore{i.e.} the set of the first elements coincides with the set of second elements. coerce(\spad{p}) generates output of the permutation \spad{p} with domain OutputForm.
184452`\spad{coerceP(v)} coerces a vector \spad{v} with entries in \spadtype{Matrix R} as vector over \spadtype{Matrix Polynomial R}
184554`\spad{coercePreimagesImages(lls)} coerces the representation {\em lls} of a permutation as a list of preimages and images to a permutation. We assume that both preimage and image do not contain repetitions.
184625`\spad{coerceS(o)} changes \spad{o} in the standard output format to html format and displays formatted result.
184679`\spad{coerceS(o)} changes \spad{o} in the standard output format to MathML format and displays formatted result.
184735`\spad{coerceToType(f)} returns the input form corresponding to f::R
184884`\spad{coHeight(ts)} returns \spad{size()\$V} minus \spad{\#ts}.
184976`\spad{coleman(alpha,{} beta,{} \spad{pi})}: there is a bijection from the set of matrices having nonnegative entries and row sums {\em alpha},{} column sums {\em beta} to the set of {\em Salpha - Sbeta} double cosets of the symmetric group {\em Sn}. ({\em Salpha} is the Young subgroup corresponding to the improper partition {\em alpha}). For a representing element {\em \spad{pi}} of su
184976`--ch a double coset,{} coleman(\spad{alpha},{} \spad{beta},{} \spad{pi}) generates the Coleman-matrix corresponding to {\em alpha,{} beta,{} \spad{pi}}. Note: The permutation {\em \spad{pi}} of {\em {1,{} 2,{} ...,{} n}} has to be given in list form. Note: the inverse of this map is {\em inverseColeman} (if {\em \spad{pi}} is the lexicographical smallest permutation in the coset). For details see James/Kerber.
185095`\spad{colinearity(x,{} y)} returns a measure of how parallel two vectors are independent of the length of the vectors: 1.0 is completely parallel 0.0 is completely perpendicular returned value will be between these
185216`\spad{collect(exp)} "collects" former lazy terms which have been meanwhile evaluated.
185339`\spad{collect(ps,{} v)} returns the set consisting of the polynomials of \spad{ps} with \spad{v} as main variable.
185481`\spad{collectQuasiMonic(ts)} returns the subset of \spad{ts} consisting of the polynomials with initial in \spad{R}.
185693`\spad{collectUnder(ps,{} v)} returns the set consisting of the polynomials of \spad{ps} with main variable less than \spad{v}.
185912`\spad{collectUpper(ps,{} v)} returns the set consisting of the polynomials of \spad{ps} with main variable greater than \spad{v}.
185991`\spad{color(pt)} returns the fourth element of the point,{} \spad{pt},{} although no assumptions are made with regards as to how the components of higher dimensional points are interpreted. This function is defined for the convenience of the user using specifically,{} color to express a fourth dimension.
186041`\spad{color(i)} returns a color of the indicated hue \spad{i}.
186081`\spad{colorDef(v,{} c1,{} c2)} sets the range of colors along the colormap so that the lower end of the colormap is defined by \spad{c1} and the top end of the colormap is defined by \spad{c2},{} for the given three-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{ThreeDimensionalViewport}.
186152`\spad{colorFunction(f(z))} specifies the color based upon the \spad{z}-component of three dimensional plots. This option is expressed in the form \spad{colorFunction == f(z)}.
186224`\spad{colorFunction(f(u,{} v))} specifies the color for three dimensional plots as a function based upon the two parametric variables. This option is expressed in the form \spad{colorFunction == f(u,{} v)}.
186308`\spad{colorFunction(f(x,{} y,{} z))} specifies the color for three dimensional plots as a function of \spad{x},{} \spad{y},{} and \spad{z} coordinates. This option is expressed in the form \spad{colorFunction == f(x,{} y,{} z)}.
186486`\spad{colSlice(m)} returns a segment \spad{s} such that for \spad{m} the access \spad{m}(\spad{i},{} \spad{s}) gives the \spad{i}-th row.
186646`\spad{column(m,{} j)} returns the \spad{j}th column of the matrix \spad{m}. Error: if the index outside the proper range.
186726`\spad{column(m,{} j)} returns the \spad{j}th column of \spad{m} error check to determine if index is in proper ranges
186804`\spad{columnMatrix} returns a single column out of a matrix. The column is put into a one by \spad{N} matrix.
186886`\spad{columns} returns several columns out of a matrix. The columns are stacked into a matrix.
186969`\spad{columns} returns several columns out of a matrix. The columns are stacked into a matrix.
187055`\spad{columnSpace M} builds a basis of the image space of the linear transformation defined by the matrix \spad{M}. This function calls the \spad{columnSpace} from the \spad{Matrix} domain. Only the signature changes.
187182`\spad{columnSpace(m)} returns a sublist of columns of the matrix \spad{m} forming a basis of its column space
187272`\spad{columnSpace(m)} returns a sublist of columns of the matrix \spad{m} forming a basis of its column space.
187377`\spad{commaSeparate(l)} creates the form separating the elements of \spad{l} by commas.
187431`\spad{comment(s)} creates a representation of the Strings \spad{s} as a multi-line FORTRAN comment.
187484`\spad{comment(s)} creates a representation of the String \spad{s} as a single FORTRAN comment.
187531`\spad{common(name,{} contents)} creates a representation a named common block.
187590`\spad{commonDenominator([q1,{} ...,{} qn])} returns a common denominator \spad{d} for \spad{q1},{} ...,{} \spad{qn}.
187661`\spad{commonDenominator(q)} returns a common denominator \spad{d} for the coefficients of \spad{q}.
187744`\spad{commonDenominator([q1,{} ...,{} qn])} returns a common denominator \spad{d} for \spad{q1},{} ...,{} \spad{qn}.
187808`\spad{commonDenominator(q)} returns a common denominator \spad{d} for the elements of \spad{q}.
187965`\spad{commutative?()} tests if multiplication in the algebra is commutative.
188042`\spad{commutative?()} tests if multiplication in the algebra is commutative.
188116`\spad{commutativeEquality(x,{} y)} returns \spad{true} if \spad{x} and \spad{y} are equal assuming commutativity
188189`\spad{commutator(v,{} w)} calculates the commutator of two vector fields.
188337`\spad{commutator(p,{} q)} computes \spad{inv(p) * inv(q) * p * q}.
188380`\spad{commutator(a,{} b)} returns \spad{a*b-b*a}.
188435`\spad{comp(f,{} g,{} x)} is \spad{f(g x)}.
188511`\spad{compactFraction(p)} normalizes the partial fraction \spad{p} to the compact representation. In this form,{} the partial fraction has only one fractional term per prime in the denominator.
188569`\spad{companionBlocks(m,{} lv)} returns \spad{[[C_1,{} lg_1],{} ...,{} [C_k,{} lg_k]]} such that each \spad{C_i} is a companion block and \spad{m = diagonal(C_1,{} ...,{} C_k)}.
188699`\spad{comparison(op,{} foo?)} attaches foo? as the "\%less?" property to \spad{op}. If \spad{op1} and \spad{op2} have the same name,{} and one of them has a "\%less?" property \spad{f},{} then \spad{f(op1,{} op2)} is called to decide whether \spad{op1 < op2}.
188764`\spad{compBound(p,{} lp)} computes a bound for the coefficients of the solution polynomials. Given a polynomial right hand side \spad{p},{} and a list \spad{lp} of left hand side polynomials. Exported because it depends on the valuation.
188840`\spad{compdegd should} be local
188975`\spad{compile(f,{} [t1,{} ...,{} tn])} forces the interpreter to compile the function \spad{f} with signature \spad{(t1,{} ...,{} tn) -> ?}. returns the symbol \spad{f} if successful. Error: if \spad{f} was not defined beforehand in the interpreter,{} or if the \spad{ti}\spad{'s} are not valid types,{} or if the compiler fails.
189033`\spad{compiledFunction(expr,{} x)} returns a function \spad{f: D -> I} defined by \spad{f(x) == expr}. Function \spad{f} is compiled and directly applicable to objects of type \spad{D}.
189116`\spad{compiledFunction(expr,{} x,{} y)} returns a function \spad{f: (D1,{} D2) -> I} defined by \spad{f(x,{} y) == expr}. Function \spad{f} is compiled and directly applicable to objects of type \spad{(D1,{} D2)}
189267`\spad{complement(u)} returns the complement of the set \spad{u},{} \spadignore{i.e.} the set of all values not in \spad{u}.
189423`\spad{complementaryBasis(b1,{} ...,{} bn)} returns the complementary basis \spad{(b1',{} ...,{} bn')} of \spad{(b1,{} ...,{} bn)}.
189514`\spad{complementSpace B} builds a complement space of the basis \spad{B} from some vectors of the canonical basis. This function fails with the empty basis.
189573`\spad{complementSpace Lv} builds a complement space of the subspace spanned by the list of vectors \spad{LV}. This function fails with the empty basis.
189645`\spad{complementSpace(B,{} n)} builds a complement space of the basis \spad{B} from some vectors of the canonical basis \spad{B}. The integer \spad{n} provides the length of the vectors in the case of the empty basis.
189723`\spad{complementSpace(Lv,{} n)} builds a complement space of the subspace spanned by the list of vectors \spad{LV}. The integer \spad{n} provides the length of the vectors in the case of the empty basis.
189865`\spad{complete(de)} completes \spad{de} to an involutive equation. No result is returned; the display depends of the setting of the output flags with \spadfun{setOutput}.
189948`\spad{complete(st)} causes all entries of 'st' to be computed. this function should only be called on streams which are known to be finite.
190003`\spad{complete(x)} forces the computation of all digits.
190059`\spad{complete(f)} causes all terms of \spad{f} to be computed. Note: this results in an infinite loop if \spad{f} has infinitely many terms.
190127`\spad{complete(x)} causes all entries in \spadvar{\spad{x}} to be computed. Normally entries are only computed as needed. If \spadvar{\spad{x}} is an infinite continued fraction,{} a user-initiated interrupt is necessary to stop the computation.
190180`\spad{complete n} is the \spad{n} th complete homogeneous \indented{1}{symmetric function expressed in terms of power sums.} \indented{1}{Alternatively it is the cycle index of the symmetric} \indented{1}{group of degree \spad{n}.}
190269`\spad{complete2(de)} is like \spadfun{complete} but returns the involutive equation \spad{IDe},{} a basis \spad{ISys} for the involutive system without prolongations,{} its order \spad{Order},{} the number \spad{NumProj} of needed projections and the Cartan charact
190269`--ers \spad{CarChar}.
190511`\spad{completeEchelonBasis(lv)} completes the basis {\em lv} assumed to be in echelon form of a subspace of {\em R^n} (\spad{n} the length of all the vectors in {\em lv}) with unit vectors to a basis of {\em R^n}. It is assumed that the argument is not an empty vector and that it is not the basis of the 0-subspace. Note: the rows of the result correspond to the vectors of the basis.
190603`\spad{completeEval(upoly,{} lvar,{} lval)} evaluates the polynomial \spad{upoly} with each variable in \spad{lvar} replaced by the corresponding value in lval. Substitutions are done for all variables in \spad{upoly} producing a univariate polynomial over \spad{R}.
190739`\spad{completeHensel(pol,{} lfact,{} prime,{} bound)} lifts \spad{lfact},{} the factorization mod \spad{prime} of \spad{pol},{} to the factorization mod prime^k>bound. Factors are recombined on the way.
190839`\spad{completeHermite} returns a record that contains the Hermite normal form \spad{H} of the matrix and the equivalence matrix \spad{U} such that U*m = \spad{H}
190929`\spad{completeSmith} returns a record that contains the Smith normal form \spad{H} of the matrix and the left and right equivalence matrices \spad{U} and \spad{V} such that U*m*v = \spad{H}
191032`\spad{complex?(t)} tests whether \spad{t} is equivalent to the FORTRAN type COMPLEX.
191087`\spad{complex(x,{} y)} constructs \spad{x} + \%i*y.
191138`\spad{complexEigenvalues(m,{} eps)} computes the eigenvalues of the matrix \spad{m} to precision eps. The eigenvalues are expressed as complex floats or complex rational numbers depending on the type of eps (float or rational).
191264`\spad{complexEigenvectors(m,{} eps)} returns a list of records each one containing a complex eigenvalue,{} its algebraic multiplicity,{} and a list of associated eigenvectors. All these results are computed to precision eps and are expressed as complex floats or complex rational numbers depending on the type of e
191264`--ps (float or rational).
191457`\spad{complexElementary(f)} rewrites \spad{f} in terms of the 2 fundamental complex transcendental elementary functions: \spad{log,{} exp}.
191535`\spad{complexElementary(f)} rewrites \spad{f} in terms of the 2 fundamental complex transcendental elementary functions: \spad{log,{} exp}.
191606`\spad{complexElementary(f,{} x)} rewrites the kernels of \spad{f} involving \spad{x} in terms of the 2 fundamental complex transcendental elementary functions: \spad{log,{} exp}.
191691`\spad{complexElementary(f,{} x)} rewrites the kernels of \spad{f} involving \spad{x} in terms of the 2 fundamental complex transcendental elementary functions: \spad{log,{} exp}.
191769`\spad{complexExpand(i)} returns the expanded complex function corresponding to \spad{i}.
191856`\spad{complexExpand(i)} returns the expanded complex function corresponding to \spad{i}.
191977`\spad{complexForm(f)} returns \spad{[real f,{} imag f]}.
192070`\spad{complexForm(f)} returns \spad{[real f,{} imag f]}.
192144`\spad{complexIntegrate(f,{} x)} returns the integral of \spad{f(x)dx} where \spad{x} is viewed as a complex variable.
192281`\spad{complexIntegrate(f,{} x)} returns the integral of \spad{f(x)dx} where \spad{x} is viewed as a complex variable.
192363`\spad{complexLimit(f(x),{} x = a)} computes the complex limit \spad{lim(x -> a,{} f(x))}.
192498`\spad{complexLimit(f(x),{} x = a)} computes the complex limit of \spad{f} as its argument \spad{x} approaches \spad{a}.
192662`\spad{complexLimit(f(x),{} x = a)} computes the complex limit of \spad{f} as its argument \spad{x} approaches \spad{a}.
192836`\spad{complexNormalize(f)} rewrites \spad{f} using the least possible number of complex independent kernels.
192913`\spad{complexNormalize(f)} rewrites \spad{f} using the least possible number of complex independent kernels.
192983`\spad{complexNormalize(f,{} x)} rewrites \spad{f} using the least possible number of complex independent kernels involving \spad{x}.
193067`\spad{complexNormalize(f,{} x)} rewrites \spad{f} using the least possible number of complex independent kernels involving \spad{x}.
193144`\spad{complexNumeric(x)} returns a complex approximation of \spad{x}.
193235`\spad{complexNumeric(x)} returns a complex approximation of \spad{x}.
193360`\spad{complexNumeric(x)} returns a complex approximation of \spad{x}.
193476`\spad{complexNumeric(x)} returns a complex approximation of \spad{x}.
193588`\spad{complexNumeric(x)} returns a complex approximation of \spad{x}.
193691`\spad{complexNumeric(x)} returns a complex approximation of \spad{x}.
193794`\spad{complexNumeric(x)} returns a complex approximation of \spad{x}.
193877`\spad{complexNumeric(x)} returns a complex approximation of \spad{x}.
193937`\spad{complexNumeric(x,{} n)} returns a complex approximation of \spad{x} up to \spad{n} decimal places.
194044`\spad{complexNumeric(x,{} n)} returns a complex approximation of \spad{x} up to \spad{n} decimal places.
194185`\spad{complexNumeric(x,{} n)} returns a complex approximation of \spad{x} up to \spad{n} decimal places.
194317`\spad{complexNumeric(x,{} n)} returns a complex approximation of \spad{x} up to \spad{n} decimal places.
194445`\spad{complexNumeric(x,{} n)} returns a complex approximation of \spad{x}
194564`\spad{complexNumeric(x,{} n)} returns a complex approximation of \spad{x} up to \spad{n} decimal places.
194683`\spad{complexNumeric(x,{} n)} returns a complex approximation of \spad{x} up to \spad{n} decimal places.
194782`\spad{complexNumeric(x,{} n)} returns a complex approximation of \spad{x} up to \spad{n} decimal places.
194858`\spad{complexNumericIfCan(x)} returns a complex approximation of \spad{x},{} or "failed" if \spad{x} is not a constant.
195004`\spad{complexNumericIfCan(x)} returns a complex approximation of \spad{x},{} or "failed" if \spad{x} is not a constant.
195141`\spad{complexNumericIfCan(x)} returns a complex approximation of \spad{x},{} or "failed" if \spad{x} is not a constant.
195274`\spad{complexNumericIfCan(x)} returns a complex approximation of \spad{x},{} or "failed" if \spad{x} is not a constant.
195398`\spad{complexNumericIfCan(x)} returns a complex approximation of \spad{x},{} or "failed" if \spad{x} is not constant.
195522`\spad{complexNumericIfCan(x)} returns a complex approximation of \spad{x},{} or "failed" if \spad{x} is not a constant.
195626`\spad{complexNumericIfCan(x,{} n)} returns a complex approximation of \spad{x} up to \spad{n} decimal places,{} or "failed" if \spad{x} is not a constant.
195788`\spad{complexNumericIfCan(x,{} n)} returns a complex approximation of \spad{x} up to \spad{n} decimal places,{} or "failed" if \spad{x} is not a constant.
195941`\spad{complexNumericIfCan(x,{} n)} returns a complex approximation of \spad{x} up to \spad{n} decimal places,{} or "failed" if \spad{x} is not a constant.
196090`\spad{complexNumericIfCan(x,{} n)} returns a complex approximation of \spad{x},{} or "failed" if \spad{x} is not a constant.
196230`\spad{complexNumericIfCan(x,{} n)} returns a complex approximation of \spad{x} up to \spad{n} decimal places,{} or "failed" if \spad{x} is not a constant.
196370`\spad{complexNumericIfCan(x,{} n)} returns a complex approximation of \spad{x} up to \spad{n} decimal places,{} or "failed" if \spad{x} is not a constant.
196490`\spad{complexRoots(rf,{} eps)} finds all the complex solutions of a univariate rational function with rational number coefficients. The solutions are computed to precision eps.
196610`\spad{complexRoots(lrf,{} lv,{} eps)} finds all the complex solutions of a list of rational functions with rational number coefficients with respect the the variables appearing in \spad{lv}. Each solution is computed to precision eps and returned as list corresponding to the order of variables in \spad{lv}.
196755`\spad{complexSolve(eq,{} eps)} finds all the complex solutions of the equation \spad{eq} of rational functions with rational rational coefficients with respect to all the variables appearing in \spad{eq},{} with precision eps.
196907`\spad{complexSolve(p,{} eps)} find all the complex solutions of the rational function \spad{p} with complex rational coefficients with respect to all the variables appearing in \spad{p},{} with precision eps.
197049`\spad{complexSolve(leq,{} eps)} finds all the complex solutions to precision eps of the system \spad{leq} of equations of rational functions over complex rationals with respect to all the variables appearing in \spad{lp}.
197213`\spad{complexSolve(lp,{} eps)} finds all the complex solutions to precision eps of the system \spad{lp} of rational functions over the complex rationals with respect to all the variables appearing in \spad{lp}.
197367`\spad{complexZeros(p)} tries to determine all complex zeros of the polynomial \spad{p} with accuracy given by the package constant {\em globalEps} which you may change by {\em setErrorBound}.
197449`\spad{complexZeros(p,{} eps)} tries to determine all complex zeros of the polynomial \spad{p} with accuracy given by {\em eps}.
197533`\spad{complexZeros(poly,{} eps)} finds the complex zeros of the univariate polynomial \spad{poly} to precision eps with solutions returned as complex floats or rationals depending on the type of eps.
197616`\spad{component(\spad{gi},{} pt)} modifies the graph \spad{\spad{gi}} of the domain \spadtype{GraphImage} to contain one point component,{} \spad{pt} whose point color,{} line color and point size are determined by the default functions \spadfun{pointColorDefault},{} \spadfun{lineColorDefault},{} and \spadfun{pointSizeDefault}.
197681`\spad{component(\spad{gi},{} lp,{} pal1,{} pal2,{} p)} sets the components of the graph,{} \spad{\spad{gi}} of the domain \spadtype{GraphImage},{} to the values given. The point list for \spad{\spad{gi}} is set to the list \spad{lp},{} the color of the points in \spad{lp} is set to the palette color \spad{pal1},{} the color of the lines which connect the points \spad{lp} is set to the palette color \s
197681`--pad{pal2},{} and the size of the points in \spad{lp} is given by the integer \spad{p}.
197784`\spad{component(\spad{gi},{} pt,{} pal1,{} pal2,{} ps)} modifies the graph \spad{\spad{gi}} of the domain \spadtype{GraphImage} to contain one point component,{} \spad{pt} whose point color is set to the palette color \spad{pal1},{} line color is set to the palette color \spad{pal2},{} and point size is set to the positive integer \spad{ps}.
197881`\spad{components(s)} takes the \spadtype{ThreeSpace} \spad{s},{} and creates a list containing a unique \spadtype{ThreeSpace} for each single component of \spad{s}. If \spad{s} has no components defined,{} the list returned is empty.
197943`\spad{compose(a,{} b)} composes the power series \spad{a} with the power series \spad{b}.
198030`\spad{compose(p,{} q)} \undocumented
198092`\spad{composite([s1,{} s2,{} ...,{} sn])} will create a new \spadtype{ThreeSpace} that is a union of all the components from each \spadtype{ThreeSpace} in the parameter list,{} grouped as a composite.
198331`\spad{composite(p,{} q)} returns \spad{h} if \spad{p = h(q)},{} and "failed" no such \spad{h} exists.
198436`\spad{composite(f,{} q)} returns \spad{h} if \spad{f} = \spad{h}(\spad{q}),{} and "failed" is no such \spad{h} exists.
198561`\spad{composites(s)} takes the \spadtype{ThreeSpace} \spad{s},{} and creates a list containing a unique \spadtype{ThreeSpace} for each single composite of \spad{s}. If \spad{s} has no composites defined (composites need to be explicitly created),{} the list returned is empty. Note that not all the components need to be part of a composite.
198623`\spad{compound(tr,{} inpt)} combine two transforms
198673`computeBasis is a helper function which computes a basis of a linear space which contains a lexicographic Groebner basis. It expects a basis (ordered by total degree,{} reverse lexicographic) of a zero dimensional ideal.
198842`\spad{computeCycleEntry(x,{} cycElt)},{} where cycElt is a pointer to a node in the cyclic part of the cyclic stream \spad{x},{} returns a pointer to the first node in the cycle
198910`\spad{computeCycleLength(s)} returns the length of the cycle of a cyclic stream \spad{t},{} where \spad{s} is a pointer to a node in the cyclic part of \spad{t}.
198992`\spad{computeInt(x,{} g,{} a,{} b,{} eval?)} returns the integral of \spad{f} for \spad{x} between a and \spad{b},{} assuming that \spad{g} is an indefinite integral of \spad{f} and \spad{f} has no pole between a and \spad{b}. If \spad{eval?} is \spad{true},{} then \spad{g} can be evaluated safely at \spad{a} and \spad{b},{} provided that they are 
198992`--finite values. Otherwise,{} limits must be computed.
199149`\spad{computePowers()} \undocumented
199443`\spad{concat(u)},{} where \spad{u} is a lists of aggregates \spad{[a,{} b,{} ...,{} c]},{} returns a single aggregate consisting of the elements of \spad{a} followed by those of \spad{b} followed ... by the elements of \spad{c}. Note: \spad{concat(a,{} b,{} ...,{} c) = concat(a,{} concat(b,{} ...,{} c))}.
199498`\spad{concat(u)} returns the left-to-right concatentation of the streams in \spad{u}. Note: \spad{concat(u) = reduce(concat,{} u)}.
200525`\spad{concat!(u,{} v)} destructively concatenates doubly-linked aggregate \spad{v} to the end of doubly-linked aggregate \spad{u}.
200608`\spad{concat!(u,{} v)} destructively appends \spad{v} to the end of \spad{u}. \spad{v} is unchanged
200671`\spad{concat(u,{} v)} returns an aggregate consisting of the elements of \spad{u} followed by the elements of \spad{v}. Note: if \spad{w = concat(u,{} v)} then \spad{w.i = u.i for i in indices u} and \spad{w.(j + maxIndex u) = v.j for j in indices v}.
200723`\spad{concat!(u,{} v)} destructively concatenates \spad{v} to the end of \spad{u}. Note: \spad{concat!(u,{} v) = setlast!(u,{} v)}.
200808`\spad{concat(u,{} v)} returns an aggregate \spad{w} consisting of the elements of \spad{u} followed by the elements of \spad{v}. Note: \spad{v = rest(w,{} \#a)}.
200868`\spad{concat!(u,{} x)} destructively adds element \spad{x} to the end of \spad{u}.
200930`\spad{concat(u,{} x)} returns aggregate \spad{u} with additional element \spad{x} at the end. Note: for lists,{} \spad{concat(u,{} x) == concat(u,{} [x])}
200981`\spad{concat!(u,{} x)} destructively adds element \spad{x} to the end of \spad{u}. Note: \spad{concat!(a,{} x) = setlast!(a,{} [x])}.
201065`\spad{concat(x,{} u)} returns aggregate \spad{u} with additional element at the front. Note: for lists: \spad{concat(x,{} u) == concat([x],{} u)}.
201116`\spad{concat(x,{} u)} returns aggregate consisting of \spad{x} followed by the elements of \spad{u}. Note: if \spad{v = concat(x,{} u)} then \spad{x = first v} and \spad{u = rest v}.
201175`\spad{cond(s,{} e)} creates a representation of the FORTRAN expression IF (\spad{s}) THEN \spad{e}.
201222`\spad{cond(s,{} e,{} f)} creates a representation of the FORTRAN expression IF (\spad{s}) THEN \spad{e} ELSE \spad{f}.
201272`\spad{condition(n)} returns the condition of the node \spad{n}.
201499`\spad{conditionP(mat)},{} given a matrix representing a homogeneous system of equations,{} returns a vector whose characteristic'th powers is a non-trivial solution,{} or "failed" if no such vector exists.
201585`\spad{conditionP(m)} returns a vector of elements,{} not all zero,{} whose \spad{p}\spad{-}th powers (\spad{p} is the characteristic of the domain) are a solution of the homogenous linear system represented by \spad{m},{} or "failed" is there is no such vector.
201712`\spad{conditions(a)} returns the list of the conditions of the leaves of a
201770`\spad{conditionsForIdempotents()} determines a complete list of polynomial equations for the coefficients of idempotents with respect to the fixed \spad{R}-module basis
201897`\spad{conditionsForIdempotents()} determines a complete list of polynomial equations for the coefficients of idempotents with respect to the fixed \spad{R}-module basis.
201994`\spad{conditionsForIdempotents()} determines a complete list of polynomial equations for the coefficients of idempotents with respect to the fixed \spad{R}-module basis.
202088`\spad{conditionsForIdempotents([v1,{} ...,{} vn])} determines a complete list of polynomial equations for the coefficients of idempotents with respect to the \spad{R}-module basis \spad{v1},{} ...,{} \spad{vn}
202326`\spad{conditionsForIdempotents([v1,{} ...,{} vn])} determines a complete list of polynomial equations for the coefficients of idempotents with respect to the \spad{R}-module basis \spad{v1},{} ...,{} \spad{vn}.
202434`\spad{conical(a,{} b)} transforms from conical coordinates to Cartesian coordinates: \spad{conical(a,{} b)} is a function which will map the point \spad{(lambda,{} mu,{} nu)} to \spad{x = lambda*mu*nu/(a*b)},{} \spad{y = lambda/a*sqrt((mu^2-a^2)*(nu^2-a^2)/(a^2-b^2))},{} \spad{z = lambda/b*sqrt((mu^2-b^2)*(nu^2-b^2)/(b^2-a^2))}.
202505`implements Clifford conjugate for a multivector by involution and reverse of each term separately using: grade: 0 1 2 3... multi: 1 \spad{-1} \spad{-1} 1...
202616`\spad{conjug(x)}should be local but conditional
202686`\spad{conjugate(p)} returns the conjugate partition of a partition \spad{p}
202877`\spad{conjugate(x + \%i y)} returns \spad{x} - \%\spad{i} \spad{y}.
202929`\spad{conjugate(o)} negates the imaginary parts \spad{i},{} \spad{j},{} \spad{k},{} \spad{E},{} \spad{I},{} \spad{J},{} \spad{K} of octonian \spad{o}.
202982`\spad{conjugate(q)} negates the imaginary parts of quaternion \spad{q}.
203037`\spad{conjugate(pt)} is the conjugate of the partition \spad{pt}.
203156`\spad{conjugate(p,{} q)} computes \spad{inv(q) * p * q}; this is 'right action by conjugation'.
203198`\spad{conjugates(lp)} is the stream of conjugates of a stream \indented{1}{of partitions \spad{lp}.}
203296`\spad{connect(v,{} n,{} s)} displays the lines connecting the graph points in field \spad{n} of the given two-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{TwoDimensionalViewport},{} if \spad{s} is "on",{} or does not display the lines if \spad{s} is "off".
203375`\spad{cons(r,{} s)} prepends \spad{r} to the stream \spad{s}
203425`\spad{cons(element,{} u)} appends \spad{element} onto the front of list \spad{u} and returns the new list. This new list and the old one will share some structure.
203463`\spad{cons(a,{} s)} returns a stream whose \spad{first} is \spad{a} and whose \spad{rest} is \spad{s}. Note: \spad{cons(a,{} s) = concat(a,{} s)}.
203503`\spad{consnewpol should} be local
203711`\spad{consRow!(A,{} r)} inserts the row \spad{r} at the top of the matrix \spad{A}.
203810`\spad{const?(f)} checks whether \spad{f} depends of jet variables.
203875`\spad{const(p)} coerces a polynomial into an element of the coefficient ring,{} if it is constant. Otherwise an error occurs.
204008`\spad{const c} is a function which produces \spad{c} when \indented{1}{applied to its argument.}
204061`\spad{constant?(p)} tests if \spad{p} contains no matching variables.
204110`\spad{constant?(p)} tests whether the polynomial \spad{p} belongs to the coefficient ring.
204169`\spad{constant(p)} return the constant term of \spad{p}.
204221`\spad{constant?(x)} returns \spad{true} if \spad{x} is constant.
204278`\spad{constant(x)} returns the constant term of \spad{x}.
204328`\spad{constant(f)} is the function \spad{g} \indented{1}{such that \spad{g a= f ()}.}
204388`\spad{constant(x)} tells the pattern matcher that \spad{x} should match only the symbol \spad{'x} and no other quantity. Error: if \spad{x} is not a symbol.
204447`\spad{constant(x)} tells the pattern matcher that \spad{x} should match only the symbol \spad{'x} and no other quantity.
204523`\spad{constantCoefficientRicDE(op,{} ric)} returns \spad{[[a1,{} L1],{} [a2,{} L2],{} ... ,{} [ak,{} Lk]]} such that any rational solution with no polynomial part of the associated Riccati equation of \spad{op y = 0} must be one of the \spad{ai}\spad{'s} in which case the equation for \spad{z = y e^{-int \spad{ai}}} is \spad{\spad{Li} z = 0}. \spad{ric} is a Riccati equation solver over 
204523`--\spad{F},{} whose input is the associated linear equation.
204640`\spad{constantIfCan(k)} \undocumented
204721`\spad{constantKernel(r)} \undocumented
204787`\spad{constantLeft(f)} is the function \spad{g} \indented{1}{such that \spad{g (a,{} b)= f b}.}
204856`\spad{constantOperator(a)} returns a nullary operator op such that \spad{op()} always evaluate to \spad{a}.
204933`\spad{constantOpIfCan(op)} returns \spad{a} if \spad{op} is the constant nullary operator always returning \spad{a},{} "failed" otherwise.
205025`\spad{constantRight(f)} is the function \spad{g} \indented{1}{such that \spad{g (a,{} b)= f a}.}
205095`\spad{constant_subspace(b,{} ld)} returns [\spad{M},{} \spad{nb}] such that \spad{nb} is basis of subspace spanned by \spad{b} over \spad{F} consistng of vectors with constant coordinates. \spad{M} is the transformation matrix,{} \spadignore{i.e.} \spad{mnb} = \spad{M} \spad{mb} where \spad{mb} (\spad{mnb} respectively) is matrix having \spad{b} (\spad{nb} resp
205095`--ectively) as rows.
205239`\spad{constantToUnaryFunction(s)} is a local function which takes the value of \spad{s},{} which may be a function of a constant,{} and returns a function which always returns the value \spadtype{DoubleFloat} \spad{s}.
205338`\spad{constDsolve(op,{} g,{} x)} returns \spad{[f,{} [y1,{} ...,{} ym]]} where \spad{f} is a particular solution of the equation \spad{op y = g},{} and the \spad{\spad{yi}}\spad{'s} form a basis for the solutions of \spad{op y = 0}.
205433`\spad{construct(lll)} creates a 3-\spad{D} matrix from a List List List \spad{R} \spad{lll}
205575`\spad{construct([v1,{} e1],{} ...,{} [vn,{} en])} returns the match result containing the matches (\spad{v1},{} \spad{e1}),{} ...,{} (\spad{vn},{} en).
205662`\spad{construct(lvt)} returns the same as \spad{[construct(vt.val,{} vt.tower) for vt in lvt]}
206037`\spad{construct(vt)} returns the same as \spad{construct(vt.val,{} vt.tower)}
206108`\spad{construct(s)} creates a splitting tree with value (\spadignore{i.e.} root vertex) given by \spad{s} and no children. Thus,{} if the status of \spad{s} is \spad{false},{} \spad{[s]} represents the starting point of the evaluation \spad{value(s)} under the hypothesis \spad{condition(s)}.
206176`\spad{construct(t)} converts an infinite tuple to a stream.
206233`\spad{construct(l)} is the inverse of fracPart.
206357`\spad{construct(l)} takes a list of terms and creates the object with these components.
206443`\spad{construct(x,{} y,{} ...,{} z)} returns the collection of elements \spad{x,{} y,{} ...,{} z} ordered as given. Equivalently written as \spad{[x,{} y,{} ...,{} z]\$D},{} where \spad{D} is the domain. \spad{D} may be omitted for those of type List.
206495`\spad{construct(x,{} y)} returns the Lie bracket \spad{[x,{} y]}.
206571`\spad{construct(a,{} b)} creates element of the product with components a and \spad{b}.
206618`\spad{construct(i,{} e)} \undocumented
206677`\spad{construct(x,{} y)} returns the Lie bracket \spad{[x,{} y]}.
206753`\spad{construct(x,{} y)} returns the Lie bracket \spad{[x,{} y]}.
206845`\spad{construct(op,{} la)} creates OutputForm with operator \spad{op} and arguments la
206927`\spad{construct(s,{} t)} makes a form \spad{s:} \spad{t}
206979`\spad{construct(v,{} t)} returns the same as \spad{construct(v,{} t,{} false)}
207032`\spad{construct(v,{} lt)} returns the same as \spad{[construct(v,{} t) for t in lt]}
207097`\spad{construct(x,{} y)} returns the Lie bracket of \spad{x} and \spad{y}.
207147`\spad{construct(type,{} dims)} creates an element of FortranType
207264`\spad{construct(type,{} dims)} creates an element of FortranType
207368`\spad{construct(v,{} t,{} b)} returns the non-empty node with value \spad{v},{} condition \spad{t} and flag \spad{b}
207429`\spad{construct(v,{} t,{} la)} creates a splitting tree with value (\spadignore{i.e.} root vertex) given by \spad{[v,{} t]\$S} and with \spad{la} as children list.
207491`\spad{construct(v,{} t,{} ls)} creates a splitting tree with value (\spadignore{i.e.} root vertex) given by \spad{[v,{} t]\$S} and with children list given by \spad{[[s]\$\% for s in ls]}.
207569`\spad{construct(v1,{} t,{} v2,{} lt)} creates a splitting tree with value (\spadignore{i.e.} root vertex) given by \spad{[v,{} t]\$S} and with children list given by \spad{[[[v,{} t]\$S]\$\% for s in ls]}.
207632`\spad{construct(mom,{} ccum,{} fcum,{} bcum)} constructs a distribution with moments \spad{mom},{} classical cumulants \spad{ccum},{} free cumulants \spad{fcum} and boolean cumulants \spad{bcum}. The user must make sure that these are consistent,{} otherwise the results are unpredictable!
207726`\spad{constructOrdered(l)} takes a list of terms and creates the object with these components. The list is assumed to be sorted (in reverse order) with respect to the ordering of \spad{S}. If \spad{R} is a monoid,{} then the list is assumend to contain no zero elements. Caution: No checking is performed,{} so this should only be used in cases where those conditions are assured. If in doubt use construct
207819`\spad{contains?(i,{} f)} returns \spad{true} if \spad{f} is contained within the interval \spad{i},{} \spad{false} otherwise.
207879`\spad{containsPoint?(n,{} p)} returns \spad{true} if the point is inside \indented{2}{the boundary.} \spad{n} is the boundary \spad{p} is the point
207939`\spad{content([f1,{} ..,{} fk])} = content of a list of univariate polynonials
208234`\spad{content(p)} gives the \spad{gcd} of the coefficients of polynomial \spad{p}.
208309`\spad{content(l)} returns the \spad{gcd} of all the coefficients of \spad{l}.
208537`\spad{content(p,{} v)} is the \spad{gcd} of the coefficients of the polynomial \spad{p} when \spad{p} is viewed as a univariate polynomial with respect to the variable \spad{v}. Thus,{} for polynomial 7*x^2*y + 14*x*y^2,{} the \spad{gcd} of the coefficients with respect to \spad{x} is 7*y.
208622`\spad{continue(l)} creates a representation of a FORTRAN CONTINUE labelled with \spad{l}
208772`\spad{continuedFraction(x)} converts the \spad{p}-adic rational number \spad{x} to a continued fraction.
208968`\spad{continuedFraction(f)} converts the floating point number \spad{f} to a reduced continued fraction.
209060`\spad{continuedFraction(r)} converts the fraction \spadvar{\spad{r}} with components of type \spad{R} to a continued fraction over \spad{R}.
209131`\spad{continuedFraction(b0,{} a,{} b)} constructs a continued fraction in the following way: if \spad{a = [a1,{} a2,{} ...]} and \spad{b = [b1,{} b2,{} ...]} then the result is the continued fraction \spad{b0 + a1/(b1 + a2/(b2 + ...))}.
209212`given a mapping from this graph this function tries to calculate a unique reverse mapping back to this graph
209329`given a mapping from this graph this function tries to calculate a unique reverse mapping back to this graph
209451`\spad{contract(v,{} om)} computes the interior derivative of \spad{om} with respect to \spad{v}.
209525`\spad{contract(I,{} lvar)} contracts the ideal \spad{I} to the polynomial ring \spad{F[lvar]}.
209921`\spad{contract(t,{} i,{} j)} is the contraction of tensor \spad{t} which sums along the \spad{i}\spad{-}th and \spad{j}\spad{-}th indices. For example,{} if \spad{r = contract(t,{} 1,{} 3)} for a rank 4 tensor \spad{t},{} then \spad{r} is the rank 2 \spad{(= 4 - 2)} tensor given by \indented{4}{\spad{r(i,{} j) = sum(h=1..dim,{} t(h,{} i,{} h,{} j))}.}
209998`\spad{contract(t,{} i,{} s,{} j)} is the inner product of tenors \spad{s} and \spad{t} which sums along the \spad{k1}\spad{-}th index of \spad{t} and the \spad{k2}\spad{-}th index of \spad{s}. For example,{} if \spad{r = contract(s,{} 2,{} t,{} 1)} for rank 3 tensors rank 3 tensors \spad{s} and \spad{t},{} then \spad{r} is the rank 4 \spad{(= 3 + 3 - 2)} tensor given by \indented{4}{\spad{r(i,{} j,{} k,{} l) = sum(h=1..dim,
209998`--{} s(i,{} h,{} j)*t(h,{} k,{} l))}.}
210078`\spad{contractSolve(eq,{} x)} finds the solutions expressed in terms of radicals of the equation of rational functions \spad{eq} with respect to the symbol \spad{x}. The result contains new symbols for common subexpressions in order to reduce the size of the output.
210233`\spad{contractSolve(rf,{} x)} finds the solutions expressed in terms of radicals of the equation \spad{rf} = 0 with respect to the symbol \spad{x},{} where \spad{rf} is a rational function. The result contains new symbols for common subexpressions in order to reduce the size of the output.
210378`\spad{controlPanel(v,{} s)} displays the control panel of the given two-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{TwoDimensionalViewport},{} if \spad{s} is "on",{} or hides the control panel if \spad{s} is "off".
210446`\spad{controlPanel(v,{} s)} displays the control panel of the given three-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{ThreeDimensionalViewport},{} if \spad{s} is "on",{} or hides the control panel if \spad{s} is "off".
210516`\spad{convergents(x)} returns the stream of the convergents of the continued fraction \spadvar{\spad{x}}. If the continued fraction is finite,{} then the stream will be finite.
210589`\spad{convert(p)} converts a polynomial \spad{p} in distributive representation into a polynomial in recursive representation.
211097`\spad{convert(cs)} converts the complex expression \spad{cs} to a pattern
211213`\spad{convert(p)} converts a polynomial \spad{p} in recursive representation into a polynomial in distributive representation.
211310`\spad{convert(l1)} converts an operator \spad{l1} from \spadtype{LinearOrdinaryDifferentialOperator1} to \spadtype{LinearOrdinaryDifferentialOperator3} such that the resultant operator gives the same result as the original one on application to an element of domain \spad{R}.
211450`\spad{convert(l3)} converts an operator \spad{l3} from \spadtype{LinearOrdinaryDifferentialOperator3} to \spadtype{LinearOrdinaryDifferentialOperator1} such that the resultant operator gives the same result as the original one on application to an element of domain \spad{R}.
211590`\spad{convert([a1,{} ...,{} an])} returns the pattern \spad{[a1,{} ...,{} an]}.
211638`\spad{convert(lp)} returns the polynomial set whose members are the polynomials of \spad{lp}.
211953`\spad{convert(a)} transforms a into element of \%.
212239`\spad{convert(s)} makes \spad{s} into an input form.
214465`\spad{convert(a)} transforms a into an element of \spad{S}.
214512`\spad{convert(a)} returns the coordinates of \spad{a} with respect to the fixed \spad{R}-module basis.
214570`\spad{convert(a)} returns the coordinates of \spad{a} with respect to the fixed \spad{R}-module basis.
214639`\spad{convert(x)} converts a \spadtype{DoubleFloat} \spad{x} to a \spadtype{Float}.
214685`\spad{convert(f1\^e1 ... fm\^em)} returns \spad{(f1)\^e1 ... (fm)\^em} as an element of \%,{} using formal kernels created using a \spadfunFrom{paren}{ExpressionSpace}.
214764`\spad{convert(x)} returns the Lisp atom \spad{x}.
214833`\spad{convert(x)} returns the Lisp atom \spad{x}.
214902`\spad{convert([a1,{} ...,{} an])} returns the \spad{S}-expression \spad{(a1,{} ...,{} an)}.
214976`\spad{convert(l)} takes a list of elements,{} \spad{l},{} from the domain Ring and returns the form of point category.
215029`\spad{convert(q)} converts \spad{q}.
215189`\spad{convert(q)} converts \spad{q}.
215371`\spad{convert(p)} returns the same as \spad{retract(p)}.
215531`\spad{convert(p)} returns the same as \spad{retract(p)}.
215681`\spad{convert(p)} returns the same as \spad{retract(p)}.
215860`\spad{convert(p)} returns \spad{p} as an element of the current domain if all its variables belong to \spad{V},{} otherwise an error is produced.
215965`\spad{convert(p)} converts \spad{p}.
216287`\spad{convert(i)} creates the segment \spad{i..i}.
216336`\spad{convert(u)} converts \spad{u}.
216482`\spad{convert(st)} returns the members of \spad{st}.
216773`\spad{convert(x)} returns the Lisp atom \spad{x}.
216842`\spad{convert(x)} returns the Lisp atom \spad{x}.
216911`\spad{convert(n)} creates a roman numeral for symbol \spad{n}.
216959`\spad{convert(up)} converts the univariate polynomial \spad{up} to an algebra element,{} reducing by the \spad{definingPolynomial()} if necessary.
217013`\spad{convert([a1,{} ..,{} an])} returns \spad{a1*v1 + ... + an*vn},{} where \spad{v1},{} ...,{} \spad{vn} are the elements of the fixed basis.
217071`\spad{convert([a1,{} ...,{} an])} returns \spad{a1*v1 + ... + an*vn},{} where \spad{v1},{} ...,{} \spad{vn} are the elements of the fixed \spad{R}-module basis.
217140`\spad{convert(o,{} step)} changes \spad{o} in standard output format to given format and also adds the given step number.
217211`\spad{convert(o,{} step)} changes \spad{o} in standard output format to SCRIPT formula format and also adds the given step number. This is useful if you want to create equations with given numbers or have the equation numbers correspond to the interpreter step numbers.
217278`\spad{convert(o,{} step)} changes \spad{o} in standard output format to TeX format and also adds the given step number. This is useful if you want to create equations with given numbers or have the equation numbers correspond to the interpreter step numbers.
217335`\spad{convert(o,{} step,{} type)} changes \spad{o} in standard output format to TeX format and also adds the given \spad{step} number and type. This is useful if you want to create equations with given numbers or have the equation numbers correspond to the interpreter \spad{step} numbers.
217403`\spad{coord(p)} specifies a change of coordinates of point \spad{p}. This option is expressed in the form \spad{coord == p}.
217481`\spad{coord }\undocumented
217647`\spad{coord(l,{} p)} takes the list of draw options,{} \spad{l},{} and checks the list to see if it contains the option \spad{coord}. If the option does not exist the value,{} \spad{p} is returned.
217790`\spad{coordinate(c,{} i)} returns a coordinate function for \spad{c} using 1-based indexing according to \spad{i}. This indicates what the function for the coordinate component \spad{i} of the plane curve is.
217898`\spad{coordinate(c,{} i)} returns a coordinate function of \spad{c} using 1-based indexing according to \spad{i}. This indicates what the function for the coordinate component,{} \spad{i},{} of the space curve is.
218006`\spad{coordinate(s,{} i)} returns a coordinate function of \spad{s} using 1-based indexing according to \spad{i}. This indicates what the function for the coordinate component,{} \spad{i},{} of the surface is.
218661`\spad{coordinates(a)} returns the coordinates of \spad{a} with respect to the fixed \spad{F}-vector space basis.
218736`\spad{coordinates(a)} returns the coordinates of \spad{a} with respect to the fixed \spad{R}-module basis.
218798`\spad{coordinates(a)} returns the coordinates of \spad{a} with respect to the fixed \spad{R}-module basis.
218871`\spad{coordinates(p)} specifies a change of coordinate systems of point \spad{p}. This option is expressed in the form \spad{coordinates == p}.
218955`\spad{coordinates([v1,{} ...,{} vm])} returns the coordinates of the \spad{vi}\spad{'s} with to the fixed basis. The coordinates of \spad{vi} are contained in the \spad{i}th row of the matrix returned by this function.
219038`\spad{coordinates([v1,{} ...,{} vm])} returns the coordinates of the \spad{vi}\spad{'s} with to the fixed basis. The coordinates of \spad{vi} are contained in the \spad{i}th row of the matrix returned by this function.
219108`\spad{coordinates([a1,{} ...,{} am])} returns a matrix whose \spad{i}-th row is formed by the coordinates of \spad{\spad{ai}} with respect to the fixed \spad{R}-module basis.
219563`\spad{coordinates(v,{} B)} computes the coordinates of the vector \spad{v} in the basis \spad{B} if possible and produces an error otherwise.
220049`\spad{coordinates(a,{} basis)} returns the coordinates of \spad{a} with respect to the basis \spad{basis}.
220126`\spad{coordinates(a,{} [v1,{} ...,{} vn])} returns the coordinates of \spad{a} with respect to the \spad{R}-module basis \spad{v1},{} ...,{} \spad{vn}.
220214`\spad{coordinates(a,{} [v1,{} ...,{} vn])} returns the coordinates of \spad{a} with respect to the \spad{R}-module basis \spad{v1},{} ...,{} \spad{vn}.
220309`\spad{coordinates([v1,{} ...,{} vm],{} basis)} returns the coordinates of the \spad{vi}\spad{'s} with to the basis \spad{basis}. The coordinates of \spad{vi} are contained in the \spad{i}th row of the matrix returned by this function.
220394`\spad{coordinates([a1,{} ...,{} am],{} [v1,{} ...,{} vn])} returns a matrix whose \spad{i}-th row is formed by the coordinates of \spad{\spad{ai}} with respect to the \spad{R}-module basis \spad{v1},{} ...,{} \spad{vn}.
220490`\spad{coordinatesIfCan(v,{} B)} computes the coordinates of the vector \spad{v} in the basis \spad{B} if possible and returns \spad{"failed"} otherwise.
220583`\spad{copies(i,{} s)} will take a string \spad{s} and create a new string composed of \spad{i} copies of \spad{s}.
220644`\spad{coproduct(x)} computes the coproduct of an element \spad{x}
220695`\spad{copy(De)} returns a copy of the equation \spad{De}.
220753`\spad{copy(om)} returns a copy of the differential \spad{om}.
220803`\spad{copy(v)} returns a copy of the vector field \spad{v}.
220852`\spad{copy(p)} returns a recursive copy of \spad{p}.
220891`\spad{copy(A)} returns a copy of the matrix \spad{A}.
220944`\spad{copy(n)} returns a copy of \spad{n}.
220991`\spad{copy(x)} \undocumented
221344`\spad{copy(u)} returns a top-level (non-recursive) copy of \spad{u}. Note: for collections,{} \spad{copy(u) == [x for x in u]}.
221382`\spad{copy(n)} gives a copy of \spad{n}.
221430`\spad{copy(s)} returns a new \spadtype{ThreeSpace} that is an exact copy of \spad{s}.
221480`\spad{copy(op)} returns a copy of \spad{op}.
221522`\spad{copy!(c,{} a)} copies the matrix \spad{a} into the matrix \spad{c}. Error: if \spad{a} and \spad{c} do not have the same dimensions.
221611`\spad{copy_first(v1,{} v2,{} n)} copies first \spad{n} elements of \spad{v2} into \spad{n} first positions in \spad{v1}.
221829`\spad{copyInto!(u,{} v,{} i)} returns aggregate \spad{u} containing a copy of \spad{v} inserted at element \spad{i}.
221945`copy_first(\spad{v1},{} \spad{v2},{} \spad{m},{} \spad{n}) copies the slice of \spad{v2} starting at \spad{m} elements and having \spad{n} elements into corresponding positions in \spad{v1}.
222044`\spad{corrPoly(u,{} lv,{} lr,{} ln,{} lu,{} bsolv)} solves polynomial equation system u/f = sum(ai/lu(\spad{i})) where \spad{f} is product of \spad{lu}(\spad{i}) and deg(\spad{ai}) < deg(\spad{lu}(\spad{i})
222044`--) using modular method. corrPoly returns "failed" if there are no solution. \spad{lv} is list of variables,{} \spad{lr} is list of corresponding evaluation points,{} bsolv is solver over \spad{R} specialized for modular images of \spad{lu}.
222345`\spad{cos(x)} represents the Fortran intrinsic function COS
222425`\spad{cos(x)} makes a cos kernel for use in Fourier series
222471`\spad{cos(x)} applies the cosine operator to \spad{x}
222622`\spad{cos(st)} computes cosine of a power series \spad{st}.
222705`\spad{cos(st)} computes cosine of a power series \spad{st}.
222802`\spad{cos(z)} returns the cosine of Laurent series \spad{z}.
222888`\spad{cos(z)} returns the cosine of a Puiseux series \spad{z}.
222983`\spad{cos(x)} returns the cosine of \spad{x}.
223040`\spad{cos2sec(f)} converts every \spad{cos(u)} appearing in \spad{f} into \spad{1/sec(u)}.
223102`\spad{cosh(x)} represents the Fortran intrinsic function COSH
223183`\spad{cosh(x)} applies the hyperbolic cosine operator to \spad{x}
223389`\spad{cosh(st)} computes the hyperbolic cosine of a power series \spad{st}.
223473`\spad{cosh(st)} computes the hyperbolic cosine of a power series \spad{st}.
223571`\spad{cosh(z)} returns the hyperbolic cosine of Laurent series \spad{z}.
223658`\spad{cosh(z)} returns the hyperbolic cosine of a Puiseux series \spad{z}.
223754`\spad{cosh(x)} returns the hyperbolic cosine of \spad{x}.
223809`\spad{cosh2sech(f)} converts every \spad{cosh(u)} appearing in \spad{f} into \spad{1/sech(u)}.
223873`\spad{coshIfCan(z)} returns cosh(\spad{z}) if possible,{} and "failed" otherwise.
223954`\spad{cosIfCan(z)} returns cos(\spad{z}) if possible,{} and "failed" otherwise.
224034`\spad{cosSinInfo(n)} returns the list of lists of values for \spad{n},{} in the form: \spad{[[cos(n - 1) a,{} sin(n - 1) a],{} ...,{} [cos 2 a,{} sin 2 a],{} [cos a,{} sin a]]} where \spad{a = 2 pi/n}. Note: \spad{n} should be greater than 2.
224108`\spad{cot(x)} applies the cotangent operator to \spad{x}
224271`\spad{cot(st)} computes cotangent of a power series \spad{st}.
224354`\spad{cot(st)} computes cotangent of a power series \spad{st}.
224451`\spad{cot(z)} returns the cotangent of Laurent series \spad{z}.
224537`\spad{cot(z)} returns the cotangent of a Puiseux series \spad{z}.
224632`\spad{cot(x)} returns the cotangent of \spad{x}.
224689`\spad{cot2tan(f)} converts every \spad{cot(u)} appearing in \spad{f} into \spad{1/tan(u)}.
224751`\spad{cot2trig(f)} converts every \spad{cot(u)} appearing in \spad{f} into \spad{cos(u)/sin(u)}.
224814`\spad{coth(x)} applies the hyperbolic cotangent operator to \spad{x}
224977`\spad{coth(st)} computes the hyperbolic cotangent of a power series \spad{st}.
225061`\spad{coth(st)} computes the hyperbolic cotangent of a power series \spad{st}.
225159`\spad{coth(z)} returns the hyperbolic cotangent of Laurent series \spad{z}.
225246`\spad{coth(z)} returns the hyperbolic cotangent of a Puiseux series \spad{z}.
225342`\spad{coth(x)} returns the hyperbolic cotangent of \spad{x}.
225397`\spad{coth2tanh(f)} converts every \spad{coth(u)} appearing in \spad{f} into \spad{1/tanh(u)}.
225461`\spad{coth2trigh(f)} converts every \spad{coth(u)} appearing in \spad{f} into \spad{cosh(u)/sinh(u)}.
225526`\spad{cothIfCan(z)} returns coth(\spad{z}) if possible,{} and "failed" otherwise.
225607`\spad{cotIfCan(z)} returns cot(\spad{z}) if possible,{} and "failed" otherwise.
225687`\spad{counit(x)} evaluates the counit at an element \spad{x}
226725`\spad{count(x,{} u)} returns the number of occurrences of \spad{x} in \spad{u}. For collections,{} \spad{count(x,{} u) = reduce(+,{} [x=y for y in u],{} 0)}.
226841`\spad{count(p,{} u)} returns the number of elements \spad{x} in \spad{u} such that \spad{p(x)} is \spad{true}. For collections,{} \spad{count(p,{} u) = reduce(+,{} [1 for x in u | p(x)],{} 0)}.
226946`\spad{countable?(\spad{a})} determines whether \spad{a} is a countable cardinal,{} \spadignore{i.e.} an integer or \spad{Aleph 0}.
227000`\spad{countRealRoots(p)} says how many real roots \spad{p} has
227091`\spad{countRealRootsMultiple(p)} says how many real roots \spad{p} has,{} counted with multiplicity
227206`\spad{cPower(f,{} r)} computes \spad{f^r},{} where \spad{f} has constant coefficient 1. For use when the coefficient ring is commutative.
227316`\spad{cRationalPower(f,{} r)} computes \spad{f^r}. For use when the coefficient ring is commutative.
227492`\spad{create3Space()} creates a \spadtype{ThreeSpace} object capable of holding point,{} curve,{} mesh components and any combination.
227548`\spad{create3Space(s)} creates a \spadtype{ThreeSpace} object containing objects pre-defined within some \spadtype{SubSpace} \spad{s}.
227617`\spad{createArrows2Din2D(ptFun,{} uSeg,{} vSeg,{} numPts)} creates arrows to represent output for each input point in other words this represents a two dimensional force field with the arrows showing the direction of the field
227736`\spad{createGenericMatrix(m)} creates a square matrix of dimension \spad{k} whose entry at the \spad{i}-th row and \spad{j}-th column is the indeterminate {\em x[i,{} j]} (double subscripted).
227840`\spad{createIrreduciblePoly(n)}\$FFPOLY(\spad{GF}) generates a monic irreducible univariate polynomial of degree \spad{n} over the finite field {\em GF}.
227959`\spad{createLowComplexityNormalBasis(n)} tries to find a a low complexity normal basis of degree {\em n} over {\em GF} and returns its multiplication matrix If no low complexity basis is found it calls \spadfunFrom{createNormalPoly}{FiniteFieldPolynomialPackage}(\spad{n}) to produce a normal polynomial of degree {\em n} over {\
227959`--em GF}
228137`\spad{createLowComplexityTable(n)} tries to find a low complexity normal basis of degree {\em n} over {\em GF} and returns its multiplication matrix Fails,{} if it does not find a low complexity basis
228287`\spad{createMultiplicationMatrix(m)} forms the multiplication table {\em m} into a matrix over the ground field.
228418`\spad{createMultiplicationTable(f)} generates a multiplication table for the normal basis of the field extension determined by {\em f}. This is needed to perform multiplications between elements represented as coordinate vectors to this basis. See \spadtype{FFNBP},{} \spadtype{FFNBX}.
228639`\spad{createNormalElement()} computes a normal element over the ground field \spad{F},{} that is,{} \spad{a^(q^i),{} 0 <= i < extensionDegree()} is an \spad{F}-basis,{} where \spad{q = size()\$F}. Reference: Such an element exists Lidl/Niederreiter: Theorem 2.35.
228726`\spad{createNormalPoly(n)}\$FFPOLY(\spad{GF}) generates a normal polynomial of degree \spad{n} over the finite field {\em GF}.
228840`\spad{createNormalPrimitivePoly(n)}\$FFPOLY(\spad{GF}) generates a normal and primitive polynomial of degree \spad{n} over the field {\em GF}. Note: this function is equivalent to createPrimitiveNormalPoly(\spad{n})
228963`\spad{createPlot1Din2D(f,{} tRange,{} numPts)} creates two dimensional function plot. Draws the graph of \spad{y} = \spad{f}(\spad{x}) as \spad{x} ranges from min(a,{} \spad{b}) to max(a,{} \spad{b}). \spad{tRange} is a..\spad{b}
229077`\spad{createPlot1Din2D(f,{} tRange,{} numPts)} creates a two dimensional function plot draws the graph from a mapping of float to point as \spad{x} ranges from min(a,{} \spad{b}) to max(a,{} \spad{b}). \spad{tRange} is a..\spad{b}
229182`\spad{createPlot1Din2Dparametric(ppc,{} tRange,{} numPts)} creates a node from plot using Parametric Plane Curve. This represents 1 dimension (line - possibly curved) in 2 dimensions (plane) In theory a line has no width but in that case we would not see it so we give it a width given by the material node that is applicable in this part of the scene graph \sp
229182`--ad{PPC} is ParametricPlaneCurve(\spad{DF} \spad{->} \spad{DF}) which is created with curve(\spad{f1},{} \spad{f2}) where \spad{f1} and \spad{f2} are functions of type ComponentFunction,{} in this case \spad{DF} \spad{->} \spad{DF}
229328`\spad{createPlot1Din3Dparametric(pcfun,{} tRange,{} numPts)} create a line (1D subspace) in 3D space. This represents 1 dimension (line - possibly curved) in 3 dimensions In theory a line has no width but in that case we would not see it so we give it a width given by the material node that is applicable in this part of the scene graph PCFUN is a function from float to point: \spad{DF} \sp
229328`--ad{->} \spad{PT}
229443`\spad{createPlot1Din3Dparametric(psc,{} tRange,{} numPts)} create a line (1D subspace) in 3D space. This represents 1 dimension (line - possibly curved) in 3 dimensions In theory a line has no width but in that case we would not see it so we give it a width given by the material node that is applicable in this part of the scene graph \spad{PSC} ParametricSpac
229443`--eCurve(\spad{DF} \spad{->} \spad{DF}) is created with curve(\spad{f1},{} \spad{f2},{} \spad{f3}) where \spad{f1},{} \spad{f2} and \spad{f3} are functions of type ComponentFunction,{} in this case \spad{DF} \spad{->} \spad{DF}
229589`\spad{createPlot2Din3D(f,{} a..b,{} c..d)} returns a scene node which contains the graph of \spad{z} = \spad{f}(\spad{x},{} \spad{y}) as \spad{x} ranges from min(a,{} \spad{b}) to max(a,{} \spad{b}) and \spad{y} ranges from min(\spad{c},{} \spad{d}) to max(\spad{c},{} \spad{d}). create a surface (2D subspace) in 3D space The surface is approximated by polygo
229589`--ns which are represented by in indexed face set (IFS) node
229736`\spad{createPlot2Din3D(ptFun,{} uSeg,{} vSeg,{} numPts)} create a surface (2D subspace) in 3D space. The surface is approximated by polygons which are represented by in indexed face set (IFS) node
229874`\spad{createPlot2Din3Dparametric(f,{} a..b,{} c..d,{} l)} returns a scene node which contains the graph of the parametric surface \spad{f}(\spad{u},{} \spad{v}) as \spad{u} ranges from min(a,{} \spad{b}) to max(a,{} \spad{b}) and \spad{v} ranges from min(\spad{c},{} \spad{d}) to max(\spad{c},{} \spad{d}). This creates a surface (2D subspace) in 3D space The
229874`-- surface is approximated by polygons which are represented by in indexed face set (IFS) node
230022`\spad{createPlot2Din3Dparametric(surface(f,{} g,{} h),{} a..b,{} c..d,{} l)} returns a scene node which contains the graph of the parametric surface \spad{x} = \spad{f}(\spad{u},{} \spad{v}),{} \spad{y} = \spad{g}(\spad{u},{} \spad{v}),{} \spad{z} = \spad{h}(\spad{u},{} \spad{v}) as \spad{u} ranges from min(a,{} \spad{b}) to max(
230022`--a,{} \spad{b}) and \spad{v} ranges from min(\spad{c},{} \spad{d}) to max(\spad{c},{} \spad{d}). This creates a surface (2D subspace) in 3D space The surface is approximated by polygons which are represented by in indexed face set (IFS) node
230260`\spad{createPrimitiveElement()} computes a generator of the (cyclic) multiplicative group of the field.
230324`\spad{createPrimitiveNormalPoly(n)}\$FFPOLY(\spad{GF}) generates a normal and primitive polynomial of degree \spad{n} over the field {\em GF}. polynomial of degree \spad{n} over the field {\em GF}.
230447`\spad{createPrimitivePoly(n)}\$FFPOLY(\spad{GF}) generates a primitive polynomial of degree \spad{n} over the finite field {\em GF}.
230564`\spad{createRandomElement(aG,{} x)} creates a random element of the group algebra generated by {\em aG}.
230663`\spad{createSceneArrow(st,{} en,{} offset,{} mode,{} size)} constructs an arrow node,{} in \spad{n}-dimensional space,{} going from \spad{st} to \spad{en}. 'st' and 'en' are determined from a list of points from named points node. \spad{st} is the start of the arrow \spad{en} is the end of the arrow 'mode' and 'size' parameters determine the size of the arrowhead. \spad{mode} can have the following values: \indented{2}{"
230663`--fixed"::Symbol \spad{
230663`--} fixed size line width given by 'size' parameter} \indented{2}{"proportional"::Symbol \spad{
230663`--} size as a proportion of the overall bounds} \indented{2}{"variable"::Symbol \spad{
230663`--} size as a proportion of the arrow length} So "proportional" would typically be used when drawing a graph (in graph theory) where it looks better if each arrow head is the same. "variable" would typically be used when drawing a force field where a bigger arrow head might indicate a stronger f
230663`--orce.
230746`\spad{createSceneArrow(st,{} en,{} offset,{} mode,{} size,{} fontScale)} constructs an arrow node,{} in \spad{n}-dimensional space,{} going from \spad{st} to \spad{en}. 'st' and 'en' are nodes in the scene and the arrows will be drawn upto their boundary. \spad{st} is the node at the start of the arrow \spad{en} is the node at the end of the arrow 'mode' and 'size' parameters determine the \spad{size} of the arrowhea
230746`--d. \spad{mode} can have the following values: \indented{2}{"fixed"::Symbol \spad{
230746`--} fixed \spad{size} line width given by 'size' parameter} \indented{2}{"proportional"::Symbol \spad{
230746`--} \spad{size} as a proportion of the overall bounds} \indented{2}{"variable"::Symbol \spad{
230746`--} \spad{size} as a proportion of the arrow length} So "proportional" would typically be used when drawing a graph (in graph theory) where it looks better if each arrow head is the same. "variable" would typically be used
230746`-- when drawing a force field where a bigger arrow head might indicate a stronger force. fontScale should be set to the full width of the diagram (not just the width of this node). If this is not known then choose an approximate value. This only affects text nodes,{} if \spad{st} or \spad{en},{} or its subnodes,{} do not contain a text node then its value is not significant.
230833`\spad{createSceneArrows(line,{} mode,{} size)} constructs an arrow node,{} this contains arrows (represented by a list of points) in \spad{n}-dimensional space. The space is implicit in the \spad{PT} and \spad{TR} parameters supplied when this Scene was created. 'mode' and 'size' parameters determine the size of the arrowhead. \spad{mode} can have the following values: \indented{2}{"fixed"::Symbol \spad{
230833`--} fixed size \sp
230833`--ad{line} width given by 'size' parameter} \indented{2}{"proportional"::Symbol \spad{
230833`--} size as a proportion of the overall bounds} \indented{2}{"variable"::Symbol \spad{
230833`--} size as a proportion of the arrow length} So "proportional" would typically be used when drawing a graph (in graph theory) where it looks better if each arrow head is the same. "variable" would typically be used when drawing a force field where a bigger arrow head might indicate a stronger force.
230915`\spad{createSceneBox(size)} constructs an indexed face set node which is a 3D box of a given \spad{size}
230972`deprecated: this has been superseded by version with SBoundary(\spad{PT}) do not use,{} may be removed in the future.
231042`\spad{createSceneClip(bb)} constructs a clip node,{} clips its sub nodes in the coordinate system in force at the clip node.
231102`\spad{createSceneDef(nam,{} nde)} defines a point in the scenegraph so that it can be used elsewhere.
231157`\spad{createSceneGraph(g,{} x,{} y,{} dispArrowName)} creates a graph theory diagram
231272`deprecated: this has been superseded by version with SBoundary(\spad{PT}) do not use,{} may be removed in the future.
231342`\spad{createSceneGrid(bb)} constructs a grid with narrow blue lines every 20 units wide blue lines every 100 units wide red lines every 200 units
231402`deprecated: this has been superseded by version with SBoundary(\spad{PT}) do not use,{} may be removed in the future.
231484`\spad{createSceneGrid(stepSize,{} bb)} constructs a grid,{} consists of a group,{} under which are vertical and horizontal lines. The spacing between lines is given by step.
231556`\spad{createSceneGroup()} constructs a group node,{} this node does not do anything itself but contains other nodes
231604`\spad{createSceneIFS(in1)} constructs an indexed face set node,{} this defines a surface represented by a set of polygons in \spad{n}-dimensional space.
231662`\spad{createSceneIFS(inx,{} pts)} constructs an indexed face set node,{} this defines a surface represented by a set of polygons in \spad{n}-dimensional space.
231747`\spad{createSceneLine(line)} constructs a \spad{line} node,{} this contains a \spad{line} (represented by a list of points) in \spad{n}-dimensional space. The space is implicit in the \spad{PT} and \spad{TR} parameters supplied when this Scene was created.
231802`\spad{createSceneLine(st,{} en,{} fontScale)} constructs a line node,{} this contains a line,{} in \spad{n}-dimensions,{} from \spad{st} to \spad{en}. 'st' and 'en' are nodes in the scene and the line will be drawn upto their boundary. \spad{st} is the node at the start of the line \spad{en} is the node at the end of the line fontScale should be set to the full width of the diagram (not just the width of this node). If this is not known th
231802`--en choose an approximate value. This only affects text nodes,{} if \spad{st} or \spad{en},{} or its subnodes,{} do not contain a text node then its value is not significant.
231866`\spad{createSceneLines(line)} constructs a \spad{line} node,{} this contains lines (represented by a list of points) in \spad{n}-dimensional space. The space is implicit in the \spad{PT} and \spad{TR} parameters supplied when this Scene was created.
231928`\spad{createSceneMaterial(mat)} constructs a material node This sets the lineWidth,{} lineCol and fillCol for all nodes under this,{} unless overridden by another material node. That is the material parameters that apply to a given node are those of the closest material node above it in the hierarchy line width is expressed relative to the width of current boundary
232061`\spad{createSceneMaterial(lineW,{} lineC,{} fillC)} constructs a material node This sets the lineWidth,{} lineCol and fillCol for all nodes under this,{} unless overridden by another material node. That is the material parameters that apply to a given node are those of the closest material node above it in the hierarchy
232137`\spad{createSceneNamedPoints(np)} constructs a named points node,{} this allows us to define a set of points which can be used multiple times in the scenegraph.
232211`deprecated: this has been superseded by version with SBoundary(\spad{PT}) do not use,{} may be removed in the future.
232310`\spad{createScenePattern(ptype,{} step,{} bb)} creates a test pattern suitable for showing the effect of transforms. The pattern depends on \spad{ptype} parameter as follows: ptype="GRID"::Symbol : construct a set of horizontal and vertical lines in the current clip boundary and current material with a spacing between lines given by the \spad{step} parameter. ptype="SIERPINSKI"::Symbol: constructs a Sierpinski frac
232310`--tal. \spad{step} parameter gives the level of subdivision. ptype="HOUSE"::Symbol: constructs a house shape.
232399`\spad{createSceneRoot()} constructs the root node,{} all other nodes are contained in a tree structure under this node
232446`deprecated: this has been superseded by version with SBoundary(\spad{PT}) do not use,{} may be removed in the future.
232516`\spad{createSceneRoot(bb)} constructs the root node,{} all other nodes are contained in a tree structure under this node
232576`\spad{createSceneRoot(minx,{} miny,{} maxx,{} maxy)} constructs the root node,{} all other nodes are contained in a tree structure under this node
232654`deprecated: this has been superseded by version with SBoundary(\spad{PT}) do not use,{} may be removed in the future.
232735`\spad{createSceneRuler(ptype,{} offset,{} bb)} creates a scale that can be used to provide numeric values for an axis: ptype= "HORIZONTAL"::Symbol : horizontal axis. ptype= "VERTICAL"::Symbol: vertical axis. ptype= "DEBTH"::Symbol: depth axis.
232806`\spad{createSceneShape(shape)} constructs a \spad{shape} node,{} this contains a \spad{shape} such as a rectangle or an ellipse.
232907`\spad{createSceneShape(shape)} constructs a \spad{shape} node from a boundary,{} this contains a \spad{shape} such as a rectangle or an ellipse.
232968`\spad{createSceneText(text)} constructs a \spad{text} node,{} \spad{text} can be used for labelling anything such as graphs,{} axes and so on.
233079`\spad{createSceneText(str,{} sz,{} pz)} constructs a text node using information from named points node.
233160`\spad{createSceneText(str,{} sz,{} pz)} constructs a text node,{} text can be used for labelling anything such as graphs,{} axes and so on.
233235`\spad{createSceneTransform(tran)} constructs a transform node This transforms the points and vectors below this node If a given node has more than one transform node above it in the hierarchy then the transforms are compound
233301`\spad{createSceneUse(nam)} uses another point in the scenegraph.
233353`\spad{createThreeSpace()} creates a \spadtype{ThreeSpace(DoubleFloat)} object capable of holding point,{} curve,{} mesh components and any combination.
233431`\spad{createWidth(x)} can be used by domains which extend graph to help in creating coordinates for objects in a graph
233513`\spad{createWidth(x)} can be used by domains which extend graph to help in creating coordinates for objects in a graph
233598`\spad{createX(x,{} n)} can be used by domains which extend graph to help in creating the \spad{x} coordinate for objects in a graph
233695`\spad{createX(x,{} n)} can be used by domains which extend graph to help in creating the \spad{x} coordinate for objects in a graph
233795`\spad{createY(x,{} n)} can be used by domains which extend graph to help in creating the \spad{y} coordinate for objects in a graph
233892`\spad{createY(x,{} n)} can be used by domains which extend graph to help in creating the \spad{y} coordinate for objects in a graph
233992`\spad{createZechTable(f)} generates a Zech logarithm table for the cyclic group representation of a extension of the ground field by the primitive polynomial {\em f(x)},{} \spadignore{i.e.} \spad{Z(i)},{} defined by {\em x^Z(i) = 1+x^i} is stored at index \spad{i}. This is needed in particular to perform addition of field elements in finite fields represented in this way. See \spadtype
233992`--{FFCGP},{} \spadtype{FFCGX}.
234111`\spad{credPol }\undocumented
234204`\spad{critB }\undocumented
234306`\spad{critBonD }\undocumented
234530`\spad{critM }\undocumented
234620`\spad{critMonD1 }\undocumented
234846`\spad{critMTonD1 }\undocumented
235067`\spad{critpOrder }\undocumented
235284`\spad{critT }\undocumented
235429`\spad{cross(p,{} q)} computes the cross product of the two points \spad{p} and \spad{q} using only the first three coordinates,{} and keeping the color of the first point \spad{p}. The result is returned as a point.
235568`\spad{cross(p,{} q)} computes the cross product of the two points \spad{p} and \spad{q}. Error if the \spad{p} and \spad{q} are not 3 dimensional
235617`\spad{cross(u,{} v)} constructs the cross product of \spad{u} and \spad{v}. Error: if \spad{u} and \spad{v} are not of length 3.
235678`\spad{crushedSet(lp)} returns \spad{lq} such that \spad{lp} and and \spad{lq} generate the same ideal and no rough basic sets reduce (in the sense of Groebner bases) the other polynomials in \spad{lq}.
235761`\spad{csc(x)} applies the cosecant operator to \spad{x}
235924`\spad{csc(st)} computes cosecant of a power series \spad{st}.
236007`\spad{csc(st)} computes cosecant of a power series \spad{st}.
236104`\spad{csc(z)} returns the cosecant of Laurent series \spad{z}.
236190`\spad{csc(z)} returns the cosecant of a Puiseux series \spad{z}.
236285`\spad{csc(x)} returns the cosecant of \spad{x}.
236342`\spad{csc2sin(f)} converts every \spad{csc(u)} appearing in \spad{f} into \spad{1/sin(u)}.
236404`\spad{csch(x)} applies the hyperbolic cosecant operator to \spad{x}
236567`\spad{csch(st)} computes the hyperbolic cosecant of a power series \spad{st}.
236651`\spad{csch(st)} computes the hyperbolic cosecant of a power series \spad{st}.
236749`\spad{csch(z)} returns the hyperbolic cosecant of Laurent series \spad{z}.
236836`\spad{csch(z)} returns the hyperbolic cosecant of a Puiseux series \spad{z}.
236932`\spad{csch(x)} returns the hyperbolic cosecant of \spad{x}.
236987`\spad{csch2sinh(f)} converts every \spad{csch(u)} appearing in \spad{f} into \spad{1/sinh(u)}.
237051`\spad{cschIfCan(z)} returns csch(\spad{z}) if possible,{} and "failed" otherwise.
237132`\spad{cscIfCan(z)} returns \spad{csc}(\spad{z}) if possible,{} and "failed" otherwise.
237212`\spad{cSec(f)} computes the secant of the power series \spad{f}. For use when the coefficient ring is commutative.
237315`\spad{cSech(f)} computes the hyperbolic secant of the power series \spad{f}. For use when the coefficient ring is commutative.
237419`\spad{cSin(f)} computes the sine of the power series \spad{f}. For use when the coefficient ring is commutative.
237522`\spad{cSinh(f)} computes the hyperbolic sine of the power series \spad{f}. For use when the coefficient ring is commutative.
237626`\spad{csubst(a,{} b)} is for internal use only
237742`\spad{cTan(f)} computes the tangent of the power series \spad{f}. For use when the coefficient ring is commutative.
237845`\spad{cTanh(f)} computes the hyperbolic tangent of the power series \spad{f}. For use when the coefficient ring is commutative.
237949`\spad{cubic(u)} \undocumented
238015`\spad{cubic(f,{} g,{} h,{} i)} \undocumented
238086`\spad{cumulant2moment(cc)} computes the sequence of moments from the sequence of classical cumulants \spad{cc}
238160`\spad{cup(s1,{} s2)},{} introduced by Redfield,{} \indented{1}{is the scalar product of two cycle indices,{} in which the} \indented{1}{power sums are retained to produce a cycle index.}
238314`\spad{currentSubProgram()} returns the name of the current subprogram being processed
238372`\spad{curry(f,{} a)} is the function \spad{g} \indented{1}{such that \spad{g ()= f a}.}
238431`\spad{curryLeft(f,{} a)} is the function \spad{g} \indented{1}{such that \spad{g b = f(a,{} b)}.}
238499`\spad{curryRight(f,{} b)} is the function \spad{g} such that \indented{1}{\spad{g a = f(a,{} b)}.}
238568`\spad{curve?(s)} queries whether the \spadtype{ThreeSpace},{} \spad{s},{} is a curve,{} \spadignore{i.e.} has one component,{} a list of list of points,{} and returns \spad{true} if it is,{} or \spad{false} otherwise.
238625`\spad{curve(s)} checks to see if the \spadtype{ThreeSpace},{} \spad{s},{} is composed of a single curve defined by a list of points and if so,{} returns the curve,{} \spadignore{i.e.} list of points. An error is signaled otherwise.
238688`\spad{curve([p0,{} p1,{} p2,{} ...,{} pn])} creates a space curve defined by the list of points \spad{p0} through \spad{pn},{} and returns the \spadtype{ThreeSpace} whose component is the curve.
238751`\spad{curve(s,{} [[p0],{} [p1],{} ...,{} [pn]])} adds a space curve which is a list of points \spad{p0} through \spad{pn} defined by lists of elements from the domain \spad{PointDomain(m,{} R)},{} where \spad{R} is the \spadtype{Ring} over which the point elements are defined and \spad{m} is the dimension of the points,{} to the \spadtype{ThreeSpace} \spad{s}.
238816`\spad{curve(s,{} [p0,{} p1,{} ...,{} pn])} adds a space curve component defined by a list of points \spad{p0} through \spad{pn},{} to the \spadtype{ThreeSpace} \spad{s}.
238882`\spad{curve(c1,{} c2)} creates a plane curve from 2 component functions \spad{c1} and \spad{c2}.
238984`\spad{curve(c1,{} c2,{} c3)} creates a space curve from 3 component functions \spad{c1},{} \spad{c2},{} and \spad{c3}.
239104`\spad{curveColor(v)} specifies a color,{} \spad{v},{} for 2D graph curves. This option is expressed in the form \spad{curveColor == v}.
239152`\spad{curveColor(p)} specifies a color index for 2D graph curves from the spadcolors palette \spad{p}. This option is expressed in the form \spad{curveColor ==p}.
239202`\spad{curveColorPalette(l,{} p)} takes the list of draw options,{} \spad{l},{} and checks the list to see if it contains the option \spad{curveColorPalette}. If the option does not exist the value,{} \spad{p} is returned.
239291`\spad{curveLoops(pts1,{} r,{} nn)} generates ifs from line given by \spad{pts1}
239376`\spad{cycle(ls)} coerces a cycle {\em ls},{} \spadignore{i.e.} a list with not repetitions to a permutation,{} which maps {\em ls.i} to {\em ls.i+1},{} indices modulo the length of the list. Error: if repetitions occur.
239433`cycleClosed: (objs: List \spad{S},{} arrowName: String) constructs a graph with vertices (from objs) connected in a cycle. arrowName is a prefix for all arrow names,{} this will be followed by a number starting at 1 and incremented for each arrow
239495`\spad{cycleElt(s)} returns a pointer to a node in the cycle if the stream \spad{s} is cyclic and returns "failed" if \spad{s} is not cyclic
239677`\spad{cycleEntry(u)} returns the head of a top-level cycle contained in aggregate \spad{u},{} or \spad{empty()} if none exists.
239884`\spad{cycleLength(u)} returns the length of a top-level cycle contained in aggregate \spad{u},{} or 0 is \spad{u} has no such cycle.
239962`\spad{cycleOpen(objs,{} arrowName)} constructs a graph with vertices (from \spad{objs}) connected in a cycle but with one gap. The last vertex in the sequence loops back to itself so all vertices have one outgoing arrow. arrowName is a prefix for all arrow names,{} this will be followed by a number starting at 1 and incremented for each arrow
240022`\spad{cyclePartition(p)} returns the cycle structure of a permutation \spad{p} including cycles of length 1 only if \spad{S} is finite.
240082`\spad{cycleRagits(rx)} returns the cyclic part of the ragits of the fractional part of a radix expansion. For example,{} if \spad{x = 3/28 = 0.10 714285 714285 ...},{} then \spad{cycleRagits(x) = [7,{} 1,{} 4,{} 2,{} 8,{} 5]}.
240147`\spad{cycles(lls)} coerces a list list of cycles {\em lls} to a permutation,{} each cycle being a list with not repetitions,{} is coerced to the permutation,{} which maps {\em ls.i} to {\em ls.i+1},{} indices modulo the length of the list,{} then these permutations are mutiplied. Error: if repetitions occur in one cycle.
240269`\spad{cycleSplit!(u)} splits the aggregate by dropping off the cycle. The value returned is the cycle entry,{} or nil if none exists. For example,{} if \spad{w = concat(u,{} v)} is the cyclic list where \spad{v} is the head of the cycle,{} \spad{cycleSplit!(w)} will drop \spad{v} off \spad{w} thus destructively changing \spad{w} to \spad{u},{} and returning \spad{v}.
240463`\spad{cycleTail(u)} returns the last node in the cycle,{} or empty if none exists.
240700`\spad{cyclic?(u)} tests if \spad{u} has a cycle.
240758`\spad{cyclic?(t)} tests if \spad{t} is a cyclic tree.
240802`\spad{cyclic n} is the cycle index of the \indented{1}{cyclic group of degree \spad{n}.}
240889`\spad{cyclicCopy(l)} makes a copy of a (possibly) cyclic tree \spad{l}.
240931`\spad{cyclicEntries(t)} returns a list of top-level cycles in tree \spad{t}.
240982`\spad{cyclicEqual?(t1,{} t2)} tests of two cyclic trees have the same structure.
241034`\spad{cyclicGroup([i1,{} ...,{} ik])} constructs the cyclic group of order \spad{k} acting on the integers {\em i1},{} ...,{} {\em ik}. Note: duplicates in the list will be removed.
241128`\spad{cyclicGroup(n)} constructs the cyclic group of order \spad{n} acting on the integers 1,{} ...,{} \spad{n}.
241224`\spad{cyclicParents(t)} returns a list of cycles that are parents of \spad{t}.
241275`\spad{cyclicSubmodule(lm,{} v)} generates a basis as follows. It is assumed that the size \spad{n} of the vector equals the number of rows and columns of the matrices. Then the matrices generate a subalgebra,{} say \spad{A},{} of the algebra of all square matrices of dimension \spad{n}. {\em V R} is an \spad{A}-module in the natural way. cyclicSubmodule(\spad{lm},{} \spad{v}) gen
241275`--erates the \spad{R}-Basis of {\em Av} as described in section 6 of \spad{R}. A. Parker\spad{'s} "The Meat-Axe". Note: in contrast to the description in "The Meat-Axe" and to {\em standardBasisOfCyclicSubmodule} the result is in echelon form.
241400`\spad{cyclotomic(n)} returns \spad{n}-th cyclotomic polynomial,{} that is minimal polynomial over rationals of primitive \spad{n}-th root of 1.
241500`\spad{cyclotomic(n)} returns the \spad{n}th cyclotomic polynomial \spad{phi[n](x)}. Note: \spad{phi[n](x)} is the factor of \spad{x^n - 1} whose roots are the primitive \spad{n}th roots of unity.
241604`\spad{cyclotomic(n,{} r)} returns value of the \spad{n}th cyclotomic polynomial at \spad{r}.
241693`\spad{cyclotomicDecomposition(n)} returns prime factors of \spad{x^n - 1} over integers.
241812`\spad{cyclotomicFactorization(n)} returns prime factors of \spad{x^n - 1} over integers.
241935`\spad{cylindrical(pt)} transforms \spad{pt} from polar coordinates to Cartesian coordinates: the function produced will map the point \spad{(r,{} theta,{} z)} to \spad{x = r * cos(theta)},{} \spad{y = r * sin(theta)},{} \spad{z}.
242003`\spad{cylindricalDecomposition(lp)} is cylindricalDecomposition(\spad{lp},{} \spad{lv}) where \spad{lv} is list of variables in \spad{lp}.
242144`\spad{cylindricalDecomposition(lp,{} lv)} computes cylindrical decompositon of \spad{lp} in using variable order given by \spad{lv}
242364`\spad{D()} provides the operator corresponding to a derivation in the ring \spad{A}.
242433`\spad{d(f)} computes the differential of \spad{f}.
242479`\spad{d(jb)} returns the differential of \spad{jb}.
242611`\spad{D(v)} returns the operator corresponding to derivative with respect to \spad{v} in \spad{R}.
242672`\spad{D(v)} returns operator corresponding to derivative with respect to \spad{v} in \spad{R}.
242750`\spad{D(x)} returns the derivative of \spad{x}. This function is a simple differential operator where no variable needs to be specified.
242792`\spad{D(f)} returns the derivative of \spad{f}.
243246`\spad{D(U,{} [X1,{} ...,{} Xq])} generates a derivative. \spad{U} must be in \spad{DVar}; all other symbols in \spad{IVar}.
243309`\spad{D(u,{} der)} generates a derivative.
243379`\spad{D(x,{} [s1,{} ...sn])} computes successive partial derivatives,{} \spadignore{i.e.} \spad{D(...D(x,{} s1)...,{} sn)}.
243439`\spad{D(x,{} n)} returns the \spad{n}-th derivative of \spad{x}.
243500`\spad{D(f,{} n)} returns the \spad{n}-th derivative of \spad{f}.
243579`\spad{D(x,{} deriv)} differentiates \spad{x} extending the derivation deriv on \spad{R}.
243636`\spad{D(x,{} v)} computes the partial derivative of \spad{x} with respect to \spad{v}.
244068`\spad{D(x,{} [s1,{} ...,{} sn],{} [n1,{} ...,{} nn])} computes multiple partial derivatives,{} \spadignore{i.e.} \spad{D(...D(x,{} s1,{} n1)...,{} sn,{} nn)}.
244153`\spad{D(x,{} deriv,{} n)} differentiate \spad{x} \spad{n} times using a derivation which extends \spad{deriv} on \spad{R}.
244229`\spad{D(x,{} s,{} n)} computes multiple partial derivatives,{} \spadignore{i.e.} \spad{n}-th derivative of \spad{x} with respect to \spad{s}.
244302`\spad{dAndcExp(v,{} n,{} k)} computes \spad{v^e} interpreting \spad{v} as an element of normal basis field. A divide and conquer algorithm similar to the one from \spad{D}.\spad{R}.Stinson,{} "Some observations on parallel Algorithms for fast exponentiation in \spad{GF}(2^n)",{} Siam \spad{J}. Computation,{} Vol.19,{} No.4,{} \spad{pp}.711-717,{} August 1990 is used. Argument \spad{k} is 
244302`--a parameter of this algorithm.
244418`\spad{dark(c)} sets the shade of the indicated hue of \spad{c} to it\spad{'s} lowest value.
244457`\spad{datalist(l)} creates a datalist from \spad{l}
244506`\spad{ddFact(f,{} p)} computes a distinct degree factorization of the polynomial \spad{f} modulo the prime \spad{p},{} \spadignore{i.e.} such that each factor is a product of irreducibles of the same degrees. The input polynomial \spad{f} is assumed to be square-free modulo \spad{p}.
244613`\spad{debug(true)} turns debug mode on \spad{debug(false)} turns debug mode off
244657`\spad{debug returns} whether we want additional output on the progress,{} default being \spad{false}
244728`\spad{debug(d)} specifies whether we want additional output on the progress. This option is expressed in the form \spad{debug == d}.
244774`\spad{debug3D(true)} turns debug mode on; debug3D(\spad{false}) turns debug mode off.
244822`\spad{dec(x)} returns \spad{x - 1}.
244869`decFatal is an internal function that declares that the preceding test did not fail with a fatal error.
244915`\spad{decimal(r)} converts a rational number to a decimal expansion.
244978`\spad{declare(t)} returns a name \spad{f} such that \spad{f} has been declared to the interpreter to be of type \spad{t},{} but has not been assigned a value yet. Note: \spad{t} should be created as \spad{devaluate(T)\$Lisp} where \spad{T} is the actual type of \spad{f} (this hack is required for the case where \spad{T} is a mapping type).
245029`\spad{declare!(u,{} t)} declares the parameter \spad{u} to have type \spad{t} in the current level of the symbol table.
245101`\spad{declare!(l,{} t,{} tab)} creates new entrys in tab,{} declaring each of \spad{l} to be of type \spad{t}
245179`\spad{declare!(u,{} t,{} tab)} creates a new entry in tab,{} declaring \spad{u} to be of type \spad{t}
245251`\spad{declare!(u,{} t,{} asp)} declares the parameter \spad{u} to have type \spad{t} in asp.
245330`\spad{declare!(u,{} t,{} asp,{} tab)} declares the parameters \spad{u} of subprogram \spad{asp} to have type \spad{t} in symbol table tab.
245418`\spad{declare!(u,{} t,{} asp,{} tab)} declares the parameter \spad{u} of subprogram \spad{asp} to have type \spad{t} in symbol table tab.
245500`\spad{decompose(d)} returns \spad{[id,{} f]} where \spad{d = (id) + div(f)}.
245632`\spad{decompose(up)} \undocumented
245701`\spad{decompose(f,{} D)} returns \spad{[p,{} n,{} s]} such that \spad{f = p+n+s},{} all the squarefree factors of \spad{denom(n)} are normal \spad{w}.\spad{r}.\spad{t}. \spad{D},{} \spad{denom(s)} is special \spad{w}.\spad{r}.\spad{t}. \spad{D},{} and \spad{n} and \spad{s} are proper fractions (no pole at infinity). \spad{D} is the derivation to use.
245836`decompse(\spad{n},{} [\spad{p1},{} ...,{} \spad{pn}]) returns numerators of partial fraction decomposition of \spad{n} divided by product of \spad{pi}-\spad{s} Note: decomposition is assumed to have no whole part.
245915`\spad{decompose(up,{} m,{} n)} \undocumented
246550`\spad{decomposeFunc(func1,{} func2,{} newvar)} returns a function \spad{func3} where \spad{func1} = \spad{func3}(\spad{func2}) and expresses it in the new variable newvar. If there is no solution then \spad{func1} will be returned.
246817`\spad{decreasePrecision(n)} decreases the current \spadfunFrom{precision}{FloatingPointSystem} precision by \spad{n} decimal digits.
246922`like decFatal,{} but for expected failures.
246970`\spad{decXfPass()} is an internal function that declares that the preceding test did not pass unexpectedly. This function should only be used for testing library errors
247017`assumes \spad{ln} contains a list of factors which must be \spad{true} for the whole to be \spad{true} (such as the list produced by factor). From this deductions attemps to produce a list of other proposition that must also be \spad{true} by using modus ponens. This is used to determine the returned type when converting ILogic to types by using the Curry-Howard isomorphism.
247070`\spad{deepCopy(x)} \undocumented
247317`\spad{deepestInitial(p)} returns an error if \spad{p} belongs to \spad{R},{} otherwise returns the last term of \spad{iteratedInitials(p)}.
247456`\spad{deepestTail(p)} returns \spad{0} if \spad{p} belongs to \spad{R},{} otherwise returns tail(\spad{p}),{} if \spad{tail(p)} belongs to \spad{R} or \spad{mvar(tail(p)) < mvar(p)},{} otherwise returns \spad{deepestTail(tail(p))}.
247526`\spad{deepExpand(x)} \undocumented{}
247596`\spad{defineProperty(s,{} \spad{li},{} p)} defines the component property in the 3 dimensional subspace,{} \spad{s},{} to be that of \spad{p},{} where \spad{p} is of the domain \spadtype{SubSpaceComponentProperty}. The list of non negative integers,{} \spad{li},{} dictates the path to follow,{} or,{} to look at it another way,{} points to the component whose property is being defined. The subspace,{} 
247596`--\spad{s},{} is returned with the component property definition.
247699`\spad{definingEquations(s)} returns a list of defining polynomials for equations,{} that is,{} for the Zariski closed part of \spad{s}.
247786`\spad{definingInequation(s)} returns a single defining polynomial for the inequation,{} that is,{} the Zariski open part of \spad{s}.
247952`\spad{definingPolynomial()} returns the polynomial used to define the field extension.
248052`\spad{definingPolynomial()} returns the minimal polynomial which \spad{generator()} satisfies.
248115`\spad{definingPolynomial(f)} returns the defining polynomial of \spad{f} as an element of \spad{F}. Error: if \spad{f} is not a kernel.
248207`\spad{definingPolynomial(x)} returns an expression \spad{p} such that \spad{p(x) = 0}.
248277`\spad{definingPolynomial(aRoot)} gives a polynomial such that \spad{definingPolynomial(aRoot).aRoot = 0}
248375`\spad{degree(p)} returns the maximum of the exponents of the terms of \spad{p}.
248455`\spad{degree(x)} \undocumented
248514`\spad{degree(p)} returns the homogeneous degree of \spad{p}.
248577`\spad{degree(df)} returns the homogeneous degree of differential form \spad{df}.
248658`\spad{degree(x)} gives the numbers of 1\spad{'s} in \spad{x},{} \spadignore{i.e.} the number of non-zero exponents in the basis element that \spad{x} represents.
248782`\spad{degree(x)} gives degree of \spad{x}.
249246`\spad{degree(v)} is degree of \spad{v} treated as polynomial
249318`\spad{degree(p)} returns the maximum of the exponents of the terms of \spad{p}.
249370`\spad{degree(g)} names the degree of \spad{g}. The set of all elements of a given degree form an \spad{R}-module.
249417`\spad{degree(f)} returns the exponent of the lowest order term of \spad{f}.
249486`\spad{degree(f(x))} returns the degree of the leading term of the Puiseux series \spad{f(x)},{} which may have zero as a coefficient.
249584`\spad{degree(f(x))} returns the degree of the lowest order term of \spad{f(x)},{} which may have zero as a coefficient.
249672`\spad{degree(x)} returns the greatest length of a word in the support of \spad{x}.
249743`\spad{degree(ts)} returns the product of main degrees of the members of \spad{ts}.
249820`\spad{degree(l)} is \spad{n} if \indented{2}{\spad{l = sum(monomial(a(i),{} i),{} i = 0..n)}.}
249902`\spad{degree(p)} returns the degree of \spad{p}. \indented{1}{Note that the degree of a word is its length.}
249970`\spad{degree(gp)} returns the number of points moved by all permutations of the group {\em gp}.
250036`\spad{degree(p)} retuns the number of points moved by the permutation \spad{p}.
250097`\spad{degree(a)} returns the degree of minimal polynomial of an element \spad{a} if \spad{a} is algebraic with respect to the ground field \spad{F},{} and \spad{infinity} otherwise.
250178`\spad{degree(a)} returns the degree of the minimal polynomial of an element \spad{a} over the ground field \spad{F}.
250254`\spad{degree(p,{} lv)} gives the list of degrees of polynomial \spad{p} with respect to each of the variables in the list \spad{lv}.
250422`\spad{degree(p,{} v)} gives the degree of polynomial \spad{p} with respect to the variable \spad{v}.
250782`\spad{degree(p,{} v)} computes degree of \spad{p} with respect to \spad{v}.
250977`\spad{degree(upoly,{} lvar)} returns a list containing the maximum degree for each variable in lvar.
251191`\spad{degree(p,{} s)} returns the maximum degree of the differential polynomial \spad{p} viewed as a differential polynomial in the differential indeterminate \spad{s} alone.
251279`\spad{degreePartition(f)} returns the degree partition (\spadignore{i.e.} the multiset of the degrees of the irreducible factors) of the polynomial \spad{f}.
251391`\spad{degreePartition(ddfactorization)} returns the degree partition of the polynomial \spad{f} modulo \spad{p} where \spad{ddfactorization} is the distinct degree factorization of \spad{f} computed by \spadfunFrom{ddFact}{ModularDistinctDegreeFactorizer} for some prime \spad{p}.
251518`\spad{degreeSubResultant(P,{} Q,{} d)} computes a subresultant of degree \spad{d}.
251620`\spad{indiceSubResultant(P,{} Q,{} i)} returns a subresultant \spad{S} of degree \spad{d} and carries out the equality \spad{coef1*P + coef2*Q = S_i}.
251774`\spad{dehomogenize(ls)} converts list of solutions (a,{} [\spad{c0},{} \spad{c1},{} ...,{} \spad{cn}]) to homogeneous equation \spad{L}(a) + \spad{c0} \spad{f} + \spad{c1} \spad{g1} + ... + \spad{cn} \spad{gn} = 0 into list of solutions of inhomogeneous equation \spad{L}(a) + \spad{f} 
251774`--+ \spad{c1} \spad{g1} + ... + \spad{cn} \spad{gn} = 0. This transformation works the same for all equations,{} so we only need list of solutions as argument
251995`\spad{delay(f)} creates a stream with a lazy evaluation defined by function \spad{f}. Caution: This function can only be called in compiled code.
252586`\spad{delete!(u,{} i)} destructively deletes the \spad{i}th element of \spad{u}.
252654`\spad{delete(u,{} i)} returns a copy of \spad{u} with the \spad{i}th element deleted. Note: for lists,{} \spad{delete(a,{} i) == concat(a(0..i - 1),{} a(i + 1,{} ..))}.
252711`\spad{delete!(u,{} i..j)} destructively deletes elements \spad{u}.\spad{i} through \spad{u}.\spad{j}.
252797`\spad{delete(u,{} i..j)} returns a copy of \spad{u} with the \spad{i}th through \spad{j}th element deleted. Note: \spad{delete(a,{} i..j) = concat(a(0..i-1),{} a(j+1..))}.
252872`\spad{deleteProperty!(op,{} s)} unattaches property \spad{s} from \spad{op}. Argument \spad{op} is modified "in place",{} \spadignore{i.e.} no copy is made.
252932`\spad{deleteRow(A,{} i)} deletes the \spad{i}\spad{-}th row of the matrix \spad{A}.
253001`\spad{Delta(s)} returns operator corresponding to derivative with respect to \spad{s} in \spad{R}.
253126`\spad{delta(S,{} k,{} p)} returns the number of elements of \spad{S} which are strictly between \spad{p} and the \spad{k^}{th} element of \spad{S}.
253231`\spad{delta_deriv(f)} is x*f' where \spad{x} is variable in A
253314`\spad{denom(1/d * (f1,{} ...,{} fn))} returns \spad{d}.
253368`\spad{denom x} returns the denominator of \spad{x}.
253414`\spad{denom x} returns the denominator of \spad{x}.
253456`\spad{denom(f)} returns the denominator of \spad{f} viewed as a polynomial in the kernels over \spad{Z}.
253552`\spad{denom(x)} returns the denominator of the fraction \spad{x}.
253605`\spad{denom(f)} returns the denominator of \spad{f} viewed as a polynomial in the kernels over \spad{Z}.
253696`\spad{denom(f)} returns the denominator of \spad{f} viewed as a polynomial in the kernels over \spad{R}.
253803`\spad{denominator(f)} yields the denominator of \spad{f}.
253972`\spad{denominator(f)} returns the denominator of \spad{f} converted to \%.
254045`\spad{denominator(x)} is the denominator of the fraction \spad{x} converted to \%.
254105`\spad{denominators(x)} returns the stream of denominators of the approximants of the continued fraction \spadvar{\spad{x}}. If the continued fraction is finite,{} then the stream will be finite.
254169`\spad{denomLODE(op,{} g)} returns a polynomial \spad{d} such that any rational solution of \spad{op y = g} is of the form \spad{p/d} for some polynomial \spad{p},{} and "failed",{} if the equation has no rational solution.
254256`\spad{denomLODE(op,{} [g1,{} ...,{} gm])} returns a polynomial \spad{d} such that any rational solution of \spad{op y = c1 g1 + ... + cm gm} is of the form \spad{p/d} for some polynomial \spad{p}.
254333`\spad{denomRicDE(op)} returns a polynomial \spad{d} such that any rational solution of the associated Riccati equation of \spad{op y = 0} is of the form \spad{p/d + q'/q + r} for some polynomials \spad{p} and \spad{q} and a reduced \spad{r}. Also,{} \spad{deg(p) < deg(d)} and {\spad{gcd}(\spad{d},{} \spad{q}) = 1}.
254395`\spad{depth(p)} returns the nesting level of \spad{p}.
254451`\spad{dequeue! s} destructively extracts the first (top) element from queue \spad{q}. The element previously second in the queue becomes the first element. Error: if \spad{q} is empty.
254500`\spad{dequeue([x,{} y,{} ...,{} z])} creates a dequeue with first (top or front) element \spad{x},{} second element \spad{y},{} ...,{} and last (bottom or back) element \spad{z}.
254547`\spad{deref(n)} is equivalent to \spad{elt(n)}.
254588`\spad{deriv(a)} returns the derivative of the power series with respect to the power series variable. Thus \spad{deriv([a0,{} a1,{} a2,{} ...])} returns \spad{[a1,{} 2 a2,{} 3 a3,{} ...]}.
254663`\spad{deriv(f)} is the derivative,{} which simply coincides with left shift
254839`\spad{derivationCoordinates(b,{} ')} returns \spad{M} such that \spad{b' = M b}.
254941`\spad{derivative(op)} returns the value of the "\%diff" property of \spad{op} if it has one,{} and "failed" otherwise.
255045`\spad{derivative(op,{} foo)} attaches foo as the "\%diff" property of \spad{op}. If \spad{op} has an "\%diff" property \spad{f},{} then applying a derivation \spad{D} to \spad{op}(a) returns \spad{f(a) * D(a)}. Argument \spad{op} must be unary.
255135`\spad{derivative(op,{} [foo1,{} ...,{} foon])} attaches [\spad{foo1},{} ...,{} foon] as the "\%diff" property of \spad{op}. If \spad{op} has an "\%diff" property \spad{[f1,{} ...,{} fn]} then applying a derivation \spad{D} to \spad{op(a1,{} ...,{} an)} returns \spad{f1(a1,{} ...,{} an) * D(a1) + ... + fn(a1,{} ...,{} an) * D(an)}.
255237`\spad{derivativeOf?(jv1,{} jv2)} checks whether \spad{jv1} is a derivative of \spad{jv2}. In this case,{} the difference of their multi-indices is returned. Otherwise,{} an empty list is returned.
255394`\spad{destruct(r)} returns the list of matches (var,{} expr) in \spad{r}. Error: if \spad{r} is a failed match.
255480`\spad{destruct((a1,{} ...,{} an))} returns the list [\spad{a1},{} ...,{} an].
255555`\spad{determinant(m)} returns the determinant of the matrix \spad{m}. an error message is returned if the matrix is not square.
255635`\spad{determinant(m)} returns the determinant of the matrix \spad{m}. Error: if the matrix is not square.
255717`\spad{determinant(m)} returns the determinant of the matrix \spad{m}.
255810`\spad{determinant(m)} returns the determinant of the matrix \spad{m}. an error message is returned if the matrix is not square.
255885`\spad{detSys(sys)} computes the determining system for symmetry generators of the system \spad{sys}. It is assumed that each equation can be solved for its leading derivative.
256024`\spad{detSys(sys,{} vf)} computes the determining system for symmetry generators of the system \spad{sys} with a given ansatz for the generators. It is assumed that each equation can be solved for its leading derivative.
256184`\spad{detSys(sys,{} sjb,{} vf)} computes the determining system for symmetry generators of the system \spad{sys} with a given ansatz for the generators. \spad{sjb} contains jet variables for which the individual equations can be solved.
256354`\spad{detSysNS(sys,{} vf)} computes the determining system for symmetry generators without assuming solvability of the equations for some derivatives.
256495`\spad{detSysNS(sys,{} vf)} computes the determining system for symmetry generators without assuming solvability of the equations for some derivatives.
256657`\spad{diag(f)} is the function \spad{g} \indented{1}{such that \spad{g a = f(a,{} a)}.}
256920`\spad{diagonal?(m)} returns \spad{true} if the matrix \spad{m} is square and diagonal (\spadignore{i.e.} all entries of \spad{m} not on the diagonal are zero) and \spad{false} otherwise.
256984`\spad{diagonal?(m)} returns \spad{true} if the matrix \spad{m} is square and diagonal (\spadignore{i.e.} all entries of \spad{m} not on the diagonal are zero) and \spad{false} otherwise.
257063`\spad{diagonal(m)} returns a row consisting of the elements on the diagonal of the matrix \spad{m}.
257265`\spad{diagonalMatrix} returns the main diagonal out of a matrix. The diagonal is put into a matrix of same shape as the original one.
257333`\spad{diagonalMatrix([m1,{} ...,{} mk])} creates a block diagonal matrix \spad{M} with block matrices {\em m1},{} ...,{} {\em mk} down the diagonal,{} with 0 block matrices elsewhere. More precisly: if \spad{\spad{ri} := nrows \spad{mi}},{} \spad{\spad{ci} := ncols \spad{mi}},{} then \spad{m} is an (\spad{r1+}..\spad{+rk}) by (\spad{c1+}..\spad{+ck}) - matrix with entries \spad{m.i.j = ml.(i-r1-..-r(l-1)).(j-n1-..-n(l-1))},{} if \spa
257333`--d{(r1+..+r(l-1)) < i <= r1+..+rl} and \spad{(c1+..+c(l-1)) < i <= c1+..+cl},{} \spad{m.i.j} = 0 otherwise.
257403`\spad{diagonalMatrix(l)} returns a diagonal matrix with the elements of \spad{l} on the diagonal.
257472`\spad{diagonalMatrix(l)} returns a diagonal matrix with the elements of \spad{l} on the diagonal.
257552`\spad{diagonalMatrix(v)} returns a diagonal matrix where the elements of \spad{v} appear on the diagonal.
257607`\spad{diagonalMatrix} returns a diagonal out of a matrix. The diagonal is put into a matrix of same shape as the original one. Positive integer arguments select upper off-diagonals,{} negative ones lower off-diagonals.
257683`\spad{diagonalProduct(m)} returns the product of the elements on the diagonal of the matrix \spad{m}
257827`\spad{diagonalProduct(m)} returns the product of the elements on the diagonal of the matrix \spad{m}.
257902`\spad{diagonals(v,{} s)} displays the diagonals of the polygon outline showing a triangularized surface instead of a quadrilateral surface outline,{} for the given three-dimensional viewport \spad{v} which is of domain \spadtype{ThreeDimensionalViewport},{} if \spad{s} is "on",{} or does not display the diagonals if \spad{s} is "off".
257969`\spad{diagramHeight(s)} returns the height of the diagram that will be generated by diagramSvg. This is the maximum posY of all vertices in graph \spad{s}
258102`\spad{diagramSvg(fileName,{} n,{} dispArrowName)} creates an \spad{SVG} diagram fileName: String is the name of the \spad{SVG} file that will be created \spad{n:} \% is the graph that will be written dispArrowName: Boolean is \spad{true} to include the name of each arrow
258231`\spad{diagramWidth(s)} returns the width of the diagram that will be generated by diagramSvg. This is the maximum posX of all vertices in graph \spad{s}
258458`\spad{dictionary()}\$\spad{D} creates an empty dictionary of type \spad{D}.
258624`\spad{dictionary([x,{} y,{} ...,{} z])} creates a dictionary consisting of entries \spad{x,{} y,{} ...,{} z}.
258687`\spad{diff(jb)} returns the base vector field in direction \spad{jb}.
258736`\spad{diff(x)} returns the derivation with respect to \spad{x}.
258792`\spad{DiffAction(k,{} l,{} g)} gives the coefficient of \spad{x^k} in \spad{z^l} \spad{g}(\spad{x}),{} where \spad{z*}(a+b*x+c*x^2+d*x^3+...) = (a*x+b*x^2+c*x^3+...),{} \spadignore{i.e.} multiplication with \spad{x}.
258892`\spad{DiffC} gives the coefficients \spad{c_}{\spad{k},{} \spad{k}} in the expansion <x^k> \spad{z} \spad{g}(\spad{x}) = sum_{\spad{i=0}}\spad{^k} \spad{c_}{\spad{k},{} \spad{i}} <x^i> \spad{g}(\spad{x}),{} where \spad{z} acts on \spad{g}(\spad{x}) by shifting. In fact,{} the result is [0,{} 0,{} 0,{} ...]
259176`\spad{difference(u,{} v)} returns the set aggregate \spad{w} consisting of elements in set aggregate \spad{u} but not in set aggregate \spad{v}. If \spad{u} and \spad{v} have no elements in common,{} \spad{difference(u,{} v)} returns a copy of \spad{u}. Note: equivalent to the notation (not currently supported) \spad{{x for x in u | not member?(x,{} v)}}.
259229`\spad{difference(u,{} x)} returns the set aggregate \spad{u} with element \spad{x} removed. If \spad{u} does not contain \spad{x},{} a copy of \spad{u} is returned. Note: \spad{difference(s,{} x) = difference(s,{} {x})}.
259281`\spad{directions(om)} yields the differentials where \spad{om} has non-vanishing coefficients.
259433`\spad{differentialVariables(p)} returns a list of differential indeterminates occurring in a differential polynomial \spad{p}.
260362`\spad{differentiate(x)} returns the derivative of \spad{x}. This function is a simple differential operator where no variable needs to be specified.
260416`\spad{differentiate(v)} returns the derivative of \spad{v}.
260485`\spad{differentiate(f)} returns the derivative of \spad{f}.
260557`\spad{differentiate(ir,{} D)} differentiates \spad{ir} with respect to the derivation \spad{D}.
260621`\spad{differentiate(f,{} jv)} differentiates the function \spad{f} \spad{wrt} the jet variable \spad{jv}.
260691`\spad{differentiate(f,{} n)} creates a form for the \spad{n}th derivative of \spad{f},{} \spadignore{e.g.} \spad{f'},{} \spad{f''},{} \spad{f'''},{} \spad{"f} super \spad{iv}".
260758`\spad{differentiate(jv,{} i)} differentiates \spad{jv} \spad{wrt} the \spad{i}\spad{-}th independent variable.
260840`\spad{differentiate(ir,{} x)} differentiates \spad{ir} with respect to \spad{x}
260942`\spad{differentiate(f(x),{} x)} returns the derivative of \spad{f(x)} with respect to \spad{x}.
261037`\spad{differentiate(f(x),{} x)} returns the derivative of \spad{f(x)} with respect to \spad{x}.
261132`\spad{differentiate(f(x),{} x)} computes the derivative of \spad{f(x)} with respect to \spad{x}.
261226`\spad{differentiate(f(x),{} x)} returns the derivative of \spad{f(x)} with respect to \spad{x}.
261315`\spad{differentiate(f(x),{} x)} returns the derivative of \spad{f(x)} with respect to \spad{x}.
261404`\spad{differentiate(f(x),{} x)} computes the derivative of \spad{f(x)} with respect to \spad{x}.
265553`Polynomial differentiation.
265642`\spad{differentiate(x,{} [s1,{} ...sn])} computes successive partial derivatives,{} \spadignore{i.e.} \spad{differentiate(...differentiate(x,{} s1)...,{} sn)}.
265714`\spad{differentiate(x,{} n)} returns the \spad{n}-th derivative of \spad{x}.
265787`\spad{differentiate(v,{} n)} returns the \spad{n}-th derivative of \spad{v}.
265875`\spad{differentiate(f,{} n)} returns the \spad{n}-th derivative of \spad{f}.
265966`\spad{differentiate(x,{} deriv)} differentiates \spad{x} extending the derivation deriv on \spad{R}.
266035`\spad{differentiate(x,{} v)} computes the partial derivative of \spad{x} with respect to \spad{v}.
266101`\spad{differentiate(x,{} d)} extends the derivation \spad{d} from UP to \$ and applies it to \spad{x}.
266180`\spad{differentiate(f(x),{} x)} returns the derivative of \spad{f(x)} with respect to \spad{x}.
269877`Polynomial differentiation.
269985`\spad{differentiate(x,{} [s1,{} ...,{} sn],{} [n1,{} ...,{} nn])} computes multiple partial derivatives,{} \spadignore{i.e.}
270082`\spad{differentiate(p,{} d,{} x')} extends the \spad{R}-derivation \spad{d} to an extension \spad{D} in \spad{R[x]} where \spad{Dx} is given by \spad{x'},{} and returns \spad{Dp}.
270172`\spad{differentiate(x,{} deriv,{} n)} differentiate \spad{x} \spad{n} times using a derivation which extends \spad{deriv} on \spad{R}.
270260`\spad{differentiate(x,{} s,{} n)} computes multiple partial derivatives,{} \spadignore{i.e.} \spad{n}-th derivative of \spad{x} with respect to \spad{s}.
270345`diffext(ext,{} csolve,{} [\spad{g1},{} ...,{} \spad{gn}]) is like primextint and expextint but for differentialy transcendental extensions.
276947`\spad{diffHP options} returns a specification for Hermite-Pade approximation with the differential operator
282414`\spad{diffHP options} returns a specificatio
282414`--n for Hermite-Pade approximation with the \$\spad{q}\$-dilation operator
283450`\spad{diffP(i,{} mu)} returns the base vector field in direction \spad{P(i,{} mu)}.
283538`\spad{diffU(i)} returns the base vector field in direction \spad{U(i)}.
283601`\spad{diffX(i)} returns the base vector field in direction \spad{X(i)}.
283664`\spad{digamma(x)} returns the digamma function applied to \spad{x}
283724`\spad{digamma(x)} is the logarithmic derivative of \spad{Gamma(x)} (often written \spad{psi(x)} in the literature).
283779`\spad{digamma(x)} is the function,{} \spad{psi(x)},{} defined by \indented{2}{\spad{psi(x) = Gamma'(x)/Gamma(x)}.}
283874`\spad{digamma(z)} is the logarithmic derivative of \spad{Gamma(x)}.
283951`\spad{digamma(x)} is the function,{} \spad{psi(x)},{} defined by \indented{2}{\spad{psi(x) = Gamma'(x)/Gamma(x)}.}
284028`\spad{digamma(z)} is the logarithmic derivative of \spad{Gamma(x)}.
284087`\spad{digit()} returns the class of all characters for which \spadfunFrom{digit?}{Character} is \spad{true}.
284129`\spad{digit?(c)} tests if \spad{c} is a digit character,{} \spadignore{i.e.} one of 0..9.
284174`\spad{digits()} returns ceiling\spad{'s} precision in decimal digits.
284239`\spad{digits()} returns ceiling\spad{'s} precision in decimal digits.
284300`\spad{digits(d)} set the \spadfunFrom{precision}{FloatingPointSystem} to \spad{d} digits.
284380`\spad{digits(x)} returns a stream of \spad{p}-adic digits of \spad{x}.
284447`\spad{digits(d)} set the \spadfunFrom{precision}{FloatingPointSystem} to \spad{d} digits.
284549`\spad{dihedral n} is the cycle index of the \indented{1}{dihedral group of degree \spad{n}.}
284638`\spad{dihedralGroup([i1,{} ...,{} ik])} constructs the dihedral group of order 2k acting on the integers out of {\em i1},{} ...,{} {\em ik}. Note: duplicates in the list will be removed.
284734`\spad{dihedralGroup(n)} constructs the dihedral group of order 2n acting on integers 1,{} ...,{} \spad{N}.
284832`\spad{dilate(a,{} x)} returns the sequence \$a^n \spad{x_n}\$ (starting at \$\spad{n=1}\$)
284884`\spad{dilog(f)} denotes the dilogarithm
284936`\spad{dilog(x)} returns the dilogarithm of \spad{x},{} \spadignore{i.e.} the integral of \spad{log(x) / (1 - x) dx}.
284993`\spad{dilog(z)} is the dilogaritm
285068`\spad{dim(c)} sets the shade of a hue,{} \spad{c},{} above dark,{} but below bright.
285250`\spad{dimension()} returns the dimensionality of the vector space.
285308`\spad{dimension()} is the rank of this Lie algebra
285383`\spad{dimension(c)} returns dimension of \spad{c}
285447`\spad{dimension(p)} returns the number of dimensions that make up the point category \spad{p}.
285508`\spad{dimension(I)} gives the dimension of the ideal \spad{I}. in the ring \spad{F[lvar]},{} where lvar are the variables appearing in \spad{I}
285584`\spad{dimension(s)} returns the dimension of the point category \spad{s}.
285647`\spad{dimension(de,{} q)} computes the dimension of the differential equation \spad{de} as a submanifold of the \spad{q}\spad{-}th order jet bundle. The result is correct only,{} if \spad{de} is simplified.
285745`\spad{dimension(I,{} lvar)} gives the dimension of the ideal \spad{I},{} in the ring \spad{F[lvar]}
285834`\spad{dimension(sys,{} jm,{} q)} computes the dimension of the manifold described by the system \spad{sys} with Jacobi matrix \spad{jm} in the jet bundle of order \spad{q}.
286092`\spad{dimensionOfIrreducibleRepresentation(lambda)} is the dimension of the ordinary irreducible representation of the symmetric group corresponding to {\em lambda}. Note: the Robinson-Thrall hook formula is implemented.
286199`\spad{dimensions(v,{} x,{} y,{} width,{} height)} sets the position of the upper left-hand corner of the two-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{TwoDimensionalViewport},{} to the window coordinate \spad{x},{} \spad{y},{} and sets the dimensions of the window to that of \spad{width},{} \spad{height}. The new dimensions are not displayed until the f
286199`--unction \spadfun{makeViewport2D} is executed again for \spad{v}.
286328`\spad{dimensions(v,{} x,{} y,{} width,{} height)} sets the position of the upper left-hand corner of the three-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{ThreeDimensionalViewport},{} to the window coordinate \spad{x},{} \spad{y},{} and sets the dimensions of the window to that of \spad{width},{} \spad{height}. The new dimensions are not displayed until
286328`-- the function \spadfun{makeViewport3D} is executed again for \spad{v}.
286459`\spad{dimensionsOf(t)} returns the dimensions of \spad{t}
286530`\spad{dimJ(q)} computes the (fibre) dimension of the \spad{q}\spad{-}th order jet bundle.
286608`\spad{dimJ(q)} computes the (fibre) dimension of the \spad{q}\spad{-}th order jet bundle.
286690`\spad{dimS(q)} computes dimension of \spad{SqT} \spad{x} VE (= number of derivatives of order \spad{q}).
286768`\spad{dimS(q)} computes dimension of \spad{SqT} \spad{x} VE (= number of derivatives of order \spad{q}).
286850`\spad{diophantineSystem(A,{} B)} returns a particular integer solution and an integer basis of the equation \spad{AX = B}.
286975`\spad{dioSolve(u)} computes a basis of all minimal solutions for linear homogeneous Diophantine equation \spad{u},{} then all minimal solutions of inhomogeneous equation
287180`\spad{directedGraph(perms)} constructs graph from a list of permutations: \spad{perms}.
287252`\spad{directedGraph(ob)} is a constructor for graph with given objects \spad{ob},{} more objects and arrows can be added later if required.
287373`\spad{directedGraph(ob)} is a constructor for graph with given list of object names and no arrows. Use this version of the constructor if you don\spad{'t} want to create specific \spad{x},{} \spad{y} coordinates. more objects and arrows can be added later if required.
287432`\spad{directedGraph(ob,{} ar)} construcs graph with objects \spad{ob} and arrows ar,{} more objects and arrows can be added later if required.
287717`\spad{directedGraph(ob,{} am)} construcs graph with objects \spad{ob} and adjacency matrix am.
287807`\spad{direction(s)} \undocumented
287865`\spad{directions(v)} yields the directions of the base vectors where \spad{v} has non-vanishing coefficients.
287926`\spad{directory(f)} returns the directory part of the file name.
287980`\spad{directProduct(v)} converts the vector \spad{v} to become a direct product. Error: if the length of \spad{v} is different from dim.
288053`\spad{directSum(a,{} b)} computes an operator \spad{c} of minimal order such that the nullspace of \spad{c} is generated by all the sums of a solution of \spad{a} by a solution of \spad{b}.
288147`\spad{directSum(a,{} b,{} D)} computes an operator \spad{c} of minimal order such that the nullspace of \spad{c} is generated by all the sums of a solution of \spad{a} by a solution of \spad{b}. \spad{D} is the derivation to use.
288300`\spad{discreteLog(a)} computes the discrete logarithm of \spad{a} with respect to \spad{primitiveElement()} of the field.
288458`\spad{discreteLog(b,{} a)} computes \spad{s} with \spad{b^s = a} if such an \spad{s} exists.
288555`\spad{discriminant()} returns the discriminant of the integral closure of \spad{Z} in the quotient field of the framed algebra \spad{F}.
288675`\spad{discriminant()} = determinant(traceMatrix()).
288731`\spad{discriminant()} = determinant(traceMatrix()).
288784`\spad{discriminant(P,{} Q)} returns the discriminant of \spad{P} and \spad{Q}.
289036`\spad{discriminant(p)} returns the discriminant of the polynomial \spad{p}.
289125`\spad{discriminant([v1,{} ..,{} vn])} returns \spad{determinant(traceMatrix([v1,{} ..,{} vn]))}.
289262`\spad{discriminant(p,{} v)} returns the disriminant of the polynomial \spad{p} with respect to the variable \spad{v}.
289358`\spad{discriminantEuclidean(P)} carries out the equality \spad{coef1 * P + coef2 * D(P) = discriminant(P)}.
289640`\spad{display(t)} outputs the formatted code
289697`\spad{display(de)} prints all information stored about the differential equation \spad{de}. This comprises the system ordered by the order of the equations,{} the Jacobi matrices separately for each order and the index of the independent variable with respect to which the equation was lastly differentiated (1 for not prolonged equations).
289760`\spad{display(o)} prints the string returned by coerce.
289808`\spad{display(op)} returns the "\%display" property of \spad{op} if it has one attached,{} and "failed" otherwise.
289897`\spad{display(db)} prints a summary line for each entry in \spad{db}.
289942`\spad{display(ic)} prints a summary of the information contained in \spad{ic}.
289985`\spad{display(t)} outputs the formatted code \spad{t} so that each line has length less than or equal to the value set by the system command \spadsyscom{set output length}.
290038`\spad{display(t)} outputs the TeX formatted code \spad{t} so that each line has length less than or equal to the value set by the system command \spadsyscom{set output length}.
290081`prints the string returned by coerce,{} adding <math ...> tags.
290131`prints the string returned by coerce,{} adding <math ...> tags.
290182`\spad{display(t,{} width)} outputs the formatted code \spad{t} so that each line has length less than or equal to \spadvar{width}.
290243`\spad{display(t,{} width)} outputs the TeX formatted code \spad{t} so that each line has length less than or equal to \spadvar{width}.
290294`\spad{display(op,{} foo)} attaches foo as the "\%display" property of \spad{op}. If \spad{op} has a "\%display" property \spad{f},{} then \spad{op(a1,{}...,{}an)} gets converted to OutputForm as \spad{f(a1,{} ...,{} an)}.
290370`\spad{display(op,{} foo)} attaches foo as the "\%display" property of \spad{op}. If \spad{op} has a "\%display" property \spad{f},{} then \spad{op(a)} gets converted to OutputForm as \spad{f(a)}. Argument \spad{op} must be unary.
290440`\spad{displayKind(d)} specifies kind of the result: generating function,{} recurrence or equation. This option should not be set by the user,{} but rather by the \spad{HP}-specification.
290516`\spad{displayKind(d)} specifies kind of the result: generating function,{} recurrence or equation. This option should not be set by the user,{} but rather by the \spad{HP}-specification.
290567`\spad{displayLines1(l)}
290633`\spad{displayLines(l)}
290698`\spad{dispStatement(of)}
290762`\spad{distance(p1,{} p2)} returns the distance between the points \spad{p1} is the first point. \spad{p2} is the second point. There are 2 metrics associated with any SPointCategory the underlying space and the space that it is embedded in this is the distance in the underlying space.
290936`\spad{distance(u,{} v)} returns the path length (an integer) from node \spad{u} to \spad{v}.
290998`\spad{distance(s,{} a,{} b)} gives the shortest distance between nodes 'a' and \spad{'b'} as a number of hops. 0 if 'a' = \spad{'b'},{} \spad{-1} if it is not possible to go from 'a' to \spad{'b'}
291175`\spad{distanceMatrix(s)} gives matrix of distances between vertices. Element a_{\spad{i},{} \spad{j}} is the distance from \spad{i} to \spad{j}. Distance matrices are related to adjacency matrices,{} with the differences that: a) the latter only provides the information which vertices are connected \indented{3}{but does not tell about costs or distances between the vertices} \spad{b}) adjacency matrix only tells us about directly connect
291175`--ed \indented{3}{vertices while distance matrix also considers indirect connections.}
291304`\spad{distanceSquared(p1,{} p2)} returns the distance between the points \spad{p1} and \spad{p2}. There are 2 metrics associated with any SPointCategory the underlying space and the space that it is embedded in this is the distance in the underlying space.
291370`the shortest distance between 'a' and \spad{'b'} in terms of weight.
291484`\spad{distdfact(p,{} sqfrflag)} produces the complete factorization of the polynomial \spad{p} returning an internal data structure. If argument sqfrflag is \spad{true},{} the polynomial is assumed square free.
291608`\spad{distFact(contm,{} unilist,{} plead,{} vl,{} lvar,{} lval)},{} where \spad{contm} is the content of the evaluated polynomial,{} \spad{unilist} is the list of factors of the evaluated polynomial,{} \spad{plead} is the complete fa
291608`--ctorization of the leading coefficient,{} \spad{vl} is the list of factors of the leading coefficient evaluated,{} \spad{lvar} is the list of variables,{} lval is the list of values,{} returns a record giving the list of leading coefficients to impose on the univariate factors,{}
291929`\spad{distribute(f)} expands all the kernels in \spad{f} that are formally enclosed by a \spadfunFrom{box}{ExpressionSpace} or \spadfunFrom{paren}{ExpressionSpace} expression.
292028`\spad{distribute(f,{} g)} expands all the kernels in \spad{f} that contain \spad{g} in their arguments and that are formally enclosed by a \spadfunFrom{box}{ExpressionSpace} or a \spadfunFrom{paren}{ExpressionSpace} expression.
292081`\spad{distributionByBooleanCumulants(bb)} initiates a distribution with given Boolean cumulants \spad{bb}.
292160`\spad{distributionByBooleanCumulants(bb)} initiates a distribution with given Boolean cumulants \spad{bb}.
292237`\spad{distributionByEvenMoments(kk)} initiates a distribution with given classical cumulants \spad{kk}.
292318`\spad{distributionByEvenMoments(kk)} initiates a distribution with given classical cumulants \spad{kk}.
292397`\spad{distributionByEvenMoments(mm)} initiates a distribution with given even moments \spad{mm} and odd moments zero.
292471`\spad{distributionByEvenMoments(mm)} initiates a distribution with given even moments \spad{mm} and odd moments zero.
292543`\spad{distributionByFreeCumulants(cc)} initiates a distribution with given free cumulants \spad{cc}.
292619`\spad{distributionByFreeCumulants(cc)} initiates a distribution with given free cumulants \spad{cc}.
292693`\spad{distributionByJacobiParameters(aa,{} bb)} initiates a distribution with given Jacobi parameters \spad{[aa,{} bb]}.
292784`\spad{distributionByJacobiParameters(aa,{} bb)} initiates a distribution with given Jacobi parameters \spad{[aa,{} bb]}.
292871`\spad{distributionByMoments(mm)} initiates a distribution with given moments \spad{mm}.
292941`\spad{distributionByMoments(mm)} initiates a distribution with given moments \spad{mm}.
293009`\spad{distributionByMonotoneCumulants(hh)} initiates a distribution with given monotone cumulants \spad{hh}.
293122`\spad{distributionByMonotoneCumulants(hh)} initiates a distribution with given monotone cumulants \spad{hh}.
293233`\spad{distributionBySTransform(series)} initiates a distribution with given \spad{S}-transform \spad{series}.
293404`of the distributions \spad{x} if the mean is zero \spad{distributionBySTransform(x)} returns the distribution with \spad{S}-transform \spad{x}.
293503`\spad{distributionBySTransform(series)} initiates a distribution with given \spad{S}-transform \spad{series}.
293645`\spad{divergence(vf,{} xlist)} computes the divergence of the vector field \spad{vf},{} \spad{vf} a vector function of the variables listed in xlist.
293731`\spad{divide(x,{} y)} returns the left and right exact quotients of \spad{x} by \spad{y},{} \spadignore{i.e.} \spad{[l,{} r]} such that \spad{x = l * y * r},{} "failed" if \spad{x} is not of the form \spad{l * y * r}.
293811`\spad{divide(F,{} G)} computes quotient and rest of the exact euclidean division of \spad{F} by \spad{G}.
294143`\spad{divide(x,{} y)} divides \spad{x} by \spad{y} producing a record containing a \spad{quotient} and \spad{remainder},{} where the remainder is smaller (see \spadfunFrom{sizeLess?}{EuclideanDomain}) than the divisor \spad{y}.
294222`\spad{divide(a,{} b)} returns a record containing both remainder and quotient.
294304`Polynomial division.
294402`\spad{divideExponents(p,{} n)} returns a new polynomial resulting from dividing all exponents of the polynomial \spad{p} by the non negative integer \spad{n},{} or "failed" if some exponent is not exactly divisible by \spad{n}.
294508`\spad{divideIfCan(f,{} g)} returns quotient and remainder of the division of \spad{f} by \spad{g} or "failed" if it has not succeeded.
294634`\spad{divideIfCan!(matrix,{} matrixOut,{} prime,{} n)} attempts to divide the entries of \spad{matrix} by \spad{prime} and store the result in \spad{matrixOut}. If it is successful,{} 1 is returned and if not,{} \spad{prime} is returned. Here both \spad{matrix} and \spad{matrixOut} are \spad{n}-by-\spad{n} upper triangular matrices.
294723`\spad{divisor(I)} makes a divisor \spad{D} from an ideal \spad{I}.
294826`\spad{divisor(g)} returns the divisor of the function \spad{g}.
294891`\spad{divisor(a,{} b)} makes the divisor \spad{P:} \spad{(x = a,{} y = b)}. Error: if \spad{P} is singular.
294958`\spad{divisor(a,{} b,{} n)} makes the divisor \spad{nP} where \spad{P:} \spad{(x = a,{} y = b)}. \spad{P} is allowed to be singular if \spad{n} is a multiple of the rank.
295033`\spad{divisor(h,{} d,{} d',{} g,{} r)} returns the sum of all the finite points where \spad{h/d} has residue \spad{r}. \spad{h} must be integral. \spad{d} must be squarefree. \spad{d'} is some derivative of \spad{d} (not necessarily dd/dx). \spad{g = gcd(d,{} discriminant)} contains the ramified zeros of \spad{d}
295109`\spad{divisorCascade(p,{} tp)} assumes that degree of polynomial {\em tp} is smaller than degree of polynomial \spad{p},{} both monic. A sequence of divisions is calculated using the remainder,{} made monic,{} as divisor for the the next division. The result contains also the error of the factorizations,{} \spadignore{i.e.} the norm of the remainder polynomial.
295218`\spad{divisorCascade(p,{} tp)} assumes that degree of polynomial {\em tp} is smaller than degree of polynomial \spad{p},{} both monic. A sequence of divisions are calculated using the remainder,{} made monic,{} as divisor for the the next division. The result contains also the error of the factorizations,{} \spadignore{i.e.} the norm of the remainder polynomial. If {\em info} is {\em tru
295218`--e},{} then information messages are issued.
295335`\spad{divisors(n)} returns a list of the divisors of \spad{n}.
295412`\spad{dmp2rfi(p)} converts \spad{p} to target domain
295506`\spad{dmp2rfi(l)} converts \spad{l} to target domain
295612`\spad{dmp2rfi(m)} converts \spad{m} to target domain
295722`\spad{dmpToHdmp(p)} converts \spad{p} from a \spadtype{DMP} to a \spadtype{HDMP}.
295855`\spad{dmpToP(p)} converts \spad{p} from a \spadtype{DMP} to a \spadtype{POLY}.
295948`\spad{doFactor(p,{} n,{} ext?)} returns the factorisation of polynomial \spad{p},{} \spad{p} is assumed to be primitive and squarefree,{} \spad{n} is degree in auxilary variable,{} ext? if \spad{false} inhibits use of extension field.
296132`\spad{do_liou(op,{} lf)} should be local but conditional.
296239`\spad{dom(a)} returns a \spadgloss{LISP} form of the type of the original object that was converted to \spadtype{Any}.
296279`\spad{domainOf(a)} returns a printable form of the type of the original object that was converted to \spadtype{Any}.
296323`\spad{dominantTerm(f(var))} returns the term that dominates the limiting behavior of \spad{f(var)} as \spad{var -> cen+} together with a \spadtype{String} which briefly describes that behavior. The value of the \
296323`--spadtype{String} will be \spad{"zero"} (resp. \spad{"infinity"}) if the term tends to zero (resp. infinity) exponentially and will \spad{"series"} if the term is a Puiseux series.
297381`\spad{do_risch_DE(f,{} g,{} x,{} lk)} returns \spad{[y,{} h,{} 0,{} b]} such that \spad{dy/dx + df/dx y = h} and \spad{b := h = g}. The equation \spad{dy/dx + df/dx y = g} has no solution in the field generated by \spad{lk} if \spad{h \~~= g} (\spad{y} is a partial solution in that case).
297508`\spad{dot(f)} creates the form with a one dot overhead.
297546`\spad{dot(f,{} n)} creates the form \spad{f} with \spad{n} dots overhead.
297603`\spad{dot(p,{} q)} computes the dot product of the two points \spad{p} and \spad{q} using only the first three coordinates,{} and returns the resulting \spadtype{DoubleFloat}.
297731`\spad{dot(x,{} y)} computes the inner product of the vectors \spad{x} and \spad{y}.
297829`\spad{dot(x,{} y)} computes the inner product of the two vectors \spad{x} and \spad{y}. Error: if \spad{x} and \spad{y} are not of the same length.
297916`\spad{double?(t)} tests whether \spad{t} is equivalent to the FORTRAN type DOUBLE PRECISION
297970`\spad{double(i,{} r)} multiplies \spad{r} by \spad{i} using repeated doubling.
298034`\spad{doubleComplex?(t)} tests whether \spad{t} is equivalent to the (non-standard) FORTRAN type DOUBLE COMPLEX.
298095`\spad{doubleDisc(u)} \undocumented
298170`change the output format for doublefloats using lisp format strings
298231`\spad{doubleRank(x)} determines the number of linearly independent elements in \spad{b1*x},{} ...,{} \spad{x*bn},{} where \spad{b=[b1,{} ...,{} bn]} is a basis.
298300`\spad{doubleResultant(f,{} ')} returns \spad{p}(\spad{x}) whose roots are rational multiples of the residues of \spad{f} at all its finite poles. Argument ' is the derivation to use.
298383`\spad{doublyTransitive?(p)} is \spad{true} if \spad{p} is irreducible over over the field \spad{K} generated by its coefficients,{} and if \spad{p(X) / (X - a)} is irreducible over \spad{K(a)} where \spad{p(a) = 0}.
298443`\spad{do_with_error_env0(f)}
298526`\spad{do_with_error_env1(f)}
298609`\spad{do_with_error_env2(int_to_floats?,{} f)}
298700`\spad{do_with_error_env3(int_to_floats?,{} f)}
298767`\spad{dP(i,{} mu)} returns the differential of \spad{P(i,{} mu)}.
298853`\spad{draw(lp)} plots the curve constructed from the list of points \spad{lp}.
298954`\spad{draw(f,{} a..b)} draws the graph of \spad{y = f(x)} as \spad{x} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)}.
299083`\spad{draw(f,{} a..b,{} l)} draws the graph of the parametric curve \spad{f} as \spad{t} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)}.
299221`\spad{draw(f(x),{} x = a..b)} draws the graph of \spad{y = f(x)} as \spad{x} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)}; \spad{f(x)} appears in the title bar.
299317`\spad{draw(lx,{} ly)} plots the curve constructed of points (\spad{x},{} \spad{y}) for \spad{x} in \spad{lx} for \spad{y} in \spad{ly}.
299429`\spad{draw(lp,{} l)} plots the curve constructed from the list of points \spad{lp}. The options contained in the list \spad{l} of the domain \spad{DrawOption} are applied.
299547`\spad{draw(curve(f,{} g),{} a..b)} draws the graph of the parametric curve \spad{x = f(t),{} y = g(t)} as \spad{t} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)}.
299698`\spad{draw(curve(f(t),{} g(t)),{} t = a..b)} draws the graph of the parametric curve \spad{x = f(t),{} y = g(t)} as \spad{t} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)}; \spad{(f(t),{} g(t))} appears in the title bar.
299816`\spad{draw(curve(f,{} g,{} h),{} a..b,{} l)} draws the graph of the parametric curve \spad{x = f(t),{} y = g(t),{} z = h(t)} as \spad{t} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)}.
299969`\spad{draw(curve(f(t),{} g(t),{} h(t)),{} t = a..b)} draws the graph of the parametric curve \spad{x = f(t)},{} \spad{y = g(t)},{} \spad{z = h(t)} as \spad{t} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)}; \spad{h(t)} is the default title.
300089`\spad{draw(f,{} a..b,{} c..d)} draws the graph of \spad{z = f(x,{} y)} as \spad{x} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)} and \spad{y} ranges from \spad{min(c,{} d)} to \spad{max(c,{} d)}.
300247`\spad{draw(f,{} a..b,{} c..d)} draws the graph of the parametric surface \spad{f(u,{} v)} as \spad{u} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)} and \spad{v} ranges from \spad{min(c,{} d)} to \spad{max(c,{} d)} The options contained in the list \spad{l} of the domain \spad{DrawOption} are applied.
300412`\spad{draw(f,{} a..b,{} l)} draws the graph of \spad{y = f(x)} as \spad{x} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)}. The options contained in the list \spad{l} of the domain \spad{DrawOption} are applied.
300558`\spad{draw(f,{} a..b,{} l)} draws the graph of the parametric curve \spad{f} as \spad{t} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)}. The options contained in the list \spad{l} of the domain \spad{DrawOption} are applied.
300713`\spad{draw(f(x),{} x = a..b,{} l)} draws the graph of \spad{y = f(x)} as \spad{x} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)}; \spad{f(x)} is the default title,{} and the options contained in the list \spad{l} of the domain \spad{DrawOption} are applied.
300826`\spad{draw(f(x,{} y),{} x = a..b,{} y = c..d)} draws the graph of \spad{z = f(x,{} y)} as \spad{x} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)} and \spad{y} ranges from \spad{min(c,{} d)} to \spad{max(c,{} d)}; \spad{f(x,{} y)} appears in the title bar.
300946`\spad{draw(lx,{} ly,{} lz)} draws the surface constructed by projecting the values in the \spad{lz} list onto the rectangular grid formed by the \spad{lx X ly}.
301078`\spad{draw(lx,{} ly,{} l)} plots the curve constructed of points (\spad{x},{} \spad{y}) for \spad{x} in \spad{lx} for \spad{y} in \spad{ly}. The options contained in the list \spad{l} of the domain \spad{DrawOption} are applied.
301207`\spad{draw(curve(f,{} g),{} a..b,{} l)} draws the graph of the parametric curve \spad{x = f(t),{} y = g(t)} as \spad{t} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)}. The options contained in the list \spad{l} of the domain \spad{DrawOption} are applied.
301375`\spad{draw(curve(f(t),{} g(t)),{} t = a..b,{} l)} draws the graph of the parametric curve \spad{x = f(t),{} y = g(t)} as \spad{t} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)}; \spad{(f(t),{} g(t))} is the default title,{} and the options contained in the list \spad{l} of the domain \spad{DrawOption} are applied.
301510`\spad{draw(curve(f,{} g,{} h),{} a..b,{} l)} draws the graph of the parametric curve \spad{x = f(t),{} y = g(t),{} z = h(t)} as \spad{t} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)}. The options contained in the list \spad{l} of the domain \spad{DrawOption} are applied.
301680`\spad{draw(curve(f(t),{} g(t),{} h(t)),{} t = a..b,{} l)} draws the graph of the parametric curve \spad{x = f(t)},{} \spad{y = g(t)},{} \spad{z = h(t)} as \spad{t} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)}; \spad{h(t)} is the default title,{} and the options contained in the list \spad{l} of the domain \spad{DrawOption} are applied.
301817`\spad{draw(surface(f,{} g,{} h),{} a..b,{} c..d)} draws the graph of the parametric surface \spad{x = f(u,{} v)},{} \spad{y = g(u,{} v)},{} \spad{z = h(u,{} v)} as \spad{u} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)} and \spad{v} ranges from \spad{min(c,{} d)} to \spad{max(c,{} d)}.
301994`\spad{draw(surface(f(u,{} v),{} g(u,{} v),{} h(u,{} v)),{} u = a..b,{} v = c..d)} draws the graph of the parametric surface \spad{x = f(u,{} v)},{} \spad{y = g(u,{} v)},{} \spad{z = h(u,{} v)} as \spad{u} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)} and \spad{v} ranges from \spad{min(c,{} d)} to \spad{max(c,{} d)}; \spad{h(t)} is the default title.
302133`\spad{draw(f,{} a..b,{} c..d,{} l)} draws the graph of \spad{z = f(x,{} y)} as \spad{x} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)} and \spad{y} ranges from \spad{min(c,{} d)} to \spad{max(c,{} d)}. and the options contained in the list \spad{l} of the domain \spad{DrawOption} are applied.
302308`\spad{draw(f,{} a..b,{} c..d)} draws the graph of the parametric surface \spad{f(u,{} v)} as \spad{u} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)} and \spad{v} ranges from \spad{min(c,{} d)} to \spad{max(c,{} d)}. The options contained in the list \spad{l} of the domain \spad{DrawOption} are applied.
302490`\spad{draw(f(x,{} y) = g(x,{} y),{} x,{} y,{} l)} draws the graph of a polynomial equation. The list \spad{l} of draw options must specify a region in the plane in which the curve is to sketched.
302625`\spad{draw(f(x,{} y),{} x = a..b,{} y = c..d,{} l)} draws the graph of \spad{z = f(x,{} y)} as \spad{x} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)} and \spad{y} ranges from \spad{min(c,{} d)} to \spad{max(c,{} d)}; \spad{f(x,{} y)} is the default title,{} and the options contained in the list \spad{l} of the domain \spad{DrawOption} are applied.
302762`\spad{draw(lx,{} ly,{} lz,{} l)} draws the surface constructed by projecting the values in the \spad{lz} list onto the rectangular grid formed by the The options contained in the list \spad{l} of the domain \spad{DrawOption} are applied.
302911`\spad{draw(surface(f,{} g,{} h),{} a..b,{} c..d)} draws the graph of the parametric surface \spad{x = f(u,{} v)},{} \spad{y = g(u,{} v)},{} \spad{z = h(u,{} v)} as \spad{u} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)} and \spad{v} ranges from \spad{min(c,{} d)} to \spad{max(c,{} d)}; The options containe
302911`--d in the list \spad{l} of the domain \spad{DrawOption} are applied.
303105`\spad{draw(surface(f(u,{} v),{} g(u,{} v),{} h(u,{} v)),{} u = a..b,{} v = c..d,{} l)} draws the graph of the parametric surface \spad{x = f(u,{} v)},{} \spad{y = g(u,{} v)},{} \spad{z = h(u,{} v)} as \spad{u} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)} and \spad{v} ranges from \spad{min(c,{} d)} to \spad{max(c,{} d)}; \spad{h(t)} is the de
303105`--fault title,{} and the options contained in the list \spad{l} of the domain \spad{DrawOption} are applied.
303261`\spad{drawComplex(f,{} rRange,{} iRange,{} arrows?)} draws a complex function as a height field. It uses the complex norm as the height and the complex argument as the color. It will optionally draw arrows on the surface indicating the direction of the complex value.\newline Sample call: \indented{2}{\spad{f z == exp(1/z)}} \indented{2}{\spad{d
303261`--rawComplex(f,{} 0.3..3,{} 0..2*\%\spad{pi},{} false)}} Parameter descriptions: \indented{2}{\spad{f:}\space{2}the function to draw} \indented{2}{\spad{rRange} : the range of the real values} \indented{2}{\spad{iRange} : the range of imaginary values} \indented{2}{arrows? : a flag indicating whether to draw the phase arrows for \spad{f}} Call the functions \spadfunFrom{setRealSteps}{DrawComplex} and \spadfunFrom{setImagSteps}{DrawComplex} to change the number of steps used in each direction.
303422`\spad{drawComplexVectorField(f,{} rRange,{} iRange)} draws a complex vector field using arrows on the \spad{x
303422`--y} plane. These vector fields should be viewed from the top by pressing the "XY" translate button on the 3-\spad{d} viewport control panel.\newline Sample call: \indented{3}{\spad{f z == sin z}} \indented{3}{\spad{drawComplexVectorF
303422`--ield(f,{} -2..2,{} -2..2)}} Parameter descriptions: \indented{2}{\spad{f} : the function to draw} \indented{2}{\spad{rRange} : the range of the real values} \indented{2}{iRange : the range of the imaginary values} Call the functions \spadfunFrom{setRealSteps}{DrawComplex} and \spadfunFrom{setImagSteps}{DrawComplex} to change the number of steps used in each direction.
303586`\spad{drawCurves([[p0],{} [p1],{} ...,{} [pn]],{} [options])} creates a \spadtype{TwoDimensionalViewport} from the list of lists of points,{} \spad{p0} throught \spad{pn},{} using the options specified in the list \spad{options}.
303701`\spad{drawCurves([[p0],{} [p1],{} ...,{} [pn]],{} ptColor,{} lineColor,{} ptSize,{} [options])} creates a \spadtype{TwoDimensionalViewport} from the list of lists of points,{} \spad{p0} throught \spad{pn},{} using the options specified in the list \spad{options}. The point color is specified by \spad{ptColor},{} the line color is specified by \spad{lineColor
303701`--},{} and the point size is specified by \spad{ptSize}.
303848`\spad{drawStyle(v,{} s)} displays the surface for the given three-dimensional viewport \spad{v} which is of domain \spadtype{ThreeDimensionalViewport} in the style of drawing indicated by \spad{s}. If \spad{s} is not a valid drawing style the style is wireframe by default. Possible styles are \spad{"shade"},{} \spad{"solid"} or \spad{"opaque"},{} \spad{"smooth"},{} and \spad{"wireMesh"}.
303915`\spad{drawToScale()} determines whether or not plots are to be drawn to scale.
303970`\spad{drawToScale(true)} causes plots to be drawn to scale. \spad{drawToScale(false)} causes plots to be drawn so that they fill up the viewport window. The default setting is \spad{false}.
304032`\spad{droot(l)} should be a non-exported function.
304097`\spad{dSubst(f,{} jv,{} exp)} is like \spad{subst(f,{} jv,{} exp)}. But additionally for all derivatives of \spad{jv} the corresponding substitutions are performed.
304224`\spad{dU(i)} returns the differential of \spad{U(i)}.
304285`\spad{duplicates?(d)} tests if dictionary \spad{d} has duplicate entries.
304348`\spad{duplicates(d)} returns a list of values which have duplicates in \spad{d}
304445`\spad{dX(i)} returns the differential of \spad{X(i)}.
304506`\spad{e(n)} produces phi(e_i) where e_i is \spad{i}-th basis vector in \spad{K^n} and phi is canonical embedding of \spad{K^n} into Clifford algebra.
304570`to allow entries like: ee[1,{} 2]
304641`\spad{eFromBinaryMap(n)} sets the appropriate Grassmann basis,{} for example: eFromBinaryMap(0) = 1 (scalar) eFromBinaryMap(1) = \spad{e1} eFromBinaryMap(2) = \spad{e2} eFromBinaryMap(3) = e1/\e2
304721`\spad{\spad{Ei}(f)} denotes the exponential integral
304770`\spad{\spad{Ei}(x)} returns the exponential integral of \spad{x},{} \spadignore{i.e.} the integral of \spad{exp(x)/x dx}.
304824`\spad{\spad{Ei}(f)} denotes the exponential integral
304967`\spad{\spad{Ei}(f)} denotes the exponential integral
305024`\spad{eigenMatrix(m)} returns the matrix \spad{b} such that \spad{b*m*(inverse b)} is diagonal,{} or "failed" if no such \spad{b} exists.
305155`\spad{eigenvalues(m)} returns the eigenvalues of the matrix \spad{m}.
305298`\spad{eigenvalues(m)} returns the eigenvalues of the matrix \spad{m}.
305443`\spad{eigenvalues(m,{} fac)} returns the eigenvalues of the matrix \spad{m}. Eigenvalues in base field are given explicitely,{} other are represented by mininal polynomial. fac is a factorizer for polynomials over \spad{F}.
305621`\spad{eigenvector(eigval,{} m)} returns the eigenvectors belonging to the eigenvalue \spad{eigval} for the matrix \spad{m}.
305764`\spad{eigenvector(eigval,{} m)} returns the eigenvectors belonging to the eigenvalue \spad{eigval} for the matrix \spad{m}.
305941`\spad{eigenvectors(m)} returns the eigenvalues and eigenvectors for the matrix \spad{m}. The eigenvalues in base field and corresponding eigenvectors are explicitely computed,{} while the non rational ones are given via their minimal polynomial and the corresponding eig
305941`--envectors are expressed in terms of a "generic" root of such a polynomial.
306178`\spad{eigenvectors(m)} returns the eigenvalues and eigenvectors for the matrix \spad{m}. The eigenvalues in base field and the corresponding eigenvectors are explicitely computed,{} while the other ones are given via their minimal polynomial and the corresponding eigenvecto
306178`--rs are expressed in terms of a "generic" root of such a polynomial.
306411`\spad{eigenvectors(m,{} fac)} returns the eigenvalues and eigenvectors for the matrix \spad{m}. The eigenvalues in base field and corresponding eigenvectors are explicitely computed,{} while the other eigenvalues are given via their mi
306411`--nimal polynomial and the corresponding eigenvectors are expressed in terms of a "generic" root of such a polynomial. fac is a factorizer for polynomials over \spad{F}.
306683`\spad{ei_int(n,{} f,{} g,{} x)} returns \spad{[h,{} u,{} t,{} s]} such that \spad{u*exp(n*f) = (h*exp(n*f))' + t'} where \spad{t} involves special functions. When \spad{s} is \spad{true} then \spad{f = u},{} otherwise ei_int returns partial answer,{}
306796`\spad{eisensteinIrreducible?(p)} returns \spad{true} if \spad{p} can be shown to be irreducible by Eisenstein\spad{'s} criterion,{} \spad{false} is inconclusive.
306873`\spad{elColumn2!(m,{} a,{} i,{} j)} adds to column \spad{i} a*column(\spad{m},{} \spad{j}) : elementary operation of second kind. (\spad{i} \spad{~=j})
306965`\spad{elem?(ir)} tests if an integration result is elementary over \spad{F?}
307020`\spad{element?(f,{} I)} tests whether the polynomial \spad{f} belongs to the ideal \spad{I}.
307101`\spad{element} returns a single element out of a matrix. The element is put into a one by one matrix.
307194`\spad{elementary n} is the \spad{n} th elementary symmetric \indented{1}{function expressed in terms of power sums.}
307285`\spad{elements(S)} returns the list of the elements of \spad{S} in increasing order.
307364`\spad{elimZeroCols!(A)} removes columns which contain only zeros. This effects basically only the value of \spad{allIndices(A)}.
307428`\spad{ellipseBoundary(c1,{} c2)} constructs an ellipse boundary \spad{n}-dimensional axis-aligned ellipoid with given parameters \spad{c1:} \spad{PT} holds centre point \spad{c2:} \spad{PT} holds extent (radius for each coordinate)
307484`\spad{elliptic()} returns \spad{p(x)} if the curve is the elliptic defined by \spad{y^2 = p(x)},{} "failed" otherwise.
307566`\spad{elliptic()} returns \spad{p(x)} if the curve is the elliptic defined by \spad{y^2 = p(x)},{} "failed" otherwise.
307645`\spad{elliptic(a)} transforms from elliptic coordinates to Cartesian coordinates: \spad{elliptic(a)} is a function which will map the point \spad{(u,{} v)} to \spad{x = a*cosh(u)*cos(v)},{} \spad{y = a*sinh(u)*sin(v)}.
307715`\spad{ellipticCylindrical(a)} transforms from elliptic cylindrical coordinates to Cartesian coordinates: \spad{ellipticCylindrical(a)} is a function which will map the point \spad{(u,{} v,{} z)} to \spad{x = a*cosh(u)*cos(v)},{} \spad{y = a*sinh(u)*sin(v)},{} \spad{z}.
307796`\spad{ellipticE(m)} is the complete elliptic integral of the second kind: \spad{ellipticE(m) = integrate(sqrt(1-m*t^2)/sqrt(1-t^2),{} t = 0..1)}
307858`\spad{ellipticE(m)} is the complete elliptic integral of the second kind: \spad{ellipticE(m) = integrate(sqrt(1-m*t^2)/sqrt(1-t^2),{} t = 0..1)}.
307915`\spad{ellipticE(m)} is the complete elliptic integral of the second kind
308013`\spad{ellipticE(m)} is the complete elliptic integral of the second kind.
308093`\spad{ellipticE(m)} is the complete elliptic integral of the second kind
308173`\spad{ellipticE(m)} is the complete elliptic integral of the second kind.
308235`\spad{ellipticE(z,{} m)} is the incomplete elliptic integral of the second kind: \spad{ellipticE(z,{} m) = integrate(sqrt(1-m*t^2)/sqrt(1-t^2),{} t = 0..z)}
308299`\spad{ellipticE(z,{} m)} expands the elliptic integral \spad{E} as a Taylor series in \spad{z}.
308425`\spad{ellipticE(z,{} m)} is the incomplete elliptic integral of the second kind: \spad{ellipticE(z,{} m) = integrate(sqrt(1-m*t^2)/sqrt(1-t^2),{} t = 0..z)}.
308485`\spad{ellipticE(z,{} m)} is the incomplete elliptic integral of the second kind.
308604`\spad{ellipticE(z,{} m)} is the incomplete elliptic integral of the second kind.
308699`\spad{ellipticE(z,{} m)} is the incomplete elliptic integral of the second kind.
308791`\spad{ellipticE(z,{} m)} is the incomplete elliptic integral of the second kind.
308859`\spad{ellipticF(z,{} m)} is the incomplete elliptic integral of the first kind : \spad{ellipticF(z,{} m) = integrate(1/sqrt((1-t^2)*(1-m*t^2)),{} t = 0..z)}
308923`\spad{ellipticF(z,{} m)} expands the elliptic integral \spad{F} as a Taylor series in \spad{z}.
309049`\spad{ellipticF(z,{} m)} is the incomplete elliptic integral of the first kind : \spad{ellipticF(z,{} m) = integrate(1/sqrt((1-t^2)*(1-m*t^2)),{} t = 0..z)}.
309109`\spad{ellipticF(z,{} m)} is the incomplete elliptic integral of the first kind.
309228`\spad{ellipticF(z,{} m)} is the incomplete elliptic integral of the first kind.
309323`\spad{ellipticF(z,{} m)} is the incomplete elliptic integral of the first kind.
309415`\spad{ellipticF(z,{} m)} is the incomplete elliptic integral of the first kind.
309483`\spad{ellipticK(m)} is the complete elliptic integral of the first kind: \spad{ellipticK(m) = integrate(1/sqrt((1-t^2)*(1-m*t^2)),{} t = 0..1)}
309545`\spad{ellipticK(m)} is the complete elliptic integral of the first kind: \spad{ellipticK(m) = integrate(1/sqrt((1-t^2)*(1-m*t^2)),{} t = 0..1)}.
309602`\spad{ellipticK(z,{} m)} is the incomplete elliptic integral of the first kind.
309700`\spad{ellipticK(m)} is the complete elliptic integral of the first kind.
309780`\spad{ellipticK(z,{} m)} is the complete elliptic integral of the first kind.
309860`\spad{ellipticK(m)} is the complete elliptic integral of the first kind.
309922`\spad{ellipticPi(z,{} n,{} m)} is the incomplete elliptic integral of the third kind: \spad{ellipticPi(z,{} n,{} m) = integrate(1/((1-n*t^2)*sqrt((1-t^2)*(1-m*t^2))),{} t = 0..z)}
309989`\spad{ellipticPi(z,{} n,{} m)} expands the elliptic integral \spad{Pi} as a Taylor series in \spad{z}.
310121`\spad{ellipticPi(z,{} n,{} m)} is the incomplete elliptic integral of the third kind: \spad{ellipticPi(z,{} n,{} m) = integrate(1/((1-n*t^2)*sqrt((1-t^2)*(1-m*t^2))),{} t = 0..z)}.
310185`\spad{ellipticPi(z,{} n,{} m)} is the incomplete elliptic integral of the third kind.
310326`\spad{ellipticPi(z,{} n,{} m)} is the incomplete elliptic integral of the third kind.
310431`\spad{ellipticRC(x,{} y)} computes integral from 0 to infinity of \spad{(1/2)*(t+x)^(-1/2)*(t+y)^(-1)dt}.
310551`\spad{ellipticRC(x,{} y)} computes integral from 0 to infinity of \spad{(1/2)*(t+x)^(-1/2)*(t+y)^(-1)dt}.
310644`\spad{ellipticRD(x,{} y,{} z)} computes integral from 0 to infinity of \spad{(3/2)*(t+x)^(-1/2)*(t+y)^(-1/2)*(t+Z)^(-3/2)dt}.
310785`\spad{ellipticRD(x,{} y,{} z)} computes integral from 0 to infinity of \spad{(3/2)*(t+x)^(-1/2)*(t+y)^(-1/2)*(t+Z)^(-3/2)dt}.
310890`\spad{ellipticRF(x,{} y,{} z)} computes integral from 0 to infinity of \spad{(1/2)*(t+x)^(-1/2)*(t+y)^(-1/2)*(t+Z)^(-1/2)dt}.
311031`\spad{ellipticRF(x,{} y,{} z)} computes integral from 0 to infinity of \spad{(1/2)*(t+x)^(-1/2)*(t+y)^(-1/2)*(t+Z)^(-1/2)dt}.
311136`ellipticRF(\spad{x},{} \spad{y},{} \spad{z},{} \spad{p}) computes integral from 0 to infinity of \spad{(3/2)*(t+x)^(-1/2)*(t+y)^(-1/2)*(t+Z)^(-1/2)*(t+p)^(-1)dt}.
311298`ellipticRF(\spad{x},{} \spad{y},{} \spad{z},{} \spad{p}) computes integral from 0 to infinity of \spad{(3/2)*(t+x)^(-1/2)*(t+y)^(-1/2)*(t+Z)^(-1/2)*(t+p)^(-1)dt}.
311415`\spad{elRow1!(m,{} i,{} j)} swaps rows \spad{i} and \spad{j} of matrix \spad{m} : elementary operation of first kind
311502`\spad{elRow2!(m,{} a,{} i,{} j)} adds to row \spad{i} a*row(\spad{m},{} \spad{j}) : elementary operation of second kind. (\spad{i} \spad{~=j})
311733`\spad{elt(op,{} x,{} y,{} z,{} t,{} s,{} r,{} q,{} p,{} o)} applies the 9-ary operator \spad{op} to \spad{x},{} \spad{y},{} \spad{z},{} \spad{t},{} \spad{s},{} \spad{r},{} \spad{q},{} \spad{p} and \spad{o}
311815`\spad{elt(n)} returns the object \spad{n}.
311854`\spad{elt(t)} gives the component of a rank 0 tensor.
311909`\spad{elt(mm,{} n)} returns the \spad{n}th element of a sequence.
311963`\spad{elt(op,{} l)} creates a form for application of \spad{op} to list of arguments \spad{l}.
312010`\spad{elt(x,{} r)} or \spad{x}.\spad{r} \undocumented
313352`\spad{elt(op,{} [a1,{} ...,{} an])} returns \spad{op(a1,{} ...,{} an)}.
314313`\spad{elt(s,{} t)} returns the concatenation of \spad{s} and \spad{t}. It is provided to allow juxtaposition of strings to work as concatenation. For example,{} \spad{"smoo" "shed"} returns \spad{"smooshed"}.
314359`\spad{l."count"} returns the number of elements in \spad{l}.
314422`\spad{elt(qf,{} v)} evaluates the quadratic form \spad{qf} on the vector \spad{v},{} producing a scalar.
314486`\spad{elt(f(x),{} r)} returns the coefficient of the term of degree \spad{r} in \spad{f(x)}. This is the same as the function \spadfun{coefficient}.
314563`\spad{elt(u,{}"first")} (also written: \spad{u . first}) is equivalent to first \spad{u}.
314624`\spad{elt((a1,{} ...,{} an),{} i)} returns \spad{\spad{ai}}.
314696`\spad{elt(a,{} i)} returns the \spad{i}-th coefficient of \spad{a} with respect to the fixed \spad{R}-module basis.
314761`\spad{elt(t,{} i)} gives a component of a rank 1 tensor.
314824`\spad{elt(u,{}"last")} (also written: \spad{u . last}) is equivalent to last \spad{u}.
314884`\spad{elt(u,{}"left")} (also written: \spad{a . left}) is equivalent to \spad{left(a)}.
314946`\spad{elt((a1,{} ...,{} an),{} [i1,{} ...,{} im])} returns \spad{(a_i1,{} ...,{} a_im)}.
315024`\spad{elt(t,{} [i1,{} ...,{} iN])} gives a component of a rank \spad{N} tensor.
315093`\spad{elt(s,{} [a1,{} ...,{} an])} or \spad{s}([\spad{a1},{} ...,{} an]) returns \spad{s} subscripted by \spad{[a1,{} ...,{} an]}.
315144`\spad{elt(gp,{} i)} returns the \spad{i}-th generator of the group {\em gp}.
315222`\spad{elt(db,{} q)} returns all elements of \spad{db} which satisfy \spad{q}.
315275`\spad{elt(\%,{}"rest")} (also written: \spad{u.rest}) is equivalent to \spad{rest u}.
315336`\spad{elt(a,{}"right")} (also written: \spad{a . right}) is equivalent to \spad{right(a)}.
315399`\spad{elt(u,{} i)} (also written: \spad{u} . \spad{i}) returns the element of \spad{u} indexed by \spad{i}. Error: if \spad{i} is not an index of \spad{u}.
315442`\spad{l.sort} returns \spad{l} with elements sorted. Note: \spad{l.sort = sort(l)}
315488`\spad{elt(p,{} el)} returns the image of {\em el} under the permutation \spad{p}.
315539`\spad{elt(lib,{} k)} or \spad{lib}.\spad{k} extracts the value corresponding to the key \spad{k} from the library \spad{lib}.
315582`\spad{elt(db,{} s)} returns the \spad{s} field of each element of \spad{db}.
315642`\spad{elt(ic,{} s)} selects a particular field from \spad{ic}. Valid fields are \spad{name,{} nargs,{} exposed,{} type,{} abbreviation,{} kind,{} origin,{} params,{} condition,{} doc}.
315690`\spad{l.unique} returns \spad{l} with duplicates removed. Note: \spad{l.unique = removeDuplicates(l)}.
315738`\spad{elt(u,{} i..j)} (also written: \spad{a(i..j)}) returns the aggregate of elements \spad{u} for \spad{k} from \spad{i} to \spad{j} in that order. Note: in general,{} \spad{a.s = [a.k for i in s]}.
315810`\spad{elt(u,{}"value")} (also written: \spad{a. value}) is equivalent to \spad{value(a)}.
315866`\spad{elt(op,{} x)} or \spad{op}(\spad{x}) applies the unary operator \spad{op} to \spad{x}.
315923`\spad{elt(op,{} [x1,{} ...,{} xn])} or \spad{op}([\spad{x1},{} ...,{} \spad{xn}]) applies the \spad{n}-ary operator \spad{op} to \spad{x1},{} ...,{} \spad{xn}.
315986`\spad{elt(a,{} b)} evaluates the fraction of univariate polynomials \spad{a} with the distinguished variable replaced by \spad{b}.
316099`\spad{elt(a,{} r)} evaluates the fraction of univariate polynomials \spad{a} with the distinguished variable replaced by the constant \spad{r}.
316181`\spad{elt(A,{} i,{} c)} returns the entry of the matrix \spad{A} in row \spad{i} and in the column with index \spad{c}.
317901`\spad{elt(u,{} x,{} y)} applies \spad{u} to \spad{x} if \spad{x} is in the domain of \spad{u},{} and returns \spad{y} otherwise. For example,{} if \spad{u} is a polynomial in \spad{x} over the rationals,{} \spad{elt(u,{} n,{} 0)} may define the coefficient of \spad{x} to the power \spad{n},{} returning 0 when \spad{n} is out of range.
317960`\spad{elt(f,{} a,{} b)} or \spad{f}(a,{} \spad{b}) returns the value of \spad{f} at the point \spad{(x = a,{} y = b)} if it is not singular.
318023`\spad{elt(r,{} f,{} n)} or \spad{r}(\spad{f},{} \spad{n}) applies the rule \spad{r} to \spad{f} at most \spad{n} times.
318089`\spad{elt(r,{} f,{} n)} or \spad{r}(\spad{f},{} \spad{n}) applies all the rules of \spad{r} to \spad{f} at most \spad{n} times.
318151`\spad{elt(m,{} i,{} j)} returns the element in the \spad{i}th row and \spad{j}th column of the matrix \spad{m}. Error: if indices are outside the proper ranges.
318234`\spad{elt(m,{} i,{} j)} returns the element in the \spad{i}th row and \spad{j}th column of the array \spad{m} error check to determine if indices are in proper ranges
318315`\spad{elt(t,{} i,{} j)} gives a component of a rank 2 tensor.
318386`\spad{elt(x,{} row,{} colList} returns an 1-by-\spad{n} array consisting of elements of \spad{x},{} where \spad{n = \# colList}. If \spad{colList = [j<1>,{} j<2>,{} ...,{} j<n>]},{} then the \spad{(k,{} l)}th entry of \spad{elt(x,{} row,{} colList)} is \spad{x(row,{} j<l>)}.
318474`\spad{elt(x,{} row,{} ls2)} is equivalent to \spad{elt(x,{} row,{} l2)} where \spad{l2} is obtained appending expansions of elements of \spad{ls2},{} but should be more convenient and more efficient.
318571`\spad{elt(x,{} rowList,{} col} returns an \spad{m}-by-1 array consisting of elements of \spad{x},{} where \spad{m = \# rowList}. If \spad{rowList = [i<1>,{} i<2>,{} ...,{} i<n>]},{} then the \spad{(k,{} l)}th entry of \spad{elt(x,{} rowList,{} col)} is \spad{x(i<k>,{} col)}.
318659`\spad{elt(x,{} rowList,{} colList)} returns an \spad{m}-by-\spad{n} array consisting of elements of \spad{x},{} where \spad{m = \# rowList} and \spad{n = \# colList}. If \spad{rowList = [i<1>,{} i<2>,{} ...,{} i<m>]} and \spad{colList = [j<1>,{} j<2>,{} ...,{} j<n>]},{} then the \spad{(k,{} l)}th entry of \spad{elt(x,{} rowList,{} colList)} is \spad{x(i<k>,{} j<l>)}.
318753`\spad{elt(x,{} rowList,{} s)} is equivalent to \spad{elt(x,{} rowList,{} expand(s))} but should be more convenient and more efficient.
318850`\spad{elt(x,{} ls1,{} col)} is equivalent to \spad{elt(x,{} l1,{} col)} where \spad{l1} is obtained appending expansions of elements of \spad{ls1},{} but should be more convenient and more efficient.
318947`\spad{elt(x,{} ls1,{} ls2)} is equivalent to \spad{elt(x,{} l1,{} l2)} where \spad{li} is obtained appending expansions of elements of lsi,{} but should be more convenient and more efficient.
319059`\spad{elt(x,{} ls1,{} s2)} is equivalent to \spad{elt(x,{} l1,{} l2)} where \spad{li} is obtained appending expansions of elements of lsi,{} but should be more convenient and more efficient.
319165`\spad{elt(x,{} s,{} colList)} is equivalent to \spad{elt(x,{} expand(s),{} colList)} but should be more convenient and more efficient.
319262`\spad{elt(x,{} s1,{} ls2)} is equivalent to \spad{elt(x,{} l1,{} l2)} where \spad{li} is obtained appending expansions of elements of lsi,{} but should be more convenient and more efficient.
319368`\spad{elt(x,{} s1,{} s2)} is equivalent to \spad{elt(x,{} expand(s1),{} expand(s2))} but should be more convenient and more efficient.
319468`\spad{elt(op,{} x,{} y)} or \spad{op}(\spad{x},{} \spad{y}) applies the binary operator \spad{op} to \spad{x} and \spad{y}.
319528`\spad{elt(x,{} i,{} j,{} k)} extract an element from the matrix \spad{x}
319833`\spad{elt(t,{} i,{} j,{} k)} gives a component of a rank 3 tensor.
319912`\spad{elt(m,{} i,{} j,{} r)} returns the element in the \spad{i}th row and \spad{j}th column of the matrix \spad{m},{} if \spad{m} has an \spad{i}th row and a \spad{j}th column,{} and returns \spad{r} otherwise.
319997`\spad{elt(m,{} i,{} j,{} r)} returns the element in the \spad{i}th row and \spad{j}th column of the array \spad{m},{} if \spad{m} has an \spad{i}th row and a \spad{j}th column,{} and returns \spad{r} otherwise
320080`\spad{elt(op,{} x,{} y,{} z)} or \spad{op}(\spad{x},{} \spad{y},{} \spad{z}) applies the ternary operator \spad{op} to \spad{x},{} \spad{y} and \spad{z}.
320263`\spad{elt(t,{} i,{} j,{} k,{} l)} gives a component of a rank 4 tensor.
320350`\spad{elt(op,{} x,{} y,{} z,{} t)} or \spad{op}(\spad{x},{} \spad{y},{} \spad{z},{} \spad{t}) applies the 4-ary operator \spad{op} to \spad{x},{} \spad{y},{} \spad{z} and \spad{t}.
320540`\spad{elt(op,{} x,{} y,{} z,{} t,{} s)} applies the 5-ary operator \spad{op} to \spad{x},{} \spad{y},{} \spad{z},{} \spad{t} and \spad{s}
320737`\spad{elt(op,{} x,{} y,{} z,{} t,{} s,{} r)} applies the 6-ary operator \spad{op} to \spad{x},{} \spad{y},{} \spad{z},{} \spad{t},{} \spad{s} and \spad{r}
320941`\spad{elt(op,{} x,{} y,{} z,{} t,{} s,{} r,{} q)} applies the 7-ary operator \spad{op} to \spad{x},{} \spad{y},{} \spad{z},{} \spad{t},{} \spad{s},{} \spad{r} and \spad{q}
321152`\spad{elt(op,{} x,{} y,{} z,{} t,{} s,{} r,{} q,{} p)} applies the 8-ary operator \spad{op} to \spad{x},{} \spad{y},{} \spad{z},{} \spad{t},{} \spad{s},{} \spad{r},{} \spad{q} and \spad{p}
321230`\spad{eltable? r} returns whether the operator determines (most likely) the sequence completely.
321290`\spad{empty()} creates an empty form.
321328`\spad{empty()} returns the empty quasi-algebraic set
321392`\spad{empty()} returns the same as \spad{[empty()\$V,{} empty()\$C,{} false]\$\%}
321438`\spad{empty()} returns a new,{} empty symbol table
321477`\spad{empty()} creates a new,{} empty symbol table.
321519`\spad{empty()}\$\spad{D} creates an aggregate of type \spad{D} with 0 elements. Note: The {\em \$D} can be dropped if understood by context,{} \spadignore{e.g.} \spad{u: D := empty()}.
321556`\spad{empty?(s)} returns \spad{true} if the quasialgebraic set \spad{s} has no points,{} and \spad{false} otherwise.
321628`\spad{empty?(n)} returns \spad{true} iff the node \spad{n} is \spad{empty()\$\%}.
321682`\spad{empty?(el)} returns \spad{true} is this element does not contain anything
321728`\spad{empty(n)} produces reconstructor with \spad{n} slots
321832`\spad{empty?(u)} tests if \spad{u} has 0 elements.
321877`\spad{empty(n,{} p)} initializes reconstructor with \spad{n} slots working modulo \spad{p}
321946`\spad{endOfFile?(f)} tests whether the file \spad{f} is positioned after the end of all text. If the file is open for output,{} then this test is always \spad{true}.
321994`\spad{endSubProgram()} asserts that we are no longer processing the current subprogram.
322048`\spad{enqueue!(x,{} q)} inserts \spad{x} into the queue \spad{q} at the back end.
322099`\spad{enterInCache(x,{} f)} enters \spad{x} in the cache,{} calling \spad{f(y)} to determine whether \spad{x} is equal to \spad{y}. It returns \spad{x} with an integer associated with it.
322161`\spad{enterInCache(x,{} f)} enters \spad{x} in the cache,{} calling \spad{f(x,{} y)} to determine whether \spad{x < y (f(x,{} y) < 0),{} x = y (f(x,{} y) = 0)},{} or \spad{x > y (f(x,{} y) > 0)}. It returns \spad{x} with an integer associated with it.
322225`\spad{enterPointData(s,{} [p0,{} p1,{} ...,{} pn])} adds a list of points from \spad{p0} through \spad{pn} to the \spadtype{ThreeSpace},{} \spad{s},{} and returns the index,{} to the starting point of the list.
322316`\spad{entries(lp)} returns list of indexes that make this loop
322560`\spad{entries(u)} returns a list of all the entries of aggregate \spad{u} in no assumed order.
322698`\spad{entry?(x,{} u)} tests if \spad{x} equals \spad{u . i} for some index \spad{i}.
322862`\spad{enumerate()} returns a vector of all the sets of \spad{M} integers in \spad{1..n}.
322929`\spad{enumerate()} returns list of elements of the set.
322973`\spad{epilogue(t)} extracts the epilogue section of a formatted object \spad{t}.
323035`\spad{epilogue(t)} extracts the epilogue section of a TeX form \spad{t}.
323087`unit pseudoscalar
323190`\spad{EQ(x,{} y)} returns the \spadtype{Switch} expression representing \spad{x = y}.
323398`\spad{eq?(u,{} v)} tests if \spad{u} and \spad{v} are same objects.
323443`\spad{eq(s,{} t)} is \spad{true} if EQ(\spad{s},{} \spad{t}) is \spad{true} in Lisp.
323514`\spad{eqRep?(x,{} y)} compares the representations of \spad{x} and \spad{y} without any evaluation. Thus it is much weaker than \spad{=} and cannot decide equality of the evaluated expressions.
323574`\spad{equality(op,{} foo?)} attaches foo? as the "\%equal?" property to \spad{op}. If \spad{op1} and \spad{op2} have the same name,{} and one of them has an "\%equal?" property \spad{f},{} then \spad{f(op1,{} op2)} is called to decide whether \spad{op1} and \spad{op2} should be considered equal.
323637`\spad{equation(a,{} b)} creates an equation.
323682`\spad{equation(v,{} a..b)} creates a segment binding value with variable \spad{v} and segment \spad{a..b}. Note that the interpreter parses \spad{v=a..b} to this form.
323747`\spad{equation(s,{}"a")} creates a new equation.
323804`\spad{erf(f)} denotes the error function
323854`\spad{erf(x)} returns the error function of \spad{x},{} \spadignore{i.e.} \spad{2 / sqrt(\%\spad{pi})} times the integral of \spad{exp(-x^2) dx}.
323909`\spad{erf(f)} denotes the error function
324054`\spad{erf(f)} denotes the error function
324112`erf(\spad{f}) denotes \spad{-\%i*erf(\%i*z)}
324163`\spad{erfi(x)} denotes \spad{-\%i*erf(\%i*x)}
324219`\spad{erfi(f)} denotes \spad{-\%i*erf(\%i*f)}
324366`\spad{erfi(f)} denotes \spad{-\%i*erf(\%i*f)}
324425`\spad{error(lmsg)} displays error message \spad{lmsg} and terminates.
324481`\spad{error(msg)} displays error message \spad{msg} and terminates.
324531`\spad{error(nam,{} lmsg)} displays error messages lmsg preceded by a message containing the name \spad{nam} of the function in which the error is contained.
324594`\spad{error(nam,{} msg)} displays error message \spad{msg} preceded by a message containing the name \spad{nam} of the function in which the error is contained.
324651`\spad{errorInfo(u)} returns information about the error \spad{u}.
324708`\spad{errorKind(u)} returns the type of error which \spad{u} represents.
324770`\spad{escape()} provides the escape character,{} \spad{_},{} which is used to allow quotes and other characters {\em within} strings.
324808`\spad{euclideanGroebner(lp)} computes a groebner basis for a polynomial ideal over a euclidean domain generated by the list of polynomials \spad{lp}.
324918`\spad{euclideanGroebner(lp,{} infoflag)} computes a groebner basis for a polynomial ideal over a euclidean domain generated by the list of polynomials \spad{lp}. During computation,{} additional information is printed out if infoflag is given as either "info" (for summary information) or "redcrit" (for reduced critical pairs)
325035`\spad{euclideanGroebner(lp,{} "info",{} "redcrit")} computes a groebner basis for a polynomial ideal generated by the list of polynomials \spad{lp}. If the second argument is \spad{"info"},{} a summary is given of the critical pairs. If the third argument is "redcrit",{} critical pairs are printed.
325159`\spad{euclideanNormalForm(poly,{} gb)} reduces the polynomial \spad{poly} modulo the precomputed groebner basis \spad{gb} giving a canonical representative of the residue class.
325549`\spad{euclideanSize(x)} returns the euclidean size of the element \spad{x}. Error: if \spad{x} is zero.
325618`\spad{euler(n)} returns the \spad{n}th Euler polynomial \spad{E[n](x)}. Note: Euler polynomials denoted \spad{E(n,{} x)} are computed by solving the differential equation \spad{differentiate(E(n,{} x),{} x) = n E(n-1,{} x)} where \spad{E(0,{} x) = 1} and initial condition comes from \spad{E(n) = 2^n E(n,{} 1/2)}.
325727`\spad{euler(n)} returns the \spad{n}th Euler number. This is \spad{2^n E(n,{} 1/2)},{} where \spad{E(n,{} x)} is the \spad{n}th Euler polynomial.
325795`\spad{eulerE(n,{} r)} returns value of the \spad{n}th Euler polynomial at \spad{r}.
325913`\spad{eulerPhi(n)} returns the number of integers between 1 and \spad{n} (including 1) which are relatively prime to \spad{n}. This is the Euler phi function \spad{\phi(n)} is also called the totient function.
325984`\spad{eval1(exp)} explicitly evaluates the next term in \spad{exp}. \spad{exp} is destructively altered.
326035`\spad{eval1(p,{} v,{} r,{} pss)} evaluates \spad{p} with respect to single variable \spad{v} at \spad{r}. \spad{pss} is global state.
326191`\spad{eval1(pol,{} v,{} pt,{} pss)} evaluates \spad{pol} in variable \spad{v} at \spad{pt},{} using global state form \spad{pss}. Computations are done modulo a prime contained in \spad{pss}.
326378`\spad{eval1(pq,{} v,{} pt,{} pss)} evaluates fraction of polynomial \spad{pq} in variable \spad{v} at \spad{pt},{} using global state form \spad{pss}. Computations are done modulo a prime contained in \spad{pss}.
326661`\spad{eval1a(p,{} r,{} pss)} evaluates \spad{p} at \spad{r}. \spad{p} must be polynomial in single variable. \spad{pss} is global state.
326816`\spad{eval1a(pol,{} pt,{} pss)} evaluates polynomial \spad{pol} at point \spad{pt} using global state form \spad{pss}. Computations are done modulo a prime contained in \spad{pss}. Note: \spad{pol} must have at most one variable.
326985`\spad{eval(exp)} explicitly evaluates all terms in \spad{exp}. \spad{exp} is destructively altered.
327076`\spad{eval(f)} unquotes all the quoted operators in \spad{f}.
327152`\spad{eval s} is the sum of the coefficients of a cycle index.
327247`\spad{eval(v,{} f)} applies the vector field \spad{v} to the function \spad{f}.
327297`\spad{eval(m,{} x)} returns \spad{(a*x + b)/(c*x + d)} where \spad{m = moebius(a,{} b,{} c,{} d)} (see \spadfunFrom{moebius}{MoebiusTransform}).
327346`\spad{eval(om,{} v)} applies the differential \spad{om} to the vector field \spad{v}.
327416`\spad{eval(m,{} x)} returns \spad{(a*x + b)/(c*x + d)} where \spad{m = moebius(a,{} b,{} c,{} d)} (see \spadfunFrom{moebius}{MoebiusTransform}).
327789`\spad{eval(f,{} s)} evaluates the cycle index \spad{s} by applying \indented{1}{the function \spad{f} to each integer in a monomial partition,{}} \indented{1}{forms their product and sums the results over all monomials.}
328722`\spad{eval(a,{} r)} returns a stream of partial sums of the power series \spad{a} evaluated at the power series variable equal to \spad{r}.
328798`\spad{eval(eqn,{} x=f)} replaces \spad{x} by \spad{f} in equation \spad{eqn}.
328883`\spad{eval(f,{} a)} evaluates a power series at a value in the ground ring by returning a stream of partial sums.
329007`\spad{eval(f,{} x = v)} replaces \spad{x} by \spad{v} in \spad{f}.
329059`\spad{eval(eqn,{} [x1=v1,{} ... xn=vn])} replaces \spad{xi} by \spad{vi} in equation \spad{eqn}.
329150`\spad{eval(f,{} [x1 = v1,{} ...,{} xn = vn])} replaces \spad{xi} by \spad{vi} in \spad{f}.
329208`\spad{eval(f,{} [foo1,{} ...,{} foon])} unquotes all the \spad{fooi}\spad{'s} in \spad{f}.
329297`\spad{eval(p,{} el)} returns the image of {\em el} under the permutation \spad{p}.
329349`\spad{eval(f,{} foo)} unquotes all the foo\spad{'s} in \spad{f}.
329432`\spad{eval(d,{} p)} evaluates the distribution \spad{d} as a linear functional on the polynomial \spad{p}. Same as \spad{integrate(p,{} d)}.
329515`\spad{eval(f,{} v = g)} returns \spad{f} with \spad{v} replaced by \spad{g}. Error: if \spad{v} is not a symbol.
329639`\spad{eval(f,{} [v1 = g1,{} ...,{} vn = gn])} returns \spad{f} with each \spad{vi} replaced by \spad{gi} in parallel,{} \spadignore{i.e.} \spad{vi}\spad{'s} appearing inside the \spad{gi}\spad{'s} are not replaced. Error: if any \spad{vi} is not a symbol.
329769`\spad{eval(x,{} f)} evaluates the bivariate function \spad{f} linearly on the tensor product.
333531`\spad{eval(p(x,{} y),{} f(x),{} g(x))} returns \spad{p(f(x),{} y * g(x))}.
333617`\spad{eval(f,{} x,{} v)} replaces \spad{x} by \spad{v} in \spad{f}.
333668`\spad{eval(x,{} s,{} f)} replaces every \spad{s(a)} in \spad{x} by \spad{f(a)} for any \spad{a}.
333735`\spad{eval(x,{} s,{} f)} replaces every \spad{s(a1,{} ..,{} am)} in \spad{x} by \spad{f(a1,{} ..,{} am)} for any \spad{a1},{} ...,{} \spad{am}.
333808`\spad{eval(f,{} [x1,{} ...,{} xn],{} [v1,{} ...,{} vn])} replaces \spad{xi} by \spad{vi} in \spad{f}.
333871`\spad{eval(x,{} [s1,{} ...,{} sm],{} [f1,{} ...,{} fm])} replaces every \spad{\spad{si}(a)} in \spad{x} by \spad{\spad{fi}(a)} for any \spad{a}.
333950`\spad{eval(x,{} [s1,{} ...,{} sm],{} [f1,{} ...,{} fm])} replaces every \spad{\spad{si}(a1,{} ...,{} an)} in \spad{x} by \spad{\spad{fi}(a1,{} ...,{} an)} for any \spad{a1},{} ...,{} \spad{an}.
334035`\spad{eval(x,{} [s1,{} ...,{} sm],{} [f1,{} ...,{} fm])} replaces every \spad{\spad{si}(a)} in \spad{x} by \spad{\spad{fi}(a)} for any \spad{a}.
334107`\spad{eval(x,{} [s1,{} ...,{} sm],{} [f1,{} ...,{} fm])} replaces every \spad{\spad{si}(a1,{} ...,{} an)} in \spad{x} by \spad{\spad{fi}(a1,{} ...,{} an)} for any \spad{a1},{} ...,{} \spad{an}.
334185`\spad{eval(p,{} [x1,{} ...,{} xn],{} [v1,{} ...,{} vn])} replaces \spad{\spad{xi}} by \spad{\spad{vi}} in \spad{p}.
334260`\spad{eval(x,{} s,{} f)} replaces every \spad{s(a)} in \spad{x} by \spad{f(a)} for any \spad{a}.
334320`\spad{eval(x,{} s,{} f)} replaces every \spad{s(a1,{} ..,{} am)} in \spad{x} by \spad{f(a1,{} ..,{} am)} for any \spad{a1},{} ...,{} \spad{am}.
334386`\spad{eval(p,{} x,{} v)} replaces \spad{x} by \spad{v} in \spad{p}.
334449`\spad{eval(f,{} [v1,{} ...,{} vn],{} [g1,{} ...,{} gn])} returns \spad{f} with each \spad{vi} replaced by \spad{gi} in parallel,{} \spadignore{i.e.} \spad{vi}\spad{'s} appearing inside the \spad{gi}\spad{'s} are not replaced.
334582`\spad{eval(f,{} v,{} g)} returns \spad{f} with \spad{v} replaced by \spad{g}.
335187`\spad{eval(x,{} s,{} f,{} y)} replaces every \spad{s(a)} in \spad{x} by \spad{f(y)} with \spad{y} replaced by \spad{a} for any \spad{a}.
335287`\spad{eval(x,{} [s1,{} ...,{} sm],{} [f1,{} ...,{} fm],{} y)} replaces every \spad{\spad{si}(a)} in \spad{x} by \spad{\spad{fi}(y)} with \spad{y} replaced by \spad{a} for any \spad{a}.
335399`\spad{eval(x,{} [s1,{} ...,{} sm],{} [n1,{} ...,{} nm],{} [f1,{} ...,{} fm])} replaces every \spad{\spad{si}(a)^ni} in \spad{x} by \spad{\spad{fi}(a)} for any \spad{a}.
335508`\spad{eval(x,{} [s1,{} ...,{} sm],{} [n1,{} ...,{} nm],{} [f1,{} ...,{} fm])} replaces every \spad{\spad{si}(a1,{} ...,{} an)^ni} in \spad{x} by \spad{\spad{fi}(a1,{} ...,{} an)} for any \spad{a1},{} ...,{} am.
335623`\spad{eval(x,{} s,{} n,{} f)} replaces every \spad{s(a)^n} in \spad{x} by \spad{f(a)} for any \spad{a}.
335714`\spad{eval(x,{} s,{} n,{} f)} replaces every \spad{s(a1,{} ...,{} am)^n} in \spad{x} by \spad{f(a1,{} ...,{} am)} for any \spad{a1},{} ...,{} am.
335811`\spad{eval_at(v,{} deg,{} pt,{} p)} treats \spad{v} as coefficients of polynomial of degree \spad{deg} and evaluates the polynomial at point \spad{pt} modulo \spad{p}
335908`\spad{evaluate(op)} returns the value of the "\%eval" property of \spad{op} if it has one,{} and "failed" otherwise.
336050`\spad{evaluate(f,{} u +-> g u)} attaches the map \spad{g} to \spad{f}. \spad{f} must be a basic operator \spad{g} MUST be additive,{} \spadignore{i.e.} \spad{g(a + b) = g(a) + g(b)} for any \spad{a},{} \spad{b} in \spad{M}. This implies that \spad{g(n a) = n g(a)} for any \spad{a} in \spad{M} and integer \spad{n > 0}.
336109`\spad{evaluate(op,{} foo)} attaches foo as the "\%eval" property of \spad{op}. If \spad{op} has an "\%eval" property \spad{f},{} then applying \spad{op} to a returns the result of \spad{f(a)}. Argument \spad{op} must be unary.
336197`\spad{evaluate(op,{} foo)} attaches foo as the "\%eval" property of \spad{op}. If \spad{op} has an "\%eval" property \spad{f},{} then applying \spad{op} to \spad{(a1,{} ...,{} an)} returns the result of \spad{f(a1,{} ...,{} an)}.
336291`\spad{evaluate(op,{} [a1,{}...,{}an])} checks if \spad{op} has an "\%eval" property \spad{f}. If it has,{} then \spad{f(a1,{} ...,{} an)} is returned,{} and "failed" otherwise.
336437`\spad{evaluateInverse(x,{} f)} \undocumented
336603`\spad{even? x} is \spad{true} if \spad{x} is an even integer.
336683`\spad{even?(n)} returns \spad{true} if and only if \spad{n} is even.
336737`\spad{even?(p)} returns \spad{true} if and only if \spad{p} is an even permutation,{} \spadignore{i.e.} {\em sign(p)} is 1.
336786`\spad{evenInfiniteProduct(f(x))} computes \spad{product(n=2,{} 4,{} 6...,{} f(x^n))}. The series \spad{f(x)} should have constant coefficient 1.
336928`\spad{evenlambert(f(x))} returns \spad{f(x^2) + f(x^4) + f(x^6) + ...}. \indented{1}{\spad{f(x)} should have a zero constant coefficient.} \indented{1}{This function is used for computing infinite products.} \indented{1}{If \spad{f(x)} is a Taylor series with constant term 1,{} then} \indented{1}{\spad{product(n=1..infinity,{} f(x^(2*n))) = exp(evenlambert(log(f(x))))}.}
337000`\spad{evenlambert(st)} computes \spad{f(x^2) + f(x^4) + f(x^6) + ...} if \spad{st} is a stream representing \spad{f(x)}. This function is used for computing infinite products. If \spad{f(x)} is a power series with constant coefficient 1,{} then \spad{prod(f(x^(2*n)),{} n=1..infinity) = exp(evenlambert(log(f(x))))}.
337551`\spad{every?(f,{} u)} tests if \spad{p}(\spad{x}) is \spad{true} for all elements \spad{x} of \spad{u}. Note: for collections,{} \spad{every?(p,{} u) = reduce(and,{} map(f,{} u),{} true,{} false)}. However,{} \spad{every?(p,{} u)} returns as soon as it finds an element for which \spad{p} gives \spad{false}.
337928`\spad{exactQuotient(a,{} b)} computes the exact quotient of \spad{a} by \spad{b},{} which is assumed to be a divisor of \spad{a}. No error is returned if this exact quotient fails!
338024`\spad{exactQuotient!(a,{} b)} replaces \spad{a} by \spad{exactQuotient(a,{} b)}
338121`\spad{exactQuotient(p,{} r)} computes the exact quotient of \spad{p} by \spad{r},{} which is assumed to be a divisor of \spad{p}. No error is returned if this exact quotient fails!
338216`\spad{exactQuotient!(p,{} r)} replaces \spad{p} by \spad{exactQuotient(p,{} r)}.
338312`\spad{exists?(f)} tests if the file exists in the file system.
338365`\spad{exp0(f)} returns the exponential of the power series represented by cons(0,{} \spad{f}),{} \spadignore{i.e.} assuming zero constant term and therefore transcendentality is not involved.
338453`\spad{exp1()} returns the natural log base \spad{2.718281828...}.
338491`\spad{exp1()} returns exp 1: \spad{2.7182818284...}.
338523`\spad{exp(x)} represents the Fortran intrinsic function EXP
338603`\spad{exp(x)} applies the exponential operator to \spad{x}
338652`\spad{exp(p)} returns the exponential of \spad{p}.
338732`\spad{exp([i1,{} ...in])} returns \spad{u_1\^{i_1} ... u_n\^{i_n}}
338984`\spad{exp(st)} computes the exponential of a power series \spad{st}.
339067`\spad{exp(st)} computes the exponential of a power series \spad{st}.
339164`\spad{exp(z)} returns the exponential of Laurent series \spad{z}.
339250`\spad{exp(z)} returns the exponential of a Puiseux series \spad{z}.
339345`\spad{exp(x)} returns \%\spad{e} to the power \spad{x}.
339399`\spad{exp(p,{} n)} returns the exponential of \spad{p} (truncated up to order \spad{n}).
339502`\spad{exp(p,{} n)} returns the exponential of \spad{p} truncated at order \spad{n}.
339590`\spad{expa(x)} returns the exponent of the rotation a in the normal form of \spad{x}
339720`\spad{expand(p)} returns \spad{p} in distributed form.
339811`\spad{expand(l..h by k)} creates value of type \spad{L} with elements \spad{l,{} l+k,{} ... lN} where \spad{lN <= h < lN+k}. For example,{} \spad{expand(1..5 by 2) = [1,{} 3,{} 5]}.
339870`\spad{expand(f)} multiplies the unit and factors together,{} yielding an "unfactored" object. Note: this is purposely not called \spadfun{coerce} which would cause the interpreter to do this automatically.
339911`\spad{expand(f)} performs the following expansions on \spad{f:} \begin{items} \item 1. logs of products are expanded into sums of logs,{} \item 2. trigonometric and hyperbolic trigonometric functions of sums are expanded into sums of products of trigonometric and hyperbolic trigonometric functions. \item 3. formal powers of the form \spad{(a/b)^c} are expanded into \spad{a^c * b^(-c)}. \end{items}
339972`\spad{expand(i)} returns the list of possible real functions corresponding to \spad{i}.
340058`\spad{expand(i)} returns the list of possible real functions corresponding to \spad{i}.
340178`\spad{expand(l)} creates a new value of type \spad{L} in which each segment \spad{l..h by k} is replaced with \spad{l,{} l+k,{} ... lN},{} where \spad{lN <= h < lN+k}. For example,{} \spad{expand [1..4,{} 7..9] = [1,{} 2,{} 3,{} 4,{} 7,{} 8,{} 9]}.
340243`\spad{expand(f,{} n)} returns list of all solutions \spad{y} to equation \spad{y^n} = \spad{f}
340349`\spad{expandLog(f)} converts every \spad{log(a/b)} appearing in \spad{f} into \spad{log(a) - log(b)},{} and every \spad{log(a*b)} into \spad{log(a) + log(b)}..
340413`\spad{expandPower(f)} converts every power \spad{(a/b)^c} appearing in \spad{f} into \spad{a^c * b^(-c)}.
340479`\spad{expandTrigProducts(e)} replaces \spad{sin(x)*sin(y)} by \spad{(cos(x-y)-cos(x+y))/2},{} \spad{cos(x)*cos(y)} by \spad{(cos(x-y)+cos(x+y))/2},{} and \spad{sin(x)*cos(y)} by \spad{(sin(x-y)+sin(x+y))/2}. Note that this operation uses the pattern matcher and so is relatively expensive. To avoid getting int
340479`--o an infinite loop the transformations are applied at most ten times.
340676`\spad{expa(x)} returns the exponent of the reflection \spad{b} in the normal form of \spad{x}
340736`\spad{expextint(',{} rde,{} csolve,{} [g1,{} ...,{} gn])} returns a basis of solution of the homogeneous system \spad{h' + c1*g1 + ... + cn*gn = 0} Argument foo is an parametric \spad{rde} solver on \spad{F}. \spad{csolve} is solver over constants.
340974`\spad{expIfCan(z)} returns exp(\spad{z}) if possible,{} and "failed" otherwise.
341054`\spad{expint(f,{} x)} returns e^{the integral of \spad{f} with respect to \spad{x}}.
341109`\spad{expintegrate(f,{} ',{} foo)} returns \spad{[g,{} a]} such that \spad{f = g' + a},{} and \spad{a = 0} or \spad{a} has no integral in \spad{F}; Argument foo is a Risch differential equation solver on \spad{F}
341109`--.
341404`\spad{explicitEntries?(s)} returns \spad{true} if the stream \spad{s} has explicitly computed entries,{} and \spad{false} otherwise.
341472`\spad{explicitlyEmpty?(s)} returns \spad{true} if the stream is an (explicitly) empty stream. Note: this is a null test which will not cause lazy evaluation.
341668`\spad{explicitlyFinite?(s)} tests if the stream has a finite number of elements,{} and \spad{false} otherwise. Note: for many datatypes,{} \spad{explicitlyFinite?(s) = not possiblyInfinite?(s)}.
341733`\spad{explogs2trigs(f)} rewrites all the complex logs and exponentials appearing in \spad{f} in terms of trigonometric functions.
341818`\spad{exp_lower_bound(a,{} b,{} ob,{} nc0,{} lk,{} eta,{} logi)} computes lower degree bound for solution of \spad{a*D(y) + b*y = c} in exponential case. \spad{ob} is order of \spad{b},{} \spad{nc0} is lower bound on order of \spad{c},{} \
341818`--spad{eta} is derivative of the argument of exponential.
342086`\spad{exponent(x)} \undocumented
342141`\spad{exponent(g^k)} returns the representative integer \$\spad{k}\$.
342195`\spad{exponent(g^k)} returns the representative integer \$\spad{k}\$.
342255`\spad{exponent(u)} returns the exponent of \spad{u}
342305`\spad{exponent(exp(f(x)))} returns \spad{f(x)}
342419`\spad{exponent(x)} returns the \spadfunFrom{exponent}{FloatingPointSystem} part of \spad{x}.
342476`\spad{exponent(u)} returns the exponent of the first factor of \spadvar{\spad{u}},{} or 0 if the factored form consists solely of a unit.
342525`\spad{exponenta(x)} returns the exponent of the rotation a in the normal form of \spad{x} as integer
342584`\spad{exponentb(x)} returns the exponent of the reflection \spad{b} in the normal form of \spad{x} as integer
342643`\spad{exponential1()} \undocumented
342705`\spad{exponential(f)} \undocumented
342775`\spad{exponential(f(x))} returns \spad{exp(f(x))}. Note: the function does NOT check that \spad{f(x)} has no non-negative terms.
342892`\spad{exponentialOrder(exp(c * x ^(-n) + ...))} returns \spad{-n}. exponentialOrder(0) returns \spad{0}.
342996`\spad{exponents(x)} converts a domain element into a list of zeros and ones corresponding to the exponents in the basis element that \spad{x} represents.
343052`\spad{expPot(v,{} e,{} d)} returns the sum from \spad{i = 0} to \spad{e - 1} of \spad{v^(q^i*d)},{} interpreting \spad{v} as an element of a normal basis field and where \spad{q} is the size of the ground field. Note: for a description of the algorithm,{} see \spad{T}.Itoh and \spad{S}.Tsujii,{} "A fast algorithm for computing multiplicative inverses in \spad{GF}(2^m) using normal bases",{} Info
343052`--rmation and Computation 78,{} \spad{pp}.171-177,{} 1988.
343246`\spad{expressIdealMember([f1,{} ...,{} fn],{} h)} returns a representation of \spad{h} as a linear combination of the \spad{fi} or "failed" if \spad{h} is not in the ideal generated by the \spad{fi}.
343340`\spad{expression2Fortran1(nf,{} of,{} int_to_floats?)}
343437`\spad{expression2Fortran(of)}
343514`\spad{exprex(o)} coverts \spadtype{OutputForm} to \spadtype{String}
343567`\spad{exprex(o)} converts \spadtype{OutputForm} to \spadtype{String} with the structure preserved with braces. Actually this is not quite accurate. The function \spadfun{precondition} is first applied to the \spadtype{OutputForm} expression before \spadfun{exprex}. The raw \spadtype{OutputForm} and the nature of the \spadfun{precondition} function is still obscure to me at the time of this writing (2007-02-14).
343780`\spad{exprToGenUPS(fcn,{} posCheck?,{} atanFlag)} converts the expression \spad{fcn} to a generalized power series. If \spad{posCheck?} is \spad{true},{} log\spad{'s} of negative numbers are not allowed nor are \spad{n}th roots of negative n
343780`--umbers with \spad{n} even. If \spad{posCheck?} is \spad{false},{} these are allowed. \spad{atanFlag} determines how the case \spad{atan(f(x))},{} where \spad{f(x)} has a pole,{} will be treated. The possible values of \spad{atanFlag} are \spad{"complex"},{} \spad{"real: two sides"},{} \spad{"real: left side"},{} \spad{"real: right side"},{} and \spad{"just do it"}. If \spad{atanFlag} is \spad{"complex"},{} then no series expansion will be computed because,{} viewed as a function of a complex v
343780`--ariable,{} \spad{atan(f(x))} has an essential singularity. Otherwise,{} the sign of the leading coefficient of the series expansion of \spad{f(x)} determines the constant coefficient in the series expansion of \spad{atan(f(x))}. If this sign cannot be determined,{} a series expansion is computed only when \spad{atanFlag} is \spad{"just do it"}. When the leading term in the series expansion of \spad{f(x)} is of odd degree (or is a rational degree with odd numerator),{} then the constant coeffic
343780`--ient in the series expansion of \spad{atan(f(x))} for values to the left differs from that for values to the right. If \spad{atanFlag} is \spad{"real: two sides"},{} no series expansion will be computed. If \spad{atanFlag} is \spad{"real: left side"} the constant coefficient for values to the left will be used and if \spad{atanFlag} \spad{"real: right side"} the constant coefficient for values to the right will be used. If there is a problem in converting the function to a power series,{} we r
343780`--eturn a record containing the name of the function that caused the problem and a brief description of the problem. When expanding the expression into a series it is assumed that the series is centered at 0. For a series centered at a,{} the user should perform the substitution \spad{x -> x + a} before calling this function.
344046`\spad{exprToGenUPS(fcn,{} posCheck?,{} atanFlag)} converts the expression \spad{fcn} to a generalized power series. If \spad{posCheck?} is \spad{true},{} log\spad{'s} of negative numbers are not allowed nor are \spad{n}th roots of negative numbers with
344046`-- \spad{n} even. If \spad{posCheck?} is \spad{false},{} these are allowed. \spad{atanFlag} determines how the case \spad{atan(f(x))},{} where \spad{f(x)} has a pole,{} will be treated. The possible values of \spad{atanFlag} are \spad{"complex"},{} \spad{"real: two sides"},{} \spad{"real: left side"},{} \spad{"real: right side"},{} and \spad{"just do it"}. If \spad{atanFlag} is \spad{"complex"},{} then no series expansion will be computed because,{} viewed as a function of a complex variable,{} 
344046`--\spad{atan(f(x))} has an essential singularity. Otherwise,{} the sign of the leading coefficient of the series expansion of \spad{f(x)} determines the constant coefficient in the series expansion of \spad{atan(f(x))}. If this sign cannot be determined,{} a series expansion is computed only when \spad{atanFlag} is \spad{"just do it"}. When the leading term in the series expansion of \spad{f(x)} is of odd degree (or is a rational degree with odd numerator),{} then the constant coefficient in the
344046`-- series expansion of \spad{atan(f(x))} for values to the left differs from that for values to the right. If \spad{atanFlag} is \spad{"real: two sides"},{} no series expansion will be computed. If \spad{atanFlag} is \spad{"real: left side"} the constant coefficient for values to the left will be used and if \spad{atanFlag} \spad{"real: right side"} the constant coefficient for values to the right will be used. If there is a problem in converting the function to a power series,{} we return a rec
344046`--ord containing the name of the function that caused the problem and a brief description of the problem. When expanding the expression into a series it is assumed that the series is centered at 0. For a series centered at a,{} the user should perform the substitution \spad{x -> x + a} before calling this function.
344301`\spad{exprToPS(fcn,{} posCheck?,{} atanFlag,{} log_flag,{} log_val)} is like exprToUPS,{} but if \spad{log_flag} is \spad{true} it replaces logarithms of expansion variable by \spad{log_val}
344574`\spad{exprToPS(fcn,{} posCheck?,{} atanFlag,{} log_flag,{} log_val)} is like exprToUPS,{} but if \spad{log_flag} is \spad{true} it replaces logarithms of expansion variable by \spad{log_val}
344836`exprToPS(\spad{fcn},{} posCheck?,{} atanFlag,{} log_flag,{} log_val,{} coef_chk,{} inv_chk,{} zero_chk) is like exprToPS(\spad{fcn},{} posCheck?,{} atanFlag,{} log_flag,{} log_val),{} but fail
344836`--s if \spad{coef_chk} is \spad{false} for some coefficient of \spad{fcn} or if expansion process needs to invert element of \spad{FE} for which \spad{inv_chk} is \spad{false}
345151`exprToPS(\spad{fcn},{} posCheck?,{} atanFlag,{} log_flag,{} log_val,{} coef_chk,{} inv_chk,{} zero_chk) is like exprToPS(\spad{fcn},{} posCheck?,{} atanFlag,{} log_flag,{} log_val),{} but fails if \spad{
345151`--coef_chk} is \spad{false} for some coefficient of \spad{fcn} or if expansion process needs to invert element of \spad{FE} for which \spad{inv_chk} is \spad{false}
345455`Compute degree and leading coefficinet of series expansion
345766`\spad{exprToUPS(fcn,{} posCheck?,{} atanFlag)} converts the expression \spad{fcn} to a power series. If \spad{posCheck?} is \spad{true},{} log\spad{'s} of negative numbers are not allowed nor are \spad{n}th roots of negative numbers with \spad{
345766`--n} even. If \spad{posCheck?} is \spad{false},{} these are allowed. \spad{atanFlag} determines how the case \spad{atan(f(x))},{} where \spad{f(x)} has a pole,{} will be treated. The possible values of \spad{atanFlag} are \spad{"complex"},{} \spad{"real: two sides"},{} \spad{"real: left side"},{} \spad{"real: right side"},{} and \spad{"just do it"}. If \spad{atanFlag} is \spad{"complex"},{} then no series expansion will be computed because,{} viewed as a function of a complex variable,{} \spad{a
345766`--tan(f(x))} has an essential singularity. Otherwise,{} the sign of the leading coefficient of the series expansion of \spad{f(x)} determines the constant coefficient in the series expansion of \spad{atan(f(x))}. If this sign cannot be determined,{} a series expansion is computed only when \spad{atanFlag} is \spad{"just do it"}. When the leading term in the series expansion of \spad{f(x)} is of odd degree (or is a rational degree with odd numerator),{} then the constant coefficient in the series
345766`-- expansion of \spad{atan(f(x))} for values to the left differs from that for values to the right. If \spad{atanFlag} is \spad{"real: two sides"},{} no series expansion will be computed. If \spad{atanFlag} is \spad{"real: left side"} the constant coefficient for values to the left will be used and if \spad{atanFlag} \spad{"real: right side"} the constant coefficient for values to the right will be used. If there is a problem in converting the function to a power series,{} a record containing th
345766`--e name of the function that caused the problem and a brief description of the problem is returned. When expanding the expression into a series it is assumed that the series is centered at 0. For a series centered at a,{} the user should perform the substitution \spad{x -> x + a} before calling this function.
346029`\spad{exprToUPS(fcn,{} posCheck?,{} atanFlag)} converts the expression \spad{fcn} to a power series. If \spad{posCheck?} is \spad{true},{} log\spad{'s} of negative numbers are not allowed nor are \spad{n}th roots of negative numbers with \spad{n} even. If
346029`-- \spad{posCheck?} is \spad{false},{} these are allowed. \spad{atanFlag} determines how the case \spad{atan(f(x))},{} where \spad{f(x)} has a pole,{} will be treated. The possible values of \spad{atanFlag} are \spad{"complex"},{} \spad{"real: two sides"},{} \spad{"real: left side"},{} \spad{"real: right side"},{} and \spad{"just do it"}. If \spad{atanFlag} is \spad{"complex"},{} then no series expansion will be computed because,{} viewed as a function of a complex variable,{} \spad{atan(f(x))} 
346029`--has an essential singularity. Otherwise,{} the sign of the leading coefficient of the series expansion of \spad{f(x)} determines the constant coefficient in the series expansion of \spad{atan(f(x))}. If this sign cannot be determined,{} a series expansion is computed only when \spad{atanFlag} is \spad{"just do it"}. When the leading term in the series expansion of \spad{f(x)} is of odd degree (or is a rational degree with odd numerator),{} then the constant coefficient in the series expansion 
346029`--of \spad{atan(f(x))} for values to the left differs from that for values to the right. If \spad{atanFlag} is \spad{"real: two sides"},{} no series expansion will be computed. If \spad{atanFlag} is \spad{"real: left side"} the constant coefficient for values to the left will be used and if \spad{atanFlag} \spad{"real: right side"} the constant coefficient for values to the right will be used. If there is a problem in converting the function to a power series,{} a record containing the name of t
346029`--he function that caused the problem and a brief description of the problem is returned. When expanding the expression into a series it is assumed that the series is centered at 0. For a series centered at a,{} the user should perform the substitution \spad{x -> x + a} before calling this function.
346281`\spad{exprToXXP(fcn,{} posCheck?)} converts the expression \spad{fcn} to an exponential expansion. If \spad{posCheck?} is \spad{true},{} log\spad{'s} of negative numbers are not allowed nor are \spad{n}th roots of negative numbers with \spad{n} even. If \spad{posCheck?} is \spad{false},{} these are allowed.
346459`\spad{expt(r,{} i)} computes r^i by repeated squaring
346521`\spad{exptMod(u,{} k,{} v)} raises the polynomial \spad{u} to the \spad{k}th power modulo the polynomial \spad{v}.
346604`\spad{exptMod(f,{} n,{} g,{} p)} raises the univariate polynomial \spad{f} to the \spad{n}th power modulo the polynomial \spad{g} and the prime \spad{p}.
346686`\spad{exquo(f,{} g)} creates the equivalent infix form.
346729`\spad{exQuo(x,{} y)} \undocumented
346832`\spad{exQuo(x,{} y)} \undocumented
346925`\spad{exQuo(x,{} y)} \undocumented
347543`\spad{exquo(a,{} b)} returns the power series quotient of \spad{a} by \spad{b},{} if the quotient exists,{} and "failed" otherwise
347644`\spad{v exquo r} computes the exact quotient of \spad{v} by \spad{r}
347727`\spad{exquo(a,{} b)} either returns an element \spad{c} such that \spad{c*b=a} or "failed" if no such element can be found.
347786`\spad{exquo(a,{}b)} returns the quotient of \spad{a} and \spad{b},{} or "failed" if \spad{b} is zero or \spad{a} rem \spad{b} is zero.
347853`\spad{exquo(x,{} r)} returns the exact quotient of \spad{x} by \spad{r},{} or "failed" if \spad{r} does not divide \spad{x} exactly.
347940`\spad{exquo(p,{}r)} returns the exact quotient of polynomial \spad{p} by \spad{r},{} or "failed" if none exists.
348033`\spad{exquo(m,{} r)} computes the exact quotient of the elements of \spad{m} by \spad{r},{} returning \spad{"failed"} if this is not possible.
348127`\spad{exquo(m,{} r)} computes the exact quotient of the elements of \spad{m} by \spad{r},{} returning \spad{"failed"} if this is not possible.
348236`\spad{exquo(l,{} a)} returns the exact quotient of \spad{l} by a,{} returning \spad{"failed"} if this is not possible.
348834`\spad{extend(f,{} n)} causes all terms of \spad{f} of degree \spad{<=} \spad{n} to be computed.
348912`\spad{extend(st,{} n)} causes entries to be computed,{} if necessary,{} so that 'st' will have at least \spad{'n'} explicit entries or so that all entries of 'st' will be computed if 'st' is finite with length \spad{<=} \spad{n}.
348973`\spad{extend(x,{} n)} forces the computation of digits up to order \spad{n}.
349035`\spad{extend(x,{} n)} causes the first \spadvar{\spad{n}} entries in the continued fraction \spadvar{\spad{x}} to be computed. Normally entries are only computed as needed.
349094`\spad{extend(x,{} l,{} r)} \undocumented
349149`\spad{extend(f,{} n)} causes all terms of \spad{f} of degree \spad{<= n} to be computed.
349241`\spad{extend(ts,{} p)} returns a triangular set which encodes the simple extension by \spad{p} of the extension of the base field defined by \spad{ts},{} according to the properties of triangular sets of the current category If the required properties do not hold an error is returned.
349304`\spad{extend(lp,{} ts)} returns \spad{ts} if \spad{empty? lp} \spad{extend(p,{} ts)} if \spad{lp = [p]} else \spad{extend(first lp,{} extend(rest lp,{} ts))}
349386`\spad{extend(lp,{} lts)} returns the same as \spad{concat([extend(lp,{} ts) for ts in lts])|}
349474`\spad{extend(p,{} ts)} assumes that \spad{p} is a non-constant polynomial whose main variable is greater than any variable of \spad{ts}. Then it returns a split of Kalkbrener of \spad{ts+p}. This may not be \spad{ts+p} itself,{} if for instance \spad{ts+p} is not a regular triangular set.
349550`\spad{extend(p,{} lts)} returns the same as \spad{concat([extend(p,{} ts) for ts in lts])|}
349632`\spad{extendedCoords(pt)} returns extended coordinates as a list.
349790`\spad{extendedEuclidean(x,{} y)} returns a record rec where \spad{rec.coef1*x+rec.coef2*y = rec.generator} and rec.generator is a \spad{gcd} of \spad{x} and \spad{y}. The \spad{gcd} is unique only up to associates if \spadatt{canonicalUnitNormal} is not asserted. \spadfun{principalIdeal} provides a version of this operation which accepts an arbitrary length list of arguments.
349982`\spad{extendedEuclidean(x,{} y,{} z)} either returns a record rec where \spad{rec.coef1*x+rec.coef2*y=z} or returns "failed" if \spad{z} cannot be expressed as a linear combination of \spad{x} and \spad{y}.
350084`\spad{extended_gcd(v1,{} v2,{} p)} gives [\spad{g},{} \spad{c1},{} \spad{c2}] such that \spad{g} is \spad{gcd(v1,{} v2,{} p)},{} \spad{g = c1*v1 + c2*v2} and degree(\spad{c1}) < max(degree(\spad{v2}) - degree(\spad{g}),{} 0) and degree(\spad{c2}) < max(degree(\spad{v1}) - degree(\spad{g}),{} 1)
350188`\spad{extendedint(f,{} x,{} [g1,{} ...,{} gn])} returns solution of the system \spad{f = dh/dx + c1*g1 + ... + cn*gn} and and a basis of the associated homogeneous system \spad{dh/dx + c1*g1 + ... + cn*gn = 0}. Solutions are in the field generated by kernels of \spad{f} and \spad{g1},{} ...,{} \spad{gn}.
350378`\spad{extendedint(x,{} [k1,{} ...,{} kn],{} [g1,{} ...,{} gn])} returns a basis of the homogeneous system \spad{dh/dx + c1*g1 + ... + cn*gn = 0}. Solutions are in the field generated by \spad{k1},{} ...,{} \spad{kn}.
350506`\spad{extendedint(f,{} x,{} [k1,{} ...,{} kn],{} [g1,{} ...,{} gn])} is like extendedint(\spad{f},{} [\spad{k1},{} ...,{} \spad{kn}],{} [\spad{g1},{} ...,{} \spad{gn}]) but looks for solutions in the field generated by \spad{k1},{} ...,{} \spad{kn}.
350712`\spad{extendedResultant(a,{} b)} returns \spad{[r,{} ca,{} cb]} such that \spad{r} is the resultant of \spad{a} and \spad{b} and \spad{r = ca * a + cb * b}
350845`\spad{extendedSubResultantGcd(a,{} b)} returns \spad{[g,{} ca,{} cb]} such that \spad{g} is a \spad{gcd} of \spad{a} and \spad{b} in \spad{R^(-1) P} and \spad{g = ca * a + cb * b}
350979`\spad{extendedSubResultantGcd(a,{} b)} returns \spad{[ca,{} cb,{} r]} such that \spad{r} is \spad{subResultantGcd(a,{} b)} and we have \spad{ca * a + cb * cb = r} .
351115`\spad{extendIfCan(ts,{} p)} returns a triangular set which encodes the simple extension by \spad{p} of the extension of the base field defined by \spad{ts},{} according to the properties of triangular sets of the current domain. If the required properties do not hold then "failed" is returned. This operation encodes in some sense the properties of the triangular sets of the current category. Is is used to implement the 
351115`--\spad{construct} operation to guarantee that every triangular set build from a list of polynomials has the required properties.
351199`\spad{extendToPoint(n,{} p)} creates a boundary that is the union \indented{2}{of a boundary and a point.} \spad{n} is the boundary \spad{p} is the point
351253`\spad{extension(f)} returns the type part of the file name.
351408`\spad{extensionDegree()} returns the degree of field extension.
351494`\spad{extensionDegree()} returns the degree of the field extension if the extension is algebraic,{} and \spad{infinity} if it is not.
351582`\spad{extensionDegree()} returns the degree of field extension.
351665`\spad{exteriorDifferential(df)} returns the exterior derivative (gradient,{} curl,{} divergence,{} ...) of the differential form \spad{df}.
351744`\spad{external?(u)} returns \spad{true} if \spad{u} is declared to be EXTERNAL
351794`\spad{externalList(tab)} returns a list of all the external symbols in \spad{tab}
351932`\spad{extract!(u)} destructively removes a (random) item from bag \spad{u}.
351979`\spad{extract(A,{} i1,{} i2)} extracts the rows \spad{i1} to \spad{i2} and returns them as a new matrix.
352051`\spad{extractBottom!(d)} destructively extracts the bottom (back) element from the dequeue \spad{d}. Error: if \spad{d} is empty.
352108`\spad{extractClosed(s)} returns the \spadtype{Boolean} value of the closed property for the indicated 3 dimensional subspace \spad{s}. If the property is closed,{} \spad{True} is returned,{} otherwise \spad{False} is returned.
352164`\spad{extractIfCan(x)} searches the item whose key is \spad{x}.
352259`\spad{extractIndex(s)} returns a non negative integer which is the current index of the 3 dimensional subspace \spad{s}.
352325`\spad{extractPoint(s)} returns the point which is given by the current index location into the point data field of the 3 dimensional subspace \spad{s}.
352381`\spad{extractProperty(s)} returns the property of domain \spadtype{SubSpaceComponentProperty} of the indicated 3 dimensional subspace \spad{s}.
352457`\spad{extractSplittingLeaf(a)} returns the left most leaf (as a tree) whose status is \spad{false} if any,{} else "failed" is returned.
352536`\spad{extractSymbol(jm)} extracts the highest order part of the Jacobi matrix.
352762`\spad{extractSymbol(de,{} solved?)} computes the symbol of the differential equation \spad{de}. If \spad{solved?} is \spad{true},{} the row echelon form of the symbol is computed at once.
352860`\spad{extractTop!(d)} destructively extracts the top (front) element from the dequeue \spad{d}. Error: if \spad{d} is empty.
352914`\spad{eyeDistance(v,{} d)} sets the distance of the observer from the center of the graph to \spad{d},{} for the viewport \spad{v},{} which is of the domain \spadtype{ThreeDimensionalViewport}.
353140`\spad{F2FG(a + sqrt(-1) b)} returns \spad{a + i b}.
353207`\spad{F(n,{} m)} \undocumented
353299`\spad{factor1(a)} returns the factorisation of a,{} assuming that a has no first-order right factor.
353512`splits \spad{n} into a list of factors which must be \spad{true} for the whole to be \spad{true}. This assumes that the top level is already a set of factors seperated by \spad{/\} otherwise the result will just be a list with one entry: \spad{'n'}. This is used when converting ILogic to types by using the Curry-Howard isomorphism.
353555`\spad{factor(x)} returns the decreasing factorization into Lyndon words.
353626`\spad{factor(n)} returns the full factorization of integer \spad{n}
353695`\spad{factor(a)} returns the factorisation of a.
353907`\spad{factor(p)} factors the multivariate polynomial \spad{p} over its coefficient domain
353990`\spad{factor(p)} factors the multivariate polynomial \spad{p} with coefficients which are fractions of elements of \spad{R}.
354057`\spad{factor(p)} factors a polynomial with polynomial coefficients.
354134`\spad{factor(p)} factors an extended polynomial \spad{p} over the rational numbers.
354486`\spad{factor(p)} tries to factor \spad{p} into linear factors with error atmost {\em globalEps},{} the internal error bound,{} which can be set by {\em setErrorBound}. An overall error bound {\em eps0} is determined and iterated tree-like calls to {\em pleskenSplit} are used to get the factorization.
354558`\spad{factor(p)} returns the factorization of \spad{p} over the integers.
354624`\spad{factor(x)} returns the factorization of \spad{x} into irreducibles.
354690`\spad{factor(\spad{zi})} produces the complete factorization of the complex integer \spad{zi}.
354787`\spad{factor(p)} produces the complete factorization of the polynomial \spad{p}.
354857`\spad{factor(p)} factors the multivariate polynomial \spad{p} over its coefficient domain
354927`\spad{factor(p)} produces the complete factorization of the multivariate polynomial \spad{p} over a finite field.
354998`\spad{factor(prf)} factors a polynomial with rational function coefficients.
355087`\spad{factor(p)} factors the multivariate polynomial \spad{p} over its coefficient domain where \spad{p} is represented as a univariate polynomial with multivariate coefficients
355213`\spad{factor(p)} produces the complete factorization of the multivariate polynomial \spad{p} over a finite field. \spad{p} is represented as a univariate polynomial with multivariate coefficients over a finite field.
355340`\spad{factor(p)} returns a prime factorisation of \spad{p} over the field generated by its coefficients.
355394`\spad{factor(p)} returns a prime factorisation of \spad{p}.
355461`\spad{factor(p,{} f)} returns a prime factorisation of \spad{p}; \spad{f} is a factorisation map for elements of UP.
355559`\spad{factor(a,{} zeros)} returns the factorisation of a. \spad{zeros} is a zero finder in \spad{UP}.
355754`\spad{factor(p,{} ufact)} factors the multivariate polynomial \spad{p} by specializing variables and calling the univariate factorizer ufact.
355889`\spad{factor(p. [k1,{} ...,{} kn])} factors \spad{p} into irreducible factors over field generated by its coefficients and \spad{k1},{} ...,{} \spad{kn}.
356023`\spad{factor(p,{} ufact)} factors the multivariate polynomial \spad{p} by specializing variables and calling the univariate factorizer ufact. \spad{p} is represented as a univariate polynomial with multivariate coefficients.
356214`\spad{factor(p,{} listOfDegrees)} factorizes the polynomial \spad{p} using the single factor bound algorithm and knowing that \spad{p} has for possible splitting of its degree listOfDegrees.
356305`\spad{factor(p,{} r)} factorizes the polynomial \spad{p} using the single factor bound algorithm and knowing that \spad{p} has at least \spad{r} factors.
356390`\spad{factor(p,{} eps)} tries to factor \spad{p} into linear factors with error atmost {\em eps}. An overall error bound {\em eps0} is determined and iterated tree-like calls to {\em pleskenSplit} are used to get the factorization.
356464`\spad{factor(p,{} lan)} factors the polynomial \spad{p} over the extension generated by the algebraic numbers given by the list lan.
356550`\spad{factor(p,{} lan)} factors the polynomial \spad{p} over the extension generated by the algebraic numbers given by the list lan. \spad{p} is presented as a univariate polynomial with multivariate coefficients.
356692`\spad{factor(f1,{} p)} returns the list of factors of the univariate polynomial \spad{f1} modulo the integer prime \spad{p}. Error: if \spad{f1} is not square-free modulo \spad{p}.
356769`\spad{factor(p,{} [a1,{} ...,{} an])} returns a prime factorisation of \spad{p} over the field generated by its coefficients and \spad{a1},{} ...,{} an.
356845`to be documented later.
357277`\spad{factor(p,{} listOfDegrees,{} r)} factorizes the polynomial \spad{p} using the single factor bound algorithm,{} knowing that \spad{p} has for possible splitting of its degree \spad{listOfDegrees} and that \spad{p} has at least \spad{r} factors.
357387`\spad{factor(p,{} d,{} r)} factorizes the polynomial \spad{p} using the single factor bound algorithm,{} knowing that \spad{d} divides the degree of all factors of \spad{p} and that \spad{p} has at least \spad{r} factors.
357491`\spad{factor(p,{} eps,{} info)} tries to factor \spad{p} into linear factors with error atmost {\em eps}. An overall error bound {\em eps0} is determined and iterated tree-like calls to {\em pleskenSplit} are used to get the factorization. If {\em info} is {\em true},{} then information messages are given.
357573`\spad{factorAndSplit(eq)} make the right hand side 0 and factors the new left hand side. Each factor is equated to 0 and put into the resulting list without repetitions.
357650`\spad{factorByRecursion(p)} factors polynomial \spad{p}. This function performs the recursion step for factorPolynomial,{} as defined in \spadfun{PolynomialFactorizationExplicit} category (see \spadfun{factorPolynomial})
357804`\spad{factorFraction(r)} factors the numerator and the denominator of the polynomial fraction \spad{r}.
357924`\spad{factorGroebnerBasis(basis)} checks whether the \spad{basis} contains reducible polynomials and uses these to split the \spad{basis}.
358041`\spad{factorGroebnerBasis(basis,{} info)} checks whether the \spad{basis} contains reducible polynomials and uses these to split the \spad{basis}. If argument {\em info} is \spad{true},{} information is printed about partial results.
358166`\spad{factorial(n)} returns the factorial of \spad{n},{} \spadignore{i.e.} \spad{n!}.
358274`\spad{factorial(n)} computes the factorial of \spad{n} (denoted in the literature by \spad{n!}) Note: \spad{n! = n (n-1)! when n > 0}; also,{} \spad{0! = 1}.
358337`\spad{factorial(n)} returns \spad{n!}. this is the product of all integers between 1 and \spad{n} (inclusive). Note: \spad{0!} is defined to be 1.
358400`\spad{factorials(f)} rewrites the permutations and binomials in \spad{f} in terms of factorials.
358459`\spad{factorials(f)} rewrites the permutations and binomials in \spad{f} in terms of factorials.
358518`\spad{factorials(f,{} x)} rewrites the permutations and binomials in \spad{f} involving \spad{x} in terms of factorials.
358584`\spad{factorials(f,{} x)} rewrites the permutations and binomials in \spad{f} involving \spad{x} in terms of factorials.
358650`\spad{factorList(u)} returns the list of factors with flags (for use by factoring code).
358767`\spad{factorList(k,{} n,{} m,{} j)} \undocumented
358936`\spad{factorOfDegree(d,{} f)} returns a factor of degree \spad{d} of the factored polynomial \spad{f}. Such a factor shall exist.
359037`\spad{factorOfDegree(d,{} p)} returns a factor of \spad{p} of degree \spad{d}.
359133`\spad{factorOfDegree(d,{} p,{} listOfDegrees)} returns a factor of \spad{p} of degree \spad{d} knowing that \spad{p} has for possible splitting of its degree listOfDegrees.
359254`\spad{factorOfDegree(d,{} p,{} r)} returns a factor of \spad{p} of degree \spad{d} knowing that \spad{p} has at least \spad{r} factors.
359369`\spad{factorOfDegree(d,{} p,{} listOfDegrees,{} r)} returns a factor of \spad{p} of degree \spad{d} knowing that \spad{p} has for possible splitting of its degree \spad{listOfDegrees},{} and that \spad{p} has at least \spad{r} factors.
359509`\spad{factorOfDegree(d,{} p,{} listOfDegrees,{} r,{} sqf)} returns a factor of \spad{p} of degree \spad{d} knowing that \spad{p} has for possible splitting of its degree \spad{listOfDegrees},{} and that \spad{p} has at least \spad{r} factors. If \spad{sqf=true} the polynomial is assumed to be square free (\spadignore{i.e.} without repeated factors).
359657`\spad{factorPolynomial(p)} factors \spad{p} into irreducible factors over field generated by its coefficients.
360181`\spad{factorPolynomial(p)} returns the factorization into irreducibles of the univariate polynomial \spad{p}.
360319`\spad{factors(a1\^e1,{} ...,{} an\^en)} returns \spad{[[a1,{} e1],{} ...,{} [an,{} en]]}.
360392`\spad{factors(a1\^e1,{} ...,{} an\^en)} returns \spad{[[a1,{} e1],{} ...,{} [an,{} en]]}.
360477`\spad{factors(u)} returns a list of the factors in a form suitable for iteration. That is,{} it returns a list where each element is a record containing a base and exponent. The original object is the product of all the factors and the unit (which can be extracted by \spad{unit(u)}).
360557`\spad{factorset(p)} returns the set of irreducible factors of \spad{p}.
360638`\spad{factorsOfCyclicGroupSize()} returns the factorization of size()\spad{-1}
360747`\spad{factorsOfDegree(d,{} f)} returns the factors of degree \spad{d} of the factored polynomial \spad{f}.
360855`\spad{factorSquareFree(p)} factors an extended squareFree polynomial \spad{p} over the rational numbers.
360927`\spad{factorSquareFree(p)} returns the factorization of \spad{p} which is supposed not having any repeated factor (this is not checked).
361003`\spad{factorSquareFree(p)} produces the complete factorization of the square free polynomial \spad{p}.
361083`\spad{factorSquareFree(p,{} listOfDegrees)} factorizes the polynomial \spad{p} using the single factor bound algorithm and knowing that \spad{p} has for possible splitting of its degree listOfDegrees. \spad{f} is supposed not having any repeated factor (this is not checked).
361184`\spad{factorSquareFree(p,{} r)} factorizes the polynomial \spad{p} using the single factor bound algorithm and knowing that \spad{p} has at least \spad{r} factors. \spad{f} is supposed not having any repeated factor (this is not checked).
361279`\spad{factorSquareFree(p,{} listOfDegrees,{} r)} factorizes the polynomial \spad{p} using the single factor bound algorithm,{} knowing that \spad{p} has for possible splitting of its degree \spad{listOfDegrees} and that \spad{p} has at least \spad{r} factors. \spad{f} is supposed not having any repeated factor (this is not checked).
361399`\spad{factorSquareFree(p,{} d,{} r)} factorizes the polynomial \spad{p} using the single factor bound algorithm,{} knowing that \spad{d} divides the degree of all factors of \spad{p} and that \spad{p} has at least \spad{r} factors. \spad{f} is supposed not having any repeated factor (this is not checked).
361513`\spad{factorSquareFreeByRecursion(p)} returns the square free factorization of \spad{p}. This functions performs the recursion step for factorSquareFreePolynomial,{} as defined in \spadfun{PolynomialFactorizationExplicit} category (see \spadfun{factorSquareFreePolynomial}).
362095`\spad{factorSquareFreePolynomial(p)} factors the univariate polynomial \spad{p} into irreducibles where \spad{p} is known to be square free and primitive with respect to its main variable.
362243`\spad{failed()} returns a failed match.
362301`\spad{failed()} returns a failed match.
362353`\spad{failed?(r)} tests if \spad{r} is a failed match.
362419`\spad{failed?(r)} tests if \spad{r} is a failed match.
362479`\spad{false} is a logical constant.
362514`\spad{fffg(C,{} c,{} eta)} is version of fffg which uses sum of eta as order
362699`\spad{fffg(C,{} c,{} vd,{} K)} is the general algorithm as proposed by Beckermann and Labahn. \blankline The first argument is the list of \spad{c_}{\spad{i},{} \spad{i}}. These are the only values of \spad{C} explicitely needed in \spad{fffg}. \blankline The second argument \spad{c},{} computes \spad{c_k}(\spa
362699`--d{M}),{} \spadignore{i.e.} \spad{c_k}(.) is the dual basis of the vector space \spad{V},{} but also knows about the special multiplication rule as descibed in Equation (2). Note that the information about \spad{f} is therefore encoded in \spad{c}. \blankline \spad{vd} is modified by the routine,{} on input it is the vector of degree bounds \spad{n},{} as introduced in Definition 2.1. On output it is vector of defects (degree bound minus degree of solution). \blankline \spad{K} is requested ord
362699`--er of solution.
362894`\spad{FG2F(a + i b)} returns \spad{a + sqrt(-1) b}.
362961`\spad{fglmIfCan(lp)} returns the lexicographical Groebner basis of \spad{lp} by using the {\em FGLM} strategy,{} if \spad{zeroDimensional?(lp)} holds .
363161`\spad{fglmIfCan(lq1)} returns the lexicographical Groebner basis of \spad{lq1} by using the {\em FGLM} strategy,{} if \spad{zeroDimensional?(lq1)} holds.
363267`\spad{fibonacci(n)} returns the \spad{n}th Fibonacci number. the Fibonacci numbers \spad{F[n]} are defined by \spad{F[0] = F[1] = 1} and \spad{F[n] = F[n-1] + F[n-2]}. The algorithm has running time \spad{O(log(n)^3)}. Reference: Knuth,{} The Art of Computer Programming Vol 2,{} Semi-Numerical Algorithms.
363339`\spad{filename(d,{} n,{} e)} creates a file name with \spad{d} as its directory,{} \spad{n} as its name and \spad{e} as its extension. This is a portable way to create file names. When \spad{d} or \spad{t} is the empty string,{} a default is used.
363579`\spad{fill!(u,{} x)} replaces each entry in aggregate \spad{u} by \spad{x}. The modified \spad{u} is returned as value.
363668`\spad{fill!(m,{} r)} fills \spad{m} with \spad{r}\spad{'s}
363738`\spad{fillPascalTriangle()} fills the stored table.
363804`\spad{filterUntil(p,{} t)} returns \spad{[x for x in t while not p(x)]}.
363869`\spad{filterUntil(p,{} s)} returns \spad{[x0,{} x1,{} ...,{} x(n)]} where \spad{s = [x0,{} x1,{} x2,{} ..]} and \spad{n} is the smallest index such that \spad{p(xn) = true}.
363927`\spad{filterWhile(p,{} t)} returns \spad{[x for x in t while p(x)]}.
363992`\spad{filterWhile(p,{} s)} returns \spad{[x0,{} x1,{} ...,{} x(n-1)]} where \spad{s = [x0,{} x1,{} x2,{} ..]} and \spad{n} is the smallest index such that \spad{p(xn) = false}.
364403`\spad{find(p,{} u)} returns the first \spad{x} in \spad{u} such that \spad{p(x)} is \spad{true},{} and "failed" otherwise.
364473`\spad{findCycle(n,{} st)} determines if st is periodic within \spad{n}.
364607`\spad{findNode(n,{} ptName)} finds a scene node
364674`\spad{findPoint(n,{} ptName)} find the point associated with a given string.
364735`\spad{finite?(\spad{a})} determines whether \spad{a} is a finite cardinal,{} \spadignore{i.e.} an integer.
364786`\spad{finite?(x)} tests if \spad{x} is finite.
364844`\spad{finite?(x)} tests if \spad{x} is finite.
364901`\spad{finiteBasis(d)} returns a basis for \spad{d} as a module over {\em K[x]}.
364970`\spad{fintegrate(f,{} v,{} c)} is the integral of \spad{f()} with respect \indented{1}{to \spad{v} and having \spad{c} as the constant of integration.} \indented{1}{The evaluation of \spad{f()} is delayed.}
365098`\spad{fintegrate(f,{} v,{} c)} is the integral of \spad{f()} with respect \indented{1}{to \spad{v} and having \spad{c} as the constant of integration.} \indented{1}{The evaluation of \spad{f()} is delayed.}
365203`\spad{first(x)} selects first component of the product
365244`\spad{first([l1]*[l2]*...[ln])} returns the Lyndon word \spad{l1}.
365329`\spad{first(x)} returns the first letter of \spad{x}.
365371`\spad{first(x)} returns the first entry of the tree \spad{x}.
365645`\spad{first(u)} returns the first element \spad{x} of \spad{u}. Note: for collections,{} \spad{first([x,{} y,{} ...,{} z]) = x}. Error: if \spad{u} is empty.
365728`\spad{first(u)} returns the first element of \spad{u} (equivalently,{} the value at the current node).
365783`\spad{first(ts)} returns the polynomial of \spad{ts} with greatest main variable if \spad{ts} is not empty,{} otherwise returns \spad{"failed"}.
365858`\spad{first(x,{} n)} returns the sequence of the first \spad{n} entries
366056`\spad{first(u,{} n)} returns a copy of the first \spad{n} (\spad{n >= 0}) elements of \spad{u}.
366131`\spad{firstDenom(p)} extracts the denominator of the first fractional term. This returns 1 if there is no fractional part (use \spadfunFrom{wholePart}{PartialFraction} to get the whole part).
366193`\spad{firstn(x,{} n)} returns a list of the first \spad{n} entries
366267`\spad{firstNumer(p)} extracts the numerator of the first fractional term. This returns 0 if there is no fractional part (use \spadfunFrom{wholePart}{PartialFraction} to get the whole part).
366319`\spad{firstSubsetGray(n)} creates the first vector {\em ww} to start a loop using {\em nextSubsetGray(ww,{} n)}
366401`\spad{firstUncouplingMatrix(op,{} m)} returns the matrix A such that \spad{A w = (W',{} W'',{} ...,{} W^N)} in the corresponding associated equations for right-factors of order \spad{m} of \spad{op}. Returns "failed" if the matrix A has not been precomputed for the particular combination \spad{degree(L),{} m}.
366520`\spad{fixedDivisor(a)} for \spad{a(x)} in \spad{Z[x]} is the largest integer \spad{f} such that \spad{f} divides \spad{a(x=k)} for all integers \spad{k}. Note: fixed divisor of \spad{a} is \spad{reduce(gcd,{} [a(x=k) for k in 0..degree(a)])}.
366626`\spad{fixedPointExquo(f,{} g)} computes the exact quotient of \spad{f} and \spad{g} using a fixed point computation.
366713`\spad{fixedPoints(p)} returns the points fixed by the permutation \spad{p}.
366780`\spad{fixPredicate(f)} returns \spad{g} defined by \spad{g}(a) = \spad{f}(a::B).
366864`\spad{flagFactor(base,{} exponent,{} flag)} creates a factored object with a single factor whose \spad{base} is asserted to be properly described by the information flag.
366953`\spad{flatten(s)} returns an input form corresponding to \spad{s} with all the nested operations flattened to triples using new local variables. If \spad{s} is a piece of code,{} this speeds up the compilation tremendously later on.
366994`\spad{flatten(n)} takes a second order graph,{} that is a graph whose elements are themselves graphs and create a first order graph whose vertices are the vertices of the inner graphs.
367055`\spad{flexible?()} tests if \spad{2*associator(a,{} b,{} a) = 0} for all \spad{a},{} \spad{b} in the algebra. Note: we only can test this; in general we don\spad{'t} know whether \spad{2*a=0} implies \spad{a=0}.
367129`\spad{flexible?()} tests if \spad{2*associator(a,{} b,{} a) = 0} for all \spad{a},{} \spad{b} in the algebra. Note: we only can test this; in general we don\spad{'t} know whether \spad{2*a=0} implies \spad{a=0}.
367200`\spad{flexibleArray(l)} creates a flexible array from the list of elements \spad{l}
367323`\spad{float?(s)} is \spad{true} if \spad{s} is an atom and belong to \spad{Flt}.
367395`\spad{float(s)} returns \spad{s} as an element of \spad{Flt}; Error: if \spad{s} is not an atom that also belongs to \spad{Flt}.
367522`\spad{float(a,{} e)} returns \spad{a * base() ^ e}.
367660`\spad{float(a,{} e,{} b)} returns \spad{a * b ^ e}.
367781`\spad{floor x} returns the largest integer \spad{<= x}.
367827`\spad{floor(x)} returns the largest integral element below \spad{x}.
367906`\spad{flush(f)} make sure that buffered data in written out to the operating system.
367958`\spad{fmecg(p1,{} e,{} r,{} p2)} finds \spad{X} : \spad{p1} - \spad{r} * X^e * \spad{p2}
368073`\spad{fmecg(p1,{} e,{} r,{} p2)} returns \spad{p1 - r * X^e * p2} where \spad{X} is \spad{monomial(1,{} 1)}
368159`\spad{fmecg(p1,{} e,{} r,{} p2)} finds \spad{X} : \spad{p1} - \spad{r} * X^e * \spad{p2}
368382`\spad{fmecg(p1,{} e,{} r,{} p2)} finds \spad{X} : \spad{p1} - \spad{r} * X^e * \spad{p2}
368461`\spad{forLoop(i=1..10,{} c)} creates a representation of a FORTRAN DO loop with \spad{i} ranging over the values 1 to 10.
368540`\spad{forLoop(i=1..10,{} n,{} c)} creates a representation of a FORTRAN DO loop with \spad{i} ranging over the values 1 to 10 by \spad{n}.
368639`\spad{formalDiff2(f,{} i,{} jm)} formally differentiates the function \spad{f} with the Jacobi matrix \spad{jm} \spad{wrt} the \spad{i}\spad{-}th independent variable. \spad{JVars} is a list of the jet variables effectively in the result \spad{DPhi} (might be too large).
368775`\spad{formalDiff2(sys,{} i,{} jm)} is like the other \spadfun{\spad{formalDiff2}} but for systems.
369209`\spad{formalDiff(f,{} mu)} formally differentiates \spad{f} as indicated by the multi-index \spad{mu}.
369298`\spad{formalDiff(f,{} i)} formally (totally) differentiates \spad{f} \spad{wrt} the \spad{i}\spad{-}th independent variable.
369378`\spad{formalDiff(sys,{} i)} formally differentiates a family \spad{sys} of functions \spad{wrt} the \spad{i}\spad{-}th independent variable.
369719`\spad{FormatArabic(n)} forms an Arabic numeral string from an integer \spad{n}.
369786`\spad{FormatRoman(n)} forms a Roman numeral string from an integer \spad{n}.
369852`\spad{formula(t)} extracts the formula section of a formatted object \spad{t}.
369985`\spad{fortFormatHead(name,{} returnType,{} args)}
370100`\spad{fortFormatTypeLines(typeName,{} l)}
370179`\spad{fort_format_types(typeName,{} names)}
370260`\spad{fortran(fname,{} ftype,{} body)} builds an object of type \spadtype{FortranProgramCategory}. The three arguments specify the name,{} the type and the body of the program.
370343`\spad{fortranCarriageReturn()} produces a carriage return on the current Fortran output stream
370404`\spad{fortranCharacter()} returns CHARACTER,{} an element of FortranType
370454`\spad{fortranComplex()} returns COMPLEX,{} an element of FortranType
370502`\spad{fortranDouble()} returns DOUBLE PRECISION,{} an element of FortranType
370549`\spad{fortranDoubleComplex()} returns DOUBLE COMPLEX,{} an element of FortranType
370603`\spad{fortranInteger()} returns INTEGER,{} an element of FortranType
370651`\spad{fortranLiteral(s)} writes \spad{s} to the current Fortran output stream
370711`\spad{fortranLiteralLine(s)} writes \spad{s} to the current Fortran output stream,{} followed by a carriage return
370775`\spad{fortranLogical()} returns LOGICAL,{} an element of FortranType
370823`\spad{fortranReal()} returns REAL,{} an element of FortranType
370868`\spad{fortranTypeOf(u,{} tab)} returns the type of \spad{u} in tab
370933`\spad{fprindINFO }\undocumented
371125`\spad{fracPart(f)} returns the list of summands of the fractional part of \spad{f}.
371248`\spad{fractionFreeGauss(m)} performs the fraction free gaussian elimination on the matrix \spad{m}.
371458`\spad{fractionPart(x)} returns the fractional part of \spad{x}. \spad{x} = wholePart(\spad{x}) + fractionPart(\spad{x})
371541`\spad{fractionPart x} returns the fractional part of \spad{x}.
371594`\spad{fractionPart(b)} returns the fractional part of a binary expansion.
371661`\spad{fractionPart(d)} returns the fractional part of a decimal expansion.
371729`\spad{fractionPart(h)} returns the fractional part of a hexadecimal expansion.
371801`\spad{fractionPart(rx)} returns the fractional part of a radix expansion.
371871`\spad{fractRadix(pre,{} cyc)} creates a fractional radix expansion from a list of prefix ragits and a list of cyclic ragits. For example,{} \spad{fractRadix([1],{} [6])} will return \spad{0.16666666...}.
371949`\spad{fractRagits(rx)} returns the ragits of the fractional part of a radix expansion.
372016`if this is a lambda term then is it free,{} that is does its variable appear in its expression
372061`\spad{freeConvolution(x,{} y)} returns the free convolution of the distributions \spad{x} and \spad{y}
372127`\spad{freeCumulant2moment(cc)} computes the sequence of moments from the sequence of free cumulants \spad{cc}
372205`\spad{freeCumulant(x,{} n)} returns the \spad{n}-th free cumulant of the distribution \spad{x}
372280`\spad{freeCumulants(x)} returns the sequence of free cumulants of the distribution \spad{x}.
372350`\spad{freeMultiplicativeConvolution(mu,{} nu)} computes the free multiplicative convolution of the distributions \spad{mu} and \spad{nu}.
372455`\spad{freeMultiplicativeConvolution(x,{} y)} returns the free multiplicative convolution of the distributions \spad{x} and \spad{y}.
372586`\spad{freeOf?(fun,{} jv)} checks whether \spad{fun} contains the jet variable \spad{jv}.
372830`\spad{freeOf?(x,{} y)} tests if \spad{x} does not contain any occurrence of \spad{y},{} where \spad{y} is a single kernel.
372885`\spad{freeOf?(x,{} s)} tests if \spad{x} does not contain any operator whose name is \spad{s}.
372944`\spad{freePoissonDistribution(a)} produces a free Poisson distribution of variance \spad{a}.
373026`the variable indicated by \spad{'s'} is free if it does not appear in node \spad{'n'} or any of its subnodes.
373090`\spad{fresnelC(f)} denotes the Fresnel integral \spad{C}
373145`fresnelC is the Fresnel integral \spad{C},{} defined by \spad{C(x) = integrate(cos(\%pi*t^2/2),{} t=0..x)}
373205`\spad{fresnelC(f)} denotes the Fresnel integral \spad{C}
373360`\spad{fresnelC(f)} denotes the Fresnel integral \spad{C}
373423`\spad{fresnelS(f)} denotes the Fresnel integral \spad{S}
373478`fresnelS is the Fresnel integral \spad{S},{} defined by \spad{S(x) = integrate(sin(\%pi*t^2/2),{} t=0..x)}
373538`\spad{fresnelS(f)} denotes the Fresnel integral \spad{S}
373693`\spad{fresnelS(f)} denotes the Fresnel integral \spad{S}
373756`\spad{frobenius(x)} computes \spad{x^q} where \spad{q} is the size of \spad{R}
373831`\spad{Frobenius(x)} \undocumented
373954`\spad{Frobenius(a)} returns \spad{a ^ q} where \spad{q} is the \spad{size()\$F}.
374084`\spad{Frobenius(a,{} s)} returns \spad{a^(q^s)} where \spad{q} is the size()\$\spad{F}.
374167`\spad{front(q)} returns the element at the front of the queue. The queue \spad{q} is unchanged by this operation. Error: if \spad{q} is empty.
374213`\spad{froot(f,{} n)} returns \spad{[m,{} c,{} r]} such that \spad{f^(1/n) = c * r^(1/m)}.
374354`\spad{frst(s)} returns the first element of stream \spad{s}. Caution: this function should only be called after a \spad{empty?} test has been made since there no error check.
374404`\spad{fullDisplay(db)} prints full details of each entry in \spad{db}.
374453`\spad{fullDisplay(ic)} prints all of the information contained in \spad{ic}.
374500`\spad{fullDisplay(db,{} start,{} end )} prints full details of entries in the range \spad{start..end} in \spad{db}.
374581`\spad{fullPartialFraction(f)} returns \spad{[p,{} [[j,{} Dj,{} Hj]...]]} such that \spad{f = p(x) + \sum_{[j,{} Dj,{} Hj] in l} \sum_{Dj(a)=0} Hj(a)/(x - a)\^j}.
374669`\spad{function(f,{} arg)} generates a function with name \spad{f} and arguments \spad{arg}.
374739`\spad{function(e,{} foo)} creates a function \spad{foo() == e}.
374797`\spad{function(code,{} [x1,{} ...,{} xn],{} f)} returns the input form corresponding to \spad{f(x1,{} ...,{} xn) == code}.
374859`\spad{function(f,{} arg,{} show)} generates a function with name \spad{f} and arguments \spad{arg}. In the output only the first \spad{show} arguments are shown.
374947`\spad{function(e,{} foo,{} [x1,{} ...,{} xn])} creates a function \spad{foo(x1,{} ...,{} xn) == e}.
375018`\spad{function(e,{} foo,{} x)} creates a function \spad{foo(x) == e}.
375083`\spad{function(e,{} foo,{} x,{} y)} creates a function \spad{foo(x,{} y) = e}.
375155`construct graph from a list of permutations.
375227`constructor for graph with given objects more objects and arrows can be added later if required.
375401`constructor for graph with given list of object names. Use this version of the constructor if you don\spad{'t} intend to create diagrams and therefore don\spad{'t} care about \spad{x},{} \spad{y} coordinates. more objects and arrows can be added later if required.
375460`constructor for graph with given objects and arrows more objects and arrows can be added later if required.
375745`\spad{functionName returns} the name of the function given by the algebraic differential equation,{} default being \spad{f}
375822`\spad{functionName(d)} specifies the name of the function given by the algebraic differential equation or recurrence. This option is expressed in the form \spad{functionName == d}.
375874`\spad{functionNames returns} the names for the function in the algebraic dependence,{} default being \%\spad{f1},{} \%\spad{f2},{} ...
375958`\spad{functionNames(d)} specifies the names for the function in algebraic dependence. This option is expressed in the form \spad{functionNames == d}.
376017`\spad{gamma()} is the Euler constant
376081`\spad{Gamma(f)} returns the formal Gamma function applied to \spad{f}
376139`\spad{Gamma(x)} is the Euler Gamma function.
376192`\spad{Gamma(x)} is the Euler gamma function,{} \spad{Gamma(x)},{} defined by \indented{2}{\spad{Gamma(x) = integrate(t^(x-1)*exp(-t),{} t=0..\%infinity)}.}
376285`\spad{Gamma(x)} is the Euler Gamma function.
376360`\spad{Gamma(x)} is the Euler gamma function,{} \spad{Gamma(x)},{} defined by \indented{2}{\spad{Gamma(x) = integrate(t^(x-1)*exp(-t),{} t=0..\%infinity)}.}
376435`\spad{Gamma(x)} is the Euler Gamma function.
376492`\spad{Gamma(a,{} x)} returns the incomplete Gamma function applied to a and \spad{x}
376552`\spad{Gamma(a,{} x)} is the incomplete Gamma function.
376608`\spad{gauge(q,{} j,{} gamma)} computes the gauge corrections to the number of arbitrary functions of differentiation order \spad{j} for a system of order \spad{q} with \spad{gamma} gauge functions.
376719`\spad{gaugeHilbert(q,{} gamma)} computes the gauge correction to the Hilbert polynomial for a system of order \spad{q} with \spad{gamma} gauge functions.
376861`\spad{gaussianDistribution(a)} produces a gaussian distribution of variance \spad{a}.
376940`\spad{gbasis }\undocumented
377049`\spad{gcd([f1,{} ..,{} fk])} = \spad{gcd} of the polynomials \spad{fi}.
377093`\spad{gcd(lp)} computes the \spad{gcd} of the list of polynomials \spad{lp}.
377155`\spad{gcd(lp)} computes the \spad{gcd} of the list of polynomials \spad{lp}.
377518`\spad{gcd(l)} returns the common \spad{gcd} of the elements in the list \spad{l}.
377561`\spad{gcd(P,{} Q)} returns the \spad{gcd} of \spad{P} and \spad{Q}.
377645`\spad{gcd(p,{} q)} computes the \spad{gcd} of the two polynomials \spad{p} and \spad{q}.
377763`\spad{gcd(p,{} q)} computes the \spad{gcd} of the two polynomials \spad{p} and \spad{q}.
378130`\spad{gcd(x,{} y)} returns the greatest common divisor of \spad{x} and \spad{y}.
378170`\spad{gcd(a,{} b)} computes the greatest common divisor of two non negative integers \spad{a} and \spad{b}.
378219`\spad{gcd(a,{} b)} computes the greatest common divisor of two positive integers \spad{a} and \spad{b}.
378265`\spad{gcd(r,{} p)} returns the \spad{gcd} of \spad{r} and the content of \spad{p}.
378344`\spad{gcd(v1,{} v2,{} p)} computes monic \spad{gcd} of \spad{v1} and \spad{v2} modulo \spad{p}.
378433`\spad{gcd(f1,{} f2,{} p)} computes the \spad{gcd} of the univariate polynomials \spad{f1} and \spad{f2} modulo the integer prime \spad{p}.
378503`\spad{gcd(a,{} lo,{} \spad{hi},{} p)} computes \spad{gcd} of elements a(\spad{lo}),{} a(\spad{lo+1}),{} ...,{} a(\spad{hi}).
378614`\spad{gcdBasis(lp)} computes \spad{gcd} basis of \spad{lp}
378704`\spad{gcdBasis(v)} returns basis part of \spad{gcdDecomposition(v)}.
378762`\spad{gcdcofact([f1,{} ..fk])} = \spad{gcd} and cofactors of \spad{k} univariate polynomials.
378818`\spad{gcdcofactprim([f1,{} ..fk])} = \spad{gcd} and cofactors of \spad{k} primitive polynomials.
378878`\spad{gcdDecomposition(v)} returns \spad{[b,{} t]} such that elements of \spad{b} are relatively prime and that \spad{v(i) = product(b(j)^(t(j,{} i)),{} j=1..n)}
378994`\spad{gcdDecomposition(v)} returns \spad{[b,{} t]} such that elements of \spad{b} are relatively prime and that \spad{v(i) = product(b(j)^(t(j,{} i)),{} j=1..n)}
379100`\spad{gcdPolynomial(p,{} q)} returns the \spad{GCD} of \spad{p} and \spad{q}
379830`\spad{gcdPolynomial(p,{} q)} returns the greatest common divisor (\spad{gcd}) of univariate polynomials over the domain
379964`\spad{gcdPolynomial(p,{} q)} returns the \spad{gcd} of the univariate polynomials \spad{p} \spad{qnd} \spad{q}.
380120`\spad{gcdprim([f1,{} ..,{} fk])} = \spad{gcd} of \spad{k} PRIMITIVE univariate polynomials
380168`\spad{gcdPrimitive lp} computes the \spad{gcd} of the list of primitive polynomials \spad{lp}.
380239`\spad{gcdPrimitive(p,{} q)} computes the \spad{gcd} of the primitive polynomials \spad{p} and \spad{q}.
380306`\spad{gcdPrimitive(p,{} q)} computes the \spad{gcd} of the primitive polynomials \spad{p} and \spad{q}.
380457`\spad{gderiv(f,{} [a0,{} a1,{} a2,{} ..])} returns \spad{[f(0)*a0,{} f(1)*a1,{} f(2)*a2,{} ..]}.
380546`\spad{GE(x,{} y)} returns the \spadtype{Switch} expression representing \spad{x>=y}.
380754`to be documented later.
381668`\spad{generalCoefficient(action,{} f,{} k,{} p)} gives the coefficient of \spad{x^k} in \spad{p}(\spad{z})\dot \spad{f}(\spad{x}),{} where the \spad{action} of \spad{z^l} on a polynomial in \spad{x} is given by \spad{action},{} \spadignore{i.e.} \spad{action}(\spad{k},{} \spad{l},{} \spad{f}) should return the coefficient of 
381668`--\spad{x^k} in \spad{z^l} \spad{f}(\spad{x}).
381848`\spad{generalInfiniteProduct(f(x),{} a,{} d)} computes \spad{product(n=a,{} a+d,{} a+2*d,{} ...,{} f(x^n))}. The series \spad{f(x)} should have constant coefficient 1.
381945`\spad{generalInterpolation(l,{} CA,{} f,{} eta)} performs Hermite-Pade approximation using the given action \spad{CA} of polynomials on the elements of \spad{f}. The result is guaranteed to be correct up to order |eta|-1. Given that eta is a "normal" point,{} the degrees on the diagonal are given by
381945`-- eta. The degrees of column \spad{i} are in this case eta + \spad{e}.\spad{i} - [1,{} 1,{} ...,{} 1],{} where the degree of zero is \spad{-1}.
382152`\spad{generalInterpolation(C,{} CA,{} f,{} eta)} performs Hermite-Pade approximation using the given action \spad{CA} of polynomials on the elements of \spad{f}. The result is guaranteed to be correct up to order |eta|-1. Given that eta is a "normal" point,{} the degrees on the diagonal are given by eta. The deg
382152`--rees of column \spad{i} are in this case eta + \spad{e}.\spad{i} - [1,{} 1,{} ...,{} 1],{} where the degree of zero is \spad{-1}. \blankline The first argument \spad{C} is the list of coefficients \spad{c_}{\spad{k},{} \spad{k}} in the expansion <x^k> \spad{z} \spad{g}(\spad{x}) = sum_{\spad{i=0}}\spad{^k} \spad{c_}{\spad{k},{} \spad{i}} <x^i> \spad{g}(\spad{x}). \blankline The second argument,{} \spad{CA}(\spad{k},{} \spad{l},{} \spad{f}),{} should return the coefficient of \spad{x^k} in \spa
382152`--d{z^l} \spad{f}(\spad{x}).
382346`\spad{generalInterpolation(C,{} CA,{} f,{} vd,{} K)} is like \spad{generalInterpolation(C,{} CA,{} f,{} eta)} but solves up to order \spad{K} and modifies \spad{vd} to return defects of solutions
382550`\spad{generalizedContinuumHypothesisAssumed?()} tests if the hypothesis is currently assumed.
382630`\spad{generalizedContinuumHypothesisAssumed(bool)} is used to dictate whether the hypothesis is to be assumed.
382716`\spad{generalizedEigenvector(eigen,{} m)} returns the generalized eigenvectors of the matrix relative to the eigenvalue \spad{eigen},{} as returned by the function eigenvectors.
382963`\spad{generalizedEigenvector(eigen,{} m)} returns the generalized eigenvectors of the matrix relative to the eigenvalue \spad{eigen},{} as returned by the function eigenvectors.
383238`\spad{generalizedEigenvector(alpha,{} m,{} k,{} g)} returns the generalized eigenvectors of the matrix relative to the eigenvalue \spad{alpha}. The integers \spad{k} and \spad{g} are respectively the algebraic and the geometric multiplicity of the eigenvalue \spad{alpha}.
383430`\spad{generalizedEigenvector(alpha,{} m,{} k,{} g)} returns the generalized eigenvectors of the matrix relative to the eigenvalue \spad{alpha}. The integers \spad{k} and \spad{g} are respectively the algebraic and the geometric multiplicity of tye eigenvalue \spad{alpha}.
383656`\spad{generalizedEigenvectors(m)} returns the generalized eigenvectors of the matrix \spad{m}.
383880`\spad{generalizedEigenvectors(m)} returns the generalized returns the generalized eigenvectors of the matrix \spad{m}.
384100`\spad{generalizedEigenvectors(m,{} fac)} returns the generalized eigenvectors of the matrix \spad{m}. fac is a factorizer for polynomials over \spad{F}.
384359`\spad{generalizedInverse(m)} returns the generalized (Moore
384359`--Penrose) inverse of the matrix \spad{m},{} \spadignore{i.e.} the matrix \spad{h} such that m*h*m=h,{} h*m*h=m,{} \spad{m*h} and \spad{h*m} are both symmetric matrices.
384529`\spad{generalLambert(f(x),{} a,{} d)} returns \spad{f(x^a) + f(x^(a + d)) + \indented{1}{f(x^(a + 2 d)) + ... }. \spad{f(x)} should have zero constant} \indented{1}{coefficient and \spad{a} and \spad{d} should be positive.}
384620`\spad{generalLambert(f(x),{} a,{} d)} returns \spad{f(x^a) + f(x^(a + d)) + f(x^(a + 2 d)) + ...}. \spad{f(x)} should have zero constant coefficient and \spad{a} and \spad{d} should be positive.
384720`\spad{general_Lambert_product(f(x),{} a,{} d)} returns \spad{f(x^a)*f(x^(a + d))*f(x^(a + 2 d))* ...}. \spad{f(x)} should have constant coefficient equal to one and \spad{a} and \spad{d} should be positive.
384829`\spad{generalPosition(I,{} listvar)} perform a random linear transformation on the variables in listvar and returns the transformed ideal along with the change of basis matrix.
384969`\spad{generalSqFr(p)} returns the square-free factorisation of polynomial \spad{p},{} a sparse univariate polynomial (sup) over a sup over \spad{F}.
385140`\spad{generalTwoFactor(p)} returns the factorisation of polynomial \spad{p},{} a sparse univariate polynomial (sup) over a sup over \spad{F}.
385316`\spad{generateIrredPoly(n)} generates an irreducible univariate polynomial of the given degree \spad{n} over the finite field.
385427`\spad{generator()} returns the generator.
385475`\spad{generator()} returns the generator.
385580`\spad{generator()} returns a root of the defining polynomial. This element generates the field as an algebra over the ground field.
385657`\spad{generator()} returns the generator for this domain.
385711`\spad{generator(n)} returns the \spad{n}th multiplicative generator,{} a basis term.
385777`\spad{generator(n)} returns the \spad{n}th basis term for a differential form.
385861`\spad{generator(d)} returns \spad{f} if \spad{(f) = d},{} "failed" if \spad{d} is not principal.
385944`\spad{generator(i)} is the \spad{i}th Hall Basis element
386021`\spad{generators()} returns the list of generators.
386077`\spad{generators(I)} returns a list of generators for the ideal \spad{I}.
386158`\spad{generators(gp)} returns the generators of the group {\em gp}.
386230`\spad{generic()} returns a generic element,{} \spadignore{i.e.} the linear combination of the fixed basis with the symbolic coefficients \spad{\%x1,{} \%x2,{} ..}
386302`\spad{generic?(p)} tests if \spad{p} is a single matching variable.
386350`\spad{generic(s)} returns a generic element,{} \spadignore{i.e.} the linear combination of the fixed basis with the symbolic coefficients \spad{s1,{} s2,{} ..}
386428`\spad{generic(ve)} returns a generic element,{} \spadignore{i.e.} the linear combination of \spad{ve} basis with the symbolic coefficients \spad{\%x1,{} \%x2,{} ..}
386510`\spad{generic(vs)} returns a generic element,{} \spadignore{i.e.} the linear combination of the fixed basis with the symbolic coefficients \spad{vs}; error,{} if the vector of symbols is too short
386596`\spad{generic(s,{} v)} returns a generic element,{} \spadignore{i.e.} the linear combination of \spad{v} with the symbolic coefficients \spad{s1,{} s2,{} ..}
386685`\spad{generic(vs,{} ve)} returns a generic element,{} \spadignore{i.e.} the linear combination of \spad{ve} with the symbolic coefficients \spad{vs} error,{} if the vector of symbols is shorter than the vector of elements
386782`\spad{genericLeftDiscriminant()} is the determinant of the generic left trace forms of all products of basis element,{} if the generic left trace form is associative,{} an algebra is separable if the generic left discriminant is invertible,{} if it is non-zero,{} there is some ring extension which makes the algebra separable
386912`\spad{genericLeftMinimalPolynomial(a)} substitutes the coefficients of {em a} for the generic coefficients in \spad{leftRankPolynomial()}
387077`\spad{genericLeftNorm(a)} substitutes the coefficients of \spad{a} for the generic coefficients into the coefficient of the constant term in \spadfun{leftRankPolynomial} and changes the sign if the degree of this polynomial is odd. This is a form of degree \spad{k}
387201`\spad{genericLeftTrace(a)} substitutes the coefficients of \spad{a} for the generic coefficients into the coefficient of the second highest term in \spadfun{leftRankPolynomial} and changes the sign. \indented{1}{This is a linear form}
387326`\spad{genericLeftTraceForm (a,{} b)} is defined to be \spad{genericLeftTrace (a*b)},{} this defines a symmetric bilinear form on the algebra
387458`\spad{genericPosition(lp,{} lv)} puts a radical zero dimensional ideal in general position,{} for system \spad{lp} in variables \spad{lv}.
387671`\spad{genericRightDiscriminant()} is the determinant of the generic left trace forms of all products of basis element,{} if the generic left trace form is associative,{} an algebra is separable if the generic left discriminant is invertible,{} if it is non-zero,{} there is some ring extension which makes the algebra separable
387802`\spad{genericRightMinimalPolynomial(a)} substitutes the coefficients of \spad{a} for the generic coefficients in \spadfun{rightRankPolynomial}
387968`\spad{genericRightNorm(a)} substitutes the coefficients of \spad{a} for the generic coefficients into the coefficient of the constant term in \spadfun{rightRankPolynomial} and changes the sign if the degree of this polynomial is odd
388093`\spad{genericRightTrace(a)} substitutes the coefficients of \spad{a} for the generic coefficients into the coefficient of the second highest term in \spadfun{rightRankPolynomial} and changes the sign
388219`\spad{genericRightTraceForm (a,{} b)} is defined to be \spadfun{genericRightTrace (a*b)},{} this defines a symmetric bilinear form on the algebra
388352`to be documented later.
388913`\spad{gen_Monte_Carlo_check(check,{} l,{} kind,{} qvar,{} sigma,{} gen)} returns Monte Carlo \spad{check} for solutions to guessing problem. If Monte Carlo \spad{check} is unavailable re
388913`--turns \spad{check}.
389234`\spad{genus()} returns the genus of one absolutely irreducible component
389313`\spad{genus()} returns the genus of one absolutely irreducible component
389389`like genVectorStream,{} but skips every second vector.
389543`\spad{genVectorStream(sumEta,{} maxEta,{} k)} generates stream of all possible non-increasing lists \spad{eta} with maximal entry \spad{maxEta} and sum of entries at most \spad{sumEta}.
389696`\spad{geometric(f)} \undocumented
389780`\spad{getArrowIndex(s,{} a,{} b)} retrieves arrow index of the arrow form a to \spad{b}
389989`\spad{getArrows(s)} returns a list of all the arrows (or edges)
390198`\spad{getBadValues(p)} returns the list of "bad values" for \spad{p}. Note: \spad{p} is not allowed to match any of its "bad values".
390252`introspection: returns deBruijn index of bound variable in bound leaf node
390316`\spad{getCentre(n)} returns centre coordinate of the boundary. \spad{n:} \% is the boundary
390363`returns child nodes if this is a compound term otherwise returns []
390411`returns 2 child nodes if this is a compound term returns 1 child node if this is a lamda term otherwise returns []
390463`returns child nodes if this is a compound term otherwise returns []
390523`\spad{getCode(f)} returns a list of strings representing \spad{f} in Fortran notation. This is used by the FortranProgram domain.
390576`\spad{getCurve(t)} returns the \spadtype{PlottableSpaceCurveCategory} representing the parametric curve of the given tube plot \spad{t}.
390627`\spad{getDatabase("char")} returns a list of appropriate entries in the browser database. The legal values for \spad{"char"} are "o" (operations),{} \spad{"k"} (constructors),{} \spad{"d"} (domains),{} \spad{"c"} (categories) or \spad{"p"} (packages).
390699`\spad{getEq f} returns the defining equation,{} if \spad{f} represents the coefficient of an ADE or a recurrence.
390750`\spad{get_fort_indent()} gets current amount of Frotran indentation
390809`\spad{getGoodPrime n} returns the smallest prime not dividing \spad{n}
390897`\spad{getGraph(v,{} n)} returns the graph which is of the domain \spadtype{GraphImage} which is located in graph field \spad{n} of the given two-dimensional viewport,{} \spad{v},{} which is of the domain \spadtype{TwoDimensionalViewport}.
390976`\spad{getMatch(var,{} r)} returns the expression that \spad{var} matches in the result \spad{r},{} and "failed" if \spad{var} is not matched in \spad{r}.
391058`\spad{getMax(n)} returns maximum coordinate of the boundary. \spad{n} is the boundary
391102`\spad{getMin(n)} returns minimum coordinate of the boundary. \spad{n} is the boundary
391146`\spad{getMultiplicationMatrix()} returns the multiplication table in form of a matrix.
391251`\spad{getMultiplicationMatrix()} returns the multiplication table in form of a matrix.
391347`\spad{getMultiplicationMatrix()} returns the multiplication table in form of a matrix.
391444`\spad{getMultiplicationTable()} returns the multiplication table for the normal basis of the field. This table is used to perform multiplications between field elements.
391588`\spad{getMultiplicationTable()} returns the multiplication table for the normal basis of the field. This table is used to perform multiplications between field elements.
391723`\spad{getMultiplicationTable()} returns the multiplication table for the normal basis of the field. This table is used to perform multiplications between field elements.
391859`returns the name of the variable.
391901`\spad{getNames(n)} returns a list of names for this node
391964`\spad{getNotation()} shows the currently used notation.
392146`\spad{getOrder()} returns \spad{[[b1,{} ...,{} bm],{} [a1,{} ...,{} an]]} such that the partial ordering on \spad{S} was given by \spad{setOrder([b1,{} ...,{} bm],{} [a1,{} ...,{} an])}.
392236`\spad{getPickedPoints(x)} returns a list of small floats for the points the user interactively picked on the viewport for full integration into the system,{} some design issues need to be addressed: \spadignore{e.g.} how to go through the GraphImage interface,{} how to default to graphs,{} etc.
392320`\spad{get_rational_roots(p)} finds rational root of \spad{p}.
392413`\spad{get_rational_roots(f,{} k)} finds rational root of \spad{f} treated as univariate polynomial in \spad{k}.
392517`\spad{getRef(f)} returns a reference containing the order to which the terms of \spad{f} have been computed.
392621`\spad{getSimplifyDenomsFlag()} gets values of flag affecting simplification of denominators. See setSimplifyDenomsFlag.
392704`\spad{getStatement(of,{} int_to_floats?)}
392783`\spad{getStream(f)} returns the stream of terms representing the series \spad{f}.
392885`\spad{getType()} returns the input form corresponding to \spad{R}
392944`returns the type of the variable. This may be a compund type,{} for instance ["a",{}\spad{"b"}] represents a-\spad{>b} a function from type a to type \spad{b} untyped implementations return []
392986`\spad{get_used_intrinsics()} gets list of used intrinsics
393054`introspection: returns value of unbound variable in unbound leaf node or bound variable in lambda term
393100`returns the variable,{} if this is not a variable then return \spad{I}
393154`\spad{getVariableOrder()} returns \spad{[[b1,{} ...,{} bm],{} [a1,{} ...,{} an]]} such that the ordering on the variables was given by \spad{setVariableOrder([b1,{} ...,{} bm],{} [a1,{} ...,{} an])}.
393374`\spad{getVertexIndex(s,{} o)} gives index of object \spad{o}.
393513`\spad{getVertices(s)} returns a list of all the vertices (or objects) of the graph \spad{s}.
393630`\spad{getZechTable()} returns the zech logarithm table of the field it is used to perform additions in the field quickly.
393746`\spad{getZechTable()} returns the zech logarithm table of the field. This table is used to perform additions in the field quickly.
393850`\spad{getZechTable()} returns the zech logarithm table of the field. This table is used to perform additions in the field quickly.
393944`\spad{GF2FG(a + i b)} returns \spad{a + i b} viewed as a function with the \spad{i} pushed down into the coefficient domain.
394021`\spad{gnuDraw} provides 2d plotting,{} default options
394106`\spad{gnuDraw} provides 2d plotting from list of values,{} default options
394187`\spad{gnuDraw} provides 3d surface plotting,{} default options
394294`\spad{gnuDraw} provides 2d plotting with options
394396`\spad{gnuDraw} provides 2d plotting from list of values with options
394494`\spad{gnuDraw} provides 3d surface plotting with options
394618`\spad{goodPoint([p1,{} ...,{} pn],{} q)} returns an integer a such that a is neither a pole of \spad{\spad{pi}(x,{} y)} for some \spad{i} nor a branch point of \spad{q(x,{} y) = 0}.
394691`\spad{GospersMethod(b,{} n,{} new)} returns a rational function \spad{rf(n)} such that \spad{a(n) * rf(n)} is the indefinite sum of \spad{a(n)} with respect to upward difference on \spad{n},{} \spadignore{i.e.} \spad{a(n+1) * rf(n+1) - a(n) * rf(n) = a(n)},{} where \spad{b(n) = a(n)/a(n-1)} is a rational function. Returns "failed" if no such rational function \spad{rf(n)} exists. Note: \spad{new} is a nullary fu
394691`--nction returning a new \spad{V} every time. The condition on \spad{a(n)} is that \spad{a(n)/a(n-1)} is a rational function of \spad{n}.
394783`\spad{gotoJump(l)} creates a representation of a FORTRAN GOTO statement
394838`return the max grade of multivector,{} for example 1 is grade 0 \spad{e1} is grade 1 e1/\e2 is grade 2 and so on
394909`\spad{x} = ((\spad{-1})^grade(\spad{x}))\spad{*x}
394974`\spad{gradient(v,{} xlist)} computes the gradient,{} the vector of first partial derivatives,{} of the scalar field \spad{v},{} \spad{v} a function of the variables listed in xlist.
395063`\spad{graeffe p} determines \spad{q} such that \spad{q(-z^2) = p(z)*p(-z)}. Note that the roots of \spad{q} are the squares of the roots of \spad{p}.
395126`\spad{gramschmidt(lv)} converts the list of column vectors \spad{lv} into a set of orthogonal column vectors of euclidean length 1 using the Gram-Schmidt algorithm.
395243`\spad{graphCurves([[p0],{} [p1],{} ...,{} [pn]])} creates a \spadtype{GraphImage} from the list of lists of points indicated by \spad{p0} through \spad{pn}.
395330`\spad{graphCurves([[p0],{} [p1],{} ...,{} [pn]],{} [options])} creates a \spadtype{GraphImage} from the list of lists of points,{} \spad{p0} throught \spad{pn},{} using the options specified in the list \spad{options}.
395434`\spad{graphCurves([[p0],{} [p1],{} ...,{} [pn]],{} ptColor,{} lineColor,{} ptSize,{} [options])} creates a \spadtype{GraphImage} from the list of lists of points,{} \spad{p0} throught \spad{pn},{} using the options specified in the list \spad{options}. The graph point color is specified by \spad{ptColor},{} the graph line color is specified by \spad{lineColor},{} and t
395434`--he size of the points is specified by \spad{ptSize}.
395570`\spad{graphImage()} returns an empty graph with 0 point lists of the domain \spadtype{GraphImage}. A graph image contains the graph data component of a two dimensional viewport.
395613`\spad{graphs(v)} returns a vector,{} or list,{} which is a union of all the graphs,{} of the domain \spadtype{GraphImage},{} which are allocated for the two-dimensional viewport,{} \spad{v},{} of domain \spadtype{TwoDimensionalViewport}. Those graphs which have no data are labeled "undefined",{} otherwise their contents are shown.
395701`\spad{graphs n} is the cycle index of the group induced on \indented{1}{the edges of a graph by applying the symmetric function to the} \indented{1}{\spad{n} nodes.}
395788`\spad{graphState(v,{} num,{} sX,{} sY,{} dX,{} dY,{} pts,{} lns,{} box,{} axes,{} axesC,{} un,{} unC,{} cP)} sets the state of the characteristics for the graph indicated by \spad{num} in the given two-dimensional viewport \spad{v},{} of domain \spadtype{TwoDimensionalViewport},{} to the values given as parameters. Th
395788`--e scaling of the graph in the \spad{x} and \spad{y} component directions is set to be \spad{sX} and \spad{sY}; the window translation in the \spad{x} and \spad{y} component directions is set to be \spad{dX} and \spad{dY}; The graph points,{} lines,{} bounding \spad{box},{} \spad{axes},{} or units will be shown in the viewport if their given parameters \spad{pts},{} \spad{lns},{} \spad{box},{} \spad{axes} or \spad{un} are set to be \spad{1},{} but will not be shown if they are set to \spad{0}. 
395788`--The color of the \spad{axes} and the color of the units are indicated by the palette colors \spad{axesC} and \spad{unC} respectively. To display the control panel when the viewport window is displayed,{} set \spad{cP} to \spad{1},{} otherwise set it to \spad{0}.
395976`\spad{graphStates(v)} returns and shows a listing of a record containing the current state of the characteristics of each of the ten graph records in the given two-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{TwoDi
395976`--mensionalViewport}.
396249`\spad{green()} returns the position of the green hue from total hues.
396282`\spad{groebgen }\undocumented
396460`\spad{groebner(lp)} computes a Groebner basis for the ideal generated by the list of polynomials \spad{lp}.
396563`\spad{groebner(lp)} computes a Groebner basis for the ideal generated by \spad{lp} \spad{wrt} a lexicographic ordering.
396649`\spad{groebner(lp)} computes a groebner basis for a polynomial ideal generated by the list of polynomials \spad{lp}.
396737`\spad{groebner(lp)} returns the lexicographical Groebner basis of \spad{lp}. If \spad{lp} generates a zero-dimensional ideal then the {\em FGLM} strategy is used,{} otherwise the {\em Sugar} strategy is used.
396920`\spad{groebner(lp)} computes a Groebner basis for the ideal generated by the polynomials \spad{lp}.
396988`\spad{groebner(lq1)} returns the lexicographical Groebner basis of \spad{lq1}. If \spad{lq1} generates a zero-dimensional ideal then the {\em FGLM} strategy is used,{} otherwise the {\em Sugar} strategy is used.
397077`\spad{groebner(I)} returns a set of generators of \spad{I} that are a Groebner basis for \spad{I}.
397147`\spad{groebner?(I)} tests if the generators of the ideal \spad{I} are a Groebner basis.
397223`\spad{groebner(lp)} computes a groebner basis for a polynomial ideal generated by the list of polynomials \spad{lp}.
397310`\spad{groebner(lp,{} infoflag)} computes a groebner basis for a polynomial ideal generated by the list of polynomials \spad{lp}. Argument infoflag is used to get information on the computation. If infoflag is "info",{} then summary information is displayed for each \spad{s}-polynomial generated. If infoflag is "redcrit",{} the reduced critical pairs are displayed. If infoflag is any other string,{} no informat
397310`--ion is printed during computation.
397404`\spad{groebner(lp,{} "info",{} "redcrit")} computes a groebner basis for a polynomial ideal generated by the list of polynomials \spad{lp},{} displaying both a summary of the critical pairs considered (\spad{"info"}) and the result of reducing each critical pair ("redcrit"). If the second or third arguments have any other string value,{} the indicated information is suppressed.
397505`\spad{groebnerFactorize(listOfPolys)} returns a list of groebner bases. The union of their solutions is the solution of the system of equations given by {\em listOfPolys}. At each stage the polynomial \spad{p} under consideration (either from the given basis or obtained from a reduction of the next \spad{S}-polynomial) is factorized. For each irreducible factors of \spad{p},{} a new {\em c
397505`--reateGroebnerBasis} is started doing the usual updates with the factor in place of \spad{p}.
397620`\spad{groebnerFactorize(listOfPolys,{} info)} returns a list of groebner bases. The union of their solutions is the solution of the system of equations given by {\em listOfPolys}. At each stage the polynomial \spad{p} under consideration (either from the given basis or obtained from a reduction of the next \spad{S}-polynomial) is factorized. For each irreducible factors of \spad{p}
397620`--,{} a new {\em createGroebnerBasis} is started doing the usual updates with the factor in place of \spad{p}. If {\em info} is \spad{true},{} information is printed about partial results.
397743`\spad{groebnerFactorize(listOfPolys,{} nonZeroRestrictions)} returns a list of groebner basis. The union of their solutions is the solution of the system of equations given by {\em listOfPolys} under the restriction that the polynomials of {\em nonZeroRestrictions} don\spad{'t} vanish. At each stage the polynomial \spad{p} under consideration (either from the given basis or obta
397743`--ined from a reduction of the next \spad{S}-polynomial) is factorized. For each irreducible factors of \spad{p},{} a new {\em createGroebnerBasis} is started doing the usual updates with the factor in place of \spad{p}.
397869`\spad{groebnerFactorize(listOfPolys,{} nonZeroRestrictions,{} info)} returns a list of groebner basis. The union of their solutions is the solution of the system of equations given by {\em listOfPolys} under the restriction that the polynomials of {\em nonZeroRestrictions} don\spad{'t} vanish. At each stage the polynomial \spad{p} under consideration (either from the giv
397869`--en basis or obtained from a reduction of the next \spad{S}-polynomial) is factorized. For each irreducible factors of \spad{p} a new {\em createGroebnerBasis} is started doing the usual updates with the factor in place of \spad{p}. If argument {\em info} is \spad{true},{} information is printed about partial results.
398003`\spad{groebnerIdeal(polyList)} constructs the ideal generated by the list of polynomials \spad{polyList} which are assumed to be a Groebner basis. Note: this operation avoids a Groebner basis computation.
398087`\spad{groebSolve(lp,{} lv)} reduces the polynomial system \spad{lp} in variables \spad{lv} to triangular form. Algorithm based on groebner bases algorithm with linear algebra for change of ordering. Preprocessing for the general solver. The polynomials in input are of type \spadtype{DMP}.
398265`\spad{ground(l)} returns the ground part of \spad{l}.
398325`\spad{ground?(l)} yields \spad{true},{} if \spad{l} is an element of the ground domain \spad{D}.
398391`\spad{ground(exp)} is \spad{true},{} if \spad{exp} contains only fully evaluated parts.
398756`\spad{ground?(p)} tests if polynomial \spad{p} is a member of the coefficient ring.
398821`\spad{ground?(f)} tests if \spad{f} is an element of \spad{R}.
398874`\spad{ground(p)} retracts polynomial \spad{p} to the coefficient ring.
398932`\spad{ground(f)} returns \spad{f} as an element of \spad{R}. An error occurs if \spad{f} is not an element of \spad{R}.
398978`\spad{GT(x,{} y)} returns the \spadtype{Switch} expression representing \spad{x>y}.
399340`\spad{guess l} applies recursively \spadfun{guessRat} to the successive differences and quotients of the list. Default options as described in \spadtype{GuessOptionFunctions0} are used.
399882`\spad{guess(l,{} options)} applies recursively \spadfun{guessRat} to the successive differences and quotients of the list. The given options are used.
400622`\spad{guess(l,{} guessers,{} ops)} applies recursively the given \spad{guessers} to the successive differences if ops contains the symbol guessSum and quotients if ops contains the symbol guessProduct to the list. Default options as described in \spadtype{GuessOptionFunctions0} are used.
401674`\spad{guess(l,{} guessers,{} ops)} applies recursively the given \spad{guessers} to the successive differences if ops contains the symbol \spad{guessSum} and quotients if ops contains the symbol \spad{guessProduct} to the list. The given options are used.
402766`\spad{guessADE l} tries to find an algebraic differential equation for a generating function whose first Taylor coefficients are given by \spad{l},{} using the default options described in \spadtype{GuessOptionFunctions0}.
403256`\spad{guessADE q} returns a guesser that tries to find an algebraic differential equation for a generating function whose first Taylor coefficients are given by \spad{l},{} using the given options.
404278`\spad{guessADE(l,{} options)} tries to find an algebraic differential equation for a generating function whose first Taylor coefficients are given by \spad{l},{} using the given options.
404874`\spad{guessAlg l} tries to find an algebraic equation for a generating function whose first Taylor coefficients are given by \spad{l},{} using the default options described in \spadtype{GuessOptionFunctions0}. It is equivalent to \spadfun{guessADE}(\spad{l},{} maxDerivative \spad{==} 0).
405434`\spad{guessAlg(l,{} options)} tries to find an algebraic equation for a generating function whose first Taylor coefficients are given by \spad{l},{} using the given options. It is equivalent to \spadfun{guessADE}(\spad{l},{} options) with \spad{maxDerivative == 0}.
406048`\spad{guessAlgDep ll} tries to find an algebraic dependence between several power series whose first Taylor coefficients are given by members of \spad{ll},{} using the default options described in \spadtype{GuessOptionFunctions0}.
406662`\spad{guessAlgDep ll} tries to find an algebraic dependence between several power series whose first Taylor coefficients are given by members of \spad{ll},{} using the given options.
407390`\spad{guessBinRat q} returns a guesser that tries to find a function of the form \spad{n+}->qbinomial(a+b \spad{n},{} \spad{n}) \spad{r}(\spad{n}),{} where \spad{r}(\spad{q^n}) is a \spad{q}-rational function,{} that fits \spad{l}.
407640`\spad{guessBinRat(l,{} options)} tries to find a function of the form \spad{n+}->binomial(a+b \spad{n},{} \spad{n}) \spad{r}(\spad{n}),{} where \spad{r}(\spad{n}) is a rational function,{} that fits \spad{l}.
408145`\spad{guessBinRat q} returns a guesser that tries to find a function of the form \spad{n+}->qbinomial(a+b \spad{n},{} \spad{n}) \spad{r}(\spad{n}),{} where \spad{r}(\spad{q^n}) is a \spad{q}-rational function,{} that fits \spad{l}.
409094`\spad{guessBinRat(l,{} options)} tries to find a function of the form \spad{n+}->binomial(a+b \spad{n},{} \spad{n}) \spad{r}(\spad{n}),{} where \spad{r}(\spad{n}) is a rational function,{} that fits \spad{l}.
409290`\spad{guessBinRat(l,{} options)} tries to find a function of the form \spad{n+}->binomial(a+b \spad{n},{} \spad{n}) \spad{r}(\spad{n}),{} where \spad{r}(\spad{n}) is a rational function,{} that fits \spad{l}.
409994`\spad{guessExpRat q} returns a guesser that tries to find a function of the form \spad{n+}->(a+b \spad{q^n})\spad{^n} \spad{r}(\spad{q^n}),{} where \spad{r}(\spad{q^n}) is a \spad{q}-rational function,{} that fits \spad{l}.
410244`\spad{guessExpRat l} tries to find a function of the form \spad{n+}->(a+b \spad{n})\spad{^n} \spad{r}(\spad{n}),{} where \spad{r}(\spad{n}) is a rational function,{} that fits \spad{l}.
410749`\spad{guessExpRat q} returns a guesser that tries to find a function of the form \spad{n+}->(a+b \spad{q^n})\spad{^n} \spad{r}(\spad{q^n}),{} where \spad{r}(\spad{q^n}) is a \spad{q}-rational function,{} that fits \spad{l}.
411698`\spad{guessExpRat(l,{} options)} tries to find a function of the form \spad{n+}->(a+b \spad{n})\spad{^n} \spad{r}(\spad{n}),{} where \spad{r}(\spad{n}) is a rational function,{} that fits \spad{l}.
411894`\spad{guessExpRat(l,{} options)} tries to find a function of the form \spad{n+}->(a+b \spad{n})\spad{^n} \spad{r}(\spad{n}),{} where \spad{r}(\spad{n}) is a rational function,{} that fits \spad{l}.
412500`\spad{guessFE l} tries to find an algebraic substitution equation for a generating function whose first Taylor coefficients are given by \spad{l},{} using the default options described in \spadtype{GuessOptionFunctions0}.
413054`\spad{guessFE(l,{} options)} tries to find an algebraic substitution equation for a generating function whose first Taylor coefficients are given by \spad{l},{} using the given options.
413809`\spad{guessHolo l} tries to find an ordinary linear differential equation for a generating function whose first Taylor coefficients are given by \spad{l},{} using the default options described in \spadtype{GuessOptionFunctions0}. It is equivalent to \spadfun{guessADE}\spad{(l,{} maxPower == 1)}.
414304`\spad{guessHolo q} returns a guesser that tries to find a linear differential equation for a generating function whose first Taylor coefficients are given by \spad{l},{} using the given options.
415332`\spad{guessHolo(l,{} options)} tries to find an ordinary linear differential equation for a generating function whose first Taylor coefficients are given by \spad{l},{} using the given options. It is equivalent to \spadfun{guessADE}\spad{(l,{} options)} with \spad{maxPower == 1}.
415934`\spad{guessPade(l,{} options)} tries to find a rational function whose first Taylor coefficients are given by \spad{l},{} using the default options described in \spadtype{GuessOptionFunctions0}. It is equivalent to \spadfun{guessADE}\spad{(l,{} options)} with \spad{maxDerivative == 0,{} maxPower == 1,{} allDegrees == true}.
416500`\spad{guessPade(l,{} options)} tries to find a rational function whose first Taylor coefficients are given by \spad{l},{} using the given options. It is equivalent to \spadfun{guessADE}\spad{(l,{} maxDerivative == 0,{} maxPower == 1,{} allDegrees == true)}.
417263`\spad{guessPRec l} tries to find a linear recurrence with polynomial coefficients whose first values are given by \spad{l},{} using the default options described in \spadtype{GuessOptionFunctions0}. It is equivalent to \spadfun{guessRec}\spad{(l,{} maxPower == 1)}.
417758`\spad{guessPRec q} returns a guesser that tries to find a linear \spad{q}-recurrence with polynomial coefficients whose first values are given by \spad{l},{} using the given options. It is equivalent to \spadfun{guessRec}\spad{(q)} with \spad{maxPower == 1}.
418786`\spad{guessPRec(l,{} options)} tries to find a linear recurrence with polynomial coefficients whose first values are given by \spad{l},{} using the given options. It is equivalent to \spadfun{guessRec}\spad{(l,{} options)} with \spad{maxPower == 1}.
419546`\spad{guessRat l} tries to find a rational function whose first values are given by \spad{l},{} using the default options described in \spadtype{GuessOptionFunctions0}. It is equivalent to \spadfun{guessRec}\spad{(l,{} maxShift == 0,{} maxPower == 1,{} allDegrees == true)}.
420036`\spad{guessRat q} returns a guesser that tries to find a \spad{q}-rational function whose first values are given by \spad{l},{} using the given options. It is equivalent to \spadfun{guessRec} with \spad{(l,{} maxShift == 0,{} maxPower == 1,{} allDegrees == true)}.
421058`\spad{guessRat(l,{} options)} tries to find a rational function whose first values are given by \spad{l},{} using the given options. It is equivalent to \spadfun{guessRec}\spad{(l,{} maxShift == 0,{} maxPower == 1,{} allDegrees == true)}.
421814`\spad{guessRec l} tries to find an ordinary difference equation whose first values are given by \spad{l},{} using the default options described in \spadtype{GuessOptionFunctions0}.
422304`\spad{guessRec q} returns a guesser that finds an ordinary \spad{q}-difference equation whose first values are given by \spad{l},{} using the given options.
423326`\spad{guessRec(l,{} options)} tries to find an ordinary difference equation whose first values are given by \spad{l},{} using the given options.
423928`\spad{halfExtendedResultant1(a,{} b)} returns \spad{[r,{} ca]} such that \spad{extendedResultant(a,{} b)} returns \spad{[r,{} ca,{} cb]}
424057`\spad{halfExtendedResultant2(a,{} b)} returns \spad{[r,{} ca]} such that \spad{extendedResultant(a,{} b)} returns \spad{[r,{} ca,{} cb]}
424186`\spad{halfExtendedSubResultantGcd1(a,{} b)} returns \spad{[g,{} ca]} such that \spad{extendedSubResultantGcd(a,{} b)} returns \spad{[g,{} ca,{} cb]}
424316`\spad{halfExtendedSubResultantGcd1(a,{} b)} returns \spad{[g,{} ca]} if \spad{extendedSubResultantGcd(a,{} b)} returns \spad{[g,{} ca,{} cb]} otherwise produces an error.
424448`\spad{halfExtendedSubResultantGcd2(a,{} b)} returns \spad{[g,{} cb]} such that \spad{extendedSubResultantGcd(a,{} b)} returns \spad{[g,{} ca,{} cb]}
424578`\spad{halfExtendedSubResultantGcd2(a,{} b)} returns \spad{[g,{} cb]} if \spad{extendedSubResultantGcd(a,{} b)} returns \spad{[g,{} ca,{} cb]} otherwise produces an error.
424710`\spad{hankelDeterminant(x,{} n)} returns the \spad{n}th Hankel determinant of the sequence \spad{x}.
424795`\spad{hankelDeterminants(x)} returns the stream of hankel determinants of the distribution \spad{x}.
424868`\spad{hankelH1(v,{} z)} is first Hankel function (Bessel function of the third kind)
424931`\spad{hankelH1(v,{} z)} is first Hankel function (Bessel function of the third kind).
424990`\spad{hankelH2(v,{} z)} is the second Hankel function (Bessel function of the third kind)
425053`\spad{hankelH2(v,{} z)} is the second Hankel function (Bessel function of the third kind).
425112`\spad{HankelMatrix([a_0,{} a_1,{} a_2,{} ...,{} a_{2n}])} builds the Hankel matrix [ \spad{a0},{} \spad{a1},{} ...,{} an ] [ \spad{a1},{} \spad{a2},{} ... ] [ ... ] [ an,{} ...,{} a2n]
425177`\spad{harmonic(n)} returns the \spad{n}th harmonic number. This is \spad{H[n] = sum(1/k,{} k=1..n)}.
425258`\spad{has?(op,{} s)} tests if property \spad{s} is attached to \spad{op}.
425312`\spad{hasDimension?(c)} returns \spad{true} if \spad{c} is of positive dimension (that is one-dimensional),{} otherwise hasDimension?(\spad{c}) returns \spad{false}
425383`\spad{hasDimension?(c)} returns \spad{true} if \spad{c} is of positive dimension. Otherwise hasDimension?(\spad{c}) returns \spad{false}.
425547`\spad{hash(s)} calculates a hash code for \spad{s}.
425598`\spad{hasHi(s)} tests whether the segment \spad{s} has an upper bound.
425720`\spad{hashUpdate!(hs,{} s)} computes new HashState from old and \spad{s} used for incremental computation of hash values. hashUpdate! might destructively work on its first argument.
425784`\spad{hasoln(g,{} l)} tests whether the quasi-algebraic set defined by \spad{p} = 0 for \spad{p} in \spad{g} and \spad{q} \spad{~=} 0 for \spad{q} in \spad{l} is empty or not and returns a simplified definition of the quasi-algebraic set
425914`\spad{has_op?(f,{} s)} returns \spad{true} is \spad{f} is a composite from with operator \spad{s},{} otherwise returns \spad{false}
425981`\spad{hasPredicate?(p)} tests if \spad{p} has predicates attached to it.
426034`\spad{hasSolution?(A,{} B)} tests if the linear system \spad{AX = B} has a solution.
426122`\spad{hasSolution?(A,{} B)} tests if the linear system \spad{AX = B} has a solution.
426205`\spad{hasTopPredicate?(p)} tests if \spad{p} has a top-level predicate.
426261`\spad{Hausdorff(a,{} b,{} n)} returns log(exp(a)*exp(\spad{b})) truncated at order \spad{n}.
426361`\spad{hclf(x,{} y)} returns the highest common left factor of \spad{x} and \spad{y},{} \spadignore{i.e.} the largest \spad{d} such that \spad{x = d a} and \spad{y = d b}.
426406`\spad{hconcat(u)} horizontally concatenates all forms in list \spad{u}.
426454`\spad{hconcat(f,{} g)} horizontally concatenate forms \spad{f} and \spad{g}.
426499`\spad{hcrf(x,{} y)} returns the highest common right factor of \spad{x} and \spad{y},{} \spadignore{i.e.} the largest \spad{d} such that \spad{x = a d} and \spad{y = b d}.
426544`\spad{hdmpToDmp(p)} converts \spad{p} from a \spadtype{HDMP} to a \spadtype{DMP}.
426677`\spad{hdmpToP(p)} converts \spad{p} from a \spadtype{HDMP} to a \spadtype{POLY}.
426841`\spad{head(l)} returns the first element of a doubly-linked aggregate \spad{l}. Error: if \spad{l} is empty.
426894`\spad{head(p)} returns \spad{p} if \spad{p} belongs to \spad{R},{} otherwise returns its leading term (monomial in the FriCAS sense),{} where \spad{p} is viewed as a univariate polynomial in its main variable.
427087`\spad{headReduce(a,{} b)} returns a polynomial \spad{r} such that \spad{headReduced?(r,{} b)} holds and there exists an integer \spad{e} such that \spad{init(b)^e a - r} is zero modulo \spad{b}.
427159`\spad{headReduce(p,{} ts)} returns a polynomial \spad{r} such that \spad{headReduce?(r,{} ts)} holds and there exists some product \spad{h} of \spad{initials(ts)} such that \spad{h*p - r} lies in the ideal generated by \spad{ts}.
427294`\spad{headReduced?(ts)} returns \spad{true} iff the head of every element of \spad{ts} is reduced \spad{w}.\spad{r}.\spad{t} to any other element of \spad{ts}.
427593`\spad{headReduced?(a,{} b)} returns \spad{true} iff \spad{degree(head(a),{} mvar(b)) < mdeg(b)}.
427672`\spad{headReduced?(q,{} lp)} returns \spad{true} iff \spad{headReduced?(q,{} p)} holds for every \spad{p} in \spad{lp}.
427757`\spad{headReduced?(p,{} ts)} returns \spad{true} iff the head of \spad{p} is reduced \spad{w}.\spad{r}.\spad{t}. \spad{ts}.
427920`\spad{headRemainder(a,{} ps)} returns \spad{[b,{} r]} such that the leading monomial of \spad{b} is reduced in the sense of Groebner bases \spad{w}.\spad{r}.\spad{t}. \spad{ps} and \spad{r*a - b} lies in the ideal generated by \spad{ps}.
428033`\spad{heap(ls)} creates a heap of elements consisting of the elements of \spad{ls}.
428074`\spad{heapSort(f,{} agg)} sorts the aggregate agg with the ordering function \spad{f} using the heapsort algorithm.
428150`\spad{height(k)} returns the nesting level of \spad{k}.
428266`\spad{height(p)} returns the maximal absolute value of the coefficients of the polynomial \spad{p}.
428337`\spad{height(f)} returns the highest nesting level appearing in \spad{f}. Constants have height 0. Symbols have height 1. For any operator op and expressions \spad{f1},{} ...,{} \spad{fn},{} \spad{op(f1,{} ...,{} fn)} has height equal to \spad{1 + max(height(f1),{} ...,{} height(fn))}.
428399`\spad{henselFact(p,{} sqf)} returns the factorization of \spad{p},{} the result is a Record such that \spad{contp=}content \spad{p},{} \spad{factors=}List of irreducible factors of \spad{p} with exponent. If \spad{sqf=true} the polynomial is assumed to be square free (\spadignore{i.e.} without repeated factors).
428527`\spad{HenselLift(pol,{} lfacts,{} prime,{} bound)} lifts \spad{lfacts},{} that are the factors of \spad{pol} mod \spad{prime},{} to factors of \spad{pol} mod prime^k > bound. No recombining is done .
428647`one step of Hensel lifting
428731`\spad{hermite(n)} returns the \spad{n}th Hermite polynomial \spad{H[n](x)}. Note: Hermite polynomials,{} denoted \spad{H[n](x)},{} are computed from the two term recurrence. The generating function is: \spad{exp(2*t*x-t^2) = sum(H[n](x)*t^n/n!,{} n=0..infinity)}.
428832`\spad{hermite(m)} returns the Hermite normal form of the matrix \spad{m}.
428890`\spad{hermiteH(n,{} z)} is the Hermite polynomial
428953`\spad{hermiteH(n,{} z)} is the Hermite polynomial
429012`\spad{hermiteH(n,{} x)} is the \spad{n}-th Hermite polynomial,{} \spad{H[n](x)}. These are defined by \spad{exp(2*t*x-t^2) = sum(H[n](x)*t^n/n!,{} n = 0..)}.
429094`\spad{HermiteIntegrate(f,{} D)} returns \spad{[g,{} h,{} s,{} p]} such that \spad{f = Dg + h + s + p},{} \spad{h} has a squarefree denominator normal \spad{w}.\spad{r}.\spad{t}. \spad{D},{} and all the squarefree factors of the denominator of \spad{s} are special \spad{w}.\spad{r}.\spad{t}. \spad{D}. Furthermore,{} \spad{h} and
429094`-- \spad{s} have no polynomial parts. \spad{D} is the derivation to use on \spadtype{UP}.
429272`\spad{HermiteIntegrate(f,{} ')} returns \spad{[g,{} h]} such that \spad{f = g' + h} and \spad{h} has a only simple finite normal poles.
429385`\spad{HermiteIntegrate(f,{} D,{} d0)} returns \spad{[g,{} h,{} s,{} p]} such that \spad{f = Dg + g*d0 + h + s + p},{} \spad{h} has a squarefree denominator normal \spad{w}.\spad{r}.\spad{t}. \spad{D},{} and all the squarefree factors of the denominator of \spad{s} are special \spad{w}.\spad{r}.\spad{t}. \spad{D}. Furthermore
429385`--,{} \spad{h} and \spad{s} have no polynomial parts. \spad{D} is the derivation to use on \spadtype{UP}.
429566`\spad{HermiteIntegrate(f,{} ',{} d0)} returns \spad{[g,{} h]} such that \spad{f = g' + d0*g + h} and \spad{h} has a only simple finite normal poles. Note: \spad{d0} must be integral.
429681`\spad{hessian(v,{} xlist)} computes the hessian,{} the matrix of second partial derivatives,{} of the scalar field \spad{v},{} \spad{v} a function of the variables listed in xlist.
429769`\spad{hex(r)} converts a rational number to a hexadecimal expansion.
429832`\spad{hexDigit()} returns the class of all characters for which \spadfunFrom{hexDigit?}{Character} is \spad{true}.
429877`\spad{hexDigit?(c)} tests if \spad{c} is a hexadecimal numeral,{} \spadignore{i.e.} one of 0..9,{} a..\spad{f} or A..\spad{F}.
429925`\spad{\spad{hi}(s)} returns the second endpoint of \spad{s}. Note: \spad{\spad{hi}(l..h) = h}.
429969`\spad{high(s)} returns the second endpoint of \spad{s}. Note: \spad{high(l..h) = h}.
430015`\spad{highCommonTerms(e1 a1 + ... + en an,{} f1 b1 + ... + fm bm)} returns \indented{2}{\spad{reduce(+,{} [max(\spad{ei},{} \spad{fi}) \spad{ci}])}} where \spad{ci} ranges in the intersection of \spad{{a1,{} ...,{} an}} and \spad{{b1,{} ...,{} bm}}.
430115`\spad{hilbert(cc)} computes the Hilbert polynomial to the Cartan characters \spad{cc}.
430233`\spad{hitherPlane(v,{} h)} sets the hither clipping plane of the graph to \spad{h},{} for the viewport \spad{v},{} which is of the domain \spadtype{ThreeDimensionalViewport}.
430301`\spad{hMonic }\undocumented
430382`\spad{hMonic(p)} tries to remove content from \spad{p}
430456`\spad{homogeneous?(p)} tests if all of the terms of \spad{p} have the same degree.
430514`\spad{homogeneous?(df)} tests if all of the terms of differential form \spad{df} have the same degree.
430590`\spad{homogeneous returns} whether we allow only homogeneous algebraic differential equations,{} default being \spad{false}
430690`\spad{homogeneous(d)} specifies whether we allow only homogeneous algebraic differential equations. This option is expressed in the form \spad{homogeneous == d}. If \spad{true},{} then maxPower must be set,{} too,{} and ADEs with constant total degree are allowed. If a PositiveInteger is given,{} only ADE\spad{'s} with this total degree are allowed.
430841`\spad{horizConcat(l)} horizontally concatenates all members of \spad{l} Error: if the arrays do not have the same number of rows.
430993`\spad{horizConcat(x,{} y)} horizontally concatenates two arrays with an equal number of rows. The entries of \spad{y} appear to the right of the entries of \spad{x}. Error: if the arrays do not have the same number of rows.
431070`\spad{horizJoin(A,{} B)} horizontally concats the matrices \spad{A} and \spad{B}. It is assumed that all indices of \spad{B} are smaller than those of \spad{A}.
431131`\spad{horizSplit(A,{} c)} splits the matrix \spad{A} into two at the column given by \spad{c}. The first column of the right matrix is enumerated by the first index less or equal to \spad{c}.
431405`\spad{horizSplit(a,{} [n1,{} n2,{} ...,{} \spad{ni}])} splits a into arrays having \spad{n1},{} ...,{} \spad{ni} columns. Error: if number of columns of a is different than \spad{n1} + ... + \spad{ni}.
431509`\spad{horizSplit(a,{} n)} splits a into \spad{n} arrays of equal size column wise. Error: if number of columns of a is not divisible by \spad{n}.
431604`+ hp_solve(\spad{lv},{} eta,{} \spad{K}) solves Hermite-Pade problem with degree + bound eta up to order \spad{K}.
431816`\spad{HP_solve(l,{} degs,{} kind,{} sigma,{} gen check)} finds a \spad{sigma} basis with degree bounds given by \spad{degs}. It returns \spad{false} if there is no interpolating vector that is correct up to (
431816`--and including) \spad{z^}(\spad{sigma}-1) with \spad{sigma} \spad{>=} |degs+[1,{} 1,{} ...,{} 1]| or if check rejects all solutions. It returns \spad{true} if it can not handle given problem.
432115`Fake solver over algebraic numbers.
432440`implements HP_solve over integers.
432751`implements HP_solve over \$\spad{Z_p}\$ with machine-sized \$\spad{p}\$.
433060`implements HP_solve over integer polynomials.
433414`Fake solver over polynomials having algebraic coefficients.
433793`\spad{hspace(n)} creates white space of width \spad{n}.
433839`\spad{htrigs(f)} converts all the exponentials in \spad{f} into hyperbolic sines and cosines.
433900`\spad{hue(pt)} returns the third element of the two dimensional point,{} \spad{pt},{} although no assumptions are made with regards as to how the components of higher dimensional points are interpreted. This function is defined for the convenience of the user using specifically,{} hue to express a third dimension.
433948`\spad{hue(p)} returns the hue field of the indicated palette \spad{p}.
433986`\spad{hue(c)} returns the hue index of the indicated color \spad{c}.
434024`\spad{hyperelliptic()} returns \spad{p(x)} if the curve is the hyperelliptic defined by \spad{y^2 = p(x)},{} "failed" otherwise.
434111`\spad{hyperelliptic()} returns \spad{p(x)} if the curve is the hyperelliptic defined by \spad{y^2 = p(x)},{} "failed" otherwise.
434195`\spad{hypergeometric0F1(c,{} z)} is the hypergeometric function \spad{0F1(; c; z)}.
434321`\spad{hypergeometric0F1(c,{} z)} is the hypergeometric function \spad{0F1(; c; z)}.
434420`\spad{hypergeometricF(la,{} lb,{} z)} is the generalized hypergeometric function
434533`\spad{hypergeometricF(la,{} lb,{} z)} is the generalized hypergeometric function.
434644`Constructs a \spad{I} combinator
434686`\spad{iAiryAi(x)} should be local but conditional.
434746`\spad{iAiryAiPrime(x)} should be local but conditional.
434811`\spad{iAiryBi(x)} should be local but conditional.
434871`\spad{iAiryBiPrime(x)} should be local but conditional.
434936`\spad{iCompose(f,{} g)} returns \spad{f(g(x))}. This is an internal function which should only be called for Taylor series \spad{f(x)} and \spad{g(x)} such that the constant coefficient of \spad{g(x)} is zero.
435010`\spad{id x} is \spad{x}.
435053`\spad{ideal([f1,{} ...,{} fn])} returns the ideal \spad{(f1,{} ...,{} fn)}.
435115`\spad{ideal(D)} returns the ideal corresponding to a divisor \spad{D}.
435216`\spad{ideal(polyList)} constructs the ideal generated by the list of polynomials \spad{polyList}.
435292`\spad{idealiser(m1,{} m2)} computes the order of an ideal defined by \spad{m1} and \spad{m2}
435376`\spad{idealiser(m1,{} m2,{} d)} computes the order of an ideal defined by \spad{m1} and \spad{m2} where \spad{d} is the known part of the denominator
435462`\spad{idealiserMatrix(m1,{} m2)} returns the matrix representing the linear conditions on the Ring associatied with an ideal defined by \spad{m1} and \spad{m2}.
435552`\spad{idealSimplify(s)} returns a different and presumably simpler representation of \spad{s} with the defining polynomials for the equations forming a groebner basis,{} and the defining polynomial for the inequation reduced with respect to the basis,{} using Buchberger\spad{'s} algorithm.
435626`\spad{identification(g,{} h)} returns the list of equations \spad{g_i = h_i},{} where \spad{g_i} (resp. \spad{h_i}) are exponential coordinates of \spad{g} (resp. \spad{h}).
435714`\spad{identity()} returns the identity element which is do nothing transform
435759`\spad{identity()} create the identity dhmatrix
435816`\spad{identityMatrix(n)} create an identity matrix we note that this must be square
435907`\spad{identitySquareMatrix(s,{} p)} \undocumented{}
436084`\spad{iexactQuo(x,{} y)} should be local but conditional
436156`\spad{iexactQuo(x,{} y)} should be local but conditional
436227`\spad{iexactQuo(x,{} y)} should be local but conditional
436317`\spad{iexactQuo(x,{} y)} should be local but conditional
436406`\spad{iExquo(f,{} g,{} taylor?)} is the quotient of the power series \spad{f} and \spad{g}. If \spad{taylor?} is \spad{true},{} then we must have \spad{order(f) >= order(g)}.
436502`\spad{ignore?(s)} is \spad{true} if \spad{s} is the string that tells the integrator to assume that the function has no pole in the integration interval.
436572`\spad{iiabs(x)} should be local but conditional.
436630`\spad{iiacos(x)} should be local but conditional
436682`\spad{iiacosh(x)} should be local but conditional
436735`\spad{iiacot(x)} should be local but conditional
436787`\spad{iiacoth(x)} should be local but conditional
436840`\spad{iiacsc(x)} should be local but conditional
436892`\spad{iiacsch(x)} should be local but conditional
436945`\spad{iiAiryAi(x)} should be local but conditional.
437006`\spad{iiAiryAiPrime(x)} should be local but conditional.
437072`\spad{iiAiryBi(x)} should be local but conditional.
437133`\spad{iiAiryBiPrime(x)} should be local but conditional.
437199`\spad{iiasec(x)} should be local but conditional
437251`\spad{iiasech(x)} should be local but conditional
437304`\spad{iiasin(x)} should be local but conditional
437356`\spad{iiasinh(x)} should be local but conditional
437409`\spad{iiatan(x)} should be local but conditional
437461`\spad{iiatanh(x)} should be local but conditional
437514`\spad{iiBesselI(x)} should be local but conditional.
437582`\spad{iiBesselJ(x)} should be local but conditional.
437650`\spad{iiBesselK(x)} should be local but conditional.
437718`\spad{iiBesselY(x)} should be local but conditional.
437786`\spad{iiBeta(x)} should be local but conditional.
437851`\spad{iibinom(l)} should be local but conditional.
437913`\spad{iicos(x)} should be local but conditional
437964`\spad{iicosh(x)} should be local but conditional
438016`\spad{iicot(x)} should be local but conditional
438067`\spad{iicoth(x)} should be local but conditional
438119`\spad{iicsc(x)} should be local but conditional
438170`\spad{iicsch(x)} should be local but conditional
438222`\spad{iidigamma(x)} should be local but conditional.
438284`\spad{iidprod(l)} should be local but conditional.
438346`\spad{iidsum(l)} should be local but conditional.
438407`\spad{iiexp(x)} should be local but conditional
438458`\spad{iifact(x)} should be local but conditional.
438513`\spad{iiGamma(x)} should be local but conditional.
438573`\spad{iiHypergeometricF(l)} should be local but conditional.
438649`\spad{iilog(x)} should be local but conditional
438700`should be local but conditional
438772`\spad{iiperm(l)} should be local but conditional.
438833`\spad{iipolygamma(x)} should be local but conditional.
438903`\spad{iiPolylog(x,{} s)} should be local but conditional.
438967`\spad{iipow(l)} should be local but conditional.
439027`should be local but conditional
439127`\spad{iisec(x)} should be local but conditional
439178`\spad{iisech(x)} should be local but conditional
439230`\spad{iisin(x)} should be local but conditional
439281`\spad{iisinh(x)} should be local but conditional
439333`\spad{iisqrt2()} should be local but conditional
439385`\spad{iisqrt3()} should be local but conditional
439437`\spad{iitan(x)} should be local but conditional
439488`\spad{iitanh(x)} should be local but conditional
439540`\spad{iLambertW(x)} should be local but conditional.
439602`\spad{imag(x)} returns imaginary part of \spad{x}.
439648`\spad{imag(f)} returns the imaginary part of \spad{f} where \spad{f} is a complex function.
439725`\spad{imag(f)} returns the imaginary part of \spad{f} where \spad{f} is a complex function.
439783`\spad{imagE(o)} extracts the imaginary \spad{E} part of octonion \spad{o}.
439831`\spad{imagI(o)} extracts the imaginary \spad{I} part of octonion \spad{o}.
439879`\spad{imagi(o)} extracts the \spad{i} part of octonion \spad{o}.
439927`\spad{imagI(q)} extracts the imaginary \spad{i} part of quaternion \spad{q}.
440024`\spad{imaginary()} = sqrt(\spad{-1}) = \%\spad{i}.
440074`\spad{imagJ(o)} extracts the imaginary \spad{J} part of octonion \spad{o}.
440122`\spad{imagj(o)} extracts the \spad{j} part of octonion \spad{o}.
440170`\spad{imagJ(q)} extracts the imaginary \spad{j} part of quaternion \spad{q}.
440220`\spad{imagK(o)} extracts the imaginary \spad{K} part of octonion \spad{o}.
440268`\spad{imagk(o)} extracts the \spad{k} part of octonion \spad{o}.
440316`\spad{imagK(q)} extracts the imaginary \spad{k} part of quaternion \spad{q}.
440366`\spad{implies(a,{} b)} returns the logical implication of ILogic a and \spad{b}. a is premise,{} \spad{b} is conclusion,{} result is \spad{false} (contradiction) if premise=true and conclusion=false does not mean there is a causal connection
440407`\spad{implies(a,{} b)} returns the logical implication of Boolean \spad{a} and \spad{b}.
440449`\spad{in?(I,{} J)} tests if the ideal \spad{I} is contained in the ideal \spad{J}.
440522`\spad{inBounds?(pt,{} mns,{} mxs)} returns \spad{true} if \spad{pt} is inside bounding box where bounding box is specified by min and max.
440581`\spad{inc(x)} returns \spad{x + 1}.
440628`\spad{incFail(s,{} o)} is an internal function that steps the number of failed tests and records in- and output.
440696`\spad{incFatal s} is an internal function that steps the number of fatal tests and records input.
440748`\spad{incidenceMatrix(s)} represents graph \spad{s} by a matrix of size \spad{|V|} by |E| where: V=number of vertices E=number of edges entry [vertex,{} arrow] = arrow endpoint data (undirected case case: 1 - incident,{} 0 - not incident,{} directed case: \spad{-1} - start,{} 1 - end,{} 0 - not incident).
440879`incLibraryError is an internal function that steps the number of failed tests,{} but not the number of tests.
440955`inconsistant?(\spad{pl}) returns \spad{true} if the system of equations \spad{p} = 0 for \spad{p} in \spad{pl} is inconsistent. It is assumed that \spad{pl} is a groebner basis.
441045`inconsistant?(\spad{pl}) returns \spad{true} if the system of equations \spad{p} = 0 for \spad{p} in \spad{pl} is inconsistent. It is assumed that \spad{pl} is a groebner basis.
441146`incPass is an internal function that steps the number of passed tests.
441191`\spad{incr(s)} returns \spad{n},{} where \spad{s} is a segment in which every \spad{n}\spad{-}th element is used. Note: \spad{incr(l..h by n) = n}.
441243`\spad{increasePrecision(n)} increases the current \spadfunFrom{precision}{FloatingPointSystem} by \spad{n} decimal digits.
441348`\spad{increment()} produces a function which adds \spad{1} to whatever argument it is given. For example,{} if {\spad{f} \spad{:=} increment()} then \spad{f x} is \spad{x+1}.
441403`\spad{incrementBy(n)} produces a function which adds \spad{n} to whatever argument it is given. For example,{} if {\spad{f} \spad{:=} increment(\spad{n})} then \spad{f x} is \spad{x+n}.
441461`\spad{incrementKthElement(S,{} k)} increments the \spad{k^}{th} element of \spad{S},{} and returns "failed" if the result is not a set of \spad{M} integers in \spad{1..n} any more.
441564`\spad{incXfFail()} is an internal function that steps the number expected failures.
441611`like incFatal,{} but for expected failures.
441665`like incLibraryError,{} but using expected failures.
441743`\spad{incXfPass(s,{} o)} is an internal function that steps the number of tests that passed but were expected to fail and records in- and output.
441813`\spad{inDegree(s,{} a)} gives the number of arrows leading in to node 'a' in graph \spad{'s'}
441974`\spad{indentFortLevel(i)}
442037`\spad{index(x)} \undocumented
442090`\spad{index(jv)} yields number of the jet variable \spad{jv}.
442359`\spad{index(i)} takes a positive integer \spad{i} less than or equal to \spad{size()} and returns the \spad{i}\spad{-}th element of the set. This operation establishs a bijection between the elements of the finite set and \spad{1..size()}.
442592`\spad{index(n,{} m)} is a index function for vectors of length \spad{n} over the ground field.
442693`\spad{index?(i,{} u)} tests if \spad{i} is an index of aggregate \spad{u}.
442764`\spad{indexes(me)} returns indexes into pointList(\spad{me})
442836`\spad{indexName returns} the name of the index variable used for the formulas,{} default being \spad{n}
442910`\spad{indexName(d)} specifies the index variable used for the formulas. This option is expressed in the form \spad{indexName == d}.
443140`\spad{indices(u)} returns a list of indices of aggregate \spad{u} in no particular order.
443210`\spad{indiceSubResultant(P,{} Q,{} i)} returns the subresultant of indice \spad{i}
443312`\spad{indiceSubResultant(P,{} Q,{} i)} returns the subresultant \spad{S_i(P,{} Q)} and carries out the equality \spad{coef1*P + coef2*Q = S_i(P,{} Q)}
443466`\spad{indicialEquation(op,{} a)} returns the indicial equation of \spad{op} at \spad{a}.
443533`\spad{indicialEquation(op,{} a)} returns the indicial equation of \spad{op} at \spad{a}.
443601`\spad{indicialEquationAtInfinity op} returns the indicial equation of \spad{op} at infinity.
443717`\spad{indicialEquationAtInfinity op} returns the indicial equation of \spad{op} at infinity.
443836`\spad{indicialEquations op} returns \spad{[[d1,{} e1],{} ...,{} [dq,{} eq]]} where the \spad{d_i}\spad{'s} are the affine singularities of \spad{op},{} and the \spad{e_i}\spad{'s} are the indicial equations at each \spad{d_i}.
443935`\spad{indicialEquations op} returns \spad{[[d1,{} e1],{} ...,{} [dq,{} eq]]} where the \spad{d_i}\spad{'s} are the affine singularities of \spad{op},{} and the \spad{e_i}\spad{'s} are the indicial equations at each \spad{d_i}.
444035`\spad{indicialEquations(op,{} p)} returns \spad{[[d1,{} e1],{} ...,{} [dq,{} eq]]} where the \spad{d_i}\spad{'s} are the affine singularities of \spad{op} above the roots of \spad{p},{} and the \spad{e_i}\spad{'s} are the indicial equations at each \spad{d_i}.
444138`\spad{indicialEquations(op,{} p)} returns \spad{[[d1,{} e1],{} ...,{} [dq,{} eq]]} where the \spad{d_i}\spad{'s} are the affine singularities of \spad{op} above the roots of \spad{p},{} and the \spad{e_i}\spad{'s} are the indicial equations at each \spad{d_i}.
444240`\spad{inf(u)} returns the infinum of \spad{u}.
444286`\spad{infieldint(f)} returns \spad{g} such that \spad{g' = f} or "failed" if the integral of \spad{f} is not a rational function.
444382`\spad{infieldIntegrate(f,{} x)} returns a fraction \spad{g} such that \spad{dg/dx = f} if \spad{g} exists,{} "failed" otherwise.
444518`\spad{infinite?(x)} tests if \spad{x} is infinite.
444578`\spad{infinite?(x)} tests if \spad{x} is +infinity or -infinity,{}
444637`\spad{infiniteProduct(f(x))} computes \spad{product(n=1,{} 2,{} 3...,{} f(x^n))}. The series \spad{f(x)} should have constant coefficient 1.
444711`\spad{infinity()} returns infinity.
444763`\spad{infinity()} returns infinity.
444827`\spad{infinityNorm(f)} returns the maximal absolute value of the coefficients of the polynomial \spad{f}.
444904`\spad{infix?(op)} returns \spad{true} if \spad{op} is an infix operator,{} and \spad{false} otherwise.
444950`\spad{infix(f,{} l)} creates a form depicting the \spad{n}-ary application of infix operation \spad{f} to a tuple of arguments \spad{l}.
444999`\spad{infix(op,{} a,{} b)} creates a form which prints as: a \spad{op} \spad{b}.
445045`\spad{infLex?(n1,{} n2,{} o1,{} o2)} returns \spad{true} iff \spad{o1(value(n1),{} value(n2))} or \spad{value(n1) = value(n2)} and \spad{o2(condition(n1),{} condition(n2))}.
445275`\spad{infRittWu?(a,{} b)} returns \spad{true} if \spad{a} is less than \spad{b} \spad{w}.\spad{r}.\spad{t}. the Ritt and Wu Wen Tsun ordering using the refinement of Lazard.
445352`\spad{infRittWu?(ts1,{} ts2)} returns \spad{true} iff \spad{ts2} has higher rank than \spad{ts1} in Wu Wen Tsun sense.
445425`\spad{infRittWu?(lp1,{} lp2)} is an internal subroutine,{} exported only for developement.
445511`\spad{infRittWu?(lp1,{} lp2)} is an internal subroutine,{} exported only for developement.
445607`\spad{infsum(x)} computes sum of all elements of \spad{x}. Degrees of elements of \spad{x} must be nondecreasing and tend to infinity.
445698`\spad{inGroundField?(a)} tests whether an element \spad{a} is already in the ground field \spad{F}.
445759`\spad{inHallBasis?(numberOfGens,{} leftCandidate,{} rightCandidate,{} left)} tests to see if a new element should be added to the \spad{P}. Hall basis being constructed. The list \spad{[leftCandidate,{} wt,{} rightCandidate]} is included in the basis if in the unique factorization of \spad{rightCandidate},{} we have left factor leftOfRight,{} and leftOfRight \spad{<=} \spad{leftCandidate}
446030`\spad{init()} chooses an initial object for stepping.
446127`\spad{init(p)} returns an error if \spad{p} belongs to \spad{R},{} otherwise returns its leading coefficient,{} where \spad{p} is viewed as a univariate polynomial in its main variable.
446190`\spad{initial constructs} a graph without vertices or edges
446301`\spad{initial(p)} returns the leading coefficient when the differential polynomial \spad{p} is written as a univariate polynomial in its leader.
446372`\spad{initializeGroupForWordProblem(gp)} initializes the group {\em gp} for the word problem. Notes: it calls the other function of this name with parameters 0 and 1: {\em initializeGroupForWordProblem(gp,{} 0,{} 1)}. Notes: (1) be careful: invoking this routine will destroy the possibly information about your group (but will recompute it again) (2) users need not call this function normally for the soultion of the word problem.
446447`\spad{initializeGroupForWordProblem(gp,{} m,{} n)} initializes the group {\em gp} for the word problem. Notes: (1) with a small integer you get shorter words,{} but the routine takes longer than the standard routine for longer words. (2) be careful: invoking this routine will destroy the possibly stored information about your group (but will recompute it again). (3) users need not call this function normally for 
446447`--the soultion of the word problem.
446678`\spad{initiallyReduce(a,{} b)} returns a polynomial \spad{r} such that \spad{initiallyReduced?(r,{} b)} holds and there exists an integer \spad{e} such that \spad{init(b)^e a - r} is zero modulo \spad{b}.
446755`\spad{initiallyReduce(p,{} ts)} returns a polynomial \spad{r} such that \spad{initiallyReduced?(r,{} ts)} holds and there exists some product \spad{h} of \spad{initials(ts)} such that \spad{h*p - r} lies in the ideal generated by \spad{ts}.
446900`\spad{initiallyReduced?(ts)} returns \spad{true} iff for every element \spad{p} of \spad{ts} \spad{p} and all its iterated initials are reduced \spad{w}.\spad{r}.\spad{t}. to the other elements of \spad{ts} with the same main variable.
447219`\spad{initiallyReduced?(a,{} b)} returns \spad{false} iff there exists an iterated initial of \spad{a} which is not reduced \spad{w}.\spad{r}.\spad{t} \spad{b}.
447303`\spad{initiallyReduced?(q,{} lp)} returns \spad{true} iff \spad{initiallyReduced?(q,{} p)} holds for every \spad{p} in \spad{lp}.
447393`\spad{initiallyReduced?(p,{} ts)} returns \spad{true} iff \spad{p} and all its iterated initials are reduced \spad{w}.\spad{r}.\spad{t}. to the elements of \spad{ts} with the same main variable.
447537`\spad{initials(ts)} returns the list of the non-constant initials of the members of \spad{ts}.
447605`\spad{initTable!()} initializes the hash-table.
447678`\spad{innerEigenvectors(m,{} eps,{} factor)} computes explicitly the eigenvalues and the correspondent eigenvectors of the matrix \spad{m}. The parameter \spad{eps} determines the type of the output,{} factor is the univariate factorizer used to reduce the characteristic polynomial into 
447678`--irreducible factors.
447897`\spad{innerint(f,{} x,{} a,{} b,{} ignore?)} should be local but conditional
448121`\spad{innerSolve1(p,{} eps)} returns the list of the zeros of the polynomial \spad{p} with precision eps.
448215`\spad{innerSolve1(up,{} eps)} returns the list of the zeros of the univariate polynomial \spad{up} with precision eps.
448325`\spad{innerSolve(lnum,{} lden,{} lvar,{} eps)} returns a list of solutions of the system of polynomials \spad{lnum},{} with the side condition that none of the members of \spad{lden} vanish identically on any solution. Each solution is expressed as a list corresponding to the list of variables in \spad{lvar} and with precision specified by eps.
448463`\spad{input(op)} returns the "\%input" property of \spad{op} if it has one attached,{} "failed" otherwise.
448548`\spad{input(op,{} foo)} attaches foo as the "\%input" property of \spad{op}. If \spad{op} has a "\%input" property \spad{f},{} then \spad{op(a1,{}...,{}an)} gets converted to InputForm as \spad{f(a1,{} ...,{} an)}.
448620`\spad{inR?(p)} tests if \spad{p} is an atom (\spadignore{i.e.} an element of \spad{R}).
448664`\spad{inRadical?(f,{} I)} tests if some power of the polynomial \spad{f} belongs to the ideal \spad{I}.
448747`\spad{inrootof(p,{} x)} should be a non-exported function.
448830`\spad{insert!(x,{} y)} stores the item whose key is \spad{x} and whose entry is \spad{y}.
448909`\spad{insert(sys,{} de)} adds the system \spad{sys = 0} to the differential equation \spad{de}.
449058`\spad{insert!(x,{} u)} inserts item \spad{x} into bag \spad{u}.
449107`\spad{insert!(x,{} b)} inserts element \spad{x} as leaves into binary search tree \spad{b}.
449160`\spad{insert!(x,{} b)} inserts element \spad{x} as leaves into binary tournament \spad{b}.
449815`\spad{insert!(v,{} u,{} i)} destructively inserts aggregate \spad{v} into \spad{u} at position \spad{i}.
449886`\spad{insert(v,{} u,{} k)} returns a copy of \spad{u} having \spad{v} inserted beginning at the \spad{i}th element. Note: \spad{insert(v,{} u,{} k) = concat( u(0..k-1),{} v,{} u(k..) )}.
449946`\spad{insert!(x,{} u,{} i)} destructively inserts \spad{x} into \spad{u} at position \spad{i}.
450016`\spad{insert(x,{} u,{} i)} returns a copy of \spad{u} having \spad{x} as its \spad{i}th element. Note: \spad{insert(x,{} a,{} k) = concat(concat(a(0..k-1),{} x),{} a(k..))}.
450075`\spad{insert!(x,{} d,{} n)} destructively inserts \spad{n} copies of \spad{x} into dictionary \spad{d}.
450146`\spad{insertBottom!(x,{} d)} destructively inserts \spad{x} into the dequeue \spad{d} at the bottom (back) of the dequeue.
450204`\spad{insertionSort! }\undocumented
450274`\spad{insertionSort!(a,{} f)} \undocumented
450342`\spad{insertMatch(var,{} expr,{} r)} adds the match (\spad{var},{} \spad{expr}) in \spad{r},{} without checking predicates or previous matches for \spad{var}.
450414`\spad{insertRoot!(x,{} b)} inserts element \spad{x} as a root of binary search tree \spad{b}.
450471`\spad{insertTop!(x,{} d)} destructively inserts \spad{x} into the dequeue \spad{d},{} that is,{} at the top (front) of the dequeue. The element previously at the top of the dequeue becomes the second in the dequeue,{} and so on.
450605`\spad{inspect(u)} returns an (random) element from a bag.
450651`\spad{int(expr)} creates the form prefixing \spad{expr} with an integral sign.
450689`\spad{int(r)} returns [\spad{r},{} \spad{r+1},{} \spad{r+2},{} ...],{} where \spad{r} is a ring element.
450754`\spad{int(expr,{} lowerlimit)} creates the form prefixing \spad{expr} by an integral sign with a lowerlimit.
450795`\spad{int(f,{} x)} returns the integral of \spad{f} with respect to \spad{x}.
450847`\spad{int(expr,{} lowerlimit,{} upperlimit)} creates the form prefixing \spad{expr} by an integral sign with both a \spad{lowerlimit} and upperlimit.
450891`\spad{intBasis Lb} computes a basis of the intersection of the list of subspaces represented by \spad{LLv}.
450949`\spad{intBasis LLv} computes a basis of the intersection of the list of subspaces represented by \spad{LLv}.
451020`\spad{intBasis(B1,{} B2)} computes a basis of the intersection of the two subspaces.
451075`\spad{intBasis(Lv1,{} Lv2)} computes a basis of the intersection of the two subspaces spanned by the vectors of \spad{Lv1} and \spad{Lv2}.
451156`\spad{intChoose should} be local
451407`\spad{intcompBasis }\undocumented
451657`\spad{integ should} be local but conditional
451768`\spad{integ_df should} be local but conditional
451886`\spad{integer?(t)} tests whether \spad{t} is equivalent to the FORTRAN type INTEGER.
451941`\spad{integer?(f)} checks if \spad{f} is an integer,{} this implies atom?(\spad{f})
452002`\spad{integer(f)} gives integer corresponding to \spad{f}. Valid only when integer?(\spad{f}) is \spad{true}
452062`\spad{integer?(s)} is \spad{true} if \spad{s} is an atom and belong to Int.
452136`\spad{integer(s)} returns \spad{s} as an element of Int. Error: if \spad{s} is not an atom that also belongs to Int.
452205`\spad{integer?(x)} is \spad{true} if \spad{x} is an integer,{} \spad{false} otherwise.
452263`\spad{integer(x)} returns \spad{x} as an integer; error if \spad{x} is not an integer.
452320`\spad{integerBound(p)} returns a lower bound on the negative integer roots of \spad{p},{} and 0 if \spad{p} has no negative integer roots.
452385`\spad{integerBound(p)} returns a lower bound on the negative integer roots of \spad{p},{} and 0 if \spad{p} has no negative integer roots.
452456`\spad{integerIfCan(x)} returns \spad{x} as an integer,{} "failed" if \spad{x} is not an integer.
452534`\spad{integerPart(o)} = \spad{n} when \spad{o} = \spad{l} + \spad{n} and \spad{l} is a limit ordinal
452598`\spad{integers(n)} returns \spad{[n,{} n+1,{} n+2,{} ...]}.
452748`\spad{integral?(f)} tests if \spad{f} is integral over \spad{k[x]}.
452819`\spad{integral(f,{} x)} returns the formal integral of \spad{f} with respect to \spad{x}
452873`\spad{integral(f,{} x = a..b)} denotes the definite integral of \spad{f} with respect to \spad{x} from \spad{a} to \spad{b}.
452946`\spad{integral(f,{} x)} returns the formal integral of \spad{f} with respect to \spad{x}
453033`\spad{integral(f,{} x)} indefinite integral of \spad{f} with respect to \spad{x}.
453236`\spad{integral?(f,{} a)} tests whether \spad{f} is locally integral at \spad{x = a}.
453309`\spad{integral(f,{} x = a..b)} returns the formal definite integral of \spad{f} \spad{dx} for \spad{x} between \spad{a} and \spad{b}.
453386`\spad{integral(f,{} x)} returns the formal integral of \spad{f} \spad{dx}.
453451`\spad{integral?(f,{} p)} tests whether \spad{f} is locally integral at \spad{p(x) = 0}.
453603`\spad{integralAtInfinity?(f)} tests if \spad{f} is locally integral at infinity.
453684`\spad{integralBasis()} returns a record \spad{[basis,{} basisDen,{} basisInv]} containing information regarding the integral closure of \spad{Z} in the quotient field of \spad{F},{} where \spad{F} is a framed algebra with \spad{Z}-module basis \spad{w1,{} w2,{} ...,{} wn}. If \spad{basis} is the matrix \spad{(aij,{} i = 1..n,{} j = 1..n)},{} then the \spad{i}th element 
453684`--of the integral basis is \spad{\spad{vi} = (1/basisDen) * sum(aij * wj,{} j = 1..n)},{} \spadignore{i.e.} the \spad{i}th row of \spad{basis} contains the coordinates of the \spad{i}th basis vector. Similarly,{} the \spad{i}th row of the matrix \spad{basisInv} contains the coordinates of \spad{\spad{wi}} with respect to the basis \spad{v1,{} ...,{} vn}: if \spad{basisInv} is the matrix \spad{(bij,{} i = 1..n,{} j = 1..n)},{} then \spad{\spad{wi} = sum(bij * vj,{} j = 1..n)}.
453819`\spad{integralBasis()} returns a record \spad{[basis,{} basisDen,{} basisInv]} containing information regarding the integral closure of \spad{R} in the quotient field of \spad{F},{} where \spad{F} is a framed algebra with \spad{R}-module basis \spad{w1,{} w2,{} ...,{} wn}. If \spad{basis} is the matrix \spad{(aij,{} i = 1..n,{} j = 1..n)},{} then the \spad{i}th element of the integra
453819`--l basis is \spad{\spad{vi} = (1/basisDen) * sum(aij * wj,{} j = 1..n)},{} \spadignore{i.e.} the \spad{i}th row of \spad{basis} contains the coordinates of the \spad{i}th basis vector. Similarly,{} the \spad{i}th row of the matrix \spad{basisInv} contains the coordinates of \spad{\spad{wi}} with respect to the basis \spad{v1,{} ...,{} vn}: if \spad{basisInv} is the matrix \spad{(bij,{} i = 1..n,{} j = 1..n)},{} then \spad{\spad{wi} = sum(bij * vj,{} j = 1..n)}.
453940`\spad{integralBasis()} returns a record \spad{[basis,{} basisDen,{} basisInv] } containing information regarding the integral closure of \spad{R} in the quotient field of the framed algebra \spad{F}. \spad{F} is a framed algebra with \spad{R}-module basis \spad{w1,{} w2,{} ...,{} wn}. If 'basis' is the matrix \spad{(aij,{} i = 1..n,{} j = 1..n)},{} then the \spad{i}th elem
453940`--ent of the integral basis is \spad{\spad{vi} = (1/basisDen) * sum(aij * wj,{} j = 1..n)},{} \spadignore{i.e.} the \spad{i}th row of 'basis' contains the coordinates of the \spad{i}th basis vector. Similarly,{} the \spad{i}th row of the matrix 'basisInv' contains the coordinates of \spad{\spad{wi}} with respect to the basis \spad{v1,{} ...,{} vn}: if 'basisInv' is the matrix \spad{(bij,{} i = 1..n,{} j = 1..n)},{} then \spad{\spad{wi} = sum(bij * vj,{} j = 1..n)}.
454072`\spad{integralBasis()} returns a record \spad{[basis,{} basisDen,{} basisInv]} containing information regarding the integral closure of \spad{R} in the quotient field of \spad{F},{} where \spad{F} is a framed algebra with \spad{R}-module basis \spad{w1,{} w2,{} ...,{} wn}. If \spad{basis} is the matrix \spad{(aij,{} i = 1..n,{} j = 1..n)},{} then the \spad{i}th element of the i
454072`--ntegral basis is \spad{\spad{vi} = (1/basisDen) * sum(aij * wj,{} j = 1..n)},{} \spadignore{i.e.} the \spad{i}th row of \spad{basis} contains the coordinates of the \spad{i}th basis vector. Similarly,{} the \spad{i}th row of the matrix \spad{basisInv} contains the coordinates of \spad{\spad{wi}} with respect to the basis \spad{v1,{} ...,{} vn}: if \spad{basisInv} is the matrix \spad{(bij,{} i = 1..n,{} j = 1..n)},{} then \spad{\spad{wi} = sum(bij * vj,{} j = 1..n)}.
454199`\spad{integralBasis()} returns the integral basis for the curve.
454275`\spad{integralBasisAtInfinity()} returns the local integral basis at infinity.
454361`\spad{integralCoordinates(f)} returns \spad{[[A1,{} ...,{} An],{} D]} such that \spad{f = (A1 w1 +...+ An wn) / D} where \spad{(w1,{} ...,{} wn)} is the integral basis returned by \spad{integralBasis()}.
454464`\spad{integralDerivationMatrix(d)} extends the derivation \spad{d} from UP to \$ and returns (\spad{M},{} \spad{Q}) such that the i^th row of \spad{M} divided by \spad{Q} form the coordinates of \spad{d(\spad{wi})} with respect to \spad{(w1,{} ...,{} wn)} where \spad{(w1,{} ...,{} wn)} is the integral basis returned by integralBasis().
454578`\spad{integralLastSubResultant(p1,{} p2,{} ts)} is an internal subroutine,{} exported only for developement.
454699`\spad{integralMatrix()} returns \spad{M} such that \spad{(w1,{} ...,{} wn) = M (1,{} y,{} ...,{} y^(n-1))},{} where \spad{(w1,{} ...,{} wn)} is the integral basis of \spadfunFrom{integralBasis}{FunctionFieldCategory}.
454786`\spad{integralMatrixAtInfinity()} returns \spad{M} such that \spad{(v1,{} ...,{} vn) = M (1,{} y,{} ...,{} y^(n-1))} where \spad{(v1,{} ...,{} vn)} is the local integral basis at infinity returned by \spad{infIntBasis()}.
454883`\spad{integralRepresents([A1,{} ...,{} An],{} D)} returns \spad{(A1 w1+...+An wn)/D} where \spad{(w1,{} ...,{} wn)} is the integral basis of \spad{integralBasis()}.
454969`\spad{integrate(f(x))} returns an anti-derivative of the power series \spad{f(x)} with constant coefficient 0. Warning: function does not check for a term of degree \spad{-1}.
455077`\spad{integrate(f)} returns \spad{g} such that \spad{g' = f}.
455236`\spad{integrate(f(x))} returns an anti-derivative of the power series \spad{f(x)} with constant coefficient 1. We may integrate a series when we can divide coefficients by integers.
455343`\spad{integrate(p)} integrates the univariate polynomial \spad{p} with respect to its distinguished variable.
455441`\spad{integrate(f(x))} returns an anti-derivative of the power series \spad{f(x)} with constant coefficient 1. We may integrate a series when we can divide coefficients by rational numbers.
455548`\spad{integrate(f(x))} returns an anti-derivative of the power series \spad{f(x)} with constant coefficient 0. We may integrate a series when we can divide coefficients by integers.
455654`\spad{integrate(jv,{} i)} is like \spad{integrateIfCan(jv,{} i)} but yields an error,{} if the integration is not possible.
455721`\spad{integrate(f(x))} returns an anti-derivative of the power series \spad{f(x)} with constant coefficient 0. We may integrate a series when we can divide coefficients by integers.
455848`\spad{integrate(f(x))} returns an anti-derivative of the power series \spad{f(x)} with constant coefficient 0. We may integrate a series when we can divide coefficients by integers.
455975`\spad{integrate(f(x),{} x)} returns an anti-derivative of the power series \spad{f(x)} with constant coefficient 0. We may integrate a series when we can divide coefficients by integers.
456101`\spad{integrate(f(x))} returns an anti-derivative of the power series \spad{f(x)} with constant coefficient 0. We may integrate a series when we can divide coefficients by integers.
456222`\spad{integrate(f(x))} returns an anti-derivative of the power series \spad{f(x)} with constant coefficient 0. We may integrate a series when we can divide coefficients by integers.
456343`\spad{integrate(f(x),{} x)} returns an anti-derivative of the power series \spad{f(x)} with constant coefficient 0. We may integrate a series when we can divide coefficients by integers.
456574`\spad{integrate(r,{} a)} returns the integral of the power series \spad{a} with respect to the power series variable where \spad{r} denotes the constant of integration. Thus \spad{integrate(a,{} [a0,{} a1,{} a2,{} ...]) = [a,{} a0,{} a1/2,{} a2/3,{} ...]}.
456688`\spad{integrate(c,{} f)} integrates with constant term \spad{c},{} this is simply the right shift
456850`\spad{integrate(f(x),{} y)} returns an anti-derivative of the power series \spad{f(x)} with respect to the variable \spad{y}.
457098`\spad{integrate(f(x),{} y)} returns an anti-derivative of the power series \spad{f(x)} with respect to the variable \spad{y}.
457316`\spad{integrate(f(x),{} y)} returns an anti-derivative of the power series \spad{f(x)} with respect to the variable \spad{y}.
457564`\spad{integrate(f(x),{} y)} returns an anti-derivative of the power series \spad{f(x)} with respect to the variable \spad{y}.
457782`\spad{integrate(f(x),{} y)} returns an anti-derivative of the power series \spad{f(x)} with respect to the variable \spad{y}.
458029`\spad{integrate(f(x),{} y)} returns an anti-derivative of the power series \spad{f(x)} with respect to the variable \spad{y}.
458246`\spad{integrate(p,{} x)} computes the integral of \spad{p*dx},{} \spadignore{i.e.} integrates the polynomial \spad{p} with respect to the variable \spad{x}.
458333`\spad{integrate(f,{} x)} returns the anti-derivative of the power series \spad{f(x)} with respect to the variable \spad{x} with constant coefficient 1. We may integrate a series when we can divide coefficients by integers.
458449`\spad{integrate(f(x))} returns an anti-derivative of the power series \spad{f(x)} with constant coefficient 0. We may integrate a series when we can divide coefficients by integers.
458575`\spad{integrate(f,{} x = a..b)} returns the integral of \spad{f(x)dx} from a to \spad{b}. Error: if \spad{f} has a pole for \spad{x} between a and \spad{b}.
458834`\spad{integrate(f,{} x = a..b)} returns the integral of \spad{f(x)dx} from a to \spad{b}. Error: if \spad{f} has a pole for \spad{x} between a and \spad{b}.
459103`\spad{integrate(f,{} x)} returns the integral of \spad{f(x)dx} where \spad{x} is viewed as a real variable..
459260`\spad{integrate(f,{} x = a..b)} returns the integral of \spad{f(x)dx} from a to \spad{b}. Error: if \spad{f} has a pole for \spad{x} between a and \spad{b}.
459465`\spad{integrate(f,{} x)} returns the integral of \spad{f(x)dx} where \spad{x} is viewed as a real variable.
459548`\spad{integrate(p,{} d)} integrates the polynomial \spad{p} against the distribution \spad{d}. Same as \spad{eval(d,{} p)}.
459636`\spad{integrate(s,{} v,{} c)} is the integral of \spad{s} with respect \indented{1}{to \spad{v} and having \spad{c} as the constant of integration.}
459759`\spad{integrate(s,{} v,{} c)} is the integral of \spad{s} with respect \indented{1}{to \spad{v} and having \spad{c} as the constant of integration.}
459859`\spad{integrate(f,{} x = a..b,{} "noPole")} returns the integral of \spad{f(x)dx} from a to \spad{b}. If it is not possible to check whether \spad{f} has a pole for \spad{x} between a and \spad{b} (because of parameters),{} then this functio
459859`--n will assume that \spad{f} has no such pole. Error: if \spad{f} has a pole for \spad{x} between a and \spad{b} or if the last argument is not "noPole".
460125`\spad{integrate(f,{} x = a..b,{} "noPole")} returns the integral of \spad{f(x)dx} from a to \spad{b}. If it is not possible to check whether \spad{f} has a pole for \spad{x} between a and \spad{b} (because of parameters),{} then th
460125`--is function will assume that \spad{f} has no such pole. Error: if \spad{f} has a pole for \spad{x} between a and \spad{b} or if the last argument is not "noPole".
460401`\spad{integrate(f,{} x = a..b,{} "noPole")} returns the integral of \spad{f(x)dx} from a to \spad{b}. If it is not possible to check whether \spad{f} has a pole for \spad{x} between a and \spad{b} (because of parameters),{} then this function will assume that \spad{f} has no such pole. Error: i
460401`--f \spad{f} has a pole for \spad{x} between a and \spad{b} or if the last argument is not "noPole".
460613`\spad{integrate(jv,{} i)} integrated \spad{jv} \spad{wrt} the \spad{i}\spad{-}th independent variable,{} if possible.
460786`\spad{integrate_sols(l)} integrates the solutions of an operator \spad{l}.
461020`\spad{integrate_sols(l,{} rat_solve)} integrates the solutions of an operator \spad{l} given rat_solve(op,{} \spad{g}) that returns \spad{["failed",{} []]} if the equation \spad{op y = g} has no rational solution. Otherwise,{} the rat_solve function should return \spad{[f,{} [y1,{} ...,{} ym]]} where \spad{f} is a particular rational solution and the \
461020`--spad{yi}\spad{'s} form a basis for the rational solutions of the homogeneous equation.
461173`\spad{intensity(v,{} i)} sets the intensity of the light source to \spad{i},{} for the given three-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{ThreeDimensionalViewport}.
461239`\spad{internal?(x)} \undocumented
461291`\spad{internalAugment(lp,{} ts)} returns \spad{ts} if \spad{lp} is empty otherwise returns \spad{internalAugment(rest lp,{} internalAugment(first lp,{} ts))}
461376`\spad{internalAugment(p,{} ts)} assumes that \spad{augment(p,{} ts)} returns a singleton and returns it.
461455`\spad{internalAugment(p,{} ts,{} b1,{} b2,{} b3,{} b4,{} b5)} is an internal subroutine,{} exported only for developement.
461572`\spad{internalAugment(p,{} ts,{} b1,{} b2,{} b3,{} b4,{} b5)} is an internal subroutine,{} exported only for developement.
462661`\spad{internalInfRittWu?(lp1,{} lp2)} is an internal subroutine,{} exported only for developement.
462755`\spad{internalInfRittWu?(lp1,{} lp2)} is an internal subroutine,{} exported only for developement.
462859`\spad{internalIntegrate0 should} be a local function,{} but is conditional.
462962`\spad{internalIntegrate(f,{} x)} returns \spad{g} such that \spad{dg/dx = f}.
463102`\spad{internalIntegrate(f,{} x)} returns the integral of \spad{f(x)dx} where \spad{x} is viewed as a complex variable.
463204`\spad{internalLastSubResultant(lpwt,{} v,{} flag)} is an internal subroutine,{} exported only for developement.
463363`\spad{internalLastSubResultant(p1,{} p2,{} ts,{} inv?,{} break?)} is an internal subroutine,{} exported only for developement.
463500`\spad{internalSubPolSet?(lp1,{} lp2)} returns \spad{true} iff \spad{lp1} is a sub-set of \spad{lp2} assuming that these lists are sorted increasingly \spad{w}.\spad{r}.\spad{t}. \spadopFrom{infRittWu?}{RecursivePolynomialCategory}.
463594`\spad{internalSubPolSet?(lp1,{} lp2)} returns \spad{true} iff \spad{lp1} is a sub-set of \spad{lp2} assuming that these lists are sorted increasingly \spad{w}.\spad{r}.\spad{t}. \spadopFrom{infRittWu?}{RecursivePolynomialCategory}.
463698`\spad{internalSubQuasiComponent?(ts,{} us)} returns a boolean \spad{b} value if the fact that the regular zero set of \spad{us} contains that of \spad{ts} can be decided (and in that case \spad{b} gives this inclusion) otherwise returns \spad{"failed"}.
463806`\spad{internalSubQuasiComponent?(ts,{} us)} returns a boolean \spad{b} value if the fact the regular zero set of \spad{us} contains that of \spad{ts} can be decided (and in that case \spad{b} gives this inclusion) otherwise returns \spad{"failed"}.
463924`\spad{internalZeroSetSplit(lp,{} b1,{} b2,{} b3)} is an internal subroutine,{} exported only for developement.
464033`\spad{internalZeroSetSplit(lp,{} b1,{} b2,{} b3)} is an internal subroutine,{} exported only for developement.
464152`\spad{interpolate(lf,{} lg)} \undocumented
464257`\spad{interpolate(xlist,{} ylist,{} deg)} returns the rational function with numerator degree at most \spad{deg} and denominator degree at most \spad{\#xlist-deg-1} that interpolates the given points using fraction free arithmetic. Note that rational interpolation does not guarantee that all given points are interpolated correctly: unattainable points may make this impos
464257`--sible.
464391`\spad{interpolate(xlist,{} ylist,{} deg)} returns the rational function with numerator degree \spad{deg} that interpolates the given points using fraction free arithmetic.
464545`\spad{interpolate(u,{} lf,{} lg)} \undocumented
464804`\spad{interpret(f)} passes \spad{f} to the interpreter.
464848`\spad{interpret(f)} passes \spad{f} to the interpreter,{} and transforms the result into an object of type \spad{R}.
464910`\spad{interpretString(s)} treats a string as a piece of FriCAS input,{} by parsing and interpreting it.
464972`\spad{interReduce(lp)} returns \spad{lq} such that \spad{lp} and \spad{lq} generate the same ideal and no polynomial in \spad{lq} is reducuble by the others in the sense of Groebner bases. Since no assumptions are required the result may depend on the ordering the reductions are performed.
465056`\spad{intersect(LI)} computes the intersection of the list of ideals \spad{LI}.
465510`\spad{intersect(u,{} v)} returns the set aggregate \spad{w} consisting of elements common to both set aggregates \spad{u} and \spad{v}. Note: equivalent to the notation (not currently supported) {\spad{x} for \spad{x} in \spad{u} | member?(\spad{x},{} \spad{v})}.
465562`\spad{intersect(I,{} J)} computes the intersection of the ideals \spad{I} and \spad{J}.
465636`\spad{intersect(lp,{} ts)} returns \spad{lts} a split of Lazard of the intersection of the affine variety associated with \spad{lp} and the regular zero set of \spad{ts}.
465721`\spad{intersect(lp,{} lts)} returns the same as \spad{concat([intersect(lp,{} ts) for ts in lts])|}
465812`\spad{intersect(p,{} ts)} returns the same as \spad{intersect([p],{} ts)}
465891`\spad{intersect(p,{} lts)} returns the same as \spad{intersect([p],{} lts)}
465976`\spad{intersection(x)} constructs a compound boundary from the intersection of \spad{x} \spad{x:} List \% is supplied list of boundaries to form intersection.
466032`\spad{interval(f)} creates a new interval around \spad{f}.
466099`\spad{interval(f)} creates a new interval around \spad{f}.
466150`\spad{interval(inf,{} sup)} creates a new interval,{} either \spad{[inf,{} sup]} if \spad{inf <= sup} or \spad{[sup,{} in]} otherwise.
466203`\spad{intoMatrix(lp,{} lvar)} converts linear in symbols lvar system of polynomials \spad{lp} = 0 into matrix form
466344`\spad{intPatternMatch(f,{} x,{} int,{} pmint)} tries to integrate \spad{f} first by using the integration function \spad{int},{} and then by
466344`-- using the pattern match intetgration function \spad{pmint} on any remaining unintegrable part.
466711`\spad{inv(x)} \undocumented
466793`\spad{inv(x)} \undocumented
467024`\spad{inv x} \undocumented{} See \spadfunFrom{inv}{DivisionRing}
467102`\spad{inv x} returns the multiplicative inverse of \spad{x}. Error: if \spad{x} is 0.
467142`\spad{inv(x)} returns the inverse of \spad{x}.
467175`\spad{inv(o)} returns the inverse of \spad{o} if it exists.
467234`\spad{inv(x)} returns the multiplicative inverse of \spad{x}.
467285`\spad{inverse(ls)} forms the inverse of a sequence \spad{ls}
467345`\spad{inverse(m)} returns the inverse of the matrix \spad{m}. If the matrix is not invertible,{} "failed" is returned. Error: if the matrix is not square. Note: the result will have entries in the quotient field.
467454`\spad{inverse(m)} returns the inverse of the matrix \spad{m}. If the matrix is not invertible,{} "failed" is returned. Error: if the matrix is not square.
467546`\spad{inverse(m)} returns the inverse of the matrix \spad{m}. If the matrix is not invertible,{} "failed" is returned. Error: if the matrix is not square.
467631`\spad{inverse(m)} returns the inverse of the matrix \spad{m},{} if that matrix is invertible and returns "failed" otherwise.
467727`\spad{inverse(m)} returns the inverse of the matrix. If the matrix is not invertible,{} "failed" is returned. Error: if the matrix is not square.
467826`\spad{inverseColeman(alpha,{} beta,{} C)}: there is a bijection from the set of matrices having nonnegative entries and row sums {\em alpha},{} column sums {\em beta} to the set of {\em Salpha - Sbeta} double cosets of the symmetric group {\em Sn}. ({\em Salpha} is the Young subgroup corresponding to the improper partition {\em alpha}). For such a matrix \spad{C},{} inverseColem
467826`--an(\spad{alpha},{} \spad{beta},{} \spad{C}) calculates the lexicographical smallest {\em \spad{pi}} in the corresponding double coset. Note: the resulting permutation {\em \spad{pi}} of {\em {1,{} 2,{} ...,{} n}} is given in list form. Notes: the inverse of this map is {\em coleman}. For details,{} see James/Kerber.
467952`\spad{inverseIntegralMatrix()} returns \spad{M} such that \spad{M (w1,{} ...,{} wn) = (1,{} y,{} ...,{} y^(n-1))} where \spad{(w1,{} ...,{} wn)} is the integral basis of \spadfunFrom{integralBasis}{FunctionFieldCategory}.
468046`\spad{inverseIntegralMatrixAtInfinity()} returns \spad{M} such that \spad{M (v1,{} ...,{} vn) = (1,{} y,{} ...,{} y^(n-1))} where \spad{(v1,{} ...,{} vn)} is the local integral basis at infinity returned by \spad{infIntBasis()}.
468150`\spad{inverseLaplace(f,{} s,{} t)} returns the Inverse Laplace transform of \spad{f(s)} using \spad{t} as the new variable or "failed" if unable to find a closed form. Handles only rational \spad{f(s)}.
468245`\spad{invertible?(p,{} ts)} returns \spad{true} iff \spad{p} is invertible in the tower associated with \spad{ts}.
468325`\spad{invertible?(p,{} ts)} returns \spad{lbwt} where \spad{lbwt.i} is the result of \spad{invertibleElseSplit?(p,{} lbwt.i.tower)} and the list of the \spad{(lqrwt.i).tower} is a split of Kalkbrener of \spad{ts}.
468432`\spad{invertibleElseSplit?(p,{} ts)} returns \spad{true} (resp. \spad{false}) if \spad{p} is invertible in the tower associated with \spad{ts} or returns a split of Kalkbrener of \spad{ts}.
468537`\spad{invertibleSet(p,{} ts)} returns a split of Kalkbrener of the quotient ideal of the ideal \spad{I} by \spad{p} where \spad{I} is the radical of saturated of \spad{ts}.
468620`\spad{invertIfCan(m)} returns the inverse of the matrix \spad{m}. If the matrix is not invertible,{} "failed" is returned. Error: if the matrix is not square.
468702`\spad{invertIfCan(m)} returns the inverse of \spad{m} over \spad{R}
468863`\spad{invmod(a,{} b)},{} \spad{0<=a<b>1},{} \spad{(a,{} b)=1} means \spad{1/a mod b}.
468997`\spad{invmultisect(a,{} b,{} f(x))} substitutes \spad{x^((a+b)*n)} \indented{1}{for \spad{x^n} and multiples by \spad{x^b}.}
469086`\spad{invmultisect(a,{} b,{} st)} substitutes \spad{x^((a+b)*n)} for \spad{x^n} and multiplies by \spad{x^b}.
469184`\spad{iomode(f)} returns the status of the file \spad{f}. The input/output status of \spad{f} may be "input",{} "output" or "closed" mode.
469239`\spad{ipow(l)} should be local but conditional.
469298`\spad{iprint(s)} prints \spad{s} at the current position of the cursor.
469355`\spad{iroot(p,{} n)} should be a non-exported function.
469442`\spad{irootDep(k)} is a local function with a conditional implementation.
469575`\spad{irreducible?(p)} tests whether the polynomial \spad{p} is irreducible.
469646`\spad{irreducibleFactor(base,{} exponent)} creates a factored object with a single factor whose \spad{base} is asserted to be irreducible (flag = "irred").
469706`\spad{irreducibleFactors(lp)} returns \spad{lf} such that if \spad{lp = [p1,{} ...,{} pn]} and \spad{lf = [f1,{} ...,{} fm]} then \spad{p1*p2*...*pn=0} means \spad{f1*f2*...*fm=0},{} and the \spad{\spad{fi}} are irreducible over \spad{R} and are pairwise distinct.
469850`\spad{irreducibleRepresentation(lambda)} is the list of the two irreducible representations corresponding to the partition {\em lambda} in Young\spad{'s} natural form for the following two generators of the symmetric group,{} whose elements permute {\em {1,{} 2,{} ...,{} n}},{} namely {\em (1 2)} (2-cycle) and {\em (1 2 ... n)} (\spad{n}-cycle).
469949`\spad{irreducibleRepresentation(lambda,{} listOfPerm)} is the list of the irreducible representations corresponding to {\em lambda} in Young\spad{'s} natural form for the list of permutations given by {\em listOfPerm}.
470075`\spad{irreducibleRepresentation(lambda,{} \spad{pi})} is the irreducible representation corresponding to partition {\em lambda} in Young\spad{'s} natural form of the permutation {\em \spad{pi}} in the symmetric group,{} whose elements permute {\em {1,{} 2,{} ...,{} n}}.
470189`\spad{is?(op(a1,{} ...,{} an),{} f)} tests if op = \spad{f}.
470245`\spad{is?(op(a1,{} ...,{} an),{} s)} tests if the name of op is \spad{s}.
470407`\spad{is?(x,{} op)} tests if \spad{x} is a kernel and is its operator is op.
470469`\spad{is?(x,{} s)} tests if \spad{x} is a kernel and is the name of its operator is \spad{s}.
470524`\spad{is?(op,{} s)} tests if the name of \spad{op} is \spad{s}.
470577`\spad{is?([e1,{} ...,{} en],{} pat)} tests if the list of expressions \spad{[e1,{} ...,{} en]} matches the pattern pat.
470655`\spad{Is([e1,{} ...,{} en],{} pat)} matches the pattern pat on the list of expressions \spad{[e1,{} ...,{} en]} and returns the result.
470775`\spad{is?(expr,{} pat)} tests if the expression \spad{expr} matches the pattern pat.
470847`\spad{Is(expr,{} pat)} matches the pattern pat on the expression \spad{expr} and returns a list of matches \spad{[v1 = e1,{} ...,{} vn = en]}; returns an empty list if either \spad{expr} is exactly equal to pat or if pat does not match \spad{expr}.
471008`\spad{Is(expr,{} pat)} matches the pattern pat on the expression \spad{expr} and returns a list of matches \spad{[v1 = e1,{} ...,{} vn = en]}; returns an empty list if either \spad{expr} is exactly equal to pat or if pat does not match \spad{expr}.
471129`\spad{Is(expr,{} pat)} matches the pattern pat on the expression \spad{expr} and returns a match of the form \spad{[v1 = e1,{} ...,{} vn = en]}; returns an empty match if \spad{expr} is exactly equal to pat. returns a \spadfun{failed} match if pat does not match \spad{expr}.
471292`\spad{isAbsolutelyIrreducible?(aG)} calls {\em isAbsolutelyIrreducible?(aG,{} 25)}. Note: the choice of 25 was rather arbitrary.
471396`\spad{isAbsolutelyIrreducible?(aG,{} numberOfTries)} uses Norton\spad{'s} irreducibility test to check for absolute irreduciblity,{} assuming if a one-dimensional kernel is found. As no field extension changes create "new" elements in a one-dimensional space,{} the criterium stays \spad{true} for every extension. The method looks for one-dimensionals only by creating random elements (no finge
471396`--rprints) since a run of {\em meatAxe} would have proved absolute irreducibility anyway.
471508`\spad{isAcyclic?(s)} returns \spad{true} if there are no loops
471613`\spad{isBasis? Lv} tests for linear independence of a list of vectors.
471683`introspection: returns \spad{true} if this is a bound leaf node
471735`\spad{isBox?(n)} returns \spad{true} if this is a rectangular boundary.
471784`introspection: returns \spad{true} if this is a compound term containing two nodes
471835`isDirected? is \spad{true} iff \% is domain consisting of directed graphs,{} \spad{false} for undirected graphs.
471888`isDirected? is \spad{true} iff \% is domain consisting of directed graphs,{} \spad{false} for undirected graphs.
471944`\spad{isDirectSuccessor?(s,{} a,{} b)} is \spad{true} if \spad{'b'} is a direct successor of 'a' that is,{} if there is a direct arrow from 'a' to \spad{'b'}
472141`\spad{isEllipse?(n)} returns \spad{true} if this is a ellipsoid boundary.
472194`\spad{isExpt(p)} returns \spad{[q,{} n]} if \spad{n > 0} and \spad{p = q ^ n},{} and "failed" otherwise.
472291`\spad{isExpt(p)} returns \spad{[x,{} n]} if \spad{p = x^n} and \spad{n <> 0},{} "failed" otherwise.
472625`\spad{isExpt(p)} returns \spad{[x,{} n]} if \spad{p = x^n} and \spad{n <> 0}.
472741`\spad{isExpt(p)} returns \spad{[x,{} n]} if polynomial \spad{p} has the form \spad{x^n} and \spad{n > 0}.
473090`\spad{isExpt(p,{} op)} returns \spad{[x,{} n]} if \spad{p = x^n} and \spad{n <> 0} and \spad{x = op(a)}.
473215`\spad{isExpt(p,{} f)} returns \spad{[x,{} n]} if \spad{p = x^n} and \spad{n <> 0} and \spad{x = f(a)}.
473333`\spad{isFixPoint?(s,{} a)} is \spad{true} if 'a' has an arrow to itself
473478`introspection: returns \spad{true} if this is a unbound leaf node
473529`\spad{isFunctional?(s)} returns \spad{true} if \spad{s} is a functional graph,{} that is a directed graph in which each vertex has a single outgoing arrow.
473640`isGreaterThan?((\spad{s},{} a,{} \spad{b}) is \spad{true} if we can get from vertex 'a' to \spad{'b'} through a sequence of arrows but we can\spad{'t} go in the opposite direction from \spad{'b'} to 'a'
473829`returns \spad{true} if this is an \spad{I} combinator node
473881`returns \spad{true} if this is a \spad{K} combinator node
473933`introspection: returns \spad{true} if this is a lambda definition
473982`\spad{isList(p)} returns \spad{[a1,{} ...,{} an]} if \spad{p = [a1,{} ...,{} an]},{} "failed" otherwise.
474137`\spad{isMult(p)} returns \spad{[n,{} x]} if \spad{p = n * x} and \spad{n <> 0}.
474256`\spad{isNodeBranch?(n)} returns \spad{true} if this is a branch.
474319`\spad{isNodeLeaf?(n)} returns \spad{true} if this is a leaf which holds Scene nodes.
474380`\spad{isNull?(n)} returns \spad{true} if this is a null boundary,{} that is no boundary
474505`\spad{isobaric?(p)} returns \spad{true} if every differential monomial appearing in the differential polynomial \spad{p} has same weight,{} and returns \spad{false} otherwise.
474583`\spad{isOp(p)} returns \spad{[op,{} [a1,{} ...,{} an]]} if \spad{p = op(a1,{} ...,{} an)},{} and "failed" otherwise.
474673`\spad{isOp(p,{} op)} returns \spad{[a1,{} ...,{} an]} if \spad{p = op(a1,{} ...,{} an)},{} and "failed" otherwise.
474748`\spad{isPlus(p)} returns \spad{[a1,{} ...,{} an]} if \spad{n > 1} \indented{1}{and \spad{p = a1 + ... + an},{}} and "failed" otherwise.
474811`\spad{isPlus(p)} returns [\spad{m1},{} ...,{} \spad{mn}] if \spad{p = m1 + ... + mn} and \spad{n > 1},{} "failed" otherwise.
475052`\spad{isPlus(p)} returns \spad{[m1,{} ...,{} mn]} if \spad{p = m1 +...+ mn} and \spad{n > 1}.
475144`\spad{isPlus(p)} returns \spad{[m1,{} ...,{} mn]} if polynomial \spad{p = m1 + ... + mn} and \spad{n >= 2} and each \spad{mi} is a nonzero monomial.
475227`\spad{isPoint?(p)} returns \spad{true} if this represents a point as opposed to a vector.
475279`\spad{isPointLeaf?(n)} returns \spad{true} if this is a \spad{pt} node,{} that is,{} if this node contains points
475341`\spad{isPower(p)} returns \spad{[a,{} b]} if \spad{p = a ^ b},{} and "failed" otherwise.
475423`\spad{isPower(p)} returns \spad{[x,{} n]} if \spad{p = x^n} and \spad{n <> 0},{} "failed" otherwise.
475633`\spad{isPower(p)} returns \spad{[x,{} n]} if \spad{p = x^n} and \spad{n <> 0}.
475737`\spad{isQuotient(p)} returns \spad{[a,{} b]} if \spad{p = a / b},{} and "failed" otherwise.
475817`returns \spad{true} if this is a \spad{S} combinator node
475869`\spad{is_symbol?(f,{} s)} retruns \spad{true} if form is symbol \spad{s},{} otherwise returns \spad{false}
475939`\spad{isTimes(p)} returns \spad{[a1,{} ...,{} an]} if \spad{n > 1} and \spad{p = a1 * ... * an},{} and "failed" otherwise.
476003`\spad{isTimes(p)} returns \spad{[a1,{} ...,{} an]} if \spad{p = a1 ... an} and \spad{n > 1},{} "failed" otherwise.
476247`\spad{isTimes(p)} returns \spad{[a1,{} ...,{} an]} if \spad{p = a1*...*an} and \spad{n > 1}.
476333`\spad{isTimes(p)} returns \spad{[a1,{} ...,{} an]} if polynomial \spad{p = a1 ... an} and \spad{n >= 2},{} and,{} for each \spad{i},{} \spad{ai} is either a nontrivial constant in \spad{R} or else of the form \spad{x^e},{} where \spad{e > 0} is an integer and \spad{x} is a member of VarSet.
476432`\spad{isVector? returns} \spad{true} if this represents a vector as opposed to a point.
476485`\spad{iter(f,{} n,{} x)} applies \spad{f} \spad{n} times to \spad{x}.
476646`\spad{iteratedInitials(p)} returns \spad{[]} if \spad{p} belongs to \spad{R},{} otherwise returns the list of the iterated initials of \spad{p}.
476727`\spad{jacobi2poly(aa,{} bb)} returns the stream of orthogonal polynomials corresponding to the Jacobi parameters \spad{a_n} and \spad{b_n}.
476831`\spad{jacobi(a,{} b)} returns the Jacobi symbol \spad{J(a/b)}. When \spad{b} is odd,{} \spad{J(a/b) = product(L(a/p) for p in factor b )}. Note: by convention,{} 0 is returned if \spad{gcd(a,{} b) ~= 1}. Iterative \spad{O(log(b)^2)} version coded by Michael Monagan June 1987.
476908`\spad{jacobian(vf,{} xlist)} computes the jacobian,{} the matrix of first partial derivatives,{} of the vector field \spad{vf},{} \spad{vf} a vector function of the variables listed in xlist.
477000`\spad{jacobiCn(z,{} m)} is the Jacobi elliptic \spad{cn} function,{} defined by \spad{jacobiCn(z,{} m)^2 + jacobiSn(z,{} m)^2 = 1} and \spad{jacobiCn(0,{} m) = 1}
477063`\spad{jacobiCn(z,{} m)} expands the elliptic function \spad{cn} as a Taylor \indented{1}{series in \spad{z}.}
477152`\spad{jacobiCn(z,{} m)} is the Jacobi elliptic \spad{cn} function,{} defined by \spad{jacobiCn(z,{} m)^2 + jacobiSn(z,{} m)^2 = 1} and \spad{jacobiCn(0,{} m) = 1}.
477211`\spad{jacobiCn(z,{} m)} is the Jacobi \spad{cn} function
477305`\spad{jacobiCn(z,{} m)} is the Jacobi \spad{cn} function
477372`\spad{jacobiDn(z,{} m)} is the Jacobi elliptic \spad{dn} function,{} defined by \spad{jacobiDn(z,{} m)^2 + m*jacobiSn(z,{} m)^2 = 1} and \spad{jacobiDn(0,{} m) = 1}
477435`\spad{jacobiDn(z,{} m)} expands the elliptic function \spad{dn} as a Taylor \indented{1}{series in \spad{z}.}
477524`\spad{jacobiDn(z,{} m)} is the Jacobi elliptic \spad{dn} function,{} defined by \spad{jacobiDn(z,{} m)^2 + m*jacobiSn(z,{} m)^2 = 1} and \spad{jacobiDn(0,{} m) = 1}.
477583`\spad{jacobiDn(z,{} m)} is the Jacobi \spad{dn} function
477677`\spad{jacobiDn(z,{} m)} is the Jacobi \spad{dn} function
477744`\spad{jacobiIdentity?()} tests if \spad{(a*b)*c + (b*c)*a + (c*a)*b = 0} for all \spad{a},{} \spad{b},{} \spad{c} in the algebra. For example,{} this holds for crossed products of 3-dimensional vectors.
477824`\spad{jacobiIdentity?()} tests if \spad{(a*b)*c + (b*c)*a + (c*a)*b = 0} for all \spad{a},{} \spad{b},{} \spad{c} in the algebra. For example,{} this holds for crossed products of 3-dimensional vectors.
477901`\spad{jacobiMatrix(De)} returns a list of Jacobi matrices sorted by the order of the equations.
477996`\spad{jacobiMatrix(sys)} constructs the Jacobi matrix of the family \spad{sys} of functions.
478184`\spad{jacobiMatrix(sys,{} jvars)} constructs the Jacobi matrix of the family \spad{sys} of functions. \spad{jvars} contains for each function the effectively occurring jet variables. The columns of the matrix are ordered.
478402`\spad{jacobiP(n,{} a,{} b,{} z)} is the Jacobi polynomial
478468`\spad{jacobiP(n,{} a,{} b,{} z)} is the Jacobi polynomial
478532`\spad{jacobiParameters(x)} returns the pair of streams of Jacobi parameters of the distribution \spad{x}.
478691`\spad{jacobiParameters(x)} returns the pair of streams of Jacobi parameters of the distribution \spad{x}.
478798`\spad{jacobiPathArray([b0,{} b1,{} ...],{} [c1,{} c2,{} ...])} computes Flajolet\spad{'s} Motzkin path array from the sequences [1,{} 1,{} ...],{} \spad{bi},{} \spad{ci}.
478887`\spad{jacobiSn(z,{} m)} is the Jacobi elliptic \spad{sn} function,{} defined by the formula \spad{jacobiSn(ellipticF(z,{} m),{} m) = z}
478950`\spad{jacobiSn(z,{} m)} expands the elliptic function \spad{sn} as a Taylor \indented{1}{series in \spad{z}.}
479039`\spad{jacobiSn(z,{} m)} is the Jacobi elliptic \spad{sn} function,{} defined by the formula \spad{jacobiSn(ellipticF(z,{} m),{} m) = z}.
479098`\spad{jacobiSn(z,{} m)} is the Jacobi \spad{sn} function
479192`\spad{jacobiSn(z,{} m)} is the Jacobi \spad{sn} function
479259`\spad{jacobiTheta(z,{} m)} is the Jacobi Theta function in Jacobi notation.
479325`\spad{jacobiTheta(z,{} m)} is the Jacobi Theta function in Jacobi notation.
479387`\spad{jacobiZeta(z,{} m)} is the Jacobi elliptic zeta function,{} defined by \spad{D(jacobiZeta(z,{} m),{} z) = jacobiDn(z,{} m)^2 - ellipticE(m)/ellipticK(m)} and \spad{jacobiZeta(0,{} m) = 0}.
479452`\spad{jacobiZeta(z,{} m)} is the Jacobi elliptic zeta function,{} defined by \spad{D(jacobiZeta(z,{} m),{} z) = jacobiDn(z,{} m)^2 - ellipticE(m)/ellipticK(m)} and \spad{jacobiZeta(0,{} m) = 0}.
479513`\spad{jacobiZeta(z,{} m)} is the Jacobi zeta function
479582`\spad{janko2 constructs} the janko group acting on the integers 1,{} ...,{} 100.
479658`\spad{janko2(\spad{li})} constructs the janko group acting on the 100 integers given in the list {\em \spad{li}}. Note: duplicates in the list will be removed. Error: if {\em \spad{li}} has less or more than 100 different entries
479747`\spad{JContinuedFraction(d,{} z)} returns the Cauchy transform as a continued fraction at \spad{z}.
479976`\spad{JContinuedFraction(d,{} z)} returns the Cauchy transform as a continued fraction at \spad{z}.
480153`\spad{jetVariables(f)} yields all jet variables effectively occurring in \spad{f} in an ordered list.
480225`\spad{join(de1,{} de2)} combines \spad{de1} and \spad{de2} to a single differential equation.
480286`\spad{join(A,{} B)} vertically concats the matrices \spad{A} and \spad{B}.
480342`\spad{jordanAdmissible?()} tests if 2 is invertible in the coefficient domain and the multiplication defined by \spad{(1/2)(a*b+b*a)} determines a Jordan algebra,{} \spadignore{i.e.} satisfies the Jordan identity. The property of \spadatt{CommutativeStar} follows from by definition.
480424`\spad{jordanAdmissible?()} tests if 2 is invertible in the coefficient domain and the multiplication defined by \spad{(1/2)(a*b+b*a)} determines a Jordan algebra,{} \spadignore{i.e.} satisfies the Jordan identity. The property of \spadatt{CommutativeStar} follows from by definition.
480503`\spad{jordanAlgebra?()} tests if the algebra is commutative,{} characteristic is not 2,{} and \spad{(a*b)*a^2 - a*(b*a^2) = 0} for all \spad{a},{} \spad{b},{} \spad{c} in the algebra (Jordan identity). Example: for every associative algebra \spad{(A,{} +,{} @)} we can construct a Jordan algebra \spad{(A,{} +,{} *)},{} where \spad{a*b := (a@b+b@a)/2}.
480582`\spad{jordanAlgebra?()} tests if the algebra is commutative,{} characteristic is not 2,{} and \spad{(a*b)*a^2 - a*(b*a^2) = 0} for all \spad{a},{} \spad{b},{} \spad{c} in the algebra (Jordan identity). Example: for every associative algebra \spad{(A,{} +,{} @)} we can construct a Jordan algebra \spad{(A,{} +,{} *)},{} where \spad{a*b := (a@b+b@a)/2}.
480658`Constructs a \spad{K} combinator
480700`\spad{karatsuba(a,{} b,{} l,{} k)} returns \spad{a*b} by applying Karatsuba\spad{'s} trick provided that both \spad{a} and \spad{b} have at least \spad{l} terms and \spad{k > 0} holds and by calling \spad{noKaratsuba} otherwise. The other multiplications are performed by recursive calls with the same third argument and \spad{k-1} as fourth argument.
480818`\spad{karatsubaDivide(p,{} n)} returns the same as \spad{monicDivide(p,{} monomial(1,{} n))}
480949`\spad{karatsuba(a,{} b)} returns \spad{a*b} by applying Karatsuba\spad{'s} trick once. The other multiplications are performed by calling \spad{*} from \spad{U}.
481033`\spad{kelvinBei(v,{} z)} is the Kelvin bei function defined by equality \spad{kelvinBei(v,{} z) = imag(besselJ(v,{} exp(3*\%pi*\%i/4)*z))} for \spad{z} and \spad{v} real
481097`\spad{kelvinBei(v,{} z)} is the Kelvin bei function defined by equality \spad{kelvinBei(v,{} z) = imag(besselJ(v,{} exp(3*\%pi*\%i/4)*z))} for \spad{z} and \spad{v} real.
481157`\spad{kelvinBer(v,{} z)} is the Kelvin ber function defined by equality \spad{kelvinBer(v,{} z) = real(besselJ(v,{} exp(3*\%pi*\%i/4)*z))} for \spad{z} and \spad{v} real
481221`\spad{kelvinBer(v,{} z)} is the Kelvin ber function defined by equality \spad{kelvinBer(v,{} z) = real(besselJ(v,{} exp(3*\%pi*\%i/4)*z))} for \spad{z} and \spad{v} real.
481281`\spad{kelvinKei(v,{} z)} is the Kelvin kei function defined by equality \spad{kelvinKei(v,{} z) = imag(exp(-v*\%pi*\%i/2)*besselK(v,{} exp(\%pi*\%i/4)*z))} for \spad{z} and \spad{v} real
481345`\spad{kelvinKei(v,{} z)} is the Kelvin kei function defined by equality \spad{kelvinKei(v,{} z) = imag(exp(-v*\%pi*\%i/2)*besselK(v,{} exp(\%pi*\%i/4)*z))} for \spad{z} and \spad{v} real.
481405`\spad{kelvinKer(v,{} z)} is the Kelvin kei function defined by equality \spad{kelvinKer(v,{} z) = real(exp(-v*\%pi*\%i/2)*besselK(v,{} exp(\%pi*\%i/4)*z))} for \spad{z} and \spad{v} real
481469`\spad{kelvinKer(v,{} z)} is the Kelvin kei function defined by equality \spad{kelvinKer(v,{} z) = real(exp(-v*\%pi*\%i/2)*besselK(v,{} exp(\%pi*\%i/4)*z))} for \spad{z} and \spad{v} real.
481529`\spad{kernel(x)} returns \spad{x} viewed as a kernel.
481693`\spad{kernel(op,{} x)} constructs \spad{op}(\spad{x}) without evaluating it.
481753`\spad{kernel(op,{} [f1,{} ...,{} fn])} constructs \spad{op(f1,{} ...,{} fn)} without evaluating it.
481819`\spad{kernel(op,{} [a1,{} ...,{} an],{} m)} returns the kernel \spad{op(a1,{} ...,{} an)} of nesting level \spad{m}. Error: if \spad{op} is \spad{k}-ary for some \spad{k} not equal to \spad{n}.
482141`\spad{kernels(f)} returns the list of all the top-level kernels appearing in \spad{f},{} but not the ones appearing in the arguments of the top-level kernels.
482202`kernels(([\spad{f1},{}...,{}\spad{fn}]) returns the list of all the top-level kernels appearing in \spad{f1},{} ...,{} \spad{fn} but not the ones appearing in the arguments of the top-level kernels.
482269`\spad{key(\spad{gi})} returns the process ID of the given graph,{} \spad{\spad{gi}},{} of the domain \spadtype{GraphImage}.
482312`\spad{key(v)} returns the process ID number of the given two-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{TwoDimensionalViewport}.
482367`\spad{key(v)} returns the process ID number of the given three-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{ThreeDimensionalViewport}.
482485`\spad{key?(k,{} t)} tests if \spad{k} is a key in table \spad{t}.
482608`\spad{keys(t)} returns the list the keys in table \spad{t}.
482670`\spad{kgraph(objs,{} arrowName)} constructs a graph with vertices (from \spad{objs}) and fully connected arrows,{} that is,{} each object has an arrow to every other object except itself. arrowName is a prefix for all arrow names,{} this will be followed by a number starting at 1 and incremented for each arrow
482727`\spad{kmax([k1,{} ...,{} kn])} returns the top-level \spad{ki} for integration.
482797`\spad{knownInfBasis(n)} \undocumented{}
482894`\spad{kovacic(a_0,{}a_1,{}a_2)} returns either "failed" or \spad{P}(\spad{u}) such that \spad{\$e^{\int(-a_1/2a_2)} e^{\int u}\$} is a solution of \indented{5}{\spad{a_2 y'' + a_1 y' + a0 y = 0}} whenever \spad{u} is a solution of \spad{P u = 0}. The equation must be already irreducible over the rational functions.
483029`\spad{kovacic(a_0,{}a_1,{}a_2,{}ezfactor)} returns either "failed" or \spad{P}(\spad{u}) such that \spad{\$e^{\int(-a_1/2a_2)} e^{\int u}\$} is a solution of \indented{5}{\spad{\$a_2 y'' + a_1 y' + a0 y = 0\$}} whenever \spad{u} is a solution of \spad{P u = 0}. The equation must be already irreducible over the rational functions. Argument \spad{ezfact
483029`--or} is a factorisation in \spad{UP},{} not necessarily into irreducibles.
483183`Undocumented.
483265`Undocumented.
483329`\spad{kroneckerDelta()} is the rank 2 tensor defined by \indented{3}{\spad{kroneckerDelta()(i,{} j)}} \indented{6}{\spad{= 1\space{2}if i = j}} \indented{6}{\spad{= 0 if\space{2}i \~= j}}
483558`Should be local but conditional.
483794`\spad{kroneckerProduct([a1,{} a2,{} ...,{} an])} calculates the Kronecker product of the matrices \spad{a1},{} \spad{a2},{} ...,{} an. This corresponds to tensor product of corresponding operators.
483930`\spad{kroneckerProduct(a,{} b)} calculates the Kronecker product of the matrices a and \spad{b}. This corresponds to tensor product of corresponding operators.
484063`\spad{kroneckerSum([a1,{} a2,{} ...,{} an])} calculates the Kronecker sum of the matrices \spad{a1},{} \spad{a2},{} ...,{} an.
484191`\spad{kroneckerSum(a,{} b)} calculates the Kronecker sum of the matrices a and \spad{b}.
484472`\spad{ksec(k,{} [k1,{} ...,{} kn],{} x)} returns the second top-level \spad{ki} after \spad{k} involving \spad{x}.
484559`\spad{kummerM(a,{} b,{} z)} is the Kummer \spad{M} function
484623`\spad{kummerM(mu,{} nu,{} z)} is the Kummer \spad{M} function.
484684`\spad{kummerU(a,{} b,{} z)} is the Kummer \spad{U} function
484748`\spad{kummerU(mu,{} nu,{} z)} is the Kummer \spad{U} function.
484809`\spad{label(n,{} f)} gives form \spad{f} an equation label \spad{n}.
484913`\spad{lagrange(g(x))} produces the Taylor series for \spad{f(x)} \indented{1}{where \spad{f(x)} is implicitly defined as \spad{f(x) = x*g(f(x))}.}
484982`\spad{lagrange(g)} produces the power series for \spad{f} where \spad{f} is implicitly defined as \spad{f(z) = z*g(f(z))}.
485060`\spad{LagrangeInterpolation(l1,{} l2)} \undocumented
485156`\spad{laguerre(n)} returns the \spad{n}th Laguerre polynomial \spad{L[n](x)}. Note: Laguerre polynomials,{} denoted \spad{L[n](x)},{} are computed from the two term recurrence. The generating function is: \spad{exp(x*t/(t-1))/(1-t) = sum(L[n](x)*t^n/n!,{} n=0..infinity)}.
485258`\spad{laguerreL(n,{} x)} is the \spad{n}-th Laguerre polynomial,{} \spad{L[n](x)}. These are defined by \spad{exp(-t*x/(1-t))/(1-t) = sum(L[n](x)*t^n/n!,{} n = 0..)}.
485341`\spad{laguerreL(n,{} a,{} z)} is the Laguerre polynomial
485407`\spad{laguerreL(n,{} a,{} z)} is the Laguerre polynomial
485470`\spad{laguerreL(m,{} n,{} x)} is the associated Laguerre polynomial,{} \spad{L<m>[n](x)}. This is the \spad{m}-th derivative of \spad{L[n](x)}.
485572`Constructs a reference to a bound variable from its deBruijn index
485629`Constructs a reference to a free variable
485670`Constructs a node containing multiple terms
485714`\spad{lambda(code,{} [x1,{} ...,{} xn])} returns the input form corresponding to \spad{(x1,{} ...,{} xn) +-> code} if \spad{n > 1},{} or to \spad{x1 +-> code} if \spad{n = 1}.
485767`Constructs lambda term and bind any variables with the name provided
485871`\spad{lambert(f(x))} returns \spad{f(x) + f(x^2) + f(x^3) + ...}. \indented{1}{\spad{f(x)} should have zero constant coefficient.} \indented{1}{This function is used for computing infinite products.} \indented{1}{If \spad{f(x)} is a Taylor series with constant term 1,{} then} \indented{1}{\spad{product(n = 1..infinity,{} f(x^n)) = exp(lambert(log(f(x))))}.}
485939`\spad{lambert(st)} computes \spad{f(x) + f(x^2) + f(x^3) + ...} if \spad{st} is a stream representing \spad{f(x)}. This function is used for computing infinite products. If \spad{f(x)} is a power series with constant coefficient 1 then \spad{prod(f(x^n),{} n = 1..infinity) = exp(lambert(log(f(x))))}.
486016`Undocumented
486141`Undocumented
486248`Undocumented
486346`Undocumented
486426`Undocumented
486560`Undocumented
486670`Undocumented
486777`Undocumented
486860`Undocumented
486994`Undocumented
487104`Undocumented
487211`Undocumented
487294`\spad{lambertW0(x)} applies lambertW to \spad{x}. \spad{x} must have no term of order 0.
487377`\spad{lambertW(x)} is the Lambert \spad{W} function at \spad{x}
487438`\spad{lambertW(z)} = \spad{w} is the principial branch of the solution to the equation \spad{we^w = z}.
487494`\spad{lambertW(x)} is the Lambert \spad{W} function.
487584`\spad{lambertW(x)} is the Lambert \spad{W} function.
487662`\spad{lambertW(x)} is the Lambert \spad{W} function.
487734`\spad{lambertW(x)} is the Lambert \spad{W} function.
487794`\spad{lambintegrate(f,{} dx,{} D1,{} D2,{} extint,{} int)} integrates \spad{f} in extension by LambertW function. \spad{dx} is derivative of the argument of LambertW,{} \spad{D1} is dervative on \spad{F},{} \spad{D2} is derivative on UP,{} \spad{extint} is extended int
487794`--egration function on \spad{F},{} int is integration function on \spad{F}.
488032`Undocumented.
488137`Undocumented.
488215`Undocumented.
488326`Undocumented.
488410`Undocumented.
488499`Undocumented.
488570`\spad{laplace(f,{} t,{} s)} returns the Laplace transform of \spad{f(t)} using \spad{s} as the new variable. This is \spad{integral(exp(-s*t)*f(t),{} t = 0..\%plusInfinity)}. Returns the formal object \spad{laplace(f,{} t,{} s)} if it cannot compute the transform.
488635`\spad{laplacian(v,{} xlist)} computes the laplacian of the scalar field \spad{v},{} \spad{v} a function of the variables listed in xlist.
488717`\spad{laplacianMatrix(s)} returns matrix also known as "Kirchhoff matrix" or "Admittance matrix" where: entry [\spad{i},{} \spad{j}] = inDegree(\spad{vi}) if \spad{i} = \spad{j} (number of incoming links) \spad{-1} if \spad{i} not = \spad{j} and \spad{vi} is adjacent to \spad{vj} 0 otherwise Alternatively this is defined as \spad{D} - A,{} where \spad{D} is the diagonal degree matrix. It contains both adjacency information and degree in
488717`--formation. There are other,{} similar matrices,{} that are also called "Laplacian matrices" of a graph.
488848`\spad{largest l} returns the largest element of \spad{l} where the partial ordering induced by setOrder is completed into a total one by the ordering on \spad{S}.
488930`\spad{largest(l,{} fn)} returns the largest element of \spad{l} where the partial ordering induced by setOrder is completed into a total one by \spad{fn}.
489179`\spad{last(l)} returns the last element of a doubly-linked aggregate \spad{l}. Error: if \spad{l} is empty.
489231`\spad{last(u)} resturn the last element of \spad{u}. Note: for lists,{} \spad{last(u) = u . (maxIndex u) = u . (\# u - 1)}.
489285`\spad{last(ts)} returns the polynomial of \spad{ts} with smallest main variable if \spad{ts} is not empty,{} otherwise returns \spad{"failed"}.
489495`\spad{last(u,{} n)} returns a copy of the last \spad{n} (\spad{n >= 0}) nodes of \spad{u}. Note: \spad{last(u,{} n)} is a list of \spad{n} elements.
489569`\spad{lastSubResultant(a,{} b)} returns \spad{resultant(a,{} b)} if \spad{a} and \spad{b} has no non-trivial \spad{gcd} in \spad{R^(-1) P} otherwise the non-zero sub-resultant with smallest index.
489666`\spad{lastSubResultant(P,{} Q)} computes the last non zero subresultant of \spad{P} and \spad{Q}
489747`\spad{lastSubResultant(a,{} b)} returns the last non-zero subresultant of \spad{a} and \spad{b} where \spad{a} and \spad{b} are assumed to have the same main variable \spad{v} and are viewed as univariate polynomials in \spad{v}.
489846`\spad{lastSubResultant(p1,{} p2,{} ts)} returns \spad{lpwt} such that \spad{lpwt.i.val} is a quasi-monic \spad{gcd} of \spad{p1} and \spad{p2} \spad{w}.\spad{r}.\spad{t}. \spad{lpwt.i.tower},{} for every \spad{i},{} and such that the list of the \spad{lpwt.i.tower} is a split of Kalkbrener of \spad{ts}. Moreover,{} if \spad{p1} and \spad{p2} do not have a non-trivial \spad{gcd} \spad{w}.\spad{r}.
489846`--\spad{t}. \spad{lpwt.i.tower} then \spad{lpwt.i.val} is the resultant of these polynomials \spad{w}.\spad{r}.\spad{t}. \spad{lpwt.i.tower}. This assumes that \spad{p1} and \spad{p2} have the same maim variable and that this variable is greater that any variable occurring in \spad{ts}.
489954`\spad{lastSubResultantElseSplit(p1,{} p2,{} ts)} returns either \spad{g} a quasi-monic \spad{gcd} of \spad{p1} and \spad{p2} \spad{w}.\spad{r}.\spad{t}. the \spad{ts} or a split of Kalkbrener of \spad{ts}. This assumes that \spad{p1} and \spad{p2} have the same maim variable and that this variable is greater that any variable occurring in \spad{ts}.
490060`\spad{lastSubResultantEuclidean(P,{} Q)} computes the last non zero subresultant \spad{S} and carries out the equality \spad{coef1*P + coef2*Q = S}.
490281`\spad{latex(s)} returns a LaTeX-printable output representation of \spad{s}.
490326`\spad{laurent(f(x))} converts the Puiseux series \spad{f(x)} to a Laurent series if possible. Error: if this is not possible.
490411`\spad{laurent(f)} returns a Laurent expansion of the expression \spad{f}. Note: \spad{f} should have only one variable; the series will be expanded in powers of that variable.
490483`\spad{laurent(x)} returns \spad{x} viewed as a Laurent series.
490832`\spad{laurent(f,{} x = a)} expands the expression \spad{f} as a Laurent series in powers of \spad{(x - a)}.
490917`\spad{laurent(f,{} n)} returns a Laurent expansion of the expression \spad{f}. Note: \spad{f} should have only one variable; the series will be expanded in powers of that variable and terms will be computed up to order at least \spad{n}.
490997`\spad{laurent(n,{} st)} returns \spad{xn * series st)} where \spad{xn = monomial(1,{} n)} and \spad{series st} stands for the power series with coefficients given by the stream st.
491084`\spad{laurent(n,{} f(x))} returns \spad{x^n * f(x)}.
491177`\spad{laurent(f,{} x = a,{} n)} expands the expression \spad{f} as a Laurent series in powers of \spad{(x - a)}; terms will be computed up to order at least \spad{n}.
491270`\spad{laurent(n +-> a(n),{} x = a,{} n0..)} returns \spad{sum(n = n0..,{} a(n) * (x - a)^n)}; \spad{laurent(n +-> a(n),{} x = a,{} n0..n1)} returns \spad{sum(n = n0..n1,{} a(n) * (x - a)^n)}.
491388`\spad{laurent(a(n),{} n,{} x=a,{} n0..)} returns \spad{sum(n = n0..,{} a(n) * (x - a)^n)}; \spad{laurent(a(n),{} n,{} x=a,{} n0..n1)} returns \spad{sum(n = n0..n1,{} a(n) * (x - a)^n)}.
491502`\spad{laurentIfCan(f(x))} converts the Puiseux series \spad{f(x)} to a Laurent series if possible. If this is not possible,{} "failed" is returned.
491608`\spad{laurentRep(f(x))} returns \spad{g(x)} where the Puiseux series \spad{f(x) = g(x^r)} is represented by \spad{[r,{} g(x)]}.
491696`\spad{Lazard2(F,{} x,{} y,{} n)} computes \spad{(x/y)^(n-1) * F}
491786`\spad{Lazard(x,{} y,{} n)} computes \spad{x^n/y^(n-1)}
491867`\spad{LazardQuotient2(p,{} a,{} b,{} n)} returns \spad{(a^(n-1) * p) exquo b^(n-1)} assuming that this quotient does not fail.
491987`\spad{LazardQuotient(a,{} b,{} n)} returns \spad{a^n exquo b^(n-1)} assuming that this quotient does not fail.
492103`\spad{lazy?(s)} returns \spad{true} if the first node of the stream \spad{s} is a lazy evaluation mechanism which could produce an additional entry to \spad{s}.
492160`\spad{lazyEvaluate(s)} causes one lazy evaluation of stream \spad{s}. Caution: the first node must be a lazy evaluation mechanism (satisfies \spad{lazy?(s) = true}) as there is no error check. Note: a call to this function may or may not produce an explicit first entry
492219`\spad{lazyGintegrate(f,{} r,{} g)} is used for fixed point computations.
492334`\spad{lazyIntegrate(r,{} f)} is a version of integrate used for fixed point computations.
492456`\spad{lazyIntegrate(c,{} f)} integrates with constant term \spad{c},{} this is simply the right shift
492562`\spad{lazyIrreducibleFactors(lp)} returns \spad{lf} such that if \spad{lp = [p1,{} ...,{} pn]} and \spad{lf = [f1,{} ...,{} fm]} then \spad{p1*p2*...*pn=0} means \spad{f1*f2*...*fm=0},{} and the \spad{\spad{fi}} are irreducible over \spad{R} and are pairwise distinct. The algorithm tries to avoid factorization into irreducible factors as far as possible and
492562`-- makes previously use of \spad{gcd} techniques over \spad{R}.
492775`\spad{lazyPquo(a,{} b)} returns the polynomial \spad{q} such that \spad{lazyPseudoDivide(a,{} b)} returns \spad{[c,{} g,{} q,{} r]}.
492912`\spad{lazyPquo(a,{} b,{} v)} returns the polynomial \spad{q} such that \spad{lazyPseudoDivide(a,{} b,{} v)} returns \spad{[c,{} g,{} q,{} r]}.
493049`\spad{lazyPrem(a,{} b)} returns the polynomial \spad{r} reduced \spad{w}.\spad{r}.\spad{t}. \spad{b} and such that \spad{b} divides \spad{init(b)^e a - r} where \spad{e} is the number of steps of this pseudo-division.
493186`\spad{lazyPrem(a,{} b,{} v)} returns the polynomial \spad{r} reduced \spad{w}.\spad{r}.\spad{t}. \spad{b} viewed as univariate polynomials in the variable \spad{v} such that \spad{b} divides \spad{init(b)^e a - r} where \spad{e} is the number of steps of this pseudo-division.
493382`\spad{lazyPremWithDefault(a,{} b)} returns \spad{[c,{} g,{} r]} such that \spad{r = lazyPrem(a,{} b)} and \spad{(c^g)*r = prem(a,{} b)}.
493638`\spad{lazyPremWithDefault(a,{} b,{} v)} returns \spad{[c,{} g,{} r]} such that \spad{r = lazyPrem(a,{} b,{} v)} and \spad{(c^g)*r = prem(a,{} b,{} v)}.
493770`\spad{lazyPseudoDivide(a,{} b)} returns \spad{[c,{} g,{} q,{} r]} such that \spad{c^n * a = q*b +r} and \spad{lazyResidueClass(a,{} b)} returns \spad{[r,{} c,{} n]} where \spad{n + g = max(0,{} degree(b) - degree(a) + 1)}.
494038`\spad{lazyPseudoDivide(a,{} b)} returns \spad{[c,{} g,{} q,{} r]} such that \spad{[c,{} g,{} r] = lazyPremWithDefault(a,{} b)} and \spad{q} is the pseudo-quotient computed in this lazy pseudo-division.
494311`\spad{lazyPseudoDivide(a,{} b,{} v)} returns \spad{[c,{} g,{} q,{} r]} such that \spad{r = lazyPrem(a,{} b,{} v)},{} \spad{(c^g)*r = prem(a,{} b,{} v)} and \spad{q} is the pseudo-quotient computed in this lazy pseudo-division.
494452`\spad{lazyPseudoQuotient(a,{} b)} returns \spad{q} if \spad{lazyPseudoDivide(a,{} b)} returns \spad{[c,{} g,{} q,{} r]}
494530`\spad{lazyPseudoRemainder(a,{} b)} returns \spad{r} if \spad{lazyResidueClass(a,{} b)} returns \spad{[r,{} c,{} n]}. This lazy pseudo-remainder is computed by means of the \spadopFrom{fmecg}{NewSparseUnivariatePolynomial} operation.
494609`\spad{lazyResidueClass(a,{} b)} returns \spad{[r,{} c,{} n]} such that \spad{r} is reduced \spad{w}.\spad{r}.\spad{t}. \spad{b} and \spad{b} divides \spad{c^n * a - r} where \spad{c} is \spad{leadingCoefficient(b)} and \spad{n} is as small as possible with the previous properties.
494856`\spad{lazyResidueClass(a,{} b)} returns \spad{[p,{} q,{} n]} where \spad{p / q^n} represents the residue class of \spad{a} modulo \spad{b} and \spad{p} is reduced \spad{w}.\spad{r}.\spad{t}. \spad{b} and \spad{q} is \spad{init(b)}.
494984`\spad{lazyVariations(l,{} s1,{} sn)} is the number of sign variations in the list of non null numbers [s1::l]\spad{@sn},{}
495140`left contraction inner product
495235`\spad{lcm(l)} returns the least common multiple of the elements of the list \spad{l}.
495314`\spad{lcm(x,{} y)} returns the least common multiple of \spad{x} and \spad{y}.
495354`\spad{lcm(a,{} lo,{} \spad{hi},{} p)} computes \spad{lcm} of elements a(\spad{lo}),{} a(\spad{lo+1}),{} ...,{} a(\spad{hi}).
495465`\spad{lcmCoef(c1,{} c2)} computes (llcm_res,{} \spad{coeff1},{} \spad{coeff2}) such that llcm_res is least left common multiple of \spad{c1} and \spad{c2} and llcm_res = \spad{coeff1*c1} = \spad{coeff2*c2}
495623`\spad{lcx0(x,{} lv)} computes leading coefficient of \spad{x} and corresponding product of variables (monomial with coefficient 1) with respect to variables in \spad{lv} Variables in \spad{lv} must be decreasing and bigger than all other variables of \spad{x}.
495822`\spad{lcz(x,{} z)} computes leading coefficient and degree of \spad{x} with respect to variable \spad{z}.
495972`\spad{ldegree(p,{} v)} computes degree of \spad{p} with respect to \spad{v}. \spad{v} must be one of auxilary variables and must be lexicographically first variables which appears in \spad{p}. Morover,{} \spad{p} must be a polynomial in \spad{v} (not a rational function).
496059`\spad{LE(x,{} y)} returns the \spadtype{Switch} expression representing \spad{x<=y}.
496333`\spad{leader(p)} returns the derivative of the highest rank appearing in the differential polynomial \spad{p} Note: an error occurs if \spad{p} is in the ground ring.
496402`\spad{leadingBasisTerm(p)} returns the leading basis term of antisymmetric polynomial \spad{p}.
496459`\spad{leadingBasisTerm(df)} returns the leading basis term of differential form \spad{df}.
496534`\spad{leadingCoefficient(df)} returns the leading coefficient of differential form \spad{df}.
496629`\spad{leadingCoefficient(p)} returns the coefficient of the highest degree term of \spad{p}.
496717`\spad{leadingCoefficient(p)} returns the leading coefficient of antisymmetric polynomial \spad{p}.
496775`\spad{leadingCoefficient(x)} \undocumented
496856`\spad{leadingCoefficient }\undocumented
497077`\spad{leadingCoefficient(z)} returns the coefficient of the leading (with respect to the ordering on the indexing set) monomial of \spad{z}. Error: if \spad{z} has no support.
497152`\spad{leadingCoefficient(f)} returns the coefficient of the lowest order term of \spad{f}
497232`\spad{leadingCoefficient(p)} returns the coefficient highest degree term of \spad{p}.
497296`\spad{leadingCoefficient(l)} is \spad{a(n)} if \indented{2}{\spad{l = sum(monomial(a(i),{} i),{} i = 0..n)}.}
497448`\spad{leadingCoefficient(p,{} v)} returns the leading coefficient of \spad{p},{} where \spad{p} is viewed as A univariate polynomial in \spad{v}.
497527`\spad{leadingCoefficientRicDE(op)} returns \spad{[[m1,{} p1],{} [m2,{} p2],{} ... ,{} [mk,{} pk]]} such that the polynomial part of any rational solution of the associated Riccati equation of \spad{op y = 0} must have degree \spad{mj} for some \spad{j},{} and its leading coefficient is then a zero of \spad{pj}. In addition,{} \spad{m1>m2> ... >mk}.
497642`\spad{leadingDer(fun)} yields the leading derivative of \spad{fun}. If \spad{fun} contains no derivatives \spad{1} is returned.
497767`\spad{leadingExponent(x)} \undocumented
497845`\spad{leadingIdeal(I)} is the ideal generated by the leading terms of the elements of the ideal \spad{I}.
497919`\spad{leadingIndex(x)} \undocumented
497995`\spad{leadingMonomial(p)} returns the monomial of \spad{p} with the highest degree.
498081`\spad{leadingMonomial(x)} \undocumented
498258`\spad{leadingMonomial(p)} returns the monomial of \spad{p} with the highest degree.
498320`\spad{leadingMonomial(x)} returns the monomial supported by the first element from \spad{S}. Error: if \spad{x} has no support.
498393`\spad{leadingMonomial(f)} returns the monomial of \spad{f} of lowest order.
498468`\spad{leadingSupport(z)} returns the index of leading (with respect to the ordering on the indexing set) monomial of \spad{z}. Error: if \spad{z} has no support.
498539`\spad{leadingTerm(x)} returns the leading (with respect to the ordering on the indexing set) term of \spad{z}. Error: if \spad{z} has no support.
498621`\spad{leaf?(x)} \undocumented
498840`\spad{leaf?(u)} tests if \spad{u} is a terminal node.
498896`\spad{leastAffineMultiple(f)} computes the least affine polynomial which is divisible by the polynomial \spad{f} over the finite field {\em GF},{} \spadignore{i.e.} a polynomial whose exponents are 0 or a power of \spad{q},{} the size of {\em GF}.
499096`\spad{leastMonomial(p)} returns an error if \spad{p} is \spad{O},{} otherwise,{} if \spad{p} belongs to \spad{R} returns \spad{1},{} otherwise,{} the monomial of \spad{p} with lowest degree,{} where \spad{p} is viewed as a univariate polynomial in its main variable.
499168`\spad{leastPower(p,{} n)} returns \spad{e},{} where \spad{e} is the smallest integer such that \spad{p ^e >= n}
499340`\spad{leaves(t)} returns the list of values in obtained by visiting the nodes of tree \spad{t} in left-to-right order.
499397`\spad{left(x)} returns left subtree of \spad{x} or error if \spadopFrom{retractable?}{FreeMagma}(\spad{x}) is \spad{true}.
499443`\spad{left(x)} returns left subtree of \spad{x} or error if \spadopFrom{retractable?}{LyndonWord}(\spad{x}) is \spad{true}.
499490`\spad{left(f)} left-justifies form \spad{f} in total space.
499529`\spad{left(u)} returns the left child.
499585`\spad{left(rootChar)} is the left bound of the isolating interval
499677`\spad{left(f,{} n)} left-justifies form \spad{f} within space of width \spad{n}.
499724`\spad{leftAlternative?()} tests if \spad{2*associator(a,{} a,{} b) = 0} for all \spad{a},{} \spad{b} in the algebra. Note: we only can test this; in general we don\spad{'t} know whether \spad{2*a=0} implies \spad{a=0}.
499805`\spad{leftAlternative?()} tests if \spad{2*associator(a,{} a,{} b) = 0} for all \spad{a},{} \spad{b} in the algebra. Note: we only can test this; in general we don\spad{'t} know whether \spad{2*a=0} implies \spad{a=0}.
499994`\spad{leftCharacteristicPolynomial(a)} returns the characteristic polynomial of the left regular representation of \spad{a} with respect to any basis.
500108`\spad{leftDiscriminant()} returns the determinant of the \spad{n}-by-\spad{n} matrix whose element at the \spad{i}\spad{-}th row and \spad{j}\spad{-}th column is given by the left trace of the product \spad{vi*vj},{} where \spad{v1},{} ...,{} \spad{vn} are the elements of the fixed \spad{R}-module basis. Note: the same as \spad{determinant(leftTraceMatrix())}.
500179`\spad{leftDiscriminant()} returns the determinant of the \spad{n}-by-\spad{n} matrix whose element at the \spad{i}\spad{-}th row and \spad{j}\spad{-}th column is given by the left trace of the product \spad{vi*vj},{} where \spad{v1},{} ...,{} \spad{vn} are the elements of the fixed \spad{R}-module basis. Note: the same as \spad{determinant(leftTraceMatrix())}.
500401`\spad{leftDiscriminant([v1,{} ...,{} vn])} returns the determinant of the \spad{n}-by-\spad{n} matrix whose element at the \spad{i}\spad{-}th row and \spad{j}\spad{-}th column is given by the left trace of the product \spad{vi*vj}. Note: the same as \spad{determinant(leftTraceMatrix([v1,{} ...,{} vn]))}.
500483`\spad{leftDivide(a,{} b)} returns the pair \spad{[q,{} r]} such that \spad{a = b*q + r} and the degree of \spad{r} is less than the degree of \spad{b}. This process is called ``left division\spad{''}.
500598`\spad{leftDivide(a,{} b,{} sigma)} returns the pair \spad{[q,{} r]} such that \spad{a = b*q + r} and the degree of \spad{r} is less than the degree of \spad{b}. This process is called ``left division\spad{''}. \spad{\sigma} is the morphism to use.
500821`\spad{leftExactQuotient(a,{} b)} computes the value \spad{q},{} if it exists,{} \indented{1}{such that \spad{a = b*q}.}
501036`\spad{leftExtendedGcd(a,{} b)} returns \spad{[c,{} d,{} g]} such that \spad{g = a * c + b * d = leftGcd(a,{} b)}.
501162`\spad{leftFactor(p,{} q)} \undocumented
501245`\spad{leftFactorIfCan(f,{} h)} returns the left factor (\spad{g} in \spad{f} = \spad{g} \spad{o} \spad{h}) of the functional decomposition of the polynomial \spad{f} with given \spad{h} or \spad{"failed"} if \spad{g} does not exist.
501415`\spad{leftGcd(a,{} b)} computes the value \spad{g} of highest degree such that \indented{3}{\spad{a = g*aa}} \indented{3}{\spad{b = g*bb}} for some values \spad{aa} and \spad{bb}. The value \spad{g} is computed using left-division.
501562`\spad{leftLcm(a,{} b)} computes the value \spad{m} of lowest degree such that \spad{m = aa*a = bb*b} for some values \spad{aa} and \spad{bb}. The value \spad{m} is computed using right-division.
501748`\spad{leftMinimalPolynomial(a)} returns the polynomial determined by the smallest non-trivial linear combination of left powers of \spad{a}. Note: the polynomial never has a constant term as in general the algebra has no unit.
501876`\spad{leftMult(s,{} a)} returns \spad{s * a} where \spad{*} is the monoid operation,{} which is assumed non-commutative.
501995`\spad{leftNorm(a)} returns the determinant of the left regular representation of \spad{a}.
502061`\spad{leftOne(eq)} divides by the left hand side.
502132`\spad{leftOne(eq)} divides by the left hand side.
502379`\spad{leftPower(a,{} n)} returns the \spad{n}\spad{-}th left power of \spad{a},{} \spadignore{i.e.} \spad{leftPower(a,{} n) := a * leftPower(a,{} n-1)} and \spad{leftPower(a,{} 0) := 1}.
502445`\spad{leftPower(a,{} n)} returns the \spad{n}\spad{-}th left power of \spad{a},{} \spadignore{i.e.} \spad{leftPower(a,{} n) := a * leftPower(a,{} n-1)} and \spad{leftPower(a,{} 1) := a}.
502570`\spad{leftQuotient(a,{} b)} computes the pair \spad{[q,{} r]} such that \spad{a = b*q + r} and the degree of \spad{r} is less than the degree of \spad{b}. The value \spad{q} is returned.
502657`\spad{leftRank(x)} determines the number of linearly independent elements in \spad{x*b1},{} ...,{} \spad{x*bn},{} where \spad{b=[b1,{} ...,{} bn]} is a basis.
502724`\spad{leftRankPolynomial()} returns the left minimimal polynomial of the generic element
502877`\spad{leftRankPolynomial()} calculates the left minimal polynomial of the generic element in the algebra,{} defined by the same structural constants over the polynomial ring in symbolic coefficients with respect to the fixed basis.
502990`\spad{leftRankPolynomial()} calculates the left minimal polynomial of the generic element in the algebra,{} defined by the same structural constants over the polynomial ring in symbolic coefficients with respect to the fixed basis.
503192`\spad{leftRecip(a)} returns an element,{} which is a left inverse of \spad{a},{} or \spad{"failed"} if there is no unit element,{} if such an element doesn\spad{'t} exist or cannot be determined (see unitsKnown).
503297`\spad{leftRecip(a)} returns an element,{} which is a left inverse of \spad{a},{} or \spad{"failed"} if such an element doesn\spad{'t} exist or cannot be determined (see unitsKnown).
503444`\spad{leftRegularRepresentation(a)} returns the matrix of the linear map defined by left multiplication by \spad{a} with respect to the fixed \spad{R}-module basis.
503723`\spad{leftRegularRepresentation(a,{} [v1,{} ...,{} vn])} returns the matrix \spad{m} of the linear map defined by left multiplication by \spad{a} with respect to the \spad{R}-module basis \spad{b = [v1,{} ...,{} vn]}. That is for all \spad{x} \spad{coordinates(a*x,{} b) = m*coordinates(x,{} b)}.
503896`\spad{leftRemainder(a,{} b)} computes the pair \spad{[q,{} r]} such that \spad{a = b*q + r} and the degree of \spad{r} is less than the degree of \spad{b}. The value \spad{r} is returned.
503984`\spad{leftScalarTimes!(c,{} r,{} a)} computes the scalar product \spad{r * a} and stores the result in the matrix \spad{c}. Error: if \spad{a} and \spad{c} do not have the same dimensions.
504150`\spad{leftTrace(a)} returns the trace of the left regular representation of \spad{a}.
504217`\spad{leftTraceMatrix()} is the \spad{n}-by-\spad{n} matrix whose element at the \spad{i}\spad{-}th row and \spad{j}\spad{-}th column is given by left trace of the product \spad{vi*vj},{} where \spad{v1},{} ...,{} \spad{vn} are the elements of the fixed \spad{R}-module basis.
504295`\spad{leftTraceMatrix()} is the \spad{n}-by-\spad{n} matrix whose element at the \spad{i}\spad{-}th row and \spad{j}\spad{-}th column is given by left trace of the product \spad{vi*vj},{} where \spad{v1},{} ...,{} \spad{vn} are the elements of the fixed \spad{R}-module basis.
504538`\spad{leftTraceMatrix([v1,{} ...,{} vn])} is the \spad{n}-by-\spad{n} matrix whose element at the \spad{i}\spad{-}th row and \spad{j}\spad{-}th column is given by the left trace of the product \spad{vi*vj}.
504627`\spad{leftTrim(s,{} c)} returns \spad{s} with all leading characters \spad{c} deleted. For example,{} \spad{leftTrim(" abc ",{} char " ")} returns \spad{"abc "}.
504685`\spad{leftTrim(s,{} cc)} returns \spad{s} with all leading characters in \spad{cc} deleted. For example,{} \spad{leftTrim("(abc)",{} charClass "()")} returns \spad{"abc)"}.
504822`\spad{leftUnit()} returns a left unit of the algebra (not necessarily unique),{} or \spad{"failed"} if there is none.
504924`\spad{leftUnits()} returns the affine space of all left units of the algebra,{} or \spad{"failed"} if there is none
505156`\spad{leftUnits()} returns the affine space of all left units of the algebra,{} or \spad{"failed"} if there is none.
505293`\spad{leftZero(eq)} subtracts the left hand side.
505356`\spad{legendre(n)} returns the \spad{n}th Legendre polynomial \spad{P[n](x)}. Note: Legendre polynomials,{} denoted \spad{P[n](x)},{} are computed from the two term recurrence. The generating function is: \spad{1/sqrt(1-2*t*x+t^2) = sum(P[n](x)*t^n,{} n=0..infinity)}.
505468`\spad{legendre(a,{} p)} returns the Legendre symbol \spad{L(a/p)}. \spad{L(a/p) = (-1)^((p-1)/2) mod p} (\spad{p} prime),{} which is 0 if \spad{a} is 0,{} 1 if \spad{a} is a quadratic residue \spad{mod p} and \spad{-1} otherwise. Note: because the primality test is expensive,{} if it is known that \spad{p} is prime then use \spad{jacobi(a,{} p)}.
505547`\spad{legendreP(n,{} x)} is the \spad{n}-th Legendre polynomial,{} \spad{P[n](x)}. These are defined by \spad{1/sqrt(1-2*x*t+t^2) = sum(P[n](x)*t^n,{} n = 0..)}.
505663`\spad{legendreP(nu,{} mu,{} z)} is the Legendre \spad{P} function
505729`\spad{legendreP(nu,{} mu,{} z)} is the Legendre \spad{P} function.
505792`\spad{legendreQ(nu,{} mu,{} z)} is the Legendre \spad{Q} function
505858`\spad{legendreQ(nu,{} mu,{} z)} is the Legendre \spad{Q} function.
505921`\spad{length(x)} returns the length of \spad{x}.
505981`\spad{length([l1]*[l2]*...[ln])} returns the length of the word \spad{l1*l2*...*ln}.
506067`\spad{length(x)} returns the number of elements in tuple \spad{x}
506122`\spad{length(x)} returns the number of entries in \spad{x}.
506183`\spad{length(x)} returns the number of entries in \spad{x}.
506289`\spad{length(p)} returns the sum of the absolute values of the coefficients of the polynomial \spad{p}.
506360`\spad{length(a)} length of \spad{a} in digits.
506410`\spad{length(v)} computes the sqrt(dot(\spad{v},{} \spad{v})),{} \spadignore{i.e.} the euclidean length
506496`\spad{lepol }\undocumented
506579`\spad{lerchPhi(z,{} s,{} a)} is the Lerch Phi function
506644`\spad{lerchPhi(z,{} s,{} a)} is the Lerch Phi function.
507006`\spad{less?(a,{} b)} compares \spad{a} and \spad{b} in the partial ordering induced by setOrder.
507087`\spad{less?(u,{} n)} tests if \spad{u} has less than \spad{n} elements.
507150`\spad{less?(a,{} b,{} fn)} compares \spad{a} and \spad{b} in the partial ordering induced by setOrder,{} and returns \spad{fn(a,{} b)} if \spad{a} and \spad{b} are not comparable in that ordering.
507230`\spad{level(s)} returns a non negative integer which is the current level field of the indicated 3 dimensional subspace \spad{s}.
507289`\spad{leviCivitaSymbol()} is the rank \spad{dim} tensor defined by \spad{leviCivitaSymbol()(i1,{} ...idim) = +1/0/-1} if \spad{i1,{} ...,{} idim} is an even/is nota /is an odd permutation of \spad{minix,{} ...,{} minix+dim-1}.
507356`\spad{lex(ls)} sorts a list of pairs to lexicographic order
507424`\spad{lexGroebner(lp,{} lv)} computes Groebner basis for the list of polynomials \spad{lp} in lexicographic order. The variables are ordered by their position in the list \spad{lv}.
507522`\spad{lexico(x,{} y)} returns \spad{true} iff \spad{x} is smaller than \spad{y} \spad{w}.\spad{r}.\spad{t}. the lexicographical ordering induced by \spad{VarSet}. \spad{N}.\spad{B}. This operation does not take into account the tree structure of its arguments. Thus this is not a total ordering.
507578`\spad{lexico(x,{} y)} returns \spad{true} iff \spad{x} is smaller than \spad{y} \spad{w}.\spad{r}.\spad{t}. the pure lexicographical ordering induced by \spad{S}.
507647`\spad{lexico(x,{} y)} returns \spad{true} iff \spad{x} is smaller than \spad{y} \spad{w}.\spad{r}.\spad{t}. the lexicographical ordering induced by \spad{VarSet}.
507704`\spad{lexTriangular(base,{} norm?)} decomposes the variety associated with \spad{base} into regular chains. Thus a point belongs to this variety iff it is a regular zero of a regular set in in the output. Note that \spad{base} needs to be a lexicographical Groebner basis of a zero-dimensional ideal. If \spad{norm?} is \spad{true} then the regular se
507704`--ts are normalized.
507860`\spad{lfextendedint(f,{} x,{} g)} returns functions \spad{[h,{} c]} such that \spad{dh/dx = f - cg},{} if (\spad{h},{} \spad{c}) exist,{} "failed" otherwise.
507971`\spad{lfinfieldint(f,{} x)} returns a function \spad{g} such that \spad{dg/dx = f} if \spad{g} exists,{} "failed" otherwise.
508055`\spad{lfintegrate(f,{} x)} = \spad{g} such that \spad{dg/dx = f}.
508141`lflimitedint(\spad{f},{} \spad{x},{} [\spad{g1},{} ...,{} \spad{gn}]) returns functions \spad{[h,{} [[\spad{ci},{} \spad{gi}]]]} such that the \spad{gi}\spad{'s} are among \spad{[g1,{} ...,{} gn]},{} and \spad{d(h+sum(\spad{ci} log(\spad{gi})))/dx = f},{} if possible,{} "failed" otherwise.
508289`\spad{lfunc(d,{} n)} computes the rank of the \spad{n}th factor in the lower central series of the free \spad{d}-generated free Lie algebra; This rank is \spad{d} if \spad{n} = 1 and binom(\spad{d},{} 2) if \spad{n} = 2
508346`\spad{lhs(f)} returns the left side of \spad{f}
508389`\spad{lhs(r)} returns the left hand side of the rule \spad{r}.
508437`\spad{lhs(eqn)} returns the left hand side of equation \spad{eqn}.
508475`\spad{\spad{li}(f)} denotes the logarithmic integral
508524`\spad{\spad{li}(x)} returns the logarithmic integral of \spad{x},{} \spadignore{i.e.} the integral of \spad{dx / log(x)}.
508578`\spad{\spad{li}(f)} denotes the logarithmic integral
508721`\spad{\spad{li}(f)} denotes the logarithmic integral
508778`\spad{li2(z)} is polylog(2,{} \spad{z})
508851`\spad{library(ln)} creates a new library file.
508896`\spad{lie(v,{} w)} calculates the Lie derivative of \spad{w} with respect to \spad{v}. (This yields the commutator of the fields.)
508947`\spad{lie(v,{} om)} calculates the Lie derivative of \spad{om} with respect to \spad{v}.
509017`\spad{lieAdmissible?()} tests if the algebra defined by the commutators is a Lie algebra,{} \spadignore{i.e.} satisfies the Jacobi identity. The property of anticommutativity follows from definition.
509096`\spad{lieAdmissible?()} tests if the algebra defined by the commutators is a Lie algebra,{} \spadignore{i.e.} satisfies the Jacobi identity. The property of anticommutativity follows from definition.
509172`\spad{lieAlgebra?()} tests if the algebra is anticommutative and \spad{(a*b)*c + (b*c)*a + (c*a)*b = 0} for all \spad{a},{} \spad{b},{} \spad{c} in the algebra (Jacobi identity). Example: for every associative algebra \spad{(A,{} +,{} @)} we can construct a Lie algebra \spad{(A,{} +,{} *)},{} where \spad{a*b := a@b-b@a}.
509248`\spad{lieAlgebra?()} tests if the algebra is anticommutative and \spad{(a*b)*c + (b*c)*a + (c*a)*b = 0} for all \spad{a},{} \spad{b},{} \spad{c} in the algebra (Jacobi identity). Example: for every associative algebra \spad{(A,{} +,{} @)} we can construct a Lie algebra \spad{(A,{} +,{} *)},{} where \spad{a*b := a@b-b@a}.
509321`\spad{LiePoly(l)} returns the bracketed form of \spad{l} as a Lie polynomial.
509393`\spad{LiePolyIfCan(p)} return \spad{p} if \spad{p} is a Lie polynomial.
509491`\spad{LiePolyIfCan(p)} returns \spad{p} in Lyndon basis if \spad{p} is a Lie polynomial,{} otherwise \spad{"failed"} is returned.
509597`\spad{lift(x)} return the canonical representative of the equivalence class \spad{x}
509666`\spad{lift(x)} \undocumented
509782`\spad{lift(z)} returns a minimal degree univariate polynomial up such that \spad{z=reduce up}.
509833`\spad{lift(u,{} k)} \undocumented
509991`\spad{lift should} be local
510232`\spad{lifting(u,{} lv,{} lu,{} lr,{} lp,{} ln,{} gen_solv)} lifts univariate factorization,{} returning recovered factors or "failed" in case of bad reduction. 
510232`--\spad{u} is multivariate polynomial to factor,{} \spad{lu} is list of univariate factors,{} \spad{lv} is list of variables,{} \spad{ln} is list of degrees corresponding to variables,{} \spad{lr} is list of evaluation points,{} \spad{lp} is list of leading coefficients of factors if known,{} empty otherwise,{} gen_solv delivers solver for polynomial equations
510579`\spad{lifting(u,{} lv,{} lu,{} lr,{} lp,{} ln,{} r)} is lifting(\spad{u},{} \spad{lv},{} \spad{lu},{} \spad{lr},{} \spad{lp},{} \spad{ln},{} solv(\spad{r})) where solv(\spad{r}) is solver using reduction modulo \spad{r} and lifting. Memberes of \spad{lu} must 
510579`--be relatively prime modulo \spad{r}
510826`\spad{light(c)} sets the shade of a hue,{} \spad{c},{} to it\spad{'s} highest value.
510866`\spad{lighting(v,{} x,{} y,{} z)} sets the position of the light source to the coordinates \spad{x},{} \spad{y},{} and \spad{z} and displays the graph for the given three-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{ThreeDimensionalViewport}.
510943`\spad{li_int(f,{} k,{} x)} generates logarithmic integrals.
511217`apply 'function' represented by this graph to 'a' repeatedly until we reach a loop which is returned as a sequence of vertex indexes.
511284`\spad{limit(f(x),{} x = a)} computes the real limit \spad{lim(x -> a,{} f(x))}.
511523`\spad{limit(f(x),{} x = a)} computes the real two-sided limit of \spad{f} as its argument \spad{x} approaches \spad{a}.
511850`\spad{limit(f(x),{} x = a)} computes the real two-sided limit of \spad{f} as its argument \spad{x} approaches \spad{a}.
512186`apply 'function' represented by this graph to 'a' repeatedly until we reach a loop which is returned as a sequence of vertex indexes.
512277`\spad{limit(f(x),{}x=a,{}"left")} computes the left hand real limit \spad{lim(x -> a-,{} f(x))}; \spad{limit(f(x),{}x=a,{}"right")} computes the right hand real limit \spad{lim(x -> a+,{} f(x))}.
512391`\spad{limit(f(x),{}x,{}a,{}"left")} computes the real limit of \spad{f} as its argument \spad{x} approaches \spad{a} from the left; limit(\spad{f}(\spad{x}),{}\spad{x},{}a,{}"right") computes the corresponding limit as \spad{x} approaches \spad{a} from the right.
512570`\spad{limitPart(o)} = \spad{l} when \spad{o} = \spad{l} + \spad{n} and \spad{l} is a limit ordinal and \spad{n} is a nonnegative integer
512616`\spad{limitPlus(f(var))} returns \spad{limit(var -> a+,{} f(var))}.
512719`\spad{limitPlus(f(var))} returns \spad{limit(var -> cen+,{} f(var))}.
512851`\spad{lin_comb(v,{} [f1,{} ...,{} fn])} computes linear combination \spad{v}(1) \spad{f1} + ... \spad{v}(\spad{n}) \spad{fn}. Vector \spad{v} and list [\spad{f1},{} ...,{} \spad{fn}] must be of equal length.
512930`\spad{lin_comb(v,{} [f1,{} ...,{} fn])} computes linear combination \spad{v}(1) \spad{f1} + ... \spad{v}(\spad{n}) \spad{fn}. Vector \spad{v} and list [\spad{f1},{} ...,{} \spad{fn}] must be of equal length.
513031`\spad{lin_comb(v,{} [f1,{} ...,{} fn])} computes linear combination \spad{v}(1) \spad{f1} + ... \spad{v}(\spad{n}) \spad{fn}. Vector \spad{v} and list [\spad{f1},{} ...,{} \spad{fn}] must be of equal length.
513154`\spad{lin_comb(v,{} [f1,{} ...,{} fn])} computes linear combination \spad{v}(1) \spad{f1} + ... \spad{v}(\spad{n}) \spad{fn}. Vector \spad{v} and list [\spad{f1},{} ...,{} \spad{fn}] must be of equal length.
513235`\spad{lin_comb(v,{} [f1,{} ...,{} fn])} computes linear combination \spad{v}(1) \spad{f1} + ... \spad{v}(\spad{n}) \spad{fn}. Vector \spad{v} and list [\spad{f1},{} ...,{} \spad{fn}] must be of equal positive length.
513330`\spad{lin_comb(v,{} [f1,{} ...,{} fn])} computes linear combination \spad{v}(1) \spad{f1} + ... \spad{v}(\spad{n}) \spad{fn}. Vector \spad{v} and list [\spad{f1},{} ...,{} \spad{fn}] must be of equal length.
513425`\spad{lin_comb(v,{} [f1,{} ...,{} fn])} computes linear combination \spad{v}(1) \spad{f1} + ... \spad{v}(\spad{n}) \spad{fn}. Vector \spad{v} and list [\spad{f1},{} ...,{} \spad{fn}] must be of equal length.
513542`lin_comb(\spad{v},{} \spad{w},{} [\spad{f1},{} ...,{} \spad{fn}]) computes linear combination \spad{w} + \spad{v}(1) \spad{f1} + ... \spad{v}(\spad{n}) \spad{fn} by modifying \spad{w} in place. Vector \spad{v} and list [\spad{f1},{} ...,{} \spad{fn}] must be of equal length.
513648`\spad{linear?(p)} returns \spad{true} iff \spad{p} does not lie in the base ring \spad{R} and has main degree \spad{1}.
513722`\spad{linear(u)} \undocumented
513789`\spad{linear(f,{} g)} \undocumented
513959`\spad{linearAssociatedExp(a,{} f)} is linear over {\em F},{} \spadignore{i.e.} for elements {\em a} from {\em \$},{} {\em c,{} d} form {\em F} and {\em f,{} g} univariate polynomials over {\em F} we have \spadfun{linearAssociatedExp}(a,{} cf+dg) equals {\em c} times \spadfun{linearAssociatedExp}(a,{} \spad{f}) plus {\em d} times \spadfun{linearAssociatedExp}(a,{} \spad{g}). Therefore \
513959`--spadfun{linearAssociatedExp} is defined completely by its action on monomials from {\em F[X]}: \spadfun{linearAssociatedExp}(a,{} monomial(1,{} \spad{k})\spad{\$}SUP(\spad{F})) is defined to be \spadfun{Frobenius}(a,{} \spad{k}) which is {\em a^(q^k)},{} where {\em q=size()\$F}.
514178`\spad{linearAssociatedLog(a)} returns a polynomial {\em g},{} such that \spadfun{linearAssociatedExp}(normalElement(),{} \spad{g}) equals {\em a}.
514412`\spad{linearAssociatedLog(b,{} a)} returns a polynomial {\em g},{} such that the \spadfun{linearAssociatedExp}(\spad{b},{} \spad{g}) equals {\em a}. If there is no such polynomial {\em g},{} then \spadfun{linearAssociatedLog} fails.
514649`\spad{linearAssociatedOrder(a)} retruns the monic polynomial {\em g} of least degree,{} such that \spadfun{linearAssociatedExp}(a,{} \spad{g}) is 0.
514767`\spad{linearDependence([v1,{} ...,{} vn])} returns \spad{[c1,{} ...,{} cn]} if \spad{c1*v1 + ... + cn*vn = 0} and not all the \spad{ci}\spad{'s} are 0,{} "failed" if the \spad{vi}\spad{'s} are linearly independent over \spad{S}.
514859`\spad{linearlyDependenceOverConstants([v1,{} ...,{} vn],{} ld)} returns \spad{[c1,{} ...,{} cn]} if \spad{c1*v1 + ... + cn*vn = 0} and not all the \spad{ci}\spad{'s} are 0,{} "failed" if the \spad{vi}\spad{'s} are linearly independent over constants.
514985`\spad{linearlyDependenceOverZ([v1,{} ...,{} vn])} returns \spad{[c1,{} ...,{} cn]} if \spad{c1*v1 + ... + cn*vn = 0} and not all the \spad{ci}\spad{'s} are 0,{} "failed" if the \spad{vi}\spad{'s} are linearly independent over the integers.
515093`\spad{linearExtend: (f,{} x)} returns the linear extension of a multilinear map defined on the basis of \spad{M2} applied to a linear combination
515197`\spad{linearExtend: (f,{} x)} returns the linear extension of a map defined on the basis of \spad{M2} applied to a linear combination
515273`\spad{linearExtend: (f,{} x)} returns the linear extension of a map defined on the basis applied to a linear combination
515361`\spad{linearize(sys)} tries to retract all equations in \spad{sys} to a linear one. If that is not possible,{} an error occurs.
515581`\spad{linearlyDependent?([v1,{} ...,{} vn])} returns \spad{true} if the \spad{vi}\spad{'s} are linearly dependent over \spad{S},{} \spad{false} otherwise.
515657`\spad{linearlyDependentOverConstants?([v1,{} ...,{} vn],{} ld)} returns \spad{true} if the \spad{vi}\spad{'s} are linearly dependent over constants,{} \spad{false} otherwise.
515767`\spad{linearlyDependentOverZ?([v1,{} ...,{} vn])} returns \spad{true} if the \spad{vi}\spad{'s} are linearly dependent over the integers,{} \spad{false} otherwise.
515853`\spad{linearPolynomials(lp)} returns \spad{lps,{} nlps} where \spad{lps} is a list of the linear polynomials in \spad{lp},{} and \spad{nlps} are the other ones.
515976`\spad{linears(f,{} p)} returns the product of all the linear factors of \spad{f} modulo \spad{p}. Potentially incorrect result if \spad{f} is not square-free modulo \spad{p}.
516048`\spad{linearSearch(x,{} f)} searches \spad{x} in the cache,{} calling \spad{f(y)} to determine whether \spad{x} is equal to \spad{y}. It returns \spad{y} from cache such that \spad{f}(\spad{y}) or failed is no such \spad{y} exists.
516126`\spad{lineColorDefault()} returns the default color of lines connecting points in a 2D viewport.
516189`\spad{lineColorDefault(p)} sets the default color of lines connecting points in a 2D viewport to the palette \spad{p}.
516259`\spad{lineIntersect(n,{} p)} returns the point where a line,{} from the centre of the boundary to the point \spad{p},{} intersects with the boundary. \spad{n:} \% is the boundary \spad{p:} \spad{PT} is the point at the end of the line (outside boundary)
516313`\spad{linGenPos }\undocumented
516504`\spad{link(m,{} n)} returns a line which is the shortest distance between the two boundaries. The line is represented by its two endpoints. \spad{m:} \% is the first boundary to be linked \spad{n:} \% is the second boundary to be linked
516555`\spad{linkToFortran(s,{} l,{} t,{} lv)} \undocumented{}
516661`\spad{linkToFortran(s,{} l,{} ll,{} lv)} \undocumented{}
516837`\spad{linkToFortran(s,{} l,{} ll,{} lv,{} t)} \undocumented{}
517020`\spad{lin_sol(eql,{} vl)} solves system of equations \spad{eql} for variables in \spad{vl}. Equations must be linear in variables from \spad{vl}.
517117`\spad{linSolve(lp,{} lvar)} finds the solutions of the linear system of polynomials \spad{lp} = 0 with respect to the list of symbols lvar.
517287`\spad{lintgcd([a1,{} ..,{} ak])} = \spad{gcd} of a list of integers
517386`\spad{list?(s)} is \spad{true} if \spad{s} is a Lisp list,{} possibly ().
517457`\spad{list(x)} returns the list of one element \spad{x}.
517501`\spad{listBranches(c)} returns a list of lists of points,{} representing the branches of the curve \spad{c}.
517593`\spad{listBranches(c)} returns a list of lists of points,{} representing the branches of the curve \spad{c}.
517685`\spad{listConjugateBases(bas,{} q,{} n)} returns the list \spad{[bas,{} bas^Frob,{} bas^(Frob^2),{} ...bas^(Frob^(n-1))]},{} where \spad{Frob} raises the coefficients of all polynomials appearing in the basis \spad{bas} to the \spad{q}th power.
517919`\spad{listLoops(t)} returns the list of lists of points,{} or the 'loops',{} of the given tube plot \spad{t}.
518078`\spad{listOfLists(m)} returns the rows of the matrix \spad{m} as a list of lists.
518165`\spad{listOfLists(m)} returns the rows of the array \spad{m} as a list of lists.
518250`\spad{listOfLists t} converts a tableau \spad{t} to a list of lists.
518307`\spad{listOfMonoms(l)} returns the list of the monomials forming \spad{l}.
518388`\spad{listOfTerms([l1]*[l2]*...[ln])} returns the list of words \spad{l1,{} l2,{} .... ln}.
518485`\spad{listOfTerms(p)} returns the internal representation of \spad{p}.
518609`\spad{listOfTerms(x)} returns a list \spad{lt} of terms with type \spad{Record(k: S,{} c: R)} such that \spad{x} equals \spad{constructOrdered lt}.
518697`\spad{listRepresentation(p)} produces a representation {\em rep} of the permutation \spad{p} as a list of preimages and images,{} \spad{i}.\spad{e} \spad{p} maps {\em (rep.preimage).k} to {\em (rep.image).k} for all indices \spad{k}. Elements of \spad{S} not in {\em (rep.preimage).k} are fixed points,{} and these are the only fixed points of the permutation.
518790`\spad{lists(r)} returns the list of matches that match lists.
518870`\spad{listYoungTableaus(lambda)} where {\em lambda} is a proper partition generates the list of all standard tableaus of shape {\em lambda} by means of lattice permutations. The numbers of the lattice permutation are interpreted as column labels. Hence the contents of these lattice permutations are the conjugate of {\em lambda}. Notes: the functions {\em nextLatticePermutation} and {\em makeYoungT
518870`--ableau} are used. The entries are from {\em 0,{} ...,{} n-1}.
518977`evaluation routine
519103`evaluation routine
519269`modular reduction
519416`\spad{lllip(s)} checks to see if the \spadtype{ThreeSpace},{} \spad{s},{} is composed of a list of components,{} which are lists of curves,{} which are lists of indices to points,{} and if so,{} returns the list of lists of lists; An error is signaled otherwise.
519501`\spad{lllp(s)} checks to see if the \spadtype{ThreeSpace},{} \spad{s},{} is composed of a list of components,{} which are lists of curves,{} which are lists of points,{} and if so,{} returns the list of lists of lists; An error is signaled otherwise.
519575`\spad{llprop(s)} checks to see if the \spadtype{ThreeSpace},{} \spad{s},{} is composed of a list of curves which are lists of the subspace component properties of the curves,{} and if so,{} returns the list of lists; An error is signaled otherwise.
519662`\spad{lo(s)} returns the first endpoint of \spad{s}. Note: \spad{lo(l..h) = l}.
519706`\spad{localAbs(fcn)} = \spad{abs(fcn)} or \spad{sqrt(fcn^2)} depending on whether or not FE has a function \spad{abs}. This should be a local function,{} but the compiler won\spad{'t} allow it.
519786`\spad{localAbs(fcn)} = \spad{abs(fcn)} or \spad{sqrt(fcn^2)} depending on whether or not FE has a function \spad{abs}. This should be a local function,{} but the compiler won\spad{'t} allow it.
519898`\spad{integralBasis(p)} returns a record \spad{[basis,{} basisDen,{} basisInv]} containing information regarding the local integral closure of \spad{Z} at the prime \spad{p} in the quotient field of \spad{F},{} where \spad{F} is a framed algebra with \spad{Z}-module basis \spad{w1,{} w2,{} ...,{} wn}. If \spad{basis} is the matrix \spad{(aij,{} i = 1..n,{} j
519898`-- = 1..n)},{} then the \spad{i}th element of the integral basis is \spad{\spad{vi} = (1/basisDen) * sum(aij * wj,{} j = 1..n)},{} \spadignore{i.e.} the \spad{i}th row of \spad{basis} contains the coordinates of the \spad{i}th basis vector. Similarly,{} the \spad{i}th row of the matrix \spad{basisInv} contains the coordinates of \spad{\spad{wi}} with respect to the basis \spad{v1,{} ...,{} vn}: if \spad{basisInv} is the matrix \spad{(bij,{} i = 1..n,{} j = 1..n)},{} then \spad{\spad{wi} = sum(bi
519898`--j * vj,{} j = 1..n)}.
520045`\spad{integralBasis(p)} returns a record \spad{[basis,{} basisDen,{} basisInv]} containing information regarding the local integral closure of \spad{R} at the prime \spad{p} in the quotient field of \spad{F},{} where \spad{F} is a framed algebra with \spad{R}-module basis \spad{w1,{} w2,{} ...,{} wn}. If \spad{basis} is the matrix \spad{(aij,{} i = 1..n,{} j = 1..n)},{} then th
520045`--e \spad{i}th element of the local integral basis is \spad{\spad{vi} = (1/basisDen) * sum(aij * wj,{} j = 1..n)},{} \spadignore{i.e.} the \spad{i}th row of \spad{basis} contains the coordinates of the \spad{i}th basis vector. Similarly,{} the \spad{i}th row of the matrix \spad{basisInv} contains the coordinates of \spad{\spad{wi}} with respect to the basis \spad{v1,{} ...,{} vn}: if \spad{basisInv} is the matrix \spad{(bij,{} i = 1..n,{} j = 1..n)},{} then \spad{\spad{wi} = sum(bij * vj,{} j = 
520045`--1..n)}.
520172`\spad{integralBasis(p)} returns a record \spad{[basis,{} basisDen,{} basisInv] } containing information regarding the local integral closure of \spad{R} at the prime \spad{p} in the quotient field of the framed algebra \spad{F}. \spad{F} is a framed algebra with \spad{R}-module basis \spad{w1,{} w2,{} ...,{} wn}. If 'basis' is the matrix \spad{(aij,{} i = 1..n,{} j =
520172`-- 1..n)},{} then the \spad{i}th element of the local integral basis is \spad{\spad{vi} = (1/basisDen) * sum(aij * wj,{} j = 1..n)},{} \spadignore{i.e.} the \spad{i}th row of 'basis' contains the coordinates of the \spad{i}th basis vector. Similarly,{} the \spad{i}th row of the matrix 'basisInv' contains the coordinates of \spad{\spad{wi}} with respect to the basis \spad{v1,{} ...,{} vn}: if 'basisInv' is the matrix \spad{(bij,{} i = 1..n,{} j = 1..n)},{} then \spad{\spad{wi} = sum(bij * vj,{} j
520172`-- = 1..n)}.
520310`\spad{integralBasis(p)} returns a record \spad{[basis,{} basisDen,{} basisInv]} containing information regarding the local integral closure of \spad{R} at the prime \spad{p} in the quotient field of \spad{F},{} where \spad{F} is a framed algebra with \spad{R}-module basis \spad{w1,{} w2,{} ...,{} wn}. If \spad{basis} is the matrix \spad{(aij,{} i = 1..n,{} j = 1..n)},{} t
520310`--hen the \spad{i}th element of the local integral basis is \spad{\spad{vi} = (1/basisDen) * sum(aij * wj,{} j = 1..n)},{} \spadignore{i.e.} the \spad{i}th row of \spad{basis} contains the coordinates of the \spad{i}th basis vector. Similarly,{} the \spad{i}th row of the matrix \spad{basisInv} contains the coordinates of \spad{\spad{wi}} with respect to the basis \spad{v1,{} ...,{} vn}: if \spad{basisInv} is the matrix \spad{(bij,{} i = 1..n,{} j = 1..n)},{} then \spad{\spad{wi} = sum(bij * vj,{
520310`--} j = 1..n)}.
520443`\spad{localReal?(x)} should be local but conditional
520505`\spad{localUnquote(f,{} ls)} is a local function.
520573`\spad{LODO2FUN(op)} returns the function to pass to the series ODE solver in order to solve \spad{op y = 0}.
520642`\spad{log10()} returns \spad{ln 10}: \spad{2.3025809299...}.
520675`\spad{log10(x)} represents the Fortran intrinsic function \spad{LOG10}
520757`\spad{log10(x)} computes the logarithm with base 10 for \spad{x}.
520798`\spad{log10(x)} computes the logarithm for \spad{x} to base 10.
520833`\spad{log1(f)} returns the logarithm of the power series represented by cons(1,{} \spad{f}),{} \spadignore{i.e.} assuming that the constant term is 1 and therefore transcendentality is not involved.
520921`\spad{log(x)} represents the Fortran intrinsic function LOG
521001`\spad{log(p)} returns the logarithm of \spad{p}.
521081`\spad{log(f)} returns \spad{[(a1,{} b1),{} ...,{} (am,{} bm)]} such that the logarithm of \spad{f} is equal to \spad{a1*log(b1) + ... + am*log(bm)}.
521182`\spad{log(x)} applies the logarithm operator to \spad{x}
521428`\spad{log(st)} computes the log of a power series.
521511`\spad{log(st)} computes the log of a power series.
521608`\spad{log(z)} returns the logarithm of Laurent series \spad{z}.
521694`\spad{log(z)} returns the logarithm of a Puiseux series \spad{z}.
521789`\spad{log(x)} returns the natural logarithm of \spad{x}. When evaluated into some subset of the complex numbers,{} the branch cut lies along the negative real axis,{} continuous with quadrant II. The domain does not contain the origin.
521843`\spad{log2()} returns \spad{ln 2},{} \spadignore{i.e.} \spad{0.6931471805...}.
521875`\spad{log2(x)} computes the logarithm with base 2 for \spad{x}.
521915`\spad{log2(x)} computes the logarithm for \spad{x} to base 2.
521949`\spad{log(p,{} n)} returns the logarithm of \spad{p} (truncated up to order \spad{n}).
522052`\spad{log(p,{} n)} returns the logarithm of \spad{p} truncated at order \spad{n}.
522140`\spad{logDependenceQ([q1,{} ...,{} qn],{} q0)} finds rational constants \spad{c1,{} ...cn} such that \spad{q1^c1*...*qn^cn=u*q0} where \spad{u} is a unit
522281`\spad{logextint(x,{} lk,{} lg)} returns [[\spad{u1},{} ...,{} um],{} bas] giving basis of solution of the homogeneous systym \spad{c1*g1 + ... + cn*gn + c_{n+1}u1'/u1 + ... c_{n+m}um'/um = 0}
522428`\spad{logextint(der,{} ufactor,{} csolve,{} rec,{} [g1,{} ...,{} gn])} returns [[\spad{u1},{} ...,{} um],{} bas] giving basis of solution of the homogeneous systym \spad{c1*g1 + ... + cn*g
522428`--n + c_{n+1}u1'/u1 + ... c_{n+m}um'/um = 0}
522747`\spad{logGamma(x)} is the natural log of \spad{Gamma(x)}. This can often be computed even if \spad{Gamma(x)} cannot.
522843`\spad{logGamma(x)} is the natural log of \spad{Gamma(x)}.
522921`\spad{logGamma(x)} is the natural log of \spad{Gamma(x)}. This can often be computed even if \spad{Gamma(x)} cannot.
522999`\spad{logGamma(x)} is the natural log of \spad{Gamma(x)}.
523059`\spad{logical?(t)} tests whether \spad{t} is equivalent to the FORTRAN type LOGICAL.
523114`\spad{false} (contradiction) is a logical constant.
523149`\spad{true} is a logical constant.
523184`\spad{logIfCan(z)} returns log(\spad{z}) if possible,{} and "failed" otherwise.
523264`\spad{logpart(ir)} returns the logarithmic part of an integration result
523425`\spad{lommelS1(mu,{} nu,{} z)} is the Lommel \spad{s} function
523490`\spad{lommelS1(mu,{} nu,{} z)} is the Lommel \spad{s} function.
523552`\spad{lommelS2(mu,{} nu,{} z)} is the Lommel \spad{S} function
523617`\spad{lommelS2(mu,{} nu,{} z)} is the Lommel \spad{S} function.
523891`\spad{lookup(x)} \undocumented{} See \spadfunFrom{lookup}{Finite}
523977`\spad{lookup(x)} returns a positive integer such that \spad{x = index lookup x}.
524027`\spad{loop(\spad{li})} constructs loop from list of indexes \spad{li}
524082`\spad{loopPoints(p,{} n,{} b,{} r,{} lls)} creates and returns a list of points which form the loop with radius \spad{r},{} around the center point indicated by the point \spad{p},{} with the principal normal vector of the space curve at point \spad{p} given by the point(vector) \spad{n},{} and the binormal vector given by the point(vector) \spa
524082`--d{b},{} and a list of lists,{} \spad{lls},{} which is the \spadfun{cosSinInfo} of the number of points defining the loop.
524242`\spad{loopsArrows(s)} returns a list of loops for this graph in this case the loop is represented by the indexes of the sequence of nodes passed through. to-do: it would be better to use a more efficient algorithm,{} currently the code calls spanningForestArrow and traverses the result for loops,{} it might be more efficient to use Floyds algorithm.
524355`\spad{loopsAtNode(s,{} a)} returns a list of loops for this graph that pass through vertex index 'a'
524506`\spad{loopsNodes(s)} returns a list of loops for this graph in this case the loop is represented by the indexes of the sequence of nodes passed through.
524617`\spad{looseEquals(x,{} y)} is \spad{true} if \spad{x} 'equals' \spad{y} this is a looser version of equality test but is not as general as isomorphism. it only requires the same number of vertices but does not require the objects themselves being equal. the arrows must be the same,{} that is it may return \spad{false} if the order of vertices is changed so this is not isomorphism test.
524729`\spad{low(s)} returns the first endpoint of \spad{s}. Note: \spad{low(l..h) = l}.
524774`\spad{lowerCase()} returns the class of all characters for which \spadfunFrom{lowerCase?}{Character} is \spad{true}.
524866`\spad{lowerCase!(s)} destructively replaces the alphabetic characters in \spad{s} by lower case.
524916`\spad{lowerCase(s)} returns the string with all characters in lower case.
524965`\spad{lowerCase(c)} converts an upper case letter to the corresponding lower case letter. If \spad{c} is not an upper case letter,{} then it is returned unchanged.
525008`\spad{lowerCase?(c)} tests if \spad{c} is an lower case letter,{} \spadignore{i.e.} one of a..\spad{z}.
525057`\spad{lowerPolynomial(upoly)} converts \spad{upoly} to be a univariate polynomial over \spad{R}. An error if the coefficients contain variables.
525179`\spad{LowTriBddDenomInv(B,{} d)} returns \spad{M},{} where \spad{B} is a non-singular lower triangular matrix and \spad{d} is an element of \spad{R} such that \spad{M = d * inv(B)} has entries in \spad{R}.
525260`\spad{lp(s)} returns the list of points component which the \spadtype{ThreeSpace},{} \spad{s},{} contains; these points are used by reference,{} \spadignore{i.e.} the component holds indices referring to the points rather than the points themselves. This allows for sharing of the points.
525320`\spad{lprop(s)} checks to see if the \spadtype{ThreeSpace},{} \spad{s},{} is composed of a list of subspace component properties,{} and if so,{} returns the list; An error is signaled otherwise.
525400`\spad{lquo(x,{} y)} returns the exact left quotient of \spad{x} by \spad{y} \spadignore{i.e.} \spad{q} such that \spad{x = y * q},{} "failed" if \spad{x} is not of the form \spad{y * q}.
525461`\spad{lquo(x,{} s)} returns the exact left quotient of \spad{x} by \spad{s}.
525521`\spad{lquo(x,{} y)} returns the left simplification of \spad{x} by \spad{y}.
525571`\spad{lquo(x,{} w)} returns the left simplification of \spad{x} by the word \spad{w}.
525633`\spad{lquo(x,{} v)} returns the left simplification of \spad{x} by the variable \spad{v}.
525683`\spad{lquo(x,{} y)} returns the left simplification of \spad{x} by \spad{y}.
525795`\spad{lSpaceBasis(d)} returns a basis for \spad{L(d) = {f | (f) >= -d}} as a module over \spad{K[x]}.
525864`\spad{LT(x,{} y)} returns the \spadtype{Switch} expression representing \spad{x<y}.
526072`\spad{LUDecomp(A)} computes a LU decomposition of \spad{A} using the algorithm of Crout. \spad{LU} contains both triangular matrices; \spad{Perm} is the permutation used for partial pivoting and \spad{Pivots} yields the used pivots.
526184`\spad{LUInverse(A)} computes the inverse of \spad{A} using a LU decomposition.
526277`\spad{LUSolve(LU,{} Perm,{} B)} uses a previously computed \spad{LU} decomposition to solve a linear system with right hand side \spad{B}. \spad{LU} and \spad{Perm} are as given by \spad{LUDecomp}.
526367`\spad{lyndon(w)} convert \spad{w} into a Lyndon word,{} error if \spad{w} is not a Lyndon word.
526432`\spad{lyndon?(w)} test if \spad{w} is a Lyndon word.
526503`\spad{LyndonBasis(lv)} returns the Lyndon basis of the nilpotent free Lie algebra.
526607`\spad{LyndonCoordinates(g)} returns the exponential coordinates of \spad{g}.
526716`\spad{lyndonIfCan(w)} convert \spad{w} into a Lyndon word.
526802`\spad{LyndonWordsList1(vl,{} n)} returns an array of lists of Lyndon words over the alphabet \spad{vl},{} up to order \spad{n}.
526914`\spad{LyndonWordsList(vl,{} n)} returns the list of Lyndon words over the alphabet \spad{vl},{} up to order \spad{n}.
527004`\spad{m2r(ind)} transforms a multi-index into a repeated index.
527090`\spad{m2r(ind)} transforms a multi-index into a repeated index.
527180`\spad{mainCharacterization(x)} is the main algebraic quantity of \spad{x} (\spad{SEG})
527409`\spad{mainCoefficients(p)} returns an error if \spad{p} is \spad{O},{} otherwise,{} if \spad{p} belongs to \spad{R} returns [\spad{p}],{} otherwise returns the list of the coefficients of \spad{p},{} where \spad{p} is viewed as a univariate polynomial in its main variable.
527556`\spad{mainContent(p)} returns the content of \spad{p} viewed as a univariate polynomial in its main variable and with coefficients in the polynomial ring generated by its other variables over \spad{R}.
527642`\spad{mainDefiningPolynomial(x)} is the defining polynomial for the main algebraic quantity of \spad{x}
527748`\spad{mainForm(x)} is the main algebraic quantity name of \spad{x}
527962`\spad{mainKernel(f)} returns a kernel of \spad{f} with maximum nesting level,{} or if \spad{f} has no kernels (\spadignore{i.e.} \spad{f} is a constant).
528103`\spad{mainMonomial(p)} returns an error if \spad{p} is \spad{O},{} otherwise,{} if \spad{p} belongs to \spad{R} returns \spad{1},{} otherwise,{} \spad{mvar(p)} raised to the power \spad{mdeg(p)}.
528248`\spad{mainMonomials(p)} returns an error if \spad{p} is \spad{O},{} otherwise,{} if \spad{p} belongs to \spad{R} returns [1],{} otherwise returns the list of the monomials of \spad{p},{} where \spad{p} is viewed as a univariate polynomial in its main variable.
528398`\spad{mainPrimitivePart(p)} returns the primitive part of \spad{p} viewed as a univariate polynomial in its main variable and with coefficients in the polynomial ring generated by its other variables over \spad{R}.
528563`\spad{mainSquareFreePart(p)} returns the square free part of \spad{p} viewed as a univariate polynomial in its main variable and with coefficients in the polynomial ring generated by its other variables over \spad{R}.
528656`\spad{mainValue(x)} is the expression of \spad{x} in terms of \spad{SparseUnivariatePolynomial(\%)}
528749`\spad{mainVariable(p)} returns the biggest variable which actually occurs in the polynomial \spad{p},{} or "failed" if no variables are present. fails precisely if polynomial satisfies ground?
528845`\spad{mainVariable(f)} returns the highest variable appearing in the numerator or the denominator of \spad{f},{} "failed" if \spad{f} has no variables.
529042`\spad{mainVariable(f)} returns the highest variable appearing in the numerator or the denominator of \spad{f},{} "failed" if \spad{f} has no variables.
529221`\spad{mainVariable?(v,{} ps)} returns \spad{true} iff \spad{v} is the main variable of some polynomial in \spad{ps}.
529306`\spad{mainVariableOf(c)} returns main variable of \spad{c}
529443`\spad{mainVariables(ps)} returns the decreasingly sorted list of the variables which are main variables of some polynomial in \spad{ps}.
529526`\spad{makeCell(lc)} creates a cell from list of simple cells \spad{lc}
529634`\spad{makeCell(c,{} sc)} creates a cell which consists of \spad{sc} in main variable and which has projection \spad{c}
529739`\spad{makeCos(e,{} r)} makes a sin expression with given argument and coefficient
529790`\spad{makeCrit }\undocumented
529997`\spad{makeEq(lsol,{} lvar)} returns a list of equations formed by corresponding members of lvar and \spad{lsol}.
530111`\spad{evalADE(f,{} x,{} n,{} eq,{} parameters,{} values)} creates an expression that stands for the coefficient of \spad{x^n} in the Taylor expansion of \spad{f}(\spad{x}),{} where \spad{f}(\spad{x}) is given by the functional equation \spad{eq}. The argument values specifies the first few Taylor coefficients.
530210`\spad{makeFloatFunction(expr,{} x)} returns a Lisp function \spad{f: \spadtype{DoubleFloat} \spad{->} \spadtype{DoubleFloat}} defined by \spad{f(x) == expr}. Function \spad{f} is compiled and directly applicable to objects of type \spadtype{DoubleFloat}.
530310`\spad{makeFloatFunction(expr,{} x,{} y)} returns a Lisp function \spad{f: (\spadtype{DoubleFloat},{} \spadtype{DoubleFloat}) \spad{->} \spadtype{DoubleFloat}} defined by \spad{f(x,{} y) == expr}. Function \spad{f} is compiled and directly applicable to objects of type \spad{(\spadtype{DoubleFloat},{} \spadtype{DoubleFloat})}.
530429`\spad{makeFR(flist)} turns the final factorization of henselFact into a \spadtype{Factored} object.
530555`\spad{makeFR(unit,{} listOfFactors)} creates a factored object (for use by factoring code).
530670`\spad{makeGraphImage(llp)} returns a graph of the domain \spadtype{GraphImage} which is composed of the points and lines from the list of lists of points,{} \spad{llp},{} with default point size and default point and line colours.
530747`\spad{makeGraphImage(llp,{} lpal1,{} lpal2,{} lp)} returns a graph of the domain \spadtype{GraphImage} which is composed of the points and lines from the list of lists of points,{} \spad{llp},{} whose point colors are indicated by the list of palette colors,{} \spad{lpal1},{} and whose lines are colored according to the list of palette colors,{} \spad{lpal2}. The paramater \spa
530747`--d{lp} is a list of integers which denote the size of the data points.
530874`\spad{makeGraphImage(llp,{} lpal1,{} lpal2,{} lp,{} lopt)} returns a graph of the domain \spadtype{GraphImage} which is composed of the points and lines from the list of lists of points,{} \spad{llp},{} whose point colors are indicated by the list of palette colors,{} \spad{lpal1},{} and whose lines are colored according to the list of palette colors,{} \spad{l
530874`--pal2}. The paramater \spad{lp} is a list of integers which denote the size of the data points,{} and \spad{lopt} is the list of draw command options.
531018`\spad{makeMulti(l)} returns the element whose list of monomials is \spad{l}.
531096`\spad{makeObject(sp,{} curve(f,{} g,{} h),{} a..b)} returns the space \spad{sp} of the domain \spadtype{ThreeSpace} with the addition of the graph of the parametric curve \spad{x = f(t),{} y = g(t),{} z = h(t)} as \spad{t} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)}.
531239`\spad{makeObject(sp,{} curve(f,{} g,{} h),{} a..b)} returns the space \spad{sp} of the domain \spadtype{ThreeSpace} with the addition of the graph of the parametric curve \spad{x = f(t),{} y = g(t),{} z = h(t)} as \spad{t} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)}.
531397`\spad{makeObject(curve(f(t),{} g(t),{} h(t)),{} t = a..b)} returns a space of the domain \spadtype{ThreeSpace} which contains the graph of the parametric curve \spad{x = f(t)},{} \spad{y = g(t)},{} \spad{z = h(t)} as \spad{t} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)}; \spad{h(t)} is the default title.
531522`\spad{makeObject(f,{} a..b,{} c..d)} returns a space of the domain \spadtype{ThreeSpace} which contains the graph of \spad{z = f(x,{} y)} as \spad{x} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)} and \spad{y} ranges from \spad{min(c,{} d)} to \spad{max(c,{} d)}.
531685`\spad{makeObject(f,{} a..b,{} c..d,{} l)} returns a space of the domain \spadtype{ThreeSpace} which contains the graph of the parametric surface \spad{f(u,{} v)} as \spad{u} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)} and \spad{v} ranges from \spad{min(c,{} d)} to \spad{max(c,{} d)}.
531855`\spad{makeObject(f,{} a..b,{} l)} creates the graph of \spad{y = f(x)} as \spad{x} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)}. The options contained in the list \spad{l} of the domain \spad{DrawOption} are applied.
531995`\spad{makeObject(curve(f,{} g,{} h),{} a..b,{} l)} returns a space of the domain \spadtype{ThreeSpace} which contains the graph of the parametric curve \spad{x = f(t),{} y = g(t),{} z = h(t)} as \spad{t} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)}. The options contained in the list \spad{l} of the domain \spad{DrawOption} are applied.
532155`makeObjectf(\spad{x}),{} \spad{x} = a..\spad{b},{} \spad{l}) creates the graph of \spad{y = f(x)} as \spad{x} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)}; the options contained in the list \spad{l} of the domain \spad{DrawOption} are applied.
532262`\spad{makeObject(f(x,{} y),{} x = a..b,{} y = c..d)} returns a space of the domain \spadtype{ThreeSpace} which contains the graph of \spad{z = f(x,{} y)} as \spad{x} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)} and \spad{y} ranges from \spad{min(c,{} d)} to \spad{max(c,{} d)}; \spad{f(x,{} y)} appears as the default title.
532387`\spad{makeObject(curve(f,{} g),{} a..b,{} l)} creates the graph of the parametric curve \spad{x = f(t),{} y = g(t)} as \spad{t} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)}. The options contained in the list \spad{l} of the domain \spad{DrawOption} are applied.
532549`\spad{makeObject(curve(f(t),{} g(t)),{} t = a..b,{} l)} creates the graph of the parametric curve \spad{x = f(t),{} y = g(t)} as \spad{t} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)}; the options contained in the list \spad{l} of the domain \spad{DrawOption} are applied.
532678`\spad{makeObject(curve(f,{} g,{} h),{} a..b,{} l)} returns a space of the domain \spadtype{ThreeSpace} which contains the graph of the parametric curve \spad{x = f(t),{} y = g(t),{} z = h(t)} as \spad{t} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)}; The options contained in the list \spad{l} of the domain \spad{DrawOption}
532678`-- are applied.
532853`\spad{makeObject(curve(f(t),{} g(t),{} h(t)),{} t = a..b,{} l)} returns a space of the domain \spadtype{ThreeSpace} which contains the graph of the parametric curve \spad{x = f(t)},{} \spad{y = g(t)},{} \spad{z = h(t)} as \spad{t} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)}; \spad{h(t)} is the default title,{} and the options contained in the list \spad{
532853`--l} of the domain \spad{DrawOption} are applied.
532995`\spad{makeObject(surface(f,{} g,{} h),{} a..b,{} c..d,{} l)} returns a space of the domain \spadtype{ThreeSpace} which contains the graph of the parametric surface \spad{x = f(u,{} v)},{} \spad{y = g(u,{} v)},{} \spad{z = h(u,{} v)} as \spad{u} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)} and \spad{v} ranges from \s
532995`--pad{min(c,{} d)} to \spad{max(c,{} d)}.
533177`\spad{makeObject(surface(f(u,{} v),{} g(u,{} v),{} h(u,{} v)),{} u = a..b,{} v = c..d)} returns a space of the domain \spadtype{ThreeSpace} which contains the graph of the parametric surface \spad{x = f(u,{} v)},{} \spad{y = g(u,{} v)},{} \spad{z = h(u,{} v)} as \spad{u} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)} and \spad{v} ranges from \spad{min(c,{
533177`--} d)} to \spad{max(c,{} d)}; \spad{h(t)} is the default title.
533321`\spad{makeObject(f,{} a..b,{} c..d,{} l)} returns a space of the domain \spadtype{ThreeSpace} which contains the graph of \spad{z = f(x,{} y)} as \spad{x} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)} and \spad{y} ranges from \spad{min(c,{} d)} to \spad{max(c,{} d)},{} and the options contained in the list \spad{l} of 
533321`--the domain \spad{DrawOption} are applied.
533501`\spad{makeObject(f,{} a..b,{} c..d,{} l)} returns a space of the domain \spadtype{ThreeSpace} which contains the graph of the parametric surface \spad{f(u,{} v)} as \spad{u} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)} and \spad{v} ranges from \spad{min(c,{} d)} to \spad{max(c,{} d)}; The options contained in t
533501`--he list \spad{l} of the domain \spad{DrawOption} are applied.
533688`\spad{makeObject(f(x,{} y) = g(x,{} y),{} x,{} y,{} l)} creates the graph of a polynomial equation. The list \spad{l} of draw options must specify a region in the plane in which the curve is to sketched.
533817`\spad{makeObject(f(x,{} y),{} x = a..b,{} y = c..d,{} l)} returns a space of the domain \spadtype{ThreeSpace} which contains the graph of \spad{z = f(x,{} y)} as \spad{x} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)} and \spad{y} ranges from \spad{min(c,{} d)} to \spad{max(c,{} d)}; \spad{f(x,{} y)} is the default title,{} and the options contained in the 
533817`--list \spad{l} of the domain \spad{DrawOption} are applied.
533959`\spad{makeObject(surface(f,{} g,{} h),{} a..b,{} c..d,{} l)} returns a space of the domain \spadtype{ThreeSpace} which contains the graph of the parametric surface \spad{x = f(u,{} v)},{} \spad{y = g(u,{} v)},{} \spad{z = h(u,{} v)} as \spad{u} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)} and \spad{
533959`--v} ranges from \spad{min(c,{} d)} to \spad{max(c,{} d)}. The options contained in the list \spad{l} of the domain \spad{DrawOption} are applied.
534158`\spad{makeObject(surface(f(u,{} v),{} g(u,{} v),{} h(u,{} v)),{} u = a..b,{} v = c..d,{} l)} returns a space of the domain \spadtype{ThreeSpace} which contains the graph of the parametric surface \spad{x = f(u,{} v)},{} \spad{y = g(u,{} v)},{} \spad{z = h(u,{} v)} as \spad{u} ranges from \spad{min(a,{} b)} to \spad{max(a,{} b)} and \spad{v} ran
534158`--ges from \spad{min(c,{} d)} to \spad{max(c,{} d)}; \spad{h(t)} is the default title,{} and the options contained in the list \spad{l} of the domain \spad{DrawOption} are applied.
534380`\spad{makeop should} be local but conditional
534454`\spad{makeRec(u,{} n,{} eq,{} parameters,{} values)} creates an expression that stands for \spad{u}(\spad{n}),{} where \spad{u}(\spad{n}) is given by the equation \spad{eq}. The argument \spad{parameters} has to contain all variables (or kernels) that appear eventually in the stream of values. The argument values specifies the initial values of the recurrence \spad{u}(0),{} \spad{u}(1),{} ... For the moment we d
534454`--on\spad{'t} allow recursions that contain \spad{u} inside of another operator.
534546`\spad{makeRecord(a,{} b)} creates a record object with type Record(part1: \spad{S},{} part2: \spad{R}),{} where \spad{part1} is \spad{a} and \spad{part2} is \spad{b}.
534618`\spad{makeResult(r1,{} r2)} makes the combined result [\spad{r1},{} \spad{r2}].
534727`\spad{makeSeries(refer,{} str)} creates a power series from the reference \spad{refer} and the stream \spad{str}.
534868`\spad{makeSin(e,{} r)} makes a sin expression with given argument and coefficient
534919`\spad{makeSketch(p,{} x,{} y,{} a..b,{} c..d)} creates an ACPLOT of the curve \spad{p = 0} in the region {\em a <= x <= b,{} c <= y <= d}. More specifically,{} 'makeSketch' plots a non-singular algebraic curve \spad{p = 0} in an rectangular region {\em xMin <= x <= xMax},{} {\em yMin <= y <= yMax}. The user inputs \spad{makeSketch(p,{} x,{} y,{} xMin..xMax,{} yM
534919`--in..yMax)}. Here \spad{p} is a polynomial in the variables \spad{x} and \spad{y} with integer coefficients (\spad{p} belongs to the domain \spad{Polynomial Integer}). The case where \spad{p} is a polynomial in only one of the variables is allowed. The variables \spad{x} and \spad{y} are input to specify the the coordinate axes. The horizontal axis is the \spad{x}-axis and the vertical axis is the \spad{y}-axis. The rational numbers xMin,{} ...,{} yMax specify the boundaries of the region in wh
534919`--ich the curve is to be plotted.
535149`\spad{makeSUP(p)} converts the polynomial \spad{p} to be of type SparseUnivariatePolynomial over the same coefficients.
535239`\spad{makeSystem(sys)} creates a differential equation from a system.
535308`\spad{makeTerm(s,{} e)} returns the monomial \spad{s} exponentiated by \spad{e} (\spadignore{e.g.} s^e or \spad{e} * \spad{s}).
535363`\spad{makeUnit()} returns the unit element of the monomial.
535603`\spad{makeVariable(p)} views \spad{p} as an element of a differential ring,{} in such a way that the \spad{n}-th derivative of \spad{p} may be simply referenced as \spad{z}.\spad{n} where \spad{z} \spad{:=} makeVariable(\spad{p}). Note: In the interpreter,{} \spad{z} is given as an internal map,{} which may be ignored.
535724`\spad{makeVariable(s)} views \spad{s} as a differential indeterminate,{} in such a way that the \spad{n}-th derivative of \spad{s} may be simply referenced as \spad{z}.\spad{n} where \spad{z} \spad{:=} makeVariable(\spad{s}). Note: In the interpreter,{} \spad{z} is given as an internal map,{} which may be ignored.
535821`\spad{makeVariable(s,{} n)} returns the \spad{n}-th derivative of a differential indeterminate \spad{s} as an algebraic indeterminate.
535907`\spad{makeViewport2D(v)} takes the given two-dimensional viewport,{} \spad{v},{} of the domain \spadtype{TwoDimensionalViewport} and displays a viewport window on the screen which contains the contents of \spad{v}.
535968`\spad{makeViewport2D(\spad{gi},{} lopt)} creates and displays a viewport window of the domain \spadtype{TwoDimensionalViewport} whose graph field is assigned to be the given graph,{} \spad{\spad{gi}},{} of domain \spadtype{GraphImage},{} and whose options field is set to be the list of options,{} \spad{lopt} of domain \spadtype{DrawOption}.
536054`\spad{makeViewport3D(v)} takes the given three-dimensional viewport,{} \spad{v},{} of the domain \spadtype{ThreeDimensionalViewport} and displays a viewport window on the screen which contains the contents of \spad{v}.
536117`\spad{makeViewport3D(sp,{} lopt)} takes the given space,{} \spad{sp} which is of the domain \spadtype{ThreeSpace} and displays a viewport window on the screen which contains the contents of \spad{sp},{} and whose draw options are indicated by the list \spad{lopt},{} which is a list of options from the domain \spad{DrawOption}.
536218`\spad{makeViewport3D(sp,{} s)} takes the given space,{} \spad{sp} which is of the domain \spadtype{ThreeSpace} and displays a viewport window on the screen which contains the contents of \spad{sp},{} and whose title is given by \spad{s}.
536309`\spad{makeYoungTableau(lambda,{} gitter)} computes for a given lattice permutation {\em gitter} and for an improper partition {\em lambda} the corresponding standard tableau of shape {\em lambda}. Notes: see {\em listYoungTableaus}. The entries are from {\em 0,{} ...,{} n-1}.
536423`\spad{makingStats?()} returns \spad{true} iff the statisitics process is running.
536501`\spad{mantissa(u)} returns the mantissa of \spad{u}
536551`\spad{mantissa(x)} returns the mantissa part of \spad{x}.
536608`\spad{map(f,{} m)} applies the function \spad{f} to every element of the array \spad{m} producing a new array containing the values.
536960`\spad{map(f,{} df)} replaces each coefficient \spad{x} of differential form \spad{df} by \spad{f(x)}.
537306`\spad{map(f,{} p)} \undocumented{}
537382`\spad{map}(\spad{f},{} a) applies the map \spad{f} to each coefficient in a. It is assumed that \spad{f} maps 0 to 0
537467`\spad{map(f,{} p)} lifts \spad{f} to the domain of \spad{p} then applies it to \spad{p}.
537962`\spad{map(f,{} p)} changes each coefficient of \spad{p} by the application of \spad{f}.
538013`\spad{map(fn,{} x)} returns \spad{Sum(fn(r_i) w_i)} if \spad{x} writes \spad{Sum(r_i w_i)}.
538411`\spad{map(func,{} poly)} creates a new polynomial by applying \spad{func} to every non-zero coefficient of the polynomial poly.
538935`\spad{map(f,{} x)} \undocumented
539027`\spad{map(f,{} k)} returns \spad{op(f(x1),{} ...,{} f(xn))} where \spad{k = op(x1,{} ...,{} xn)}.
539087`\spad{map(f,{} z)} returns the new element created by applying the function \spad{f} to each component of the direct product element \spad{z}.
539155`\spad{map(f,{} v)} applies the function \spad{f} to every element of the vector \spad{v} producing a new vector containing the values.
539258`\spad{map(func,{} frac)} applies the function \spad{func} to the numerator and denominator of the fraction frac.
539334`\spad{map(f,{} [x0,{} x1,{} x2,{} ...])} returns \spad{[f(x0),{} f(x1),{} f(x2),{} ..]}.
539425`\spad{map(fn,{} u)} applies \spad{fn} to each element of list \spad{u} and returns a new list with the results. For example \spad{map(square,{} [1,{} 2,{} 3]) = [1,{} 4,{} 9]}.
539489`\spad{map(f,{} a)} applies function \spad{f} to each member of one-dimensional array \spad{a} resulting in a new one-dimensional array over a possibly different underlying domain.
539598`\spad{map(f,{} [(v1,{} a1),{} ...,{} (vn,{} an)])} returns the matching result [(\spad{v1},{} \spad{f}(\spad{a1})),{} ...,{} (\spad{vn},{} \spad{f}(an))].
539710`\spad{map(f,{} a)} applies function \spad{f} to each member of primitive array \spad{a} resulting in a new primitive array over a possibly different underlying domain.
539804`\spad{map(func,{} frac)} applies the function \spad{func} to the numerator and denominator of frac.
539877`\spad{map(f,{} s)} returns a stream whose elements are the function \spad{f} applied to the corresponding elements of \spad{s}. Note: \spad{map(f,{} [x0,{} x1,{} x2,{} ...]) = [f(x0),{} f(x1),{} f(x2),{} ..]}.
539947`\spad{map(f,{} v)} applies the function \spad{f} to every element of the vector \spad{v} producing a new vector containing the values.
540017`\spad{map(f,{} v)} applies the function \spad{f} to every element of the vector \spad{v} producing a new vector containing the values or \spad{"failed"}.
540119`\spad{map(f,{} x)} \undocumented
540243`\spad{map(f,{} x)} \undocumented
540367`\spad{map(f,{} x)} \undocumented
540482`\spad{map(f,{} g(x))} applies the map \spad{f} to the coefficients of the Laurent series \spad{g(x)}.
540667`\spad{map(f,{} g(x))} applies the map \spad{f} to the coefficients of the Puiseux series \spad{g(x)}.
540852`\spad{map(f,{} g(x))} applies the map \spad{f} to the coefficients of \indented{1}{the Taylor series \spad{g(x)}.}
540954`\spad{map(f,{} ire)} \undocumented
541057`\spad{map(f,{} k)} returns \spad{g = op(f(a1),{} ...,{} f(an))} where \spad{k = op(a1,{} ...,{} an)}.
541128`\spad{map(f,{} ue)} \undocumented
541225`\spad{map(f,{} ufe)} \undocumented
541442`\spad{map(f,{} ure)} \undocumented
541587`\spad{map(f,{} p)} lifts \spad{f} to \spad{F1} and applies it to \spad{p}.
541688`\spad{map(f,{} d)} \undocumented{}
541837`\spad{map(f,{} i)} \undocumented{}
541976`\spad{map(f,{} x)} applies the function \spad{f} to every coefficient of \spad{x}
542059`\spad{map(f,{} m)} applies the function \spad{f} to the elements of the matrix \spad{m}.
542153`\spad{map(f,{} m)} applies the function \spad{f} to the elements of the matrix \spad{m}.
542262`\spad{map(f,{} p)} \undocumented
542335`\spad{map(f,{} x)} maps the function \spad{f} on the entries of \spad{x}
542417`\spad{map(f,{} m)} applies the function \spad{f} to the elements of the matrix \spad{m}.
542543`\spad{map(fn,{} u)} maps function \spad{fn} onto the coefficients of the non-zero monomials of \spad{u}.
542600`\spad{map(f,{} ex)} evaluates ex,{} applying \spad{f} to values of type \spad{R} in ex.
542655`\spad{map(fn,{} u)} maps function \spad{fn} onto the coefficients of the non-zero monomials of \spad{u}.
542713`\spad{map(f,{} a)} returns \spad{b},{} where \spad{b(i,{} j) = a(i,{} j)} for all \spad{i},{} \spad{j}.
542788`\spad{map!(f,{} a)} assign \spad{a(i,{} j)} to \spad{f(a(i,{} j))} for all \spad{i,{} j}
542862`\spad{map(f,{} a)} returns \spad{b},{} where \spad{b(i,{} j) = f(a(i,{} j))} for all \spad{i,{} j}
542935`\spad{map(fn,{} x)} returns \spad{Sum(fn(r_i) w_i)} if \spad{x} writes \spad{Sum(r_i w_i)}.
542988`\spad{map(fn,{} u)} maps the function \userfun{\spad{fn}} across the factors of \spadvar{\spad{u}} and creates a new factored object. Note: this clears the information flags (sets them to "nil") because the effect of \userfun{\spad{fn}} is clearly not known in general.
543034`\spad{map(f,{} a)} applies \spad{f} to all the constants in \spad{R} appearing in \spad{a}.
543099`\spad{map(f,{} u)} maps \spad{f} onto the coordinates of \spad{u} to get an element in \spad{AS} via identification of the basis of \spad{AR} as beginning part of the basis of \spad{AS}.
543182`\spad{map(f,{} u)} maps \spad{f} onto real and imaginary parts of \spad{u}.
543255`\spad{map(f,{} e)} applies \spad{f} to all the constants appearing in \spad{e}.
543337`\spad{map(fn,{} u)} is used to apply the function \userfun{\spad{fn}} to every factor of \spadvar{\spad{u}}. The new factored object will have all its information flags set to "nil". This function is used,{} for example,{} to coerce every factor base to another type.
543413`\spad{map(f,{} u)} maps \spad{f} onto the coefficients \spad{f} the element \spad{u} of the monoid ring to create an element of a monoid ring with the same monoid \spad{b}.
543501`\spad{map(f,{} r)} lifts \spad{f} and applies it to \spad{r},{} assuming that \spad{f}(infinity) = infinity.
543607`\spad{map(f,{} r)} lifts \spad{f} and applies it to \spad{r},{} assuming that \spad{f}(plusInfinity) = plusInfinity and that \spad{f}(minusInfinity) = minusInfinity.
543710`\spad{map(f,{} u)} maps \spad{f} onto the component parts of the octonion \spad{u}.
543782`\spad{map(f,{} p)} applies \spad{f} to all the leaves of \spad{p} and returns the result as a pattern over \spad{S}.
543855`\spad{map(f,{} p)} produces a new polynomial as a result of applying the function \spad{f} to every coefficient of the polynomial \spad{p}.
543937`\spad{map(f,{} p)} \undocumented
544014`\spad{map(f,{} p)} takes a function \spad{f} from \spad{R} to \spad{S},{} and applies it to each (non-zero) coefficient of a polynomial \spad{p} over \spad{R},{} getting a new polynomial over \spad{S}. Note: since the map is not applied to zero elements,{} it may map zero to zero.
544098`\spad{map(f,{} u)} maps \spad{f} onto the component parts of the quaternion \spad{u}.
544172`\spad{map(f,{} v=a..b)} returns the value given by \spad{v=f(a)..f(b)}.
544266`\spad{map(f,{} s)} expands the segment \spad{s},{} applying \spad{f} to each value. For example,{} if \spad{s = l..h by k},{} then the list \spad{[f(l),{} f(l+k),{} ...,{} f(lN)]} is computed,{} where \spad{lN <= h < lN+k}.
544354`\spad{map(f,{} l..h)} returns a new segment \spad{f(l)..f(h)}.
544427`\spad{map(func,{} poly)} creates a new polynomial by applying \spad{func} to every non-zero coefficient of the polynomial poly.
544557`\spad{map(func,{} poly)} creates a new polynomial by applying \spad{func} to every non-zero coefficient of the polynomial poly.
544677`\spad{map(f,{} s)} expands the segment \spad{s},{} applying \spad{f} to each value.
544785`\spad{map(f,{} seg)} returns the new segment obtained by applying \spad{f} to the endpoints of seg.
544885`\spad{map(f,{} a)} applies function \spad{f} to each member of aggregate \spad{a} resulting in a new aggregate over a possibly different underlying domain.
544958`\spad{map(f,{} a)} applies function \spad{f} to each member of aggregate \spad{a},{} creating a new aggregate with a possibly different underlying domain.
545028`\spad{map(f,{} eq)} returns an equation where \spad{f} is applied to the sides of eq
545104`\spad{map!(f,{} u)} destructively replaces each element \spad{x} of \spad{u} by \spad{f(x)}.
545187`\spad{map(f,{} u)} returns a copy of \spad{u} with each element \spad{x} replaced by \spad{f}(\spad{x}). For collections,{} \spad{map(f,{} u) = [f(x) for x in u]}.
545245`\spad{map(f,{} eqn)} constructs a new equation by applying \spad{f} to both sides of eqn.
545291`\spad{map(f,{} t)} replaces the tuple \spad{t} by \spad{[f(x) for x in t]}.
545342`\spad{map(f,{} l..h by k)} produces a value of type \spad{L} by applying \spad{f} to each of the succesive elements of the segment,{} that is,{} \spad{[f(l),{} f(l+k),{} ...,{} f(lN)]},{} where \spad{lN <= h < lN+k}.
545405`\spad{map(f,{} ts)} does a componentwise conversion of the tensor \spad{ts} to a tensor with components of type \spad{T}.
545604`\spad{map(f,{} p,{} k)} uses the property \spad{p} of the operator of \spad{k},{} in order to lift \spad{f} and apply it to \spad{k}.
545872`\spad{map(varmap,{} coefmap,{} p)} takes a \spad{varmap},{} a mapping from the variables of polynomial \spad{p} into \spad{S},{} \spad{coefmap},{} a mapping from coefficients of \spad{p} into \spad{S},{} and \spad{p},{} and produces a member of \spad{S} using the corresponding arithmetic. in \spad{S}.
545954`\spad{map(f,{} a,{} b)} \undocumented
546066`\spad{map(f,{} a,{} b)} \undocumented
546164`\spad{map(fn,{} list1,{} u2)} applies the binary function \spad{fn} to corresponding elements of lists \spad{u1} and \spad{u2} and returns a list of the results (in the same order). Thus \spad{map(/,{} [1,{} 2,{} 3],{} [4,{} 5,{} 6]) = [1/4,{} 2/4,{} 1/2]}. The computation terminates when the end of either list is reached. That is,{} the length of the result list is equal to the minimum of the lengths of \spad{u1} and \spad{u2}
546164`--.
546240`\spad{map(f,{} a,{} b)} \undocumented
546338`\spad{map(f,{} st1,{} st2)} returns the stream whose elements are the function \spad{f} applied to the corresponding elements of \spad{st1} and \spad{st2}. Note: \spad{map(f,{} [x0,{} x1,{} x2,{} ..],{} [y0,{} y1,{} y2,{} ..]) = [f(x0,{} y0),{} f(x1,{} y1),{} ..]}.
546422`\spad{map(fn,{} t1,{} t2)} creates a new table \spad{t} from given tables \spad{t1} and \spad{t2} with elements \spad{fn}(\spad{x},{} \spad{y}) where \spad{x} and \spad{y} are corresponding elements from \spad{t1} and \spad{t2} respectively.
546499`\spad{map(f,{} a,{} b)} returns \spad{c},{} where \spad{c} is such that \spad{c(i,{} j) = f(a(i,{} j),{} b(i,{} j))} for all \spad{i},{} \spad{j}.
546579`\spad{map(f,{} a,{} b)} returns \spad{c},{} where \spad{c(i,{} j) = f(a(i,{} j),{} b(i,{} j))} for all \spad{i,{} j}
546657`\spad{map(f,{} r,{} i)} lifts \spad{f} and applies it to \spad{r},{} assuming that \spad{f}(infinity) = \spad{i}.
546785`\spad{map(f,{} u,{} v)} returns a new collection \spad{w} with elements \spad{z = f(x,{} y)} for corresponding elements \spad{x} and \spad{y} from \spad{u} and \spad{v}. Note: for linear aggregates,{} \spad{w.i = f(u.i,{} v.i)}.
546918`\spad{map(f,{} a,{} b,{} r)} returns \spad{c},{} where \spad{c(i,{} j) = f(a(i,{} j),{} b(i,{} j))} when both \spad{a(i,{} j)} and \spad{b(i,{} j)} exist; else \spad{c(i,{} j) = f(r,{} b(i,{} j))} when \spad{a(i,{} j)} does not exist; else \spad{c(i,{} j) = f(a(i,{} j),{} r)} when \spad{b(i,{} j)} does not exist; otherwise \spad{c(i,{} j) = f(r,{} r)}.
546998`\spad{map(f,{} r,{} p,{} m)} lifts \spad{f} and applies it to \spad{r},{} assuming that \spad{f}(plusInfinity) = \spad{p} and that \spad{f}(minusInfinity) = \spad{m}.
547143`\spad{map(s,{} m,{} newOb,{} offsetX,{} offsetY)} creates a new graph by mapping from this one \spad{newOb} should contain the new list of vertices. \spad{m} should contain a NNI value for each vertex,{} this is the new index into \spad{newOb}. It is allowed that \spad{newOb} may contain less objects than \spad{s} (for surjective mapping) or more objects than \spad{s} (for injective mapping)
547234`\spad{map(f,{} x)} maps the moments and cumulants from the ring \spad{R1} to \spad{R2}.
547331`\spad{mapBivariate(f,{} p(x,{} y))} applies the function \spad{f} to the coefficients of \spad{p(x,{} y)}.
547468`\spad{mapCoef(f,{} e1 a1 +...+ en an)} returns \spad{f(e1) a1 +...+ f(en) an}.
547537`\spad{mapContra(s,{} m,{} newOb,{} offsetX,{} offsetY)} is similar to map function but reverses the directions of the arrows
547634`\spad{mapdiv([a0,{} a1,{} ..],{} [b0,{} b1,{} ..])} returns \spad{[a0/b0,{} a1/b1,{} ..]}.
547732`\spad{mapDown!(t,{}p,{}f)} returns \spad{t} after traversing \spad{t} in "preorder" (node then left then right) fashion replacing the successive interior nodes as follows. The root value \spad{x} is replaced by \spad{q} \spad{:=} \spad{f}(\spad{p},{} \spad{x}). The mapDown!(\spad{l},{} \spad{q},{} \spad{f}) and mapDown!(\spad{r},{} \spad{q},{} \spad{f}) are evaluated for the left and right subtrees \spad{l} and \spad{r} of \spad{t}.
547797`\spad{mapDown!(t,{}p,{}f)} returns \spad{t} after traversing \spad{t} in "preorder" (node then left then right) fashion replacing the successive interior nodes as follows. Let \spad{l} and \spad{r} denote the left and right subtrees of \spad{t}. The root value \spad{x} of \spad{t} is replaced by \spad{p}. Then \spad{f}(value \spad{l},{} value \spad{r},{} \spad{p}),{} where \spad{l} and \spad{r} denote the left and right subtrees o
547797`--f \spad{t},{} is evaluated producing two values \spad{pl} and \spad{pr}. Then \spad{mapDown!(l,{} pl,{} f)} and \spad{mapDown!(l,{} pr,{} f)} are evaluated.
547870`\spad{mapExpon(f,{} a1\^e1 ... an\^en)} returns \spad{a1\^f(e1) ... an\^f(en)}.
547931`\spad{mapExpon(f,{} a1\^e1 ... an\^en)} returns \spad{a1\^f(e1) ... an\^f(en)}.
547995`\spad{mapExpon(f,{} a1\^e1 ... an\^en)} returns \spad{a1\^f(e1) ... an\^f(en)}.
548150`\spad{mapExponents(fn,{} u)} maps function \spad{fn} onto the exponents of the non-zero monomials of polynomial \spad{u}.
548222`\spad{mapGen(f,{} a1\^e1 ... an\^en)} returns \spad{f(a1)\^e1 ... f(an)\^en}.
548272`\spad{mapGen(f,{} a1\^e1 ... an\^en)} returns \spad{f(a1)\^e1 ... f(an)\^en}.
548323`\spad{mapGen(f,{} a1\^e1 ... an\^en)} returns \spad{f(a1)\^e1 ... f(an)\^en}.
548382`\spad{mapGen(f,{} e1 a1 +...+ en an)} returns \spad{e1 f(a1) +...+ en f(an)}.
548450`\spad{mapMatrixIfCan(f,{} mat)} applies the function \spad{f} to the coefficients of the entries of \spad{mat} if possible,{} and returns \spad{"failed"} otherwise.
548608`\spad{mapmult([a0,{} a1,{} ..],{} [b0,{} b1,{} ..])} returns \spad{[a0*b0,{} a1*b1,{} ..]}.
548695`\spad{mapSolve(u,{} f)} \undocumented
548816`\spad{mapUnivariate(f,{} p(x))} applies the function \spad{f} to the coefficients of \spad{p(x)}.
548925`\spad{mapUnivariate(f,{} p(x))} applies the function \spad{f} to the coefficients of \spad{p(x)}.
549034`\spad{mapUnivariateIfCan(f,{} p(x))} applies the function \spad{f} to the coefficients of \spad{p(x)},{} if possible,{} and returns \spad{"failed"} otherwise.
549180`\spad{mapUp!(t,{}f)} traverses balanced binary tree \spad{t} in an "endorder" (left then right then node) fashion returning \spad{t} with the value at each successive interior node of \spad{t} replaced by \spad{f}(\spad{l},{} \spad{r}) where \spad{l} and \spad{r} are the values at the immediate left and right nodes.
549240`\spad{mapUp!(t,{}t1,{}f)} traverses \spad{t} in an "endorder" (left then right then node) fashion returning \spad{t} with the value at each successive interior node of \spad{t} replaced by \spad{f}(\spad{l},{} \spad{r},{} \spad{l1},{} \spad{r1}) where \spad{l} and \spad{r} are the values at the immediate left and right nodes. Values \spad{l1} and \spad{r1} are values at the corresponding nodes of a balanced binary tree \spad{t1},{} of 
549240`--identical shape at \spad{t}.
549353`\spad{mask(n)} returns \spad{2^n-1} (an \spad{n} bit mask).
549401`\spad{match(la,{} lb)} creates a map with no default source or target values defined by lists \spad{la} and \spad{lb} of equal length. The target of a source value \spad{x} in \spad{la} is the value \spad{y} with the same index \spad{lb}. Error: if \spad{la} and \spad{lb} are not of equal length. Note: when this map is applied,{} an error occurs when applied to a value missing from \spad{la}.
549462`\spad{match?(s,{} t,{} c)} tests if \spad{s} matches \spad{t} except perhaps for multiple and consecutive occurrences of character \spad{c}. Typically \spad{c} is the blank character.
549526`\spad{match(la,{} lb,{} f)} creates a map defined by lists \spad{la} and \spad{lb} of equal length. The target of a source value \spad{x} in \spad{la} is the value \spad{y} with the same index \spad{lb}. Argument \spad{f} is used as the function to call when the given function argument is not in \spad{la}. The value returned is \spad{f} applied to that argument.
549594`\spad{match(la,{} lb,{} a)} creates a map defined by lists \spad{la} and \spad{lb} of equal length,{} where \spad{a} is used as the default source value if the given one is not in \spad{la}. The target of a source value \spad{x} in \spad{la} is the value \spad{y} with the same index \spad{lb}. Error: if \spad{la} and \spad{lb} are not of equal length.
549652`\spad{match(la,{} lb,{} b)} creates a map defined by lists \spad{la} and \spad{lb} of equal length,{} where \spad{b} is used as the default target value if the given function argument is not in \spad{la}. The target of a source value \spad{x} in \spad{la} is the value \spad{y} with the same index \spad{lb}. Error: if \spad{la} and \spad{lb} are not of equal length.
549715`\spad{match(la,{} lb,{} a,{} f)} creates a map defined by lists \spad{la} and \spad{lb} of equal length. and applies this map to a. The target of a source value \spad{x} in \spad{la} is the value \spad{y} with the same index \spad{lb}. Argument \spad{f} is a default function to call if a is not in \spad{la}. The value returned is then obtained by applying \spad{f} to argument a.
549780`\spad{match(la,{} lb,{} a,{} b)} creates a map defined by lists \spad{la} and \spad{lb} of equal length. and applies this map to a. The target of a source value \spad{x} in \spad{la} is the value \spad{y} with the same index \spad{lb}. Argument \spad{b} is the default target value if a is not in \spad{la}. Error: if \spad{la} and \spad{lb} are not of equal length.
549840`\spad{mathieu11 constructs} the mathieu group acting on the integers 1,{} ...,{} 11.
549919`\spad{mathieu11(\spad{li})} constructs the mathieu group acting on the 11 integers given in the list {\em \spad{li}}. Note: duplicates in the list will be removed. error,{} if {\em \spad{li}} has less or more than 11 different entries.
550011`\spad{mathieu12 constructs} the mathieu group acting on the integers 1,{} ...,{} 12.
550090`\spad{mathieu12(\spad{li})} constructs the mathieu group acting on the 12 integers given in the list {\em \spad{li}}. Note: duplicates in the list will be removed Error: if {\em \spad{li}} has less or more than 12 different entries.
550182`\spad{mathieu22 constructs} the mathieu group acting on the integers 1,{} ...,{} 22.
550261`\spad{mathieu22(\spad{li})} constructs the mathieu group acting on the 22 integers given in the list {\em \spad{li}}. Note: duplicates in the list will be removed. Error: if {\em \spad{li}} has less or more than 22 different entries.
550353`\spad{mathieu23 constructs} the mathieu group acting on the integers 1,{} ...,{} 23.
550432`\spad{mathieu23(\spad{li})} constructs the mathieu group acting on the 23 integers given in the list {\em \spad{li}}. Note: duplicates in the list will be removed. Error: if {\em \spad{li}} has less or more than 23 different entries.
550524`\spad{mathieu24 constructs} the mathieu group acting on the integers 1,{} ...,{} 24.
550603`\spad{mathieu24(\spad{li})} constructs the mathieu group acting on the 24 integers given in the list {\em \spad{li}}. Note: duplicates in the list will be removed. Error: if {\em \spad{li}} has less or more than 24 different entries.
550695`\spad{matrix(llf)} makes \spad{llf} (a list of lists of forms) into a form which displays as a matrix.
550812`\spad{matrix(qf)} creates a square matrix from the quadratic form \spad{qf}.
550876`\spad{matrix(l)} converts the list of lists \spad{l} to a matrix,{} where the list of lists is viewed as a list of the rows of the matrix.
550943`\spad{matrix(l)} converts the list of lists \spad{l} to a matrix,{} where the list of lists is viewed as a list of the rows of the matrix.
551134`\spad{matrix(n,{}m,{}f)} constructs an \spad{n * m} matrix with the \spad{(i,{}j)} entry equal to \spad{f(i,{}j)}.
551246`\spad{matrixConcat3D(s,{} x,{} y)} concatenates two 3-\spad{D} matrices along a specified axis
551320`\spad{matrixDimensions(x)} returns the dimensions of a matrix
551410`\spad{matrixGcd(mat,{} sing,{} n)} is \spad{gcd(sing,{} g)} where \spad{g} is the \spad{gcd} of the entries of the \spad{n}-by-\spad{n} upper-triangular matrix \spad{mat}.
551497`\spad{max()} returns the maximum floating point number.
551609`\spad{max()} returns the largest single integer.
551648`\spad{max(s)} returns index of the vertex which can be reached from all other vertices. Gives 0 if no such node exists or if it is not unique,{} if there is a loop for instance.
551806`\spad{max(u)} returns the largest element of aggregate \spad{u}.
551871`\spad{max(q)} returns the maximum element of priority queue \spad{q}.
551923`\spad{max(a,{} b)} returns a point whose value in each dimension is the maximum. So if a has the largest \spad{x} value and \spad{b} has the largest \spad{y} value then the result will combine these. This is useful for constructing boundary boxes around sets of points.
551968`\spad{max(s,{} sub)} returns index of the vertex which can be reached from a given subset of the vertices. Gives 0 if no such node exists or if it is not unique,{} if there is a loop for instance.
552168`\spad{max(x,{}y)} returns the maximum of \spad{x} and \spad{y} relative to \spad{"<"}.
552209`\spad{maxColIndex(m)} returns the index of the 'last' column of the matrix \spad{m}.
552290`\spad{maxColIndex(m)} returns the index of the 'last' column of the array \spad{m}
552369`\spad{maxdeg(p)} returns the greatest word occurring in the polynomial \spad{p} with a non-zero coefficient. An error is produced if \spad{p} is zero.
552419`\spad{maxdeg(p)} returns the greatest leading word in the support of \spad{p}.
552483`\spad{maxDegree returns} the specified maxDegree.
552588`\spad{maxDegree(d)} specifies the maximum degree of the coefficient polynomials in an algebraic differential equation or a recursion with polynomial coefficients. For rational functions with an exponential term,{} \spad{maxDegree} bounds the degree of the denominator polynomial. This option is expressed in the form \spad{maxDegree == d}.
552668`\spad{maxDerivative returns} the specified maxDerivative.
552777`\spad{maxDerivative(d)} specifies the maximum derivative in an algebraic differential equation. This option is expressed in the form \spad{maxDerivative == d}.
552861`\spad{maximumExponent()} returns the maximum exponent in the model
552916`\spad{maximumExponent(e)} sets the maximum exponent in the model to \spad{e}
553150`\spad{maxIndex(u)} returns the maximum index \spad{i} of aggregate \spad{u}. Note: in general,{} \spad{maxIndex(u) = reduce(max,{} [i for i in indices u])}; if \spad{u} is a list,{} \spad{maxIndex(u) = \#u}.
553236`\spad{maxint()} returns the maximum integer in the model
553292`\spad{maxint(u)} sets the maximum integer in the model to \spad{u}
553363`\spad{maxLevel returns} the specified maxLevel.
553467`\spad{maxLevel(d)} specifies the maximum number of recursion levels operators guessProduct and guessSum will be applied. This option is expressed in the form spad{maxLevel \spad{==} \spad{d}}.
553546`\spad{maxMixedDegree returns} the specified maxMixedDegree.
553637`\spad{maxMixedDegree(d)} specifies the maximum \spad{q}-degree of the coefficient polynomials in a recurrence with polynomial coefficients,{} in the case of mixed shifts. Although slightly inconsistent,{} maxMixedDegree(0) specifies that no mixed shifts are allowed. This option is expressed in the form \spad{maxMixedDegree == d}.
553703`\spad{maxPoints()} returns the maximum number of points in a plot
553744`\spad{maxPoints()} returns the maximum number of points in a plot.
553797`\spad{maxPoints()} sets the maximum number of points in a plot.
553857`\spad{maxPoints3D()} returns the maximum number of points in a plot.
553902`\spad{maxPower returns} the specified maxPower.
554003`\spad{maxPower(d)} specifies the maximum degree in an algebraic differential equation. For example,{} the degree of (\spad{f}\spad{''})\spad{^3} \spad{f'} is 4. maxPower(\spad{-1}) specifies that the maximum exponent can be arbitrary. This option is expressed in the form \spad{maxPower == d}.
554079`\spad{maxrank(r)} returns the maximum rank in the list \spad{r} of regimes
554280`\spad{maxrow(a,{} b,{} c,{} d,{} e)} is an auxiliary function for \spad{mr}
554507`\spad{maxRowIndex(m)} returns the index of the 'last' row of the matrix \spad{m}.
554588`\spad{maxRowIndex(m)} returns the index of the 'last' row of the array \spad{m}
554667`\spad{maxShift returns} the specified maxShift.
554771`\spad{maxShift(d)} specifies the maximum shift in a recurrence equation. This option is expressed in the form \spad{maxShift == d}.
554850`\spad{maxSubst returns} the specified maxSubst.
554951`\spad{maxSubst(d)} specifies the maximum degree of the monomial substituted into the function we are looking for. That is,{} if \spad{maxSubst == d},{} we look for polynomials such that \$\spad{p}(\spad{f}(\spad{x}),{} \spad{f}(\spad{x^2}),{} ...,{} \spad{f}(\spad{x^d}))\spad{=0}\$. equation. This option is expressed in the form \spad{maxSubst == d}.
555103`\spad{mdeg(p)} returns an error if \spad{p} is \spad{0},{} otherwise,{} if \spad{p} belongs to \spad{R} returns \spad{0},{} otherwise,{} returns the degree of \spad{p} in its main variable.
555182`\spad{meatAxe(aG)} calls {\em meatAxe(aG,{} false,{} 25,{} 7)} returns a 2-list of representations as follows. All matrices of argument \spad{aG} are assumed to be square and of equal size. Then \spad{aG} generates a subalgebra,{} say \spad{A},{} of the algebra of all square matrices of dimension \spad{n}. {\em V R} is an A-module in the usual way. meatAxe(\spad{aG}) creates at most 2
555182`--5 random elements of the algebra,{} tests them for singularity. If singular,{} it tries at most 7 elements of its kernel to generate a proper submodule. If successful a list which contains first the list of the representations of the submodule,{} then a list of the representations of the factor module is returned. Otherwise,{} if we know that all the kernel is already scanned,{} Norton\spad{'s} irreducibility test can be used either to prove irreducibility or to find the splitting. Notes: the 
555182`--first 6 tries use Parker\spad{'s} fingerprints. Also,{} 7 covers the case of three-dimensional kernels over the field with 2 elements.
555302`\spad{meatAxe(aG,{} randomElements)} calls {\em meatAxe(aG,{} false,{} 6,{} 7)},{} only using Parker\spad{'s} fingerprints,{} if {\em randomElemnts} is \spad{false}. If it is \spad{true},{} it calls {\em meatAxe(aG,{} true,{} 25,{} 7)},{} only using random elements. Note: the choice of 25 was rather arbitrary. Also,{} 7 covers the case of three-dimensional kernels over the fie
555302`--ld with 2 elements.
555430`\spad{meatAxe(aG,{} numberOfTries)} calls {\em meatAxe(aG,{} true,{} numberOfTries,{} 7)}. Notes: 7 covers the case of three-dimensional kernels over the field with 2 elements.
555566`\spad{meatAxe(aG,{} randomElements,{} numberOfTries,{} maxTests)} returns a 2-list of representations as follows. All matrices of argument \spad{aG} are assumed to be square and of equal size. Then \spad{aG} generates a subalgebra,{} say \spad{A},{} of the algebra of all square matrices of dimension \spad{n}. {\em V R} is an A-module in the usual way. meatAxe(\
555566`--spad{aG},{} \spad{numberOfTries},{} maxTests) creates at most {\em numberOfTries} random elements of the algebra,{} tests them for singularity. If singular,{} it tries at most {\em maxTests} elements of its kernel to generate a proper submodule. If successful,{} a 2-list is returned: first,{} a list containing first the list of the representations of the submodule,{} then a list of the representations of the factor module. Otherwise,{} if we know that all the kernel is already scanned,{} Norto
555566`--n\spad{'s} irreducibility test can be used either to prove irreducibility or to find the splitting. If {\em randomElements} is {\em false},{} the first 6 tries use Parker\spad{'s} fingerprints.
555710`\spad{medial(ps)} returns the same as \spad{medialSet(ps,{} initiallyReduced?,{} initiallyReduce)}.
555796`\spad{medialSet(ps,{} redOp?,{} redOp)} returns \spad{bs} a basic set (in Wu Wen Tsun sense \spad{w}.\spad{r}.\spad{t} the reduction-test \spad{redOp?}) of some set generating the same ideal as \spad{ps} (with rank not higher than any basic set of \spad{ps}),{} if no non-zero constant polynomials appear during the computatioms,{} else \spad{"failed"} is returned. In the former case,{} \spad{bs}
555796`-- has to be understood as a candidate for being a characteristic set of \spad{ps}. In the original algorithm,{} \spad{bs} is simply a basic set of \spad{ps}.
555906`\spad{meijerG(la,{} lb,{} lc,{} ld,{} z)} is the meijerG function
556027`\spad{meijerG(la,{} lb,{} lc,{} ld,{} z)} is the meijerG function.
556148`\spad{meixnerM(n,{} b,{} c,{} z)} is the Meixner polynomial
556215`\spad{meixnerM(n,{} b,{} c,{} z)} is the Meixner polynomial
556280`\spad{member?(p,{} s)} returns \spad{true} is \spad{p} is in \spad{s},{} \spad{false} otherwise.
556644`\spad{member?(v,{} B)} tests if the vector \spad{v} is in the subspace spanned by \spad{B}.
556710`\spad{member?(pp,{} gp)} answers the question,{} whether the permutation {\em pp} is in the group {\em gp} or not.
556781`\spad{member?(x,{} u)} tests if \spad{x} is a member of \spad{u}. For collections,{} \spad{member?(x,{} u) = reduce(or,{} [x=y for y in u],{} false)}. However,{} \spad{member?(x,{} u)} returns as soon as it finds a member.
556945`\spad{members(u)} returns a list of the consecutive elements of \spad{u}. For collections,{} \spad{parts([x,{} y,{} ...,{} z]) = (x,{} y,{} ...,{} z)}.
557028`\spad{members(ms)} returns a list of the elements of \spad{ms} {\em without} their multiplicity. See also \spadfun{parts}.
557076`\spad{merge(ls)} a list of subspaces,{} \spad{ls},{} into one subspace.
557125`\spad{merge([s1,{} s2,{} ...,{} sn])} will create a new \spadtype{ThreeSpace} that has the components of all the ones in the list; Groupings of components into composites are maintained.
557399`\spad{merge(a,{} b)} returns sum : union (not necessarily disjoint) of nodes with arrows merged in from appropriate input,{} if arrow exists from both inputs then it will be duplicated.
557446`\spad{merge(s1,{} s2)} the subspaces \spad{s1} and \spad{s2} into a single subspace.
557743`\spad{merge!(u,{} v)} destructively merges \spad{u} and \spad{v} in ascending order.
557822`\spad{merge(u,{} v)} merges \spad{u} and \spad{v} in ascending order. Note: \spad{merge(u,{} v) = merge(<=,{} u,{} v)}.
557919`\spad{merge(q1,{} q2)} returns combines priority queues \spad{q1} and \spad{q2} to return a single priority queue \spad{q}.
557977`\spad{merge!(q,{} q1)} destructively changes priority queue \spad{q} to include the values from priority queue \spad{q1}.
558036`\spad{merge(s1,{} s2)} will create a new \spadtype{ThreeSpace} that has the components of \spad{s1} and \spad{s2}; Groupings of components into composites are maintained.
558416`\spad{merge!(p,{} u,{} v)} destructively merges \spad{u} and \spad{v} using predicate \spad{p}.
558493`\spad{merge(p,{} a,{} b)} returns an aggregate \spad{c} which merges \spad{a} and \spad{b}. The result is produced by examining each element \spad{x} of \spad{a} and \spad{y} of \spad{b} successively. If \spad{p(x,{} y)} is \spad{true},{} then \spad{x} is inserted into the result; otherwise \spad{y} is inserted. If \spad{x} is chosen,{} the next element of \spad{a} is examined,{} and so on. When all the elements of
558493`-- one aggregate are examined,{} the remaining elements of the other are appended. For example,{} \spad{merge(<,{} [1,{} 3],{} [2,{} 7,{} 5])} returns \spad{[1,{} 2,{} 3,{} 7,{} 5]}.
558582`\spad{mergeDifference(l1,{} l2)} returns a list of elements in \spad{l1} not present in \spad{l2}. Assumes lists are ordered and all \spad{x} in \spad{l2} are also in \spad{l1}.
558807`\spad{mergeFactors(u,{} v)} is used when the factorizations of \spadvar{\spad{u}} and \spadvar{\spad{v}} are known to be disjoint,{} \spadignore{e.g.} resulting from a content/primitive part split. Essentially,{} it creates a new factored object by multiplying the units together and appending the lists of factors.
558902`\spad{mesh?(s)} returns \spad{true} if the \spadtype{ThreeSpace} \spad{s} is composed of one component,{} a mesh comprising a list of curves which are lists of points,{} or returns \spad{false} if otherwise
558958`\spad{mesh(s)} checks to see if the \spadtype{ThreeSpace},{} \spad{s},{} is composed of a single surface component defined by a list curves which contain lists of points,{} and if so,{} returns the list of lists of points; An error is signaled otherwise.
559026`\spad{mesh([[p0],{} [p1],{} ...,{} [pn]])} creates a surface defined by a list of curves which are lists,{} \spad{p0} through \spad{pn},{} of points,{} and returns a \spadtype{ThreeSpace} whose component is the surface.
559094`\spad{mesh([[p0],{} [p1],{} ...,{} [pn]],{} close1,{} close2)} creates a surface defined over a list of curves,{} \spad{p0} through \spad{pn},{} which are lists of points; the booleans \spad{close1} and \spad{close2} indicate how the surface is to be closed: \spad{close1} set to \spad{true} means that each individual list (a curve) is to be closed (that is,{} the last point of the list is to be connected to the first po
559094`--int); \spad{close2} set to \spad{true} means that the boundary at one end of the surface is to be connected to the boundary at the other end (the boundaries are defined as the first list of points (curve) and the last list of points (curve)); the \spadtype{ThreeSpace} containing this surface is returned.
559178`\spad{mesh(s,{} [ [[r10]...,{} [r1m]],{} [[r20]...,{} [r2m]],{} ...,{} [[rn0]...,{} [rnm]] ],{} close1,{} close2)} adds a surface component to the \spadtype{ThreeSpace} \spad{s},{} which is defined over a rectangular domain of size \spad{WxH} where \spad{W} is the number of lists of points from the domain \spad{PointDomain(R)} and \spad{H} is the number of elements in each of those lists; the booleans \spad{close1} an
559178`--d \spad{close2} indicate how the surface is to be closed: if \spad{close1} is \spad{true} this means that each individual list (a curve) is to be closed (\spadignore{i.e.} the last point of the list is to be connected to the first point); if \spad{close2} is \spad{true},{} this means that the boundary at one end of the surface is to be connected to the boundary at the other end (the boundaries are defined as the first list of points (curve) and the last list of points (curve)).
559264`\spad{mesh(s,{} [ [[r10]...,{} [r1m]],{} [[r20]...,{} [r2m]],{} ...,{} [[rn0]...,{} [rnm]] ],{} [props],{} prop)} adds a surface component to the \spadtype{ThreeSpace} \spad{s},{} which is defined over a rectangular domain of size \spad{WxH} where \spad{W} is the number of lists of points from the domain \spad{PointDomain(R)} and \spad{H} is the number of elements in each of t
559264`--hose lists; lprops is the list of the subspace component properties for each curve list,{} and prop is the subspace component property by which the points are defined.
559392`\spad{mesh(s,{} [[p0],{} [p1],{} ...,{} [pn]],{} close1,{} close2)} adds a surface component to the \spadtype{ThreeSpace},{} which is defined over a list of curves,{} in which each of these curves is a list of points. The boolean arguments \spad{close1} and \spad{close2} indicate how the surface is to be closed. Argument \spad{close1} equal \spad{true} means that each individual list (a curve) is to be closed,{} \spa
559392`--dignore{i.e.} the last point of the list is to be connected to the first point. Argument \spad{close2} equal \spad{true} means that the boundary at one end of the surface is to be connected to the boundary at the other end,{} \spadignore{i.e.} the boundaries are defined as the first list of points (curve) and the last list of points (curve).
559479`\spad{mesh(s,{} [[p0],{} [p1],{} ...,{} [pn]],{} [props],{} prop)} adds a surface component,{} defined over a list curves which contains lists of points,{} to the \spadtype{ThreeSpace} \spad{s}; props is a list which contains the subspace component properties for each surface parameter,{} and prop is the subspace component property by which the points are defined.
559608`\spad{meshFun2Var(f,{} g,{} s1,{} s2,{} l)} \undocumented
559868`\spad{meshPar1Var(s,{} t,{} u,{} f,{} s1,{} l)} \undocumented
560085`\spad{meshPar2Var(f,{} s1,{} s2,{} l)} \undocumented
560282`\spad{meshPar2Var(sp,{} f,{} s1,{} s2,{} l)} \undocumented
560503`\spad{meshPar2Var(f,{} g,{} h,{} j,{} s1,{} s2,{} l)} \undocumented
560841`\spad{message(s)} creates an form with no string quotes from string \spad{s}.
560887`\spad{messagePrint(s)} prints \spad{s} without string quotes. Note: \spad{messagePrint(s)} is equivalent to \spad{print message(s)}.
560940`\spad{middle(rootChar)} is the middle of the isolating interval
561034`\spad{midpoint(int)} returns the midpoint of the interval \spad{int}.
561154`\spad{midpoints(isolist)} returns the list of midpoints for the list of intervals \spad{isolist}.
561287`\spad{mightHaveRoots(p,{} r)} is \spad{false} if \spad{p.r} is not 0
561398`\spad{min()} returns the minimum floating point number.
561510`\spad{min()} returns the smallest single integer.
561549`\spad{min(s)} returns index of the vertex which can reach to all other vertices. Gives 0 if no such node exists or if it is not unique,{} if there is a loop for instance.
561707`\spad{min(u)} returns the smallest element of aggregate \spad{u}.
561772`\spad{min(u)} returns the smallest entry in the multiset aggregate \spad{u}.
561826`\spad{min(a,{} b)} returns a point whose value in each dimension is the minimum. So if a has the smallest \spad{x} value and \spad{b} has the smallest \spad{y} value then the result will combine these. This is useful for constructing boundary boxes around sets of points.
561871`\spad{min(s,{} sub)} returns index of the vertex which can reach to a given subset of the vertices. Gives 0 if no such node exists or if it is not unique,{} if there is a loop for instance.
562071`\spad{min(x,{}y)} returns the minimum of \spad{x} and \spad{y} relative to \spad{"<"}.
562112`\spad{minColIndex(m)} returns the index of the 'first' column of the matrix \spad{m}.
562193`\spad{minColIndex(m)} returns the index of the 'first' column of the array \spad{m}
562272`\spad{mindeg(p)} returns the smallest word occurring in the polynomial \spad{p} with a non-zero coefficient. An error is produced if \spad{p} is zero.
562322`\spad{mindeg(x)} returns the little word which appears in \spad{x}. Error if \spad{x=0}.
562383`\spad{mindegTerm(x)} returns the term whose word is \spad{mindeg(x)}.
562462`\spad{minGbasis }\undocumented
562798`\spad{minimalPolynomial(x)} \undocumented{} See \spadfunFrom{minimalPolynomial}{FiniteAlgebraicExtensionField}
562910`\spad{minimalPolynomial(a)} returns the minimal polynomial of an element \spad{a} over the ground field \spad{F}.
563011`\spad{minimalPolynomial(a)} returns the minimal polynomial of \spad{a}.
563202`\spad{minimalPolynomial(x,{} n)} computes the minimal polynomial of \spad{x} over the field of extension degree \spad{n} over the ground field \spad{F}.
563333`\spad{minimize(I)} returns a reduced set of generators for \spad{I}.
563473`\spad{minimumDegree(p)} gives the least exponent of a non-zero term of polynomial \spad{p}. Error: if applied to 0.
563538`\spad{minimumDegree(l)} is the smallest \spad{k} such that \spad{a(k) ~= 0} if \indented{2}{\spad{l = sum(monomial(a(i),{} i),{} i = 0..n)}.}
563847`\spad{minimumDegree(p,{} lv)} gives the list of minimum degrees of the polynomial \spad{p} with respect to each of the variables in the list \spad{lv}
563950`\spad{minimumDegree(p,{} v)} gives the minimum degree of polynomial \spad{p} with respect to \spad{v},{} \spadignore{i.e.} viewed a univariate polynomial in \spad{v}
564041`\spad{minimumExponent()} returns the minimum exponent in the model
564096`\spad{minimumExponent(e)} sets the minimum exponent in the model to \spad{e}
564277`\spad{minIndex(u)} returns the minimum index \spad{i} of aggregate \spad{u}. Note: in general,{} \spad{minIndex(a) = reduce(min,{} [i for i in indices a])}; for lists,{} \spad{minIndex(a) = 1}.
564363`\spad{minordet(m)} computes the determinant of the matrix \spad{m} using minors. Error: if the matrix is not square.
564442`\spad{minordet(m)} computes the determinant of the matrix \spad{m} using minors.
564532`\spad{minordet(m)} computes the determinant of the matrix \spad{m} using minors. Error: if the matrix is not square.
564604`\spad{minPoints()} returns the minimum number of points in a plot
564645`\spad{minPoints()} returns the minimum number of points in a plot.
564698`\spad{minPoints()} sets the minimum number of points in a plot.
564758`\spad{minPoints3D()} returns the minimum number of points in a plot.
564803`\spad{minPol }\undocumented
564984`\spad{minPol }\undocumented
565222`\spad{minPoly(k)} returns the defining polynomial of \spad{k}.
565339`\spad{minPoly(k)} returns \spad{p} such that \spad{p(k) = 0}.
565434`\spad{minrank(r)} returns the minimum rank in the list \spad{r} of regimes
565635`\spad{minRowIndex(m)} returns the index of the 'first' row of the matrix \spad{m}.
565716`\spad{minRowIndex(m)} returns the index of the 'first' row of the array \spad{m}
565795`\spad{minset(sl)} returns the sublist of \spad{sl} consisting of the minimal lists (with respect to inclusion) in the list \spad{sl} of lists
565891`\spad{minus!(c,{} a)} computes \spad{-a} and stores the result in the matrix \spad{c}. Error: if a and \spad{c} do not have the same dimensions.
565981`\spad{!minus!(c,{} a,{} b)} computes the matrix difference \spad{a - b} and stores the result in the matrix \spad{c}. Error: if \spad{a},{} \spad{b},{} and \spad{c} do not have the same dimensions.
566081`\spad{minusInfinity()} returns -infinity.
566137`\spad{minusInfinity()} returns minusInfinity.
566205`\spad{m_inverse(x,{} lm,{} lv,{} p)} computes inverse of \spad{x} in algeraic extension defined by \spad{lm}.
566361`\spad{mirror(x)} returns the reversed word of \spad{x}. That is \spad{x} itself if \spadopFrom{retractable?}{FreeMagma}(\spad{x}) is \spad{true} and \spad{mirror(z) * mirror(y)} if \spad{x} is \spad{y*z}.
566409`\spad{mirror(x)} returns the reversed word of \spad{x}.
566453`\spad{mirror(g)} is the mirror of the internal representation of \spad{g}.
566515`\spad{mirror(x)} returns \spad{Sum(r_i mirror(w_i))} if \spad{x} is \spad{Sum(r_i w_i)}.
566570`\spad{mirror(x)} returns \spad{Sum(r_i mirror(w_i))} if \spad{x} writes \spad{Sum(r_i w_i)}.
566619`\spad{mix(l)} \undocumented
566723`\spad{mkAnswer(r,{} l,{} ne)} creates an integration result from a rational part \spad{r},{} a logarithmic part \spad{l},{} and a non-elementary part ne.
566922`\spad{mkcomm(i)} \undocumented{}
566968`\spad{mkcomm(i,{} j)} \undocumented{}
567012`\spad{mk_erf(u,{} f)} should be local but conditional
567066`\spad{mkIntegral(p(x,{} y))} returns \spad{[c(x),{} q(x,{} z)]} such that \spad{z = c * y} is integral. The algebraic relation between \spad{x} and \spad{y} is \spad{p(x,{} y) = 0}. The algebraic relation between \spad{x} and \spad{z} is \spad{q(x,{} z) = 0}.
567163`\spad{mkPrim(f,{} x)} makes the logs in \spad{f} which are linear in \spad{x} primitive with respect to \spad{x}.
567275`\spad{modifyPoint(s,{} \spad{li},{} i)} replaces an existing point in the 3 dimensional subspace,{} \spad{s},{} with the 4 dimensional point indicated by the index location,{} \spad{i}. The list of non negative integers,{} \spad{li},{} dictates the path to follow,{} or,{} to look at it another way,{} points to the component in which the existing point is to be modified. An error message occurs if \spad{s} is em
567275`--pty,{} otherwise the subspace \spad{s} is returned with the point modification.
567368`\spad{modifyPoint(s,{} \spad{li},{} p)} replaces an existing point in the 3 dimensional subspace,{} \spad{s},{} with the 4 dimensional point,{} \spad{p}. The list of non negative integers,{} \spad{li},{} dictates the path to follow,{} or,{} to look at it another way,{} points to the component in which the existing point is to be modified. An error message occurs if \spad{s} is empty,{} otherwise the subspace \spad{s} is 
567368`--returned with the point modification.
567451`\spad{modifyPoint(s,{} ind,{} p)} modifies the point referenced by the index location,{} \spad{ind},{} by replacing it with the point,{} \spad{p} in the 3 dimensional subspace,{} \spad{s}. An error message occurs if \spad{s} is empty,{} otherwise the subspace \spad{s} is returned with the point modification.
567528`\spad{modifyPointData(v,{} ind,{} pt)} takes the viewport,{} \spad{v},{} which is of the domain \spadtype{ThreeDimensionalViewport},{} and places the data point,{} \spad{pt} into the list of points database of \spad{v} at the index location given by \spad{ind}.
567632`\spad{modifyPointData(s,{} i,{} p)} changes the point at the indexed location \spad{i} in the \spadtype{ThreeSpace},{} \spad{s},{} to that of point \spad{p}. This is useful for making changes to a point which has been transformed.
567721`\spad{modpeval(pol,{} lv,{} lpt,{} p)} evaluates polynomial \spad{pol} in variables form \spad{lv} at point from \spad{lpt} modulo a prime \spad{p}
567840`\spad{modpreduction(r,{} p)} reduces a rational function \spad{r} modulo prime \spad{p}.
568015`\spad{modpreduction(p,{} q)} reduces all coeffiecients of \spad{p} modulo \spad{q}.
568093`\spad{modpreduction(pol,{} p)} reduces polynomial \spad{pol} modulo prime \spad{p}.
568202`\spad{modTree(r,{} l)} \undocumented{}
568259`\spad{modularFactor(f)} chooses a "good" prime and returns the factorization of \spad{f} modulo this prime in a form that may be used by \spadfunFrom{completeHensel}{GeneralHenselPackage}. If prime is zero it means that \spad{f} has been proved to be irreducible over the integers or that \spad{f} is a unit (\spadignore{i.e.} 1 or \spad{-1}). \spad{f} shall be primitive (\spadignore{i.e.} content(\spad{p})
568259`--\spad{=1}) and square free (\spadignore{i.e.} without repeated factors).
568358`\spad{modularGcd(listf)} computes the \spad{gcd} of the list of polynomials \spad{listf} by modular methods.
568433`\spad{modularGcdPrimitive(listf)} computes the \spad{gcd} of the list of primitive polynomials \spad{listf} by modular methods.
568517`\spad{modularInvariantJ(tau)} computes modular invariant \spad{j},{} that is \spad{1728*g2^3/(g2^3 - 27*g3^2)} where \spad{g2},{} \spad{g3} are invariants corresponding to half periods \spad{w1},{} \spad{w2} such that \spad{tau = w1/w2}.
568605`\spad{module(I)} returns \spad{I} viewed has a module over \spad{R}.
568711`\spad{module([f1,{} ...,{} fn])} = the module generated by \spad{(f1,{} ...,{} fn)} over \spad{R}.
568778`\spad{moduleSum(m1,{} m2)} returns the sum of two modules in the framed algebra \spad{F}. Each module \spad{\spad{mi}} is represented as follows: \spad{F} is a framed algebra with \spad{R}-module basis \spad{w1,{} w2,{} ...,{} wn} and \spad{\spad{mi}} is a record \spad{[basis,{} basisDen,{}
568778`-- basisInv]}. If \spad{basis} is the matrix \spad{(aij,{} i = 1..n,{} j = 1..n)},{} then a basis \spad{v1,{} ...,{} vn} for \spad{\spad{mi}} is given by \spad{\spad{vi} = (1/basisDen) * sum(aij * wj,{} j = 1..n)},{} \spadignore{i.e.} the \spad{i}th row of 'basis' contains the coordinates of the \spad{i}th basis vector. Similarly,{} the \spad{i}th row of the matrix \spad{basisInv} contains the coordinates of \spad{\spad{wi}} with respect to the basis \spad{v1,{} ...,{} vn}: if \spad{basisInv} is
568778`-- the matrix \spad{(bij,{} i = 1..n,{} j = 1..n)},{} then \spad{\spad{wi} = sum(bij * vj,{} j = 1..n)}.
568994`\spad{modulo(x)} returns a,{} where \spad{x = a + b p}.
569054`\spad{modulus()} \undocumented
569100`\spad{modulus()} returns the value of \spad{p}.
569158`\spad{modulus(x)} \undocumented
569245`\spad{modulus(x)} \undocumented
569322`\spad{modulus(x)} \undocumented
569398`\spad{moebius(a,{} b,{} c,{} d)} returns \spad{matrix [[a,{} b],{} [c,{} d]]}.
569454`\spad{moebiusMu(n)} returns the Moebius function \spad{mu(n)}. \spad{mu(n)} is either \spad{-1},{} 0 or 1 as follows: \spad{mu(n) = 0} if \spad{n} is divisible by a square > 1,{} \spad{mu(n) = (-1)^k} if \spad{n} is square-free and has \spad{k} distinct prime divisors.
569526`\spad{moment2booleanCumulant(mm)} computes the sequence of boolean cumulants from the sequence of moments \spad{mm}
569607`\spad{moment2cumulant(mm)} computes the sequence of classical cumulants from the sequence of moments \spad{mm}
569681`\spad{moment2freeCumulant(mm)} computes the sequence of free cumulants from the sequence of moments \spad{mm}
569759`\spad{moment2jacobi(mm)} computes the Jacobi parameters as pair of streams.
569865`\spad{moment2jacobi2(mm)} computes the Jacobi parameters as stream of pairs \$(an,{} \spad{bn})\$.
569964`\spad{moment2monotoneCumulant(x)} returns the sequence of monotone cumulants of the moment sequence \spad{x}
570079`\spad{moment2monotoneCumulant(x)} returns the sequence of monotone cumulants of the moment sequence \spad{x}
570161`\spad{moment(x,{} n)} returns the \spad{n}-th moment of the distribution \spad{x}
570233`\spad{moment2nthJacobi(mm)} computes the list of Jacobi parameters from the list of moments \spad{mm} as far as possible.
570334`\spad{moment2Stransform(x)} returns the Puiseux and Laurent order and coefficients of the \spad{S} transform of \spad{x}
570508`\spad{moments(x)} returns the sequence of moments of the distribution \spad{x}
570639`\spad{monic?(p)} tests if \spad{p} is monic (\spadignore{i.e.} leading coefficient equal to 1).
570711`\spad{monic?(p)} returns \spad{false} if \spad{p} belongs to \spad{R},{} otherwise returns \spad{true} iff \spad{p} is monic as a univariate polynomial in its main variable.
570781`\spad{monicCompleteDecompose(f)} returns a list of factors of \spad{f} for the functional decomposition ([ \spad{f1},{} ...,{} \spad{fn} ] means \spad{f} = \spad{f1} \spad{o} ... \spad{o} \spad{fn}).
570880`\spad{monicDecomposeIfCan(f)} returns a functional decomposition of the monic polynomial \spad{f} of "failed" if it has not found any.
571008`\spad{monicDivide(p,{} q)} divide the polynomial \spad{p} by the monic polynomial \spad{q},{} returning the pair \spad{[quotient,{} remainder]}. Error: if \spad{q} isn\spad{'t} monic.
571219`\spad{monicDivide(a,{} b,{} v)} divides the polynomial a by the polynomial \spad{b},{} with each viewed as a univariate polynomial in \spad{v} returning both the quotient and remainder. Error: if \spad{b} is not monic with respect to \spad{v}.
571336`\spad{monicLeftDivide(a,{} b)} returns the pair \spad{[q,{} r]} such that \spad{a = b*q + r} and the degree of \spad{r} is less than the degree of \spad{b}. \spad{b} must be monic. This process is called ``left division\spad{''}.
571465`\spad{monicLeftDivide(a,{} b,{} sigma)} returns the pair \spad{[q,{} r]} such that \spad{a = b*q + r} and the degree of \spad{r} is less than the degree of \spad{b}. \spad{b} must be monic. This process is called ``left division\spad{''}. \spad{\sigma} is the morphism to use.
571611`\spad{monicModulo(a,{} b)} returns \spad{r} such that \spad{r} is reduced \spad{w}.\spad{r}.\spad{t}. \spad{b} and \spad{b} divides \spad{a -r} where \spad{b} is monic.
571750`\spad{monicModulo(a,{} b)} computes \spad{a mod b},{} if \spad{b} is monic as univariate polynomial in its main variable.
571823`\spad{monicRightDivide(a,{} b)} returns the pair \spad{[q,{} r]} such that \spad{a = q*b + r} and the degree of \spad{r} is less than the degree of \spad{b}. \spad{b} must be monic. This process is called ``right division\spad{''}.
571953`\spad{monicRightDivide(a,{} b,{} sigma)} returns the pair \spad{[q,{} r]} such that \spad{a = q*b + r} and the degree of \spad{r} is less than the degree of \spad{b}. \spad{b} must be monic. This process is called ``right division\spad{''}. \spad{\sigma} is the morphism to use.
572100`\spad{monicRightFactorIfCan(f,{} d)} returns a candidate to be the monic right factor (\spad{h} in \spad{f} = \spad{g} \spad{o} \spad{h}) of degree \spad{d} of a functional decomposition of the polynomial \spad{f} or \spad{"failed"} if no such candidate.
572227`\spad{monologextint(lup,{} csolve,{} rec)} is a helper for logextint
572500`\spad{monom(deg,{} coef)} is a monomial of degree \spad{deg} with coefficient coef.
572575`\spad{monom(w,{} r)} returns the product of the word \spad{w} by the coefficient \spad{r}.
572637`\spad{monomial?(f)} tests if \spad{f} is a single monomial.
572714`\spad{monomial?(x)} \undocumented
572834`\spad{monomial?(p)} tests if \spad{p} is a single monomial.
572895`\spad{monomial?(x)} returns \spad{true} if \spad{x} is a single monomial,{} that is support of \spad{x} consists of a single element.
572967`\spad{monomial?(f)} tests if \spad{f} is a single monomial.
573029`\spad{monomial?(x)} returns \spad{true} if \spad{x} is a monomial
573235`\spad{monomial(r,{} e)} makes a term from a coefficient \spad{r} and an exponent \spad{e}.
573319`\spad{monomial(x,{} n)} \undocumented
573382`\spad{monomial(r,{} x)} \undocumented
573556`\spad{monomial(a,{} s)} constructs a direct product element with the \spad{s} component set to \spad{a}
573623`\spad{monomial(c,{} [i1,{} i2,{} ...,{} iN])} produces the value given by \spad{c*e(i1)*e(i2)*...*e(iN)}.
573702`\spad{monomial(r,{} e)} makes a term from a coefficient \spad{r} and an exponent \spad{e}.
573758`\spad{monomial(r,{} m)} creates a scalar multiple of the basis element \spad{m}.
573815`\spad{monomial(c,{} k)} produces \spad{c} times the \spad{k}-th power of the generating operator,{} \spad{monomial(1,{} 1)}.
573901`\spad{monomial(a,{} [v1..vn],{} [e1..en])} returns \spad{a*prod(vi^ei)}.
574011`\spad{monomial(a,{} x,{} n)} creates the monomial \spad{a*x^n} where \spad{a} is a polynomial,{} \spad{x} is a variable and \spad{n} is a nonnegative integer.
574731`\spad{monomial(a,{} [x1,{} ..,{} xk],{} [n1,{} ..,{} nk])} computes \spad{a * x1^n1 * .. * xk^nk}.
574821`\spad{monomial(a,{} [x1,{} x2,{} ...,{} xk],{} [n1,{} n2,{} ...,{} nk])} returns \spad{a * x1^n1 * ... * xk^nk}.
574931`\spad{monomial(a,{} x,{} n)} computes \spad{a*x^n}.
575009`\spad{monomial(a,{} x,{} n)} returns \spad{a*x^n}.
575107`\spad{monomialIntegrate(f,{} ')} returns \spad{[ir,{} s,{} p]} such that \spad{f = ir' + s + p} and all the squarefree factors of the denominator of \spad{s} are special \spad{w}.\spad{r}.\spad{t} the derivation '.
575273`\spad{monomialIntPoly(p,{} ')} returns [\spad{q},{} \spad{r}] such that \spad{p = q' + r} and \spad{degree(r) < degree(t')}. Error if \spad{degree(t') < 2}.
575380`\spad{monomials(p)} returns the list of non-zero monomials of polynomial \spad{p},{} \spadignore{i.e.} \spad{monomials(sum(a_(i) X^(i))) = [a_(1) X^(1),{} ...,{} a_(n) X^(n)]}.
575534`\spad{monomials(x)} returns the list of \spad{r_i*b_i} whose sum is \spad{x}.
575597`\spad{monomials(f)} gives the list of all monomials whose sum is \spad{f}.
575660`\spad{monomRDEsys(f,{} g1,{} g2,{} D)} returns \spad{[A,{} B,{} H,{} C1,{} C2,{} T]} such that \spad{(y1',{} y2') + ((0,{} -f),{} (f,{} 0)) (y1,{} y2) = (g1,{} g2)} has a solution if and only if \spad{y1 = Q1 / T,{} y2 = Q2 / T},{} where \spad{B,{} C1,{} C2,{} Q1,{} Q2} have no normal poles and satisfy A \spa
575660`--d{(Q1',{} Q2') + ((H,{} -B),{} (B,{} H)) (Q1,{} Q2) = (C1,{} C2)} \spad{D} is the derivation to use.
575857`\spad{monotoneConvolution(x,{} y)} returns the monotone convolution of the distributions \spad{x} and \spad{y}
575927`\spad{monotoneCumulant2moment(hh)} computes the sequence of moments from the sequence of monotone cumulants \spad{hh}
576009`\spad{monotoneCumulant2momentPoly(hh)} computes the sequence of moment polynomials \$\spad{m_n}(\spad{t})\$ from the sequence of monotone cumulants \spad{hh}
576123`\spad{monotoneCumulants(x)} returns the sequence of monotone cumulants of the distribution \spad{x}.
576530`\spad{more?(a,{} b)} compares \spad{a} and \spad{b} in the partial ordering induced by setOrder,{} and uses the ordering on \spad{S} if \spad{a} and \spad{b} are not comparable in the partial ordering.
576612`\spad{more?(u,{} n)} tests if \spad{u} has greater than \spad{n} elements.
576675`\spad{moreAlgebraic?(ts,{} us)} returns \spad{false} iff \spad{ts} and \spad{us} are both empty,{} or \spad{ts} has less elements than \spad{us},{} or some variable is algebraic \spad{w}.\spad{r}.\spad{t}. \spad{us} and is not \spad{w}.\spad{r}.\spad{t}. \spad{ts}.
576755`\spad{moreAlgebraic?(ts,{} us)} returns \spad{false} iff \spad{ts} and \spad{us} are both empty,{} or \spad{ts} has less elements than \spad{us},{} or some variable is algebraic \spad{w}.\spad{r}.\spad{t}. \spad{us} and is not \spad{w}.\spad{r}.\spad{t}. \spad{ts}.
576845`\spad{morphism(f)} returns the morphism given by \spad{f^n(x) = f(x,{} n)}.
576905`\spad{morphism(f)} returns the non-invertible morphism given by \spad{f}.
576957`\spad{morphism(f,{} g)} returns the invertible morphism given by \spad{f},{} where \spad{g} is the inverse of \spad{f}..
577016`\spad{motzkinPathArray([a0,{} a1,{} ...],{} [b0,{} b1,{} ...],{} [c1,{} c2,{} ...])} computes Flajolet\spad{'s} Motzkin path array from the sequences \spad{ai},{} \spad{bi},{} \spad{ci}.
577116`\spad{move(v,{} x,{} y)} displays the two-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{TwoDimensionalViewport},{} with the upper left-hand corner of the viewport window at the screen coordinate position \spad{x},{} \spad{y}.
577207`\spad{move(v,{} x,{} y)} displays the three-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{ThreeDimensionalViewport},{} with the upper left-hand corner of the viewport window at the screen coordinate position \spad{x},{} \spad{y}.
577300`\spad{movedPoints(gp)} returns the points moved by the group {\em gp}.
577359`\spad{movedPoints(p)} returns the set of points moved by the permutation \spad{p}.
577413`\spad{mpsode(r,{} f)} solves the system of differential equations \spad{dy[i]/dx =f[i] [x,{} y[1],{} y[2],{} ...,{} y[n]]},{} \spad{y[i](a) = r[i]} for \spad{i} in 1..\spad{n}.
577523`\spad{MPtoMPT(p,{} s,{} ls,{} m)} converts \spad{p} to packed represntation.
577635`\spad{mr(t)} is an auxiliary function which finds the position of the maximum element of a tableau \spad{t} which is in the lowest row,{} producing a record of results
577776`Compare kernels
578083`normalize and compute limit.
578209`Compute limit(\spad{f}(\spad{x}),{} x=a) for a finite or infinite limit point a
578523`Compute limit(\spad{f}(\spad{x}),{} x=a) for a strictly finite limit point a This function computes one-sided limits from the left or right
578678`Compute limit.
578943`\spad{mrv_normalize(f,{} x)} transform \spad{f} to the form acceptable by core variant of mrv_limit.
579177`\spad{mrv_rewrite0}
579343`rewrite
579690`Compute \spad{MRV} set
580216`Polynomial multiplication.
580305`\spad{mul_by_binomial(v,{} pt,{} p)} treats \spad{v} a polynomial and multiplies in place this polynomial by binomial (\spad{x} + \spad{pt}). Highest coefficient of product is ignored.
580399`\spad{mul_by_binomial(v,{} deg,{} pt,{} p)} treats \spad{v} as coefficients of polynomial of degree \spad{deg} and multiplies in place this polynomial by binomial (\spad{x} + \spad{pt}). Highest coefficient of product is ignored.
580501`\spad{mul_by_scalar(v,{} deg,{} c,{} p)} treats \spad{v} as coefficients of polynomial of degree \spad{deg} and multiplies in place this polynomial by scalar \spad{c}
580601`\spad{mulmod(a,{} b,{} p)},{} \spad{0<=a,{} b<p>1},{} means \spad{a*b mod p}.
580738`\spad{multiEuclidean([f1,{} ...,{} fn],{} z)} returns a list of coefficients \spad{[a1,{} ...,{} an]} such that \spad{ z / prod \spad{fi} = sum aj/fj}. If no such list of coefficients exists,{} "failed" is returned.
580823`\spad{multiEuclideanTree(l,{} r)} \undocumented{}
580891`construct graph from a list of permutations.
580973`constructor for graph with given objects more objects and arrows can be added later if required.
581169`constructor for graph with given list of object names. Use this version of the constructor if you don\spad{'t} intend to create diagrams and therefore don\spad{'t} care about \spad{x},{} \spad{y} coordinates. more objects and arrows can be added later if required.
581238`constructor for graph with given objects and arrows more objects and arrows can be added later if required.
581533`constructor for graph with given objects and adjacency matrix.
581633`\spad{multiIndex(jv)} returns the multi-index of the jet variable \spad{jv}.
581707`\spad{multinomial(n,{} [m1,{} m2,{} ...,{} mk])} returns the multinomial coefficient \spad{n!/(m1! m2! ... mk!)}.
581780`\spad{multiple?(p)} tests if \spad{p} is a single matching variable allowing list matching or multiple term matching in a sum or product.
581829`\spad{multiple(x)} tells the pattern matcher that \spad{x} should preferably match a multi-term quantity in a sum or product. For matching on lists,{} multiple(\spad{x}) tells the pattern matcher that \spad{x} should match a list instead of an element of a list. Error: if \spad{x} is not a symbol.
581888`\spad{multiple(x)} tells the pattern matcher that \spad{x} should preferably match a multi-term quantity in a sum or product. For matching on lists,{} multiple(\spad{x}) tells the pattern matcher that \spad{x} should match a list instead of an element of a list.
581964`\spad{multiplicative?(a,{} n)} returns \spad{true} if the first \spad{n} coefficients of a are multiplicative
582044`\spad{multiplyCoefficients(fn,{} f)} returns the series \spad{sum(fn(n) * an * x^n,{} n = n0..)},{} where \spad{f} is the series \spad{sum(an * x^n,{} n = n0..)}.
582143`\spad{multiplyCoefficients(f,{} sum(n = n0..infinity,{} a[n] * x^n)) = sum(n = 0..infinity,{} f(n) * a[n] * x^n)}. This function is used when Puiseux series are represented by a Laurent series and an exponent.
582241`\spad{multiplyCoefficients(f,{} sum(n = 0..infinity,{} a[n] * x^n))} returns \spad{sum(n = 0..infinity,{} f(n) * a[n] * x^n)}. This function is used when Laurent series are represented by a Taylor series and an order.
582338`\spad{multiplyExponents(f,{} r)} multiplies all exponents of the power series \spad{f} by the positive rational number \spad{r}.
582435`\spad{multiplyExponents(p,{} n)} returns a new polynomial resulting from multiplying all exponents of the polynomial \spad{p} by the non negative integer \spad{n}.
582527`\spad{multiplyExponents(f,{} n)} multiplies all exponents of the power series \spad{f} by the positive integer \spad{n}.
582704`\spad{multisect(a,{} b,{} f(x))} selects the coefficients of \indented{1}{\spad{x^((a+b)*n+a)},{} and changes this monomial to \spad{x^n}.}
582790`\spad{multisect(a,{} b,{} st)} selects the coefficients of \spad{x^((a+b)*n+a)},{} and changes them to \spad{x^n}.
582885`\spad{multiset()}\$\spad{D} creates an empty multiset of domain \spad{D}.
582927`\spad{multiset(ls)} creates a multiset with elements from \spad{ls}.
582976`\spad{multiset(s)} creates a multiset with singleton \spad{s}.
583019`\spad{multi_SPDE(a,{} b,{} lc,{} d,{} der)}
583532`\spad{multivariate(f,{} v)} applies both the numerator and denominator of \spad{f} to \spad{v}.
583653`\spad{multivariate(f,{} v)} applies both the numerator and denominator of \spad{f} to \spad{v}.
583796`\spad{multivariate(sup,{} v)} converts an anonymous univariable polynomial \spad{sup} to a polynomial in the variable \spad{v}.
583898`\spad{multivariate(sup,{} v)} converts an anonymous univariable polynomial \spad{sup} to a polynomial in the variable \spad{v}.
583999`\spad{multivariate(u,{} k,{} f)} \undocumented
584139`to allow entries like: 1+2*e1+3*e2+4*e1e2 = multivector[1,{} 2,{} 3,{} 4]
584205`\spad{multMonom(r,{} e,{} x)} \undocumented
584282`\spad{musserTrials()} returns the number of primes that are tried in \spadfun{modularFactor}.
584355`\spad{musserTrials(n)} sets to \spad{n} the number of primes to be tried in \spadfun{modularFactor} and returns the previous value.
584557`\spad{mvar(ps)} returns the main variable of the non constant polynomial with the greatest main variable,{} if any,{} else an error is returned.
584625`\spad{mvar(p)} returns an error if \spad{p} belongs to \spad{R},{} otherwise returns its main variable \spad{w}. \spad{r}. \spad{t}. to the total ordering on the elements in \spad{V}.
584687`\spad{myDegree should} be local
584829`main solver routine
585539`\spad{naiveBeckermannLabahn(f,{} degs,{} sigma,{} p)} solves modulo \$\spad{p}\$ Hermite-Pade interpolation problem of order \$\spad{sigma}\$. \$\spad{degs}\$ specifies degree bounds for solution. The first element of result contains \spad{sigma}-basis. The second gives defects of elements of \spad{sigma}-basis. The third one contains resid
585539`--uals \spad{
585539`--} we stop updating solution if this would violate degree bounds,{} so residual is zero for elements of \spad{sigma}-basis which are within bounds,{} but non-zero otherwise.
585704`\spad{naiveBeckermannLabahn(f,{} degs,{} sigma,{} p)} solves modulo \$\spad{p}\$ Hermite-Pade interpolation problem of order \$\spad{sigma}\$. \$\spad{degs}\$ specifies degree bounds for solution. The first element of result contains \spad{sigma}-basis. The second gives defects of elements of \spad{sigma}-basis. The third one contains residuals \spad{
585704`--} we stop upd
585704`--ating solution if this would violate degree bounds,{} so residual is zero for elements of \spad{sigma}-basis which are within bounds,{} but non-zero otherwise.
585843`naiveBeckermannLabahn(\spad{f},{} degs,{} sigma,{} \spad{p}) solves modulo \$\spad{p}\$ multipoint Hermite-Pade interpolation problem of order \$sigma\$. \$degs\$ specifies degree bounds for solution. The first element of result contains sigma-basis. The second gives defects of elements of sigma-basis. The third one contains residuals \spa
585843`--d{
585843`--} we stop updating solution if this would violate degree bounds,{} so residual is zero for elements of sigma-basis which are within bounds,{} but non-zero otherwise.
586009`naiveBeckermannLabahn(\spad{f},{} degs,{} sigma,{} \spad{p}) solves modulo \$\spad{p}\$ multipoint Hermite-Pade interpolation problem of order \$sigma\$. \$degs\$ specifies degree bounds for solution. The first element of result contains sigma-basis. The second gives defects of elements of sigma-basis. The third one contains residuals \spad{
586009`--} we stop updating sol
586009`--ution if this would violate degree bounds,{} so residual is zero for elements of sigma-basis which are within bounds,{} but non-zero otherwise.
586149`\spad{name(jv)} yields the name of the jet variable \spad{jv}.
586199`\spad{name(x)} returns the symbol
586249`\spad{name(op(a1,{} ...,{} an))} returns the name of op.
586291`\spad{name(x)} returns the symbol
586337`\spad{name(s)} returns \spad{s} without its scripts.
586372`\spad{name(f)} returns the external name of the file \spad{f}.
586423`\spad{name(f)} returns the name part of the file name.
586472`\spad{name(op)} returns the name of \spad{op}.
586518`\spad{namedBranch(chin,{} nmin)} constructs a branch in the tree structure
586593`\spad{namedPoints(ptin,{} nmin)} constructs a list of named points.
586668`\spad{namedPoints(scin,{} nmin)} constructs a list of named nodes.
586790`\spad{nand(a,{} b)} returns the logical {\em nand} of bit aggregates \spad{a} and \spad{b}.
586834`\spad{nand(a,{} b)} returns the logical negation of \spad{a} and \spad{b}.
586873`\spad{nary?(op)} tests if \spad{op} has arbitrary arity.
586921`\spad{ncDetSys(sys)} computes the determining system for generators of conditional symmetries of \spad{sys}. It makes the same assumptions as \spad{detSys}.
587062`\spad{ncDetSys(sys,{} vf)} computes the determining system for generators of conditional symmetries of \spad{sys} with a given ansatz for the vector fields.
587224`\spad{ncDetSys(sys,{} sjb,{} vf)} computes the determining system for generators of conditional symmetries of \spad{sys}. The meaning of the further arguments is the same as in \spad{detSys}.
587396`\spad{ncols(A)} returns the number of columns of the matrix \spad{A}.
587549`\spad{ncols(m)} returns the number of columns in the matrix \spad{m}.
587635`\spad{ncols(m)} returns the number of columns in the array \spad{m}
587767`\spad{negative?(u)} returns \spad{true} if every element of \spad{u} is negative,{} \spad{false} otherwise.
587825`\spad{negative?(x)} tests whether \spad{x} is strictly less than 0.
587969`\spad{negative?(pol,{} aRoot)} answers if \spad{pol} interpreted as \spad{aRoot} is negative
588066`\spad{new()} return a new HashState.
588101`\spad{new()} returns a new empty match result.
588156`\spad{new()} returns a new empty match result.
588205`\spad{new()} \undocumented
588256`\spad{new()} \undocumented
588295`\spad{new()} create a new,{} empty object. Use \spadfun{setPrologue!},{} \spadfun{setFormula!} and \spadfun{setEpilogue!} to set the various components of this object.
588340`\spad{new()} returns a new symbol whose name starts with \%.
588372`\spad{new()} create a new,{} empty object. Use \spadfun{setPrologue!},{} \spadfun{setTex!} and \spadfun{setEpilogue!} to set the various components of this object.
588407`\spad{new(s)} returns a new symbol whose name starts with \%\spad{s}.
588441`\spad{new(inds,{} nrows)} generates a new matrix with \spad{nrows} rows and columns enumerated by the indices \spad{inds}. The matrix is empty,{} \spadignore{i.e.} the zero matrix.
588565`\spad{new(n,{} x)} returns a new aggregate of size \spad{n} all of whose entries are \spad{x}.
588629`\spad{new(m,{} n,{} r)} is an \spad{m}-by-\spad{n} array all of whose entries are \spad{r}
588732`\spad{new(d,{} pref,{} e)} constructs the name of a new writable file with \spad{d} as its directory,{} \spad{pref} as a prefix of its name and \spad{e} as its extension. When \spad{d} or \spad{t} is the empty string,{} a default is used. An error occurs if a new file cannot be written in the given directory.
588794`\spad{newFortranTempVar()} creates new name for temporary variable and puts it in TheSymbolTable
588854`\spad{newline()} provides the newline character.
588893`\spad{newLine()} sends a new line command to output.
588941`\spad{newReduc(n)} empties reduction state. \spad{n} is size of random integers to use during next reduction.
589005`\spad{newSubProgram(f)} asserts that from now on type declarations are part of subprogram \spad{f}.
589063`\spad{newton}(\spad{l}) returns the interpolating polynomial for the values \spad{l},{} where the \spad{x}-coordinates are assumed to be [1,{} 2,{} 3,{} ...,{} \spad{n}] and the coefficients of the interpolating polynomial are known to be in the domain \spad{F}. \spad{I}.\spad{e}.,{} it is a very streamlined version for a special case of interpolation.
589148`\spad{newTypeLists(x)} \undocumented
589205`\spad{next(l)} returns the doubly-linked aggregate beginning with its next element. Error: if \spad{l} has no next element. Note: \spad{next(l) = rest(l)} and \spad{previous(next(l)) = l}.
589258`\spad{nextColeman(alpha,{} beta,{} C)} generates the next Coleman matrix of column sums {\em alpha} and row sums {\em beta} according to the lexicographical order from bottom-to-top. The first Coleman matrix is achieved by {\em C=new(1,{} 1,{} 0)}. Also,{} {\em new(1,{} 1,{} 0)} indicates that \spad{C} is the last Coleman matrix.
589383`\spad{nextIrreduciblePoly(f)} yields the next monic irreducible polynomial over a finite field {\em GF} of the same degree as \spad{f} in the following order,{} or "failed" if there are no greater ones. Error: if \spad{f} has degree 0. Note: the input polynomial \spad{f} is made monic. Also,{} \spad{f < g} if the number of monomials of \spad{f} is less than
589383`-- this number for \spad{g}. If \spad{f} and \spad{g} have the same number of monomials,{} the lists of exponents are compared lexicographically. If these lists are also equal,{} the lists of coefficients are compared according to the lexicographic ordering induced by the ordering of the elements of {\em GF} given by {\em lookup}.
589806`\spad{nextItem(x)} returns the next item,{} or "failed" if domain is exhausted.
589866`\spad{nextLatticePermutation(lambda,{} lattP,{} constructNotFirst)} generates the lattice permutation according to the proper partition {\em lambda} succeeding the lattice permutation {\em lattP} in lexicographical order as long as {\em constructNotFirst} is \spad{true}. If {\em constructNotFirst} is \spad{false},{} the first lattice permutation is returned. The result {\em nil}
589866`-- indicates that {\em lattP} has no successor.
589992`\spad{nextNormalPoly(f)} yields the next normal polynomial over a finite field {\em GF} of the same degree as \spad{f} in the following order,{} or "failed" if there are no greater ones. Error: if \spad{f} has degree 0. Note: the input polynomial \spad{f} is made monic. Also,{} \spad{f < g} if the {\em lookup} of the coefficient of the term of degree {\em n-1} o
589992`--f \spad{f} is less than that for \spad{g}. In case these numbers are equal,{} \spad{f < g} if if the number of monomials of \spad{f} is less that for \spad{g} or if the list of exponents of \spad{f} are lexicographically less than the corresponding list for \spad{g}. If these lists are also equal,{} the lists of coefficients are compared according to the lexicographic ordering induced by the ordering of the elements of {\em GF} given by {\em lookup}.
590135`\spad{nextNormalPrimitivePoly(f)} yields the next normal primitive polynomial over a finite field {\em GF} of the same degree as \spad{f} in the following order,{} or "failed" if there are no greater ones. Error: if \spad{f} has degree 0. Note: the input polynomial \spad{f} is made monic. Also,{} \spad{f < g} if the {\em lookup} of the constant term of 
590135`--\spad{f} is less than this number for \spad{g} or if {\em lookup} of the coefficient of the term of degree {\em n-1} of \spad{f} is less than this number for \spad{g}. Otherwise,{} \spad{f < g} if the number of monomials of \spad{f} is less than that for \spad{g} or if the lists of exponents for \spad{f} are lexicographically less than those for \spad{g}. If these lists are also equal,{} the lists of coefficients are compared according to the lexicographic ordering induced by the ordering of t
590135`--he elements of {\em GF} given by {\em lookup}. This operation is equivalent to nextPrimitiveNormalPoly(\spad{f}).
590287`\spad{nextPartition(gamma,{} part,{} number)} generates the partition of {\em number} which follows {\em part} according to the right-to-left lexicographical order. The partition has the property that its components do not exceed the corresponding components of {\em gamma}. the first partition is achieved by {\em part=[]}. Also,{} {\em []} indicates that {\em part} is the last partit
590287`--ion.
590408`\spad{nextPartition(gamma,{} part,{} number)} generates the partition of {\em number} which follows {\em part} according to the right-to-left lexicographical order. The partition has the property that its components do not exceed the corresponding components of {\em gamma}. The first partition is achieved by {\em part=[]}. Also,{} {\em []} indicates that {\em part} is the last part
590408`--ition.
590531`\spad{nextPrime(n)} returns the smallest prime strictly larger than \spad{n}
590586`\spad{nextPrimitiveNormalPoly(f)} yields the next primitive normal polynomial over a finite field {\em GF} of the same degree as \spad{f} in the following order,{} or "failed" if there are no greater ones. Error: if \spad{f} has degree 0. Note: the input polynomial \spad{f} is made monic. Also,{} \spad{f < g} if the {\em lookup} of the constant term of 
590586`--\spad{f} is less than this number for \spad{g} or,{} in case these numbers are equal,{} if the {\em lookup} of the coefficient of the term of degree {\em n-1} of \spad{f} is less than this number for \spad{g}. If these numbers are equals,{} \spad{f < g} if the number of monomials of \spad{f} is less than that for \spad{g},{} or if the lists of exponents for \spad{f} are lexicographically less than those for \spad{g}. If these lists are also equal,{} the lists of coefficients are coefficients a
590586`--ccording to the lexicographic ordering induced by the ordering of the elements of {\em GF} given by {\em lookup}. This operation is equivalent to nextNormalPrimitivePoly(\spad{f}).
590738`\spad{nextPrimitivePoly(f)} yields the next primitive polynomial over a finite field {\em GF} of the same degree as \spad{f} in the following order,{} or "failed" if there are no greater ones. Error: if \spad{f} has degree 0. Note: the input polynomial \spad{f} is made monic. Also,{} \spad{f < g} if the {\em lookup} of the constant term of \spad{f} is less th
590738`--an this number for \spad{g}. If these values are equal,{} then \spad{f < g} if if the number of monomials of \spad{f} is less than that for \spad{g} or if the lists of exponents of \spad{f} are lexicographically less than the corresponding list for \spad{g}. If these lists are also equal,{} the lists of coefficients are compared according to the lexicographic ordering induced by the ordering of the elements of {\em GF} given by {\em lookup}.
590884`\spad{next_sousResultant2(P,{} Q,{} Z,{} s)} returns the subresultant \spad{S_{e-1}} where \spad{P ~ S_d,{} Q = S_{d-1},{} Z = S_e,{} s = lc(S_d)}
590975`\spad{nextSublist(n,{} k)} returns a list of \spad{k}-subsets of {1,{} ...,{} \spad{n}}.
591082`\spad{next_subResultant2(p,{} q,{} z,{} s)} is the multivariate version of the operation \spadopFrom{\spad{next_sousResultant2}}{PseudoRemainderSequence} from the \spadtype{PseudoRemainderSequence} constructor.
591189`\spad{nextSubsetGray(ww,{} n)} returns a vector {\em vv} whose components have the following meanings: \begin{items} \item {\em vv.1}: a vector of length \spad{n} whose entries are 0 or 1. This \indented{3}{can be interpreted as a code for a subset of the set 1,{} ...,{} \spad{n};} \indented{3}{{\em vv.1} differs from {\em ww.1} by exactly one entry;} \item {\em vv.2.1} is the number of the entry of
591189`-- {\em vv.1} which \indented{3}{will be changed next time;} \item {\em vv.2.1 = n+1} means that {\em vv.1} is the last subset; \indented{3}{trying to compute nextSubsetGray(\spad{vv}) if {\em vv.2.1 = n+1}} \indented{3}{will produce an error!} \end{items} The other components of {\em vv.2} are needed to compute nextSubsetGray efficiently. Note: this is an implementation of [Williamson,{} Topic II,{} 3.54,{} \spad{p}. 112] for the special case {\em r1 = r2 = ... = rn = 2}; Note: nextSubsetGray p
591189`--roduces a side-effect,{} \spadignore{i.e.} {\em nextSubsetGray(vv)} and {\em vv := nextSubsetGray(vv)} will have the same effect.
591294`\spad{nil()} returns the empty list.
591327`\spad{nilFactor(base,{} exponent)} creates a factored object with a single factor with no information about the kind of \spad{base} (flag = "nil").
591379`\spad{nlde(u)} solves a first order non-linear differential equation described by \spad{u} of the form \spad{[[b<0,{} 0>,{} b<0,{} 1>,{} ...],{} [b<1,{} 0>,{} b<1,{} 1>,{} .],{} ...]}. the differential equation has the form \spad{y' = sum(i=0 to infinity,{} j=0 to infinity,{} b<i,{} j>*(x^i)*(y^j))}.
591671`\spad{node?(u,{} v)} tests if node \spad{u} is contained in node \spad{v} (either as a child,{} a child of a child,{} etc.).
591748`\spad{node(left,{} v,{} right)} creates a binary tree with value \spad{v},{} a binary tree \spad{left},{} and a binary tree \spad{right}.
591803`\spad{nodeFromArrow(s,{} a)} returns index of all nodes with a direct arrow leading in to arrow 'a' in graph \spad{'s'}
591986`\spad{nodeFromNode(s,{} a)} gives list of all nodes with a direct arrow leading in to node 'a' in graph \spad{'s'}
592167`\spad{nodeOf?(s,{} a)} returns \spad{true} iff some node of \spad{a} is equal to \spad{s}
592412`\spad{nodes(u)} returns a list of all of the nodes of aggregate \spad{u}.
592469`\spad{nodeToArrow(s,{} a)} returns index of all nodes with a direct arrow leading out of arrow 'a' in graph \spad{'s'}
592648`\spad{nodeToNode(s,{} a)} gives list of all nodes with a direct arrow leading out of node 'a' in graph \spad{'s'}
592825`\spad{noKaratsuba(a,{} b)} returns \spad{a*b} without using Karatsuba\spad{'s} trick at all.
592907`\spad{noLinearFactor?(p)} returns \spad{true} if \spad{p} can be shown to have no linear factor by a theorem of Lehmer,{} \spad{false} else. \spad{I} insist on the fact that \spad{false} does not mean that \spad{p} has a linear factor.
592970`\spad{noncommutativeJordanAlgebra?()} tests if the algebra is flexible and Jordan admissible.
593063`\spad{noncommutativeJordanAlgebra?()} tests if the algebra is flexible and Jordan admissible.
593153`\spad{nonQsign(r)} \undocumented
593221`\spad{nonSingularModel(u)} returns the equations in \spad{u1},{} ...,{} un of an affine non-singular model for the curve.
593318`\spad{nonSingularModel(u)} returns the equations in \spad{u1},{} ...,{} un of an affine non-singular model for the curve.
593463`\spad{nor(a,{} b)} returns the logical {\em nor} of bit aggregates \spad{a} and \spad{b}.
593506`\spad{nor(a,{} b)} returns the logical negation of \spad{a} or \spad{b}.
593544`\spad{norm(I)} returns the norm of the ideal \spad{I}.
593597`\spad{norm(f)} returns the norm of the module \spad{f}.
593933`\spad{norm(p)} determines sum of absolute values of coefficients Note: this function depends on \spadfunFrom{abs}{Complex}.
593992`\spad{norm x} returns the same as absolute value.
594037`\spad{norm(a)} computes the norm of \spad{a} with respect to the field considered as an algebra with 1 over the ground field \spad{F}.
594097`\spad{norm(x)} returns \spad{x} * conjugate(\spad{x})
594143`\spad{norm(a)} returns the determinant of the regular representation of \spad{a} with respect to any basis.
594194`\spad{norm(o)} returns the norm of an octonion,{} equal to the sum of the squares of its coefficients.
594241`\spad{norm(q)} computes the norm of \spad{q} (the sum of the squares of the components).
594290`\spad{norm q} returns the norm of \spad{q},{} \spadignore{i.e.} the product of all the conjugates of \spad{q}.
594360`\spad{norm(f,{} k)} computes the norm of the algebraic number \spad{f} with respect to the extension generated by kernel \spad{k}
594420`\spad{norm(f,{} l)} computes the norm of the algebraic number \spad{f} with respect to the extension generated by kernels \spad{l}
594486`\spad{norm(p,{} k)} computes the norm of the polynomial \spad{p} with respect to the extension generated by kernel \spad{k}
594602`\spad{norm(p,{} l)} computes the norm of the polynomial \spad{p} with respect to the extension generated by kernels \spad{l}
594797`\spad{norm(f,{} p)} returns the \spad{lp} norm of the polynomial \spad{f}.
594882`\spad{norm(x,{} n)} \undocumented{} See \spadfunFrom{norm}{FiniteAlgebraicExtensionField}
594977`\spad{norm(f,{} k)} computes the norm of the algebraic number \spad{f} with respect to the extension generated by kernel \spad{k}
595032`\spad{norm(f,{} l)} computes the norm of the algebraic number \spad{f} with respect to the extension generated by kernels \spad{l}
595093`\spad{norm(a,{} d)} computes the norm of \spad{a} with respect to the field of extension degree \spad{d} over the ground field of size. Error: if \spad{d} does not divide the extension degree of \spad{a}. Note: norm(a,{} \spad{d}) = reduce(*,{} [a^(\spad{q^}(d*i)) for \spad{i} in 0..\spad{n/d}])
595183`\spad{norm(p,{} k)} computes the norm of the polynomial \spad{p} with respect to the extension generated by kernel \spad{k}
595294`\spad{norm(p,{} l)} computes the norm of the polynomial \spad{p} with respect to the extension generated by kernels \spad{l}
595411`\spad{normal01()} \undocumented
595535`\spad{normal?(f)} tests whether the polynomial \spad{f} over a finite field is normal,{} \spadignore{i.e.} its roots are linearly independent over the field.
595632`\spad{normal?(x)} \undocumented{} See \spadfunFrom{normal?}{FiniteAlgebraicExtensionField}
595711`\spad{normal?(a)} tests whether the element \spad{a} is normal over the ground field \spad{F},{} \spadignore{i.e.} \spad{a^(q^i),{} 0 <= i <= extensionDegree()-1} is an \spad{F}-basis,{} where \spad{q = size()\$F}. Implementation according to Lidl/Niederreiter: Theorem 2.39.
595793`\spad{normal(f,{} g)} \undocumented
595864`\spad{normalDenom(f,{} D)} returns the product of all the normal factors of \spad{denom(f)}. \spad{D} is the derivation to use.
595947`\spad{normalDeriv(poly,{} i)} computes the \spad{i}th derivative of \spad{poly} divided by i!.
596073`\spad{normalElement()} returns a element,{} normal over the ground field \spad{F},{} \spadignore{i.e.} \spad{a^(q^i),{} 0 <= i < extensionDegree()} is an \spad{F}-basis,{} where \spad{q = size()\$F}. At the first call,{} the element is computed by \spadfunFrom{createNormalElement}{FiniteAlgebraicExtensionField} then cached in a global variable. On subsequent calls,{} the element is retrieved by referencing the global varia
596073`--ble.
596154`\spad{normalElement(n)} \undocumented{} See \spadfunFrom{normalElement}{FiniteAlgebraicExtensionField}
596247`\spad{normalForm(poly,{} gb)} reduces the polynomial \spad{poly} modulo the precomputed groebner basis \spad{gb} giving a canonical representative of the residue class.
596349`\spad{normalForm(M,{} sig,{} der)} returns \spad{[R,{} A,{} A^{-1}]} such that the pseudo-linear operator whose matrix in the basis \spad{y} is \spad{M} had matrix \spad{R} in the basis \spad{z = A y}. \spad{der} is a \spad{sig}-derivation.
596483`\spad{normalise(v)} returns the column vector \spad{v} divided by its euclidean norm; when possible,{} the vector \spad{v} is expressed in terms of radicals.
596586`normalalised point has scalar value of one,{} if this is not the case then scale values
596638`\spad{normalize(x)} normalizes \spad{x} at current precision.
596677`\spad{normalize(f)} rewrites \spad{f} using the least possible number of real algebraically independent kernels.
596748`\spad{normalize(lf)} is normalize(\spad{lf},{} [])
596831`\spad{normalize(f,{} x)} is normalize([\spad{f}],{} [\spad{x}])
596909`\spad{normalize([f1,{} ...,{} fn],{} lx)} rewrites \spad{f1,{} ...,{} fn} using the least possible number of real algebraically independent kernels. Additionally,{} it tries to ensure that any expression in resulting kernels which syntactially depends on a variable \spad{x} from \spad{lx} has nonzero derivative with respect to \spad{x}.
597005`\spad{normalize(p,{} ts)} normalizes \spad{p} \spad{w}.\spad{r}.\spad{t} \spad{ts}.
597187`\spad{normalizeAtInfinity(v)} makes \spad{v} normal at infinity.
597347`\spad{normalized?(ts)} returns \spad{true} iff for every \spad{p} in \spad{ts} we have \spad{normalized?(p,{} us)} where \spad{us} is \spad{collectUnder(ts,{} mvar(p))}.
597642`\spad{normalized?(a,{} b)} returns \spad{true} iff \spad{a} and its iterated initials have degree zero \spad{w}.\spad{r}.\spad{t}. the main variable of \spad{b}
597720`\spad{normalized?(q,{} lp)} returns \spad{true} iff \spad{normalized?(q,{} p)} holds for every \spad{p} in \spad{lp}.
597804`\spad{normalized?(p,{} ts)} returns \spad{true} iff \spad{p} and all its iterated initials have degree zero \spad{w}.\spad{r}.\spad{t}. the main variables of the polynomials of \spad{ts}
597877`\spad{normalizedAssociate(p,{} ts)} returns a normalized polynomial \spad{n} \spad{w}.\spad{r}.\spad{t}. \spad{ts} such that \spad{n} and \spad{p} are associates \spad{w}.\spad{r}.\spad{t} \spad{ts} and assuming that \spad{p} is invertible \spad{w}.\spad{r}.\spad{t} \spad{ts}.
597954`\spad{normalizedDivide(n,{} d)} returns a normalized quotient and remainder such that consistently unique representatives for the residue class are chosen,{} \spadignore{e.g.} positive remainders
598055`\spad{normalizedDivide(n,{} d)} returns a normalized quotient and remainder such that consistently unique representatives for the residue class are chosen,{} \spadignore{e.g.} positive remainders
598188`\spad{normalizeIfCan(ts)} returns \spad{ts} in an normalized shape if \spad{ts} is zero-dimensional.
598265`\spad{normDeriv2 should} be local
598394`\spad{normFactors(x)} \undocumented
598478`\spad{normInvertible?(p,{} ts)} is an internal subroutine,{} exported only for developement.
598584`\spad{Not(n)} returns the bit-by-bit logical {\em Not} of \spad{n}.
598627`\spad{not f} creates the equivalent prefix form.
598665`\spad{NOT(x)} returns the \spadtype{Switch} expression representing \spad{\~~x}.
598736`\spad{NOT(x)} returns the \spadtype{Switch} expression representing \spad{\~~x}.
598856`\spad{not(b)} returns the logical {\em not} of bit aggregate \spad{b}.
598896`\spad{not n} returns the negation of \spad{n}.
598931`\spad{not(n)} returns the bit-by-bit logical {\em not} of the single integer \spad{n}.
598972`\spad{Not(n)} returns the bit-by-bit logical {\em not} of the single integer \spad{n}.
599013`\spad{notelem(ir)} returns the non-elementary part of an integration result
599097`\spad{npcoef(p,{} lmf,{} lcf)} tries to determine some coefficients of factors of \spad{p} assuming that \spad{lcf} gives \spad{true} leading coefficients of the factors and that sparsity pattern of modular factors \spad{lmf} is the same as sparsity pattern of \spad{true} facto
599097`--rs. If \spad{res} is the result,{} then \spad{res.deter} gives fully determined factors,{} \spad{res.dterm} gives determined terms of partially determinaed factors,{} \spad{res.nfacts} and \spad{res.nlead} give modular factors and leading coefficients corresponding to undetermined factors.
599326`\spad{nrows(A)} returns the number of rows of the matrix \spad{A}.
599479`\spad{nrows(m)} returns the number of rows in the matrix \spad{m}.
599565`\spad{nrows(m)} returns the number of rows in the array \spad{m}
599649`\spad{nsqfree should} be local
599854`\spad{nthCoef(x,{} n)} returns the coefficient of the n^th term of \spad{x}.
599923`\spad{nthExpon(l,{} n)} returns the exponent of the n^th monomial of \spad{l}.
599984`\spad{nthExpon(x,{} n)} returns the exponent of the n^th monomial of \spad{x}.
600042`\spad{nthExpon(x,{} n)} returns the exponent of the n^th monomial of \spad{x}.
600112`\spad{nthExponent(u,{} n)} returns the exponent of the \spad{n}th factor of \spadvar{\spad{u}}. If \spadvar{\spad{n}} is not a valid index for a factor (for example,{} less than 1 or too big),{} 0 is returned.
600172`\spad{nthFactor(x,{} n)} returns the factor of the n^th monomial of \spad{x}.
600225`\spad{nthFactor(x,{} n)} returns the factor of the n^th monomial of \spad{x}.
600279`\spad{nthFactor(l,{} n)} returns the factor of the n^th monomial of \spad{l}.
600341`\spad{nthFactor(u,{} n)} returns the base of the \spad{n}th factor of \spadvar{\spad{u}}. If \spadvar{\spad{n}} is not a valid index for a factor (for example,{} less than 1 or too big),{} 1 is returned. If \spadvar{\spad{u}} consists only of a unit,{} the unit is returned.
600393`\spad{nthFactor(x,{} n)} returns the factor of the n^th term of \spad{x}.
600464`\spad{nthFlag(u,{} n)} returns the information flag of the \spad{n}th factor of \spadvar{\spad{u}}. If \spadvar{\spad{n}} is not a valid index for a factor (for example,{} less than 1 or too big),{} "nil" is returned.
600548`\spad{nthFractionalTerm(p,{} n)} extracts the \spad{n}th fractional term from the partial fraction \spad{p}. This returns 0 if the index \spad{n} is out of range.
600616`\spad{nthr(p,{} n)} should be local but conditional
600746`\spad{nthRoot(f,{} n)} returns \spad{(p,{} r,{} [r1,{} ...,{} rm])} such that the \spad{n}th-root of \spad{f} is equal to \spad{r * \spad{p}th-root(r1 * ... * rm)},{} where \spad{r1},{} ...,{} \spad{rm} are distinct factors of \spad{f},{} each of which has an exponent smaller than \spad{p} in \spad{f}.
600987`\spad{nthRoot(x,{} n)} returns the \spad{n}th root of \spad{x}.
601042`\spad{nthRootIfCan(z,{} n)} returns the \spad{n}th root of \spad{z} if possible,{} and "failed" otherwise.
601145`\spad{Nul()} gives the basis element 1 for the algebra generated by \spad{n} generators.
601200`\spad{null?(s)} is \spad{true} if \spad{s} is the \spad{S}-expression ().
601271`\spad{null(u)} tests if list \spad{u} is the empty list.
601312`\spad{nullary?(op)} tests if \spad{op} is nullary.
601363`\spad{nullary A} changes its argument into a \indented{1}{nullary function.}
601415`\spad{nullBoundary()} constructs a null boundary,{} for example,{} when the boundary of a material node is requested.
601463`\spad{nullity(m)} returns the mullity of the matrix \spad{m}. This is the dimension of the null space of the matrix \spad{m}.
601556`\spad{nullity(m)} returns the nullity of the matrix \spad{m}. This is the dimension of the null space of the matrix \spad{m}.
601650`\spad{nullity(m)} returns the nullity of the matrix \spad{m}. This is the dimension of the null space of the matrix \spad{m}.
601759`\spad{nullity(m)} returns the mullity of the matrix \spad{m}. This is the dimension of the null space of the matrix \spad{m}.
601868`\spad{nullSpace M} builds a basis of the kernel of the linear transformation defined by the matrix \spad{M}. This function calls the function \spad{nullSpace} from the \spad{Matrix} domain. Only the signature changes.
601928`\spad{nullSpace(m)} returns a basis for the null space of the matrix \spad{m}.
602039`\spad{nullSpace(m)} returns a basis for the null space of the matrix \spad{m}.
602167`\spad{nullSpace(m)} returns a basis for the null space of the matrix \spad{m}.
602254`\spad{nullSpace(m)}+ returns a basis for the null space of the matrix \spad{m}.
602356`\spad{nullSpace(m)} returns a basis for the null space of the matrix \spad{m}.
602458`\spad{nullSpaceOverConstants(A,{} ld)} returns basis of the homogeneous system \spad{A*vc = 0} where \spad{vc} is a vector of constants.
602567`\spad{number?(f)} tests if \spad{f} is rational
602638`\spad{numberOfChildren(x)} \undocumented
602708`\spad{numberOfComponents()} returns the number of absolutely irreducible components.
602800`\spad{numberOfComponents()} returns the number of absolutely irreducible components.
602889`\spad{numberOfComponents(s)} returns the number of distinct object components in the indicated \spadtype{ThreeSpace},{} \spad{s},{} such as points,{} curves,{} polygons,{} and constructs.
602969`\spad{numberOfComposites(s)} returns the number of supercomponents,{} or composites,{} in the \spadtype{ThreeSpace},{} \spad{s}; Composites are arbitrary groupings of otherwise distinct and unrelated components; A \spadtype{ThreeSpace} need not have any composites defined at all and,{} outside of the requirement that no component can belong to more than one composite at a time,{} the definition and interpretation of composi
602969`--tes are unrestricted.
603049`\spad{numberOfComputedEntries(st)} returns the number of explicitly computed entries of stream \spad{st} which exist immediately prior to the time this function is called.
603135`\spad{numberOfCycles(p)} returns the number of non-trivial cycles of the permutation \spad{p}.
603204`\spad{numberOfDivisors(n)} returns the number of integers between 1 and \spad{n} (inclusive) which divide \spad{n}. The number of divisors of \spad{n} is often denoted by \spad{tau(n)}.
603283`\spad{numberOfFactors(ddfactorization)} returns the number of factors of the polynomial \spad{f} modulo \spad{p} where \spad{ddfactorization} is the distinct degree factorization of \spad{f} computed by \spadfunFrom{ddFact}{ModularDistinctDegreeFactorizer} for some prime \spad{p}.
603400`\spad{numberOfFactors(u)} returns the number of factors in \spadvar{\spad{u}}.
603467`\spad{numberOfFractionalTerms(p)} computes the number of fractional terms in \spad{p}. This returns 0 if there is no fractional part.
603538`\spad{numberOfHues()} returns the number of total hues,{} set in totalHues.
603591`\spad{numberOfImproperPartitions(n,{} m)} computes the number of partitions of the nonnegative integer \spad{n} in \spad{m} nonnegative parts with regarding the order (improper partitions). Example: {\em numberOfImproperPartitions (3,{} 3)} is 10,{} since {\em [0,{} 0,{} 3],{} [0,{} 1,{} 2],{} [0,{} 2,{} 1],{} [0,{} 3,{} 0],{} [1,{} 0,{} 2],{} [1,{} 1,{} 1],{} [1,{} 2,{} 0],{} [2,{} 0,{} 1],{} [2,{} 
603591`--1,{} 0],{} [3,{} 0,{} 0]} are the possibilities. Note: this operation has a recursive implementation.
603695`\spad{numberOfIrreduciblePoly(n)}\$FFPOLY(\spad{GF}) yields the number of monic irreducible univariate polynomials of degree \spad{n} over the finite field {\em GF}.
603801`\spad{numberOfMonomials(p)} gives the number of non-zero monomials in polynomial \spad{p}.
603887`\spad{numberOfMonomials(x)} returns the number of monomials of \spad{x}.
603978`\spad{numberOfMonomials(f)} is the number of non-zero coefficients with respect to the canonical basis.
604059`\spad{numberOfNormalPoly(n)}\$FFPOLY(\spad{GF}) yields the number of normal polynomials of degree \spad{n} over the finite field {\em GF}.
604160`\spad{numberOfPrimitivePoly(n)}\$FFPOLY(\spad{GF}) yields the number of primitive polynomials of degree \spad{n} over the finite field {\em GF}.
604492`\spad{numDepVar} returns the number of dependent variables.
604695`\spad{numer x} returns the numerator of \spad{x}.
604741`\spad{numer x} returns the numerator of \spad{x}.
604783`\spad{numer(f)} returns the numerator of \spad{f} viewed as a polynomial in the kernels over \spad{Z}.
604879`\spad{numer(1/d * (f1,{} ...,{} fn))} = the vector \spad{[f1,{} ...,{} fn]}.
604941`\spad{numer(x)} returns the numerator of the fraction \spad{x}.
604994`\spad{numer(f)} returns the numerator of \spad{f} viewed as a polynomial in the kernels over \spad{Z}.
605085`\spad{numer(f)} returns the numerator of \spad{f} viewed as a polynomial in the kernels over \spad{R} if \spad{R} is an integral domain. If not,{} then numer(\spad{f}) = \spad{f} viewed as a polynomial in the kernels over \spad{R}.
605182`\spad{numerator(f)} yields the numerator of \spad{f}.
605345`\spad{numerator(f)} returns the numerator of \spad{f} converted to \%.
605406`\spad{numerator(x)} is the numerator of the fraction \spad{x} converted to \%.
605464`\spad{numerators(x)} returns the stream of numerators of the approximants of the continued fraction \spadvar{\spad{x}}. If the continued fraction is finite,{} then the stream will be finite.
605526`\spad{numeric(x)} returns a real approximation of \spad{x}.
605626`\spad{numeric(x)} returns a real approximation of \spad{x}.
605713`\spad{numeric(x)} returns a real approximation of \spad{x}.
605780`\spad{numeric(x)} returns a real approximation of \spad{x}.
605824`\spad{numeric(x,{} n)} returns a real approximation of \spad{x} up to \spad{n} decimal places.
605940`\spad{numeric(x,{} n)} returns a real approximation of \spad{x} up to \spad{n} decimal places.
606043`\spad{numeric(x,{} n)} returns a real approximation of \spad{x} up to \spad{n} decimal places.
606126`\spad{numeric(x,{} n)} returns a real approximation of \spad{x} up to \spad{n} decimal places.
606186`\spad{numericIfCan(x)} returns a real approximation of \spad{x},{} or "failed" if \spad{x} is not a constant.
606307`\spad{numericIfCan(x)} returns a real approximation of \spad{x},{} or "failed" if \spad{x} is not a constant.
606415`\spad{numericIfCan(x)} returns a real approximation of \spad{x},{} or "failed" if \spad{x} is not a constant.
606503`\spad{numericIfCan(x,{} n)} returns a real approximation of \spad{x} up to \spad{n} decimal places,{} or "failed" if \spad{x} is not a constant.
606640`\spad{numericIfCan(x,{} n)} returns a real approximation of \spad{x} up to \spad{n} decimal places,{} or "failed" if \spad{x} is not a constant.
606764`\spad{numericIfCan(x,{} n)} returns a real approximation of \spad{x} up to \spad{n} decimal places,{} or "failed" if \spad{x} is not a constant.
606868`\spad{numerJP(f)} writes \spad{f} as polynomial over \spad{JB}.
606973`\spad{numFunEvals()} returns the number of points computed
607016`\spad{numFunEvals3D()} returns the number of points computed.
607063`\spad{numIndVar} returns the number of independent variables.
607266`\spad{obj(a)} essentially returns the original object that was converted to \spadtype{Any} except that the type is forced to be \spadtype{None}.
607299`\spad{objectOf(a)} returns a printable form of the original object that was converted to \spadtype{Any}.
607343`\spad{objects(s)} returns the \spadtype{ThreeSpace},{} \spad{s},{} in the form of a 3D object record containing information on the number of points,{} curves,{} polygons and constructs comprising the \spadtype{ThreeSpace}..
607511`\spad{oblateSpheroidal(a)} transforms from oblate spheroidal coordinates to Cartesian coordinates: \spad{oblateSpheroidal(a)} is a function which will map the point \spad{(\spad{xi},{} eta,{} phi)} to \spad{x = a*sinh(\spad{xi})*sin(eta)*cos(phi)},{} \spad{y = a*sinh(\spad{xi})*sin(eta)*sin(phi)},{} \spad{z = a*cosh(\spad{xi})*cos(eta)}.
607589`\spad{octon(qe,{} qE)} constructs an octonion from two quaternions using the relation {\em O = Q + QE}.
607655`\spad{octon(re,{} \spad{ri},{} rj,{} rk,{} rE,{} rI,{} rJ,{} rK)} constructs an octonion from scalars.
607764`\spad{odd? x} is \spad{true} if \spad{x} is an odd integer.
607843`\spad{odd?(n)} returns \spad{true} if and only if \spad{n} is odd.
607896`\spad{odd?(p)} returns \spad{true} if and only if \spad{p} is an odd permutation \spadignore{i.e.} {\em sign(p)} is {\em -1}.
607944`\spad{oddInfiniteProduct(f(x))} computes \spad{product(n=1,{} 3,{} 5...,{} f(x^n))}. The series \spad{f(x)} should have constant coefficient 1.
608021`\spad{oddintegers(n)} returns \spad{[n,{} n+2,{} n+4,{} ...]}.
608169`\spad{oddlambert(f(x))} returns \spad{f(x) + f(x^3) + f(x^5) + ...}. \indented{1}{\spad{f(x)} should have a zero constant coefficient.} \indented{1}{This function is used for computing infinite products.} \indented{1}{If \spad{f(x)} is a Taylor series with constant term 1,{} then} \indented{1}{\spad{product(n=1..infinity,{} f(x^(2*n-1)))=exp(oddlambert(log(f(x))))}.}
608240`\spad{oddlambert(st)} computes \spad{f(x) + f(x^3) + f(x^5) + ...} if \spad{st} is a stream representing \spad{f(x)}. This function is used for computing infinite products. If \spad{f}(\spad{x}) is a power series with constant coefficient 1 then \spad{prod(f(x^(2*n-1)),{} n=1..infinity) = exp(oddlambert(log(f(x))))}.
608320`\spad{ode1(f,{} c)} is the solution to \spad{y' = f(y)} such that \spad{y(a) = c}.
608404`\spad{ode2(f,{} c0,{} c1)} is the solution to \spad{y'' = f(y,{} y')} such that \spad{y(a) = c0} and \spad{y'(a) = c1}.
608497`\spad{ode(f,{} cl)} is the solution to \spad{y<n>=f(y,{} y',{} ..,{} y<n-1>)} such that \spad{y<i>(a) = cl.(i+1)} for \spad{i} in 0..(\spad{n} - 1).
608592`\spad{OMbindTCP}
608663`\spad{OMclose(dev)} closes \spad{dev},{} flushing output if necessary.
608711`\spad{OMcloseConn}
608767`\spad{OMconnectTCP}
608848`\spad{OMconnInDevice : }
608917`\spad{OMconnOutDevice : }
608987`\spad{omega()} is the first infinite ordinal
609027`\spad{omegapower(p)} returns omega^p
609074`\spad{OMencodingBinary()} is the constant for the OpenMath binary encoding.
609129`\spad{OMencodingSGML()} is the constant for the deprecated OpenMath SGML encoding.
609182`\spad{OMencodingUnknown()} is the constant for unknown encoding types. If this is used on an input device,{} the encoding will be autodetected. It is invalid to use it on an output device.
609238`\spad{OMencodingXML()} is the constant for the OpenMath \spad{XML} encoding.
609290`\spad{omError(k,{} l)} creates an instance of OpenMathError.
609363`\spad{OMgetApp(dev)} reads a begin application token from \spad{dev}.
609412`\spad{OMgetAtp(dev)} reads a begin attribute pair token from \spad{dev}.
609461`\spad{OMgetAttr(dev)} reads a begin attribute token from \spad{dev}.
609511`\spad{OMgetBind(dev)} reads a begin binder token from \spad{dev}.
609561`\spad{OMgetBVar(dev)} reads a begin bound variable list token from \spad{dev}.
609611`\spad{OMgetEndApp(dev)} reads an end application token from \spad{dev}.
609663`\spad{OMgetEndAtp(dev)} reads an end attribute pair token from \spad{dev}.
609715`\spad{OMgetEndAttr(dev)} reads an end attribute token from \spad{dev}.
609768`\spad{OMgetEndBind(dev)} reads an end binder token from \spad{dev}.
609821`\spad{OMgetEndBVar(dev)} reads an end bound variable list token from \spad{dev}.
609874`\spad{OMgetEndError(dev)} reads an end error token from \spad{dev}.
609928`\spad{OMgetEndObject(dev)} reads an end object token from \spad{dev}.
609983`\spad{OMgetError(dev)} reads a begin error token from \spad{dev}.
610034`\spad{OMgetFloat(dev)} reads a float from \spad{dev}.
610092`\spad{OMgetInteger(dev)} reads an integer from \spad{dev}.
610148`\spad{OMgetObject(dev)} reads a begin object token from \spad{dev}.
610200`\spad{OMgetString(dev)} reads a string from \spad{dev}.
610254`\spad{OMgetSymbol(dev)} reads a symbol from \spad{dev}.
610331`\spad{OMgetType(dev)} returns the type of the next object on \spad{dev}.
610383`\spad{OMgetVariable(dev)} reads a variable from \spad{dev}.
610439`\spad{OMlistCDs()} lists all the \spad{CDs} supported by AXIOM.
610496`\spad{OMlistSymbols(cd)} lists all the symbols in \spad{cd}.
610563`\spad{OMmakeConn}
610627`\spad{OMopenFile(f,{} mode,{} enc)} opens file \spad{f} for reading or writing OpenMath objects (depending on \spad{mode} which can be \spad{"r"},{} \spad{"w"} or "a" for read,{} write and append respectively),{} in the encoding \spad{enc}.
610704`\spad{OMopenString(s,{} mode)} opens the string \spad{s} for reading or writing OpenMath objects in encoding \spad{enc}.
610776`\spad{OMParseError?(u)} tests whether \spad{u} is an OpenMath parsing error.
610836`\spad{OMputApp(dev)} writes a begin application token to \spad{dev}.
610885`\spad{OMputAtp(dev)} writes a begin attribute pair token to \spad{dev}.
610934`\spad{OMputAttr(dev)} writes a begin attribute token to \spad{dev}.
610984`\spad{OMputBind(dev)} writes a begin binder token to \spad{dev}.
611034`\spad{OMputBVar(dev)} writes a begin bound variable list token to \spad{dev}.
611084`\spad{OMputEndApp(dev)} writes an end application token to \spad{dev}.
611136`\spad{OMputEndAtp(dev)} writes an end attribute pair token to \spad{dev}.
611188`\spad{OMputEndAttr(dev)} writes an end attribute token to \spad{dev}.
611241`\spad{OMputEndBind(dev)} writes an end binder token to \spad{dev}.
611294`\spad{OMputEndBVar(dev)} writes an end bound variable list token to \spad{dev}.
611347`\spad{OMputEndError(dev)} writes an end error token to \spad{dev}.
611401`\spad{OMputEndObject(dev)} writes an end object token to \spad{dev}.
611456`\spad{OMputError(dev)} writes a begin error token to \spad{dev}.
611507`\spad{OMputFloat(dev,{} i)} writes the float \spad{i} to \spad{dev}.
611570`\spad{OMputInteger(dev,{} i)} writes the integer \spad{i} to \spad{dev}.
611631`\spad{OMputObject(dev)} writes a begin object token to \spad{dev}.
611683`\spad{OMputString(dev,{} i)} writes the string \spad{i} to \spad{dev}.
611742`\spad{OMputSymbol(dev,{} cd,{} s)} writes the symbol \spad{s} from \spad{CD} \spad{cd} to \spad{dev}.
611808`\spad{OMputVariable(dev,{} i)} writes the variable \spad{i} to \spad{dev}.
611869`\spad{OMread(dev)} reads an OpenMath object from \spad{dev} and passes it to AXIOM.
611928`\spad{OMReadError?(u)} tests whether \spad{u} is an OpenMath read error.
611987`\spad{OMreadFile(f)} reads an OpenMath object from \spad{f} and passes it to AXIOM.
612042`\spad{OMreadStr(f)} reads an OpenMath object from \spad{f} and passes it to AXIOM.
612096`\spad{OMreceive(c)} reads an OpenMath object from connection \spad{c} and returns the appropriate AXIOM object.
612168`\spad{OMsend(c,{} u)} attempts to output \spad{u} on \aciom{\spad{c}} in OpenMath.
612242`\spad{OMserve(portnum,{} timeout)} puts AXIOM into server mode on port number \spad{portnum}. The parameter \spad{timeout} specifies the timeout period for the connection.
612322`\spad{OMsetEncoding(dev,{} enc)} sets the encoding used for reading or writing OpenMath objects to or from \spad{dev} to \spad{enc}.
612393`\spad{OMsupportsCD?(cd)} returns \spad{true} if AXIOM supports \spad{cd},{} \spad{false} otherwise.
612455`\spad{OMsupportsSymbol?(s,{} cd)} returns \spad{true} if AXIOM supports symbol \spad{s} from \spad{CD} \spad{cd},{} \spad{false} otherwise.
612528`\spad{OMunhandledSymbol(s,{} cd)} raises an error if AXIOM reads a symbol which it is unable to handle. Note that this is different from an unexpected symbol.
612598`\spad{OMUnknownCD?(u)} tests whether \spad{u} is an OpenMath unknown \spad{CD} error.
612657`\spad{OMUnknownSymbol?(u)} tests whether \spad{u} is an OpenMath unknown symbol error.
612762`\spad{OMwrite(u)} returns the OpenMath \spad{XML} encoding of \spad{u} as a complete OpenMath object.
612976`\spad{OMwrite(u,{} true)} returns the OpenMath \spad{XML} encoding of \spad{u} as a complete OpenMath object; OMwrite(\spad{u},{} \spad{false}) returns the OpenMath \spad{XML} encoding of \spad{u} as an OpenMath fragment.
613101`\spad{OMwrite(dev,{} u)} writes the OpenMath form of \spad{u} to the OpenMath device \spad{dev} as a complete OpenMath object.
613299`\spad{OMwrite(dev,{} u,{} true)} writes the OpenMath form of \spad{u} to the OpenMath device \spad{dev} as a complete OpenMath object; OMwrite(\spad{dev},{} \spad{u},{} \spad{false}) writes the object as an OpenMath fragment.
613450`\spad{one?(jv)} checks whether the jet variables \spad{jv} is the special variable 1.
613501`\spad{one returns} whether we need only one solution,{} default being \spad{true}.
613754`\spad{one?(a)} tests whether \spad{a} is the unit 1.
613801`\spad{one?(x)} tests if \spad{x} is equal to 1.
613841`\spad{one?(I)} tests whether the ideal \spad{I} is the unit ideal,{} \spadignore{i.e.} contains 1.
613912`\spad{one(d)} specifies whether we are happy with one solution. This option is expressed in the form \spad{one == d}.
613956`\spad{oneDimensionalArray(l)} creates an array from a list of elements \spad{l}
614027`\spad{oneDimensionalArray(n,{} s)} creates an array from \spad{n} copies of element \spad{s}
614111`\spad{open?(t)} tests whether the given tube plot \spad{t} is open.
614161`\spad{open(s)} returns the file \spad{s} open for input.
614212`\spad{open(s,{} mode)} returns a file \spad{s} open for operation in the indicated mode: "input" or "output".
614270`\spad{operation(f)} returns the name of the operation represented by \spad{f}.
614601`\spad{operator(op(a1,{} ...,{} an))} returns the operator op.
614654`\spad{operator(op)} returns a copy of \spad{op} with the domain-dependent properties appropriate for \spad{F}. Error: if \spad{op} is not an algebraic operator,{} that is,{} an \spad{n}th root or implicit algebraic operator.
614731`\spad{operator(op)} returns a copy of \spad{op} with the domain-dependent properties appropriate for \spad{F}; error if \spad{op} is not a combinatorial operator.
614812`\spad{operator(p)} returns an elementary operator with the same symbol as \spad{p}
614890`\spad{operator(op)} returns a copy of \spad{op} with the domain-dependent properties appropriate for \spad{F}; error if \spad{op} is not a special function operator
614975`\spad{operator(op)} returns the Liouvillian operator based on \spad{op}
615054`\spad{operator(op)} returns a copy of \spad{op} with the domain-dependent properties appropriate for \%.
615197`\spad{operator(f)} gives operator (head) of form \spad{f}. Valid only when atom?(\spad{f}) is \spad{false}
615261`\spad{operator(s)} returns an operator with name \spad{s},{} with the appropriate semantics if \spad{s} is known. If \spad{s} is not known,{} the result has no semantics.
615324`\spad{operator(op)} returns a copy of \spad{op} with the domain-dependent properties appropriate for \%.
615394`\spad{operator(f)} makes \spad{f} into an operator with arbitrary arity.
615444`\spad{operator(f,{} n)} makes \spad{f} into an \spad{n}-ary operator.
615577`\spad{operators(f)} returns all the basic operators appearing in \spad{f},{} no matter what their levels are.
615692`\spad{opeval should} be local but conditional
615857`\spad{opposite?(x,{}y)} holds if the sum of \spad{x} and \spad{y} is \spad{0}.
615912`\spad{option(l,{} s)} determines whether the indicated drawing option,{} \spad{s},{} is contained in the list of drawing options,{} \spad{l},{} which is defined by the draw command.
616002`\spad{option?()} is not to be used at the top level; option? internally returns \spad{true} for drawing options which are indicated in a draw command,{} or \spad{false} for those which are not.
616062`\spad{option()} is not to be used at the top level; option determines internally which drawing options are indicated in a draw command.
616133`\spad{option(l,{} option)} returns which options are given.
616205`\spad{optional?(p)} tests if \spad{p} is a single matching variable which can match an identity.
616254`\spad{optional(x)} tells the pattern matcher that \spad{x} can match an identity (0 in a sum,{} 1 in a product or exponentiation). Error: if \spad{x} is not a symbol.
616313`\spad{optional(x)} tells the pattern matcher that \spad{x} can match an identity (0 in a sum,{} 1 in a product or exponentiation)..
616389`\spad{options(v)} takes the given two-dimensional viewport,{} \spad{v},{} of the domain \spadtype{TwoDimensionalViewport} and returns a list containing the draw options from the domain \spadtype{DrawOption} for \spad{v}.
616457`\spad{options(v)} takes the viewport,{} \spad{v},{} which is of the domain \spadtype{ThreeDimensionalViewport} and returns a list of all the draw options from the domain \spad{DrawOption} which are being used by \spad{v}.
616527`\spad{options(v,{} lopt)} takes the given two-dimensional viewport,{} \spad{v},{} of the domain \spadtype{TwoDimensionalViewport} and returns \spad{v} with it\spad{'s} draw options modified to be those which are indicated in the given list,{} \spad{lopt} of domain \spadtype{DrawOption}.
616598`\spad{options(v,{} lopt)} takes the viewport,{} \spad{v},{} which is of the domain \spadtype{ThreeDimensionalViewport} and sets the draw options being used by \spad{v} to those indicated in the list,{} \spad{lopt},{} which is a list of options from the domain \spad{DrawOption}.
616671`\spad{optpair(l)} returns \spad{l} has the form \spad{[a,{} b]} and a is optional,{} and "failed" otherwise.
616741`if this is a compound op then opType returns the type of that op: "IMPLY"::Symbol =implies "AND"::Symbol=/\ "OR"::Symbol=\spad{\/} "NOT"::Symbol=~ "OTHER"::Symbol=not compound op
616782`\spad{Or(n,{} m)} returns the bit-by-bit logical {\em Or} of \spad{n} and \spad{m}.
616827`\spad{f or g} creates the equivalent infix form.
616867`\spad{OR(x,{} y)} returns the \spadtype{Switch} expression representing \spad{x or y}.
617075`\spad{a or b} returns the logical {\em or} of bit aggregates \spad{a} and \spad{b}.
617117`\spad{a or b} returns the logical inclusive {\em or} of Boolean \spad{a} and \spad{b}.
617154`\spad{Or(n,{} m)} returns the bit-by-bit logical {\em or} of the single integers \spad{n} and \spad{m}.
617197`\spad{orbit(gp,{} ls)} returns the orbit of the ordered list {\em ls} under the group {\em gp}. Note: return type is \spad{L} \spad{L} \spad{S} temporarily because FSET \spad{L} \spad{S} has an error.
617264`\spad{orbit(gp,{} els)} returns the orbit of the unordered set {\em els} under the group {\em gp}.
617329`\spad{orbit(p,{} el)} returns the orbit of {\em el} under the permutation \spad{p},{} \spadignore{i.e.} the set which is given by applications of the powers of \spad{p} to {\em el}.
617387`\spad{orbit(gp,{} el)} returns the orbit of the element {\em el} under the group {\em gp},{} \spadignore{i.e.} the set of all points gained by applying each group element to {\em el}.
617442`\spad{orbits(gp)} returns the orbits of the group {\em gp},{} \spadignore{i.e.} it partitions the (finite) of all moved points.
617501`\spad{ord(c)} provides an integral code corresponding to the character \spad{c}. It is always \spad{true} that \spad{char ord c = c}.
617543`\spad{order(x)} computes the order of the element \$\spad{x}\$.
617589`\spad{order(x)} \undocumented
617647`\spad{order(jv)} yields the order of the jet variable \spad{jv} (Order as derivative).
617710`\spad{order(f)} gives highest order of the jet variables effectively occurring in \spad{f}.
617785`\spad{order(x)} returns the order of a power series \spad{x},{} \indented{1}{\spadignore{i.e.} the degree of the first non-zero term of the series.}
617854`\spad{order(de)} yields the order of the differential equation \spad{de}.
618011`\spad{order(f)} \undocumented
618151`\spad{order(x)} \undocumented
618249`\spad{order(f)} \undocumented
618687`\spad{order(f)} is the degree of the lowest order non-zero term in \spad{f}. This will result in an infinite loop if \spad{f} has no non-zero terms.
618761`\spad{order x} is the order of magnitude of \spad{x}. Note: \spad{base ^ order x <= |x| < base ^ (1 + order x)}.
618815`\spad{order(p)} returns the order of the differential polynomial \spad{p},{} which is the maximum number of differentiations of a differential indeterminate,{} among all those appearing in \spad{p}.
618900`\spad{order(v)} returns \spad{n} if \spad{v} is the \spad{n}-th derivative of any differential indeterminate.
618977`\spad{order(x)} returns the exponent of the highest power of \spad{p} dividing \spad{x}.
619046`\spad{order(gp)} returns the order of the group {\em gp}.
619111`\spad{order(p)} returns the order of a permutation \spad{p} as a group element.
619171`\spad{order(a)} computes the order of an element in the multiplicative group of the field. Error: if \spad{a} is 0.
619260`\spad{order(b)} computes the order of an element \spad{b} in the multiplicative group of the field. Error: if \spad{b} equals 0.
619322`\spad{order(x,{} n)} returns the minimum of \spad{n} and the order of \spad{x}.
619570`\spad{order(p,{} q)} returns the largest \spad{n} such that \spad{q^n} divides polynomial \spad{p} \spadignore{i.e.} the order of \spad{p(x)} at \spad{q(x)=0}.
619671`\spad{order(f,{} n) = min(m,{} n)},{} where \spad{m} is the degree of the lowest order non-zero term in \spad{f}.
619751`\spad{order(p,{} s)} returns the order of the differential polynomial \spad{p} in differential indeterminate \spad{s}.
619838`\spad{order(f,{} x)} returns the order of \spad{f} viewed as a series in \spad{x} may result in an infinite loop if \spad{f} has no non-zero terms.
619930`\spad{order(f,{} u,{} g)} \undocumented
620046`\spad{order(f,{} x,{} n)} returns \spad{min(n,{} order(f,{} x))}.
620157`\spad{orderDim(sys,{} jm,{} q)} computes the dimension of the manifold described by the system \spad{sys} with Jacobi matrix \spad{jm} in the jet bundle of order \spad{q} over the jet bundle of order \spad{q-1}.
620413`\spad{ordinalAdd(o1,{} o2)} returns sum of \spad{o1} and \spad{o2} as ordered sets
620463`\spad{ordinalMul(o1,{} o2)} returns product of \spad{o1} and \spad{o2} as ordered sets
620513`\spad{ordinalPower(o1,{} o2)} returns \spad{o1} to power \spad{o2},{} where power is inductively defined using succesive ordinal multiplication from the left
620565`\spad{orthogonalPolynomials(x)} returns the stream of orthogonal polynomials.
620723`\spad{orthogonalPolynomials(x)} returns the stream of orthogonal polynomials.
620839`\spad{orthonormalBasis(m)} returns the orthogonal matrix \spad{b} such that \spad{b*m*(inverse b)} is diagonal. Error: if \spad{m} is not a symmetric matrix.
620965`\spad{outDegree(s,{} a)} gives the number of arrows leading out of node 'a' in graph \spad{'s'}
621188`\spad{outerProduct(u,{} v)} constructs the matrix whose (\spad{i},{} \spad{j})\spad{'}th element is \spad{u}(\spad{i})\spad{*v}(\spad{j}).
621263`\spad{outlineRender(v,{} s)} displays the polygon outline showing either triangularized surface or a quadrilateral surface outline depending on the whether the \spadfun{diagonals} function has been set,{} for the given three-dimensional viewport \spad{v} which is of domain \spadtype{ThreeDimensionalViewport},{} if \spad{s} is "on",{} or does not display the polygon outline if \spad{s} is "off".
621334`\spad{output(x)} displays the output form \spad{x} on the ``algebra output\spad{''} stream,{} as defined by \spadsyscom{set output algebra}.
621388`\spad{output(s)} displays the string \spad{s} on the ``algebra output\spad{''} stream,{} as defined by \spadsyscom{set output algebra}.
621438`\spad{output(s,{} x)} displays the string \spad{s} followed by the form \spad{x} on the ``algebra output\spad{''} stream,{} as defined by \spadsyscom{set output algebra}.
621499`\spad{outputArgs(s1,{} s2,{} p,{} ts)} is an internal subroutine,{} exported only for developement.
621584`\spad{outputAsFortran(u)} translates \spad{u} into a legal FORTRAN subprogram.
621648`\spad{outputAsFortran(fn)} \undocumented{}
621710`\spad{outputAsFortran(l)} sends (for each expression in the list \spad{l}) output in FORTRAN format to the destination defined by \spadsyscom{set output fortran}.
621786`\spad{outputAsFortran(o)} sends output \spad{o} in FORTRAN format.
621856`\spad{outputAsFortran(v,{} o)} sends output \spad{v} = \spad{o} in FORTRAN format to the destination defined by \spadsyscom{set output fortran}.
621933`\spad{outputAsScript(l)} sends (for each expression in the list \spad{l}) output in Script Formula Formatter format to the destination defined. by \spadsyscom{set output forumula}.
622008`\spad{outputAsScript(o)} sends output \spad{o} in Script Formula Formatter format to the destination defined by \spadsyscom{set output formula}.
622077`\spad{outputAsTex(l)} sends (for each expression in the list \spad{l}) output in Tex format to the destination as defined by \spadsyscom{set output tex}.
622149`\spad{outputAsTex(o)} sends output \spad{o} in Tex format to the destination defined by \spadsyscom{set output tex}.
622215`\spad{outputFixed()} sets the output mode to fixed point notation; the output will contain a decimal point.
622256`\spad{outputFixed(n)} sets the output mode to fixed point notation,{} with \spad{n} digits displayed after the decimal point.
622315`\spad{outputFloating()} sets the output mode to floating (scientific) notation,{} \spadignore{i.e.} \spad{mantissa * 10 exponent} is displayed as \spad{0.mantissa E exponent}.
622359`\spad{outputFloating(n)} sets the output mode to floating (scientific) notation with \spad{n} significant digits displayed after the decimal point.
622421`\spad{outputForm(n)} creates an form for integer \spad{n}.
622471`\spad{outputForm(s)} creates an form for string \spad{s}.
622520`\spad{outputForm(s)} creates an form for symbol \spad{s}.
622569`\spad{outputForm(p,{} var)} converts the SparseUnivariatePolynomial \spad{p} to an output form (see \spadtype{OutputForm}) printed as a polynomial in the output form variable.
622652`\spad{outputForm(p,{} x)} returns the output form of \spad{p} using \spad{x} for the otherwise anonymous variable.
622751`\spad{outputForm(l,{} fop,{} fexp,{} unit)} converts the monoid element represented by \spad{l} to an \spadtype{OutputForm}. Argument unit is the output form for the \spadignore{unit} of the monoid (\spadignore{e.g.} 0 or 1),{} \spad{fop(a,{} b)} is the output form for the monoid operation applied to \spad{a} and \spad{b} (\spadignore{e.g.} \spad{a + b},{} \spa
622751`--d{a * b},{} \spad{ab}),{} and \spad{fexp(a,{} n)} is the output form for the exponentiation operation applied to \spad{a} and \spad{n} (\spadignore{e.g.} \spad{n a},{} \spad{n * a},{} \spad{a ^ n},{} \spad{a\^n}).
622895`\spad{outputGeneral()} sets the output mode (default mode) to general notation; numbers will be displayed in either fixed or floating (scientific) notation depending on the magnitude.
622938`\spad{outputGeneral(n)} sets the output mode to general notation with \spad{n} significant digits displayed.
622999`\spad{outputList(l)} displays the concatenated components of the list \spad{l} on the ``algebra output\spad{''} stream,{} as defined by \spadsyscom{set output algebra}; quotes are stripped from strings.
623056`\spad{outputSpacing(n)} inserts a space after \spad{n} (default 10) digits on output; outputSpacing(0) means no spaces are inserted.
623117`\spad{outputVRML(rp,{} f1)} writes the attribute as \spad{VRML2}. \spad{VRML2} is not \spad{xml} but it has the same semantics and node names as \spad{X3D} but a different syntax so it makes sense to create an \spad{XML} structure and then format the output differently.
623175`\spad{outputVRML(rp,{} f1)} writes the element as \spad{VRML2}. \spad{VRML2} is not \spad{xml} but it has the same semantics and node names as \spad{X3D} but a different syntax so it makes sense to create an \spad{XML} structure and then format the output differently.
623231`\spad{over(f,{} g)} creates a form for the vertical fraction of \spad{f} over \spad{g}.
623273`\spad{overbar(f)} creates the form \spad{f} with an overbar.
623315`\spad{overlabel(x,{}f)} creates the form \spad{f} with \spad{"x} overbar" over the top.
623362`\spad{overlap(x,{} y)} returns \spad{[l,{} m,{} r]} such that \spad{x = l * m},{} \spad{y = m * r} and \spad{l} and \spad{r} have no overlap,{} \spadignore{i.e.} \spad{overlap(l,{} r) = [l,{} 1,{} r]}.
623433`\spad{overset?(s,{} sl)} returns \spad{true} if \spad{s} properly a sublist of a member of \spad{sl}; otherwise it returns \spad{false}
623533`\spad{P(ind)} generates the derivative of the only dependent variable \spad{wrt} the index \spad{ind}.
623885`\spad{P(i)} generates the \spad{i}\spad{-}th derivative of the only dependent variable \spad{wrt} the only independent variable.
624207`\spad{P(i,{} ind)} generates the derivative of the \spad{i}\spad{-}th dependent variable \spad{wrt} the index \spad{ind}. Whether \spad{ind} is interpreted as multi-index or as repeated index depends on the chosen notation.
624639`\spad{P(i,{} j)} generates the \spad{j}\spad{-}th derivative of the \spad{i}\spad{-}th independent variable \spad{wrt} the only independent variable.
625041`\spad{pack!(f)} reorganizes the file \spad{f} on disk to recover unused space.
625093`\spad{pack!(f)} reorganizes the file \spad{f} on disk to recover unused space.
625130`\spad{packageCall(f)} returns the input form corresponding to \spad{f}\$\spad{R}.
625199`\spad{packageCall(f,{} l)} returns the input form corresponding to \spad{f}(\spad{l}.1,{} \spad{l}.2,{} ...)\$\spad{R}.
625284`\spad{pack_exps0(exps,{} sizes,{} ns,{} start)} is used by pack_exps.
625394`\spad{pack_exps(d,{} s,{} m)} produces vector of exponents up to degree \spad{d}. \spad{s} is size (degree) of algebraic extension. Use together with \spad{repack1}.
625502`\spad{pack_modulus(lp,{} ls,{} p)} converts \spad{lp},{} \spad{ls} and prime \spad{p} which together describe algebraic extension to packed representation.
625622`\spad{pade(nd,{} dd,{} s)} computes the quotient of polynomials (if it exists) with numerator degree at most \spad{nd} and denominator degree at most \spad{dd} which matches the series \spad{s} to order \spad{nd + dd}.
625796`\spad{pade(nd,{} dd,{} ns,{} ds)} computes the approximant as a quotient of polynomials (if it exists) for arguments \spad{nd} (numerator degree of approximant),{} \spad{dd} (denominator degree of approximant),{} \spad{ns} (numerator series of function),{} and \spad{ds} (denominator series of function).
625917`\spad{pade(nd,{} dd,{} ns,{} ds)} computes the approximant as a quotient of polynomials (if it exists) for arguments \spad{nd} (numerator degree of approximant),{} \spad{dd} (denominator degree of approximant),{} \spad{ns} (numerator series of function),{} and \spad{ds} (denominator series of function
625917`--).
626122`\spad{padecf(nd,{} dd,{} ns,{} ds)} computes the approximant as a continued fraction of polynomials (if it exists) for arguments \spad{nd} (numerator degree of approximant),{} \spad{dd} (denominator degree of approximant),{} \spad{ns} (numerator series of function),{} and \spad{ds} (denominator series of function).
626254`\spad{padicallyExpand(p,{} x)} is a utility function that expands the second argument \spad{x} \spad{``p}-adically\spad{''} in the first.
626340`\spad{padicFraction(q)} expands the fraction \spad{p}-adically in the primes \spad{p} in the denominator of \spad{q}. For example,{} \spad{padicFraction(3/(2^2)) = 1/2 + 1/(2^2)}. Use \spadfunFrom{compactFraction}{PartialFraction} to return to compact form.
626396`\spad{pair?(s)} is \spad{true} if \spad{s} has is a non-null Lisp list.
626467`\spad{palgint0(f,{} x,{} y,{} d,{} p)} returns the integral of \spad{f(x,{} y)dx} where \spad{y} is an algebraic function of \spad{x} satisfying \spad{d(x)\^2 y(x)\^2 = P(x)}.
626596`\spad{palgint0(f,{} x,{} y,{} z,{} t,{} c)} returns the integral of \spad{f(x,{} y)dx} where \spad{y} is an algebraic function of \spad{x} satisfying \spad{x = eval(t,{} z,{} ry)} and \spad{c = d/dz t}; \spad{r} is rational function of \spad{x},{} \spad{c} and \spad{t} are rational functions of \spad{z}. Argument \spad{z} is a dummy variable not appearin
626596`--g in \spad{f(x,{} y)}.
626747`\spad{palgint(f,{} x,{} y)} returns the integral of \spad{f(x,{} y)dx} where \spad{y} is an algebraic function of \spad{x}.
626847`\spad{palgintegrate(f,{} d)} integrates \spad{f} with respect to the derivation \spad{d}. Argument \spad{f} must be a pure algebraic function.
626945`\spad{palgLODE0(op,{} g,{} x,{} y,{} d,{} p)} returns the solution of \spad{op f = g}. Argument \spad{y} is an algebraic function of \spad{x} satisfying \spad{d(x)\^2y(x)\^2 = P(x)}.
627159`\spad{palgLODE0(op,{} g,{} x,{} y,{} z,{} t,{} c)} returns the solution of \spad{op f = g}. Argument \spad{y} is an algebraic function of \spad{x} satisfying \spad{x = eval(t,{} z,{} ry)} and \spad{c = d/dz t}; \spad{r} is rational function of \spad{x},{} \spad{c} and \s
627159`--pad{t} are rational functions of \spad{z}.
627395`\spad{palgLODE(op,{} g,{} kx,{} y,{} x)} returns the solution of \spad{op f = g}. \spad{y} is an algebraic function of \spad{x}.
627587`\spad{palgRDE0(f,{} g,{} x,{} y,{} foo,{} d,{} p)} returns a function \spad{z(x,{} y)} such that \spad{dz/dx + n * df/dx z(x,{} y) = g(x,{} y)} if such a \spad{z} exists,{} and "failed" otherwise. Argument \spad{y} is an algebraic function of \spad{x} satisfying \spad{d(x)\^2y(x)\^2 = P(x)}. Argument \spad{foo},{} called by \spad{foo(a,{} b,{} x
627587`--)},{} is a function that solves \spad{du/dx + n * da/dx u(x) = u(x)} for an unknown \spad{u(x)} not involving \spad{y}.
627747`\spad{palgRDE0(f,{} g,{} x,{} y,{} foo,{} t,{} c)} returns a function \spad{z(x,{} y)} such that \spad{dz/dx + n * df/dx z(x,{} y) = g(x,{} y)} if such a \spad{z} exists,{} and "failed" otherwise. Argument \spad{y} is an algebraic function of \spad{x} satisfying \spad{x = eval(t,{} z,{} ry)} and \spad{c = d/dz t}; \spad{r} 
627747`--is rational function of \spad{x},{} \spad{c} and \spad{t} are rational functions of \spad{z}. Argument \spad{foo},{} called by \spad{foo(a,{} b,{} x)},{} is a function that solves \spad{du/dx + n * da/dx u(x) = u(x)} for an unknown \spad{u(x)} not involving \spad{y}.
627929`\spad{palgRDE(nfp,{} f,{} g,{} x,{} y,{} foo)} returns a function \spad{z(x,{} y)} such that \spad{dz/dx + n * df/dx z(x,{} y) = g(x,{} y)} if such a \spad{z} exists,{} "failed" otherwise; \spad{y} is an algebraic function of \spad{x}; \spad{foo(a,{} b,{} x)} is a function that solves \spad{du/dx + n * da/dx u(x) = u(x)} for an unknown \spad{u(x)} not involving \spad{y}. 
627929`--\spad{nfp} is \spad{n * df/dx}.
628062`\spad{parabolic(pt)} transforms \spad{pt} from parabolic coordinates to Cartesian coordinates: the function produced will map the point \spad{(u,{} v)} to \spad{x = 1/2*(u^2 - v^2)},{} \spad{y = u*v}.
628128`\spad{parabolicCylindrical(pt)} transforms \spad{pt} from parabolic cylindrical coordinates to Cartesian coordinates: the function produced will map the point \spad{(u,{} v,{} z)} to \spad{x = 1/2*(u^2 - v^2)},{} \spad{y = u*v},{} \spad{z}.
628205`\spad{paraboloidal(pt)} transforms \spad{pt} from paraboloidal coordinates to Cartesian coordinates: the function produced will map the point \spad{(u,{} v,{} phi)} to \spad{x = u*v*cos(phi)},{} \spad{y = u*v*sin(phi)},{} \spad{z = 1/2 * (u^2 - v^2)}.
628274`\spad{parallel(x,{} y)} returns the length of the parallel component of two vectors. In the case of Euclidean space this is the dot product of two vectors. We use this function to test the colinearity
628333`\spad{parametersOf(tab)} returns a list of all the symbols declared in \spad{tab}
628391`\spad{parametric? determines} whether it is a parametric plot?
628436`\spad{param_LODE(eq,{} lg,{} x,{} y)}
628606`\spad{param_rde2(fp,{} lg,{} x,{} lk,{} ext,{} logi)} finds basis of solution to the equation dy/dx + \spad{fp} \spad{y} + \spad{c1} \spad{g1} + ... \spad{cn} \spad{gn} = 0 where \spad{y} is in field generated by \spad{lk} an
628606`--d \spad{ci} are constants.
628888`\spad{param_RDE(fp,{} lg,{} x,{} y)}
629051`\spad{param_rde(n,{} f,{} lg,{} x,{} lk,{} ext,{} logi)} finds basis of solution to the equation dy/dx + \spad{n} df/dx \spad{y} + \spad{c1} \spad{g1} + ... \spad{cn} \spad{gn} = 0 where \spad{y} is in field generated 
629051`--by \spad{lk} and \spad{ci} are constants.
629340`\spad{param_rde(n,{} f,{} h,{} lg,{} x,{} lk,{} ext,{} logi)} finds a particular solution and basis of solutions to homogeneous equation for
629340`-- equation dy/dx + \spad{n} df/dx \spad{y} + \spad{c1} \spad{g1} + ... \spad{cn} \spad{gn} = \spad{h} where \spad{y} is in field generated by \spad{lk} and \spad{ci} are constants.
629707`\spad{ParCond(m,{} k)} returns the list of all \spad{k} by \spad{k} subdeterminants in the matrix \spad{m}
629863`\spad{ParCondList(c,{} r)} computes a list of subdeterminants of each rank \spad{>=} \spad{r} of the matrix \spad{c} and returns a groebner basis for the ideal they generate
630079`\spad{paren(f)} creates the form enclosing \spad{f} in parentheses.
630119`\spad{paren(lf)} creates the form separating the elements of \spad{lf} by commas and encloses the result in parentheses.
630255`\spad{paren(f)} returns (\spad{f}). This prevents \spad{f} from being evaluated when operators are applied to it. For example,{} \spad{log(1)} returns 0,{} but \spad{log(paren 1)} returns the formal kernel log((1)).
630300`\spad{paren([f1,{} ...,{} fn])} returns \spad{(f1,{} ...,{} fn)}. This prevents the \spad{fi} from being evaluated when operators are applied to them,{} and makes them applicable to a unary operator. For example,{} \spad{atan(paren [x,{} 2])} returns the formal kernel \spad{atan((x,{} 2))}.
630351`\spad{parent(s)} returns the subspace which is the parent of the indicated 3 dimensional subspace \spad{s}. If \spad{s} is the top level subspace an error message is returned.
630395`\spad{parse(s)} is the inverse of unparse. It parses a string to InputForm
630438`Constructs intuitionistic logic terms from a string notation assumes format like this: <term> : \spad{:=} var | <term>/\spad{\<}term> | <term>\spad{\/}<term> | \indented{11}{<term>-><term> | "("<term>")"}
630480`Constructs intuitionistic logic terms from a string notation assumes format like this: <term2> : \spad{:=} var | "("<term>")" <term> : \spad{:=} var | <term>/\spad{\<}term> | <term>\spad{\/}<term> | \indented{11}{<term>-><term> | "("<term>")"}
630578`parseTerm is used by parseIL. It would rarely be called externally but it is here to allow it to call parseIL that is to allow circular calls
630679`\spad{parse_integer(s)} converts string of digits \spad{s} into integer
630743`Constructs nested lambda terms from a string notation assumes format like this: <term> : \spad{:=} "\spad{\"} var "."<term> | \spad{n} | <term><term> | "("<term>")" where: \\ = lambda (\spad{I} would like to use unicode lambda symbol but \indented{12}{\spad{I} would also like to keep maximum compatibility} \indented{12}{with non-unicode versions of Lisp)} \spad{n} = De Bruijn index which is a integer where,{} 1=inside inner \indented{12}{lambda term,{} 
630743`--2= next outer lambda term,{} 3= next} \indented{12}{outer and so on.} brackets can be used around whole terms.
630793`Constructs combinators from a string
630848`parseTerm is used by parseLambda. It would rarely be called externally but it is here to allow it to call parseLambda that is to allow circular calls
630951`parseTerm is used by parseSki. It would rarely be called externally but it is here to allow it to call parseSki that is to allow circular calls
631062`construct a variable by parsing a string
631105`construct a variable by parsing a string pin is index to string at start of parse pout is index to string at end of parse
631207`\spad{partialDenominators(x)} extracts the denominators in \spadvar{\spad{x}}. That is,{} if \spad{x = continuedFraction(b0,{} [a1,{} a2,{} a3,{} ...],{} [b1,{} b2,{} b3,{} ...])},{} then \spad{partialDenominators(x) = [b1,{} b2,{} b3,{} ...]}.
631278`\spad{partialFraction(rf,{} var)} returns the partial fraction decomposition of the rational function \spad{rf} with respect to the variable var.
631372`\spad{partialFraction(numer,{} denom)} is the main function for constructing partial fractions. The second argument is the denominator and should be factored.
631441`\spad{partialFraction(num,{} facdenom,{} var)} returns the partial fraction decomposition of the rational function whose numerator is \spad{num} and whose factored denominator is \spad{facdenom} with respect to the variable var.
631549`\spad{partialNumerators(x)} extracts the numerators in \spadvar{\spad{x}}. That is,{} if \spad{x = continuedFraction(b0,{} [a1,{} a2,{} a3,{} ...],{} [b1,{} b2,{} b3,{} ...])},{} then \spad{partialNumerators(x) = [a1,{} a2,{} a3,{} ...]}.
631618`\spad{partialQuotients(x)} extracts the partial quotients in \spadvar{\spad{x}}. That is,{} if \spad{x = continuedFraction(b0,{} [a1,{} a2,{} a3,{} ...],{} [b1,{} b2,{} b3,{} ...])},{} then \spad{partialQuotients(x) = [b0,{} b1,{} b2,{} b3,{} ...]}.
631686`\spad{particularSolution(u)} \undocumented
631759`\spad{particularSolution([v1,{} ...,{} vn],{} u)} returns \spad{[c1,{} ...,{} cn]} such that \spad{c1*v1 + ... + cn*vn = u},{} "failed" if no such \spad{ci}\spad{'s} exist in the quotient field of \spad{S}.
631890`\spad{particularSolution([v1,{} ...,{} vn],{} u)} returns \spad{[c1,{} ...,{} cn]} such that \spad{c1*v1 + ... + cn*vn = u},{} "failed" if no such \spad{ci}\spad{'s} exist in \spad{S}.
632006`\spad{particularSolution([v1,{} ...,{} vn],{} u)} returns \spad{[c1,{} ...,{} cn]} such that \spad{c1*v1 + ... + cn*vn = u},{} "failed" if no such \spad{ci}\spad{'s} exist in the quotient field of \spad{S}.
632129`\spad{particularSolution([v1,{} ...,{} vn],{} u)} returns \spad{[c1,{} ...,{} cn]} such that \spad{c1*v1 + ... + cn*vn = u},{} "failed" if no such \spad{ci}\spad{'s} exist in \spad{S}.
632237`\spad{particularSolution(A,{} B)} finds a particular solution of the linear system \spad{AX = B}.
632349`\spad{particularSolution(A,{} B)} finds a particular solution of the linear system \spad{AX = B}.
632450`\spad{particularSolution(op,{} g,{} [f1,{} ...,{} fm],{} I)} returns a particular solution \spad{h} of the equation \spad{op y = g} where \spad{[f1,{} ...,{} fm]} are linearly independent and \spad{op(\spad{fi})=0}. The value "failed" is returned if no particular solution is found. Note: the method of variations of parameters is used.
632543`\spad{solveLinearlyOverConstants([v1,{} ...,{} vn],{} u,{} ld)} returns \spad{[c1,{} ...,{} cn]} such that \spad{c1*v1 + ... + cn*vn = u},{} "failed" if no such rational numbers \spad{ci}\spad{'s} exist.
632681`\spad{particularSolutionOverConstants([v1,{} ...,{} vn],{} u,{} ld)} returns \spad{[c1,{} ...,{} cn]} such that \spad{c1*v1 + ... + cn*vn = u},{} "failed" if no such constants numbers \spad{ci}\spad{'s} exist.
632811`\spad{solveLinearlyOverQ([v1,{} ...,{} vn],{} u)} returns \spad{[c1,{} ...,{} cn]} such that \spad{c1*v1 + ... + cn*vn = u},{} "failed" if no such rational numbers \spad{ci}\spad{'s} exist.
632941`\spad{particularSolutionOverQ([v1,{} ...,{} vn],{} u)} returns \spad{[c1,{} ...,{} cn]} such that \spad{c1*v1 + ... + cn*vn = u},{} "failed" if no such rational numbers \spad{ci}\spad{'s} exist.
633063`\spad{partition(\spad{li})} converts a list of integers \spad{li} to a partition
633117`\spad{partition(n)} returns the number of partitions of the integer \spad{n}. This is the number of distinct ways that \spad{n} can be written as a sum of positive integers.
633180`\spad{partitions(n)} is the stream of all partitions of \spad{n}.
633264`\spad{partitions(p,{} l)} is the stream of all \indented{1}{partitions whose number of} \indented{1}{parts and largest part are no greater than \spad{p} and \spad{l}.}
633356`\spad{partitions(p,{} l,{} n)} is the stream of partitions \indented{1}{of \spad{n} whose number of parts is no greater than \spad{p}} \indented{1}{and whose largest part is no greater than \spad{l}.}
633786`\spad{parts(m)} returns a list of the elements of \spad{m} in row major order
633859`\spad{parts(u)} returns a list of the consecutive elements of \spad{u}. For collections,{} \spad{parts([x,{} y,{} ...,{} z]) = (x,{} y,{} ...,{} z)}.
633940`\spad{pascalTriangle(n,{} r)} returns the binomial coefficient \spad{C(n,{} r)=n!/(r! (n-r)!)} and stores it in a table to prevent recomputation.
634025`\spad{pastel(c)} sets the shade of a hue,{} \spad{c},{} above bright,{} but below light.
634066`\spad{pa_to_sup(v)} converts vector of coefficients to a polynomial
634169`\spad{pattern(r)} returns the pattern corresponding to the left hand side of the rule \spad{r}.
634491`\spad{patternMatch(expr,{} pat,{} res)} matches the pattern \spad{pat} to the expression \spad{expr}; res contains the variables of \spad{pat} which are already matched and their matches. Note: this function handles type towers by changing the predicates and calling the matching function provided by \spad{A}.
634610`\spad{patternMatch(cexpr,{} pat,{} res)} matches the pattern \spad{pat} to the complex expression \spad{cexpr}. res contains the variables of \spad{pat} which are already matched and their matches.
634770`\spad{patternMatch(expr,{} pat,{} res)} matches the pattern \spad{pat} to the expression \spad{expr}; res contains the variables of \spad{pat} which are already matched and their matches.
634894`\spad{patternMatch(n,{} pat,{} res)} matches the pattern \spad{pat} to the integer \spad{n}; res contains the variables of \spad{pat} which are already matched and their matches.
635038`\spad{patternMatch(f(e1,{} ...,{} en),{} pat,{} res)} matches the pattern \spad{pat} to \spad{f(e1,{} ...,{} en)}; res contains the variables of \spad{pat} which are already matched and their matches.
635161`\spad{patternMatch(l,{} pat,{} res)} matches the pattern \spad{pat} to the list \spad{l}; res contains the variables of \spad{pat} which are already matched and their matches.
635297`\spad{patternMatch(p,{} pat,{} res)} matches the pattern \spad{pat} to the polynomial \spad{p}; res contains the variables of \spad{pat} which are already matched and their matches.
635456`\spad{patternMatch(a/b,{} pat,{} res)} matches the pattern \spad{pat} to the quotient \spad{a/b}; res contains the variables of \spad{pat} which are already matched and their matches.
636351`\spad{patternMatch(expr,{} pat,{} res)} matches the pattern \spad{pat} to the expression \spad{expr}; res contains the variables of \spad{pat} which are already matched and their matches (necessary for recursion).
636479`\spad{patternMatch(expr,{} pat,{} res)} matches the pattern \spad{pat} to the expression \spad{expr}. res contains the variables of \spad{pat} which are already matched and their matches (necessary for recursion). Initially,{} res is just the result of \spadfun{new} which is an empty list of matches.
636593`\spad{patternMatch(p,{} pat,{} res,{} vmatch)} matches the pattern \spad{pat} to the polynomial \spad{p}. \spad{res} contains the variables of \spad{pat} which are already matched and their matches; vmatch is the matching function to use on the variables.
636790`\spad{patternMatch(lsubj,{} lpat,{} op,{} res,{} match)} matches the list of patterns \spad{lpat} to the list of subjects \spad{lsubj},{} allowing for commutativity; \spad{op} is the operator such that \spad{op}(\spad{lpat}) should match \spad{op}(\spad{lsubj}) at the end,{} \spad{r} contains the prev
636790`--ious matches,{} and match is a pattern-matching function on \spad{P}.
636995`\spad{patternMatchTimes(lsubj,{} lpat,{} res,{} match)} matches the product of patterns \spad{reduce(*,{} lpat)} to the product of subjects \spad{reduce(*,{} lsubj)}; \spad{r} contains the previous matches and match is a pattern-matching function on \spad{P}.
637192`\spad{patternVariable(x,{} c?,{} o?,{} m?)} creates a pattern variable \spad{x},{} which is constant if \spad{c? = true},{} optional if \spad{o? = true},{} and multiple if \spad{m? = true}.
637270`\spad{pdct(a1^n1 a2^n2 ...)} returns \spad{n1! * a1^n1 * n2! * a2^n2 * ...}. This function is used in the package \spadtype{CycleIndicators}.
637313`\spad{perfectNthPower?(n,{} r)} returns \spad{true} if \spad{n} is an \spad{r}th power and \spad{false} otherwise
637392`\spad{perfectNthRoot(n)} returns \spad{[x,{} r]},{} where \spad{n = x\^r} and \spad{r} is the largest integer such that \spad{n} is a perfect \spad{r}th power
637485`\spad{perfectNthRoot(n,{} r)} returns the \spad{r}th root of \spad{n} if \spad{n} is an \spad{r}th power and returns "failed" otherwise
637572`\spad{perfectSqrt(n)} returns the square root of \spad{n} if \spad{n} is a perfect square and returns "failed" otherwise
637637`\spad{perfectSquare?(n)} returns \spad{true} if \spad{n} is a perfect square and \spad{false} otherwise
637695`\spad{permanent(x)} computes the permanent of a square matrix \spad{x}. The {\em permanent} is equivalent to the \spadfun{determinant} except that coefficients have no change of sign. This function is much more difficult to compute than the {\em determinant}. The formula used is by \spad{H}.\spad{J}. Ryser,{} improved by [Nijenhuis and Wilf,{} \spad{Ch}. 19]. Note: permanent(\spad{x}) choose one of three algorithms,{} depending on the underl
637695`--ying ring \spad{R} and on \spad{n},{} the number of rows (and columns) of \spad{x:} \begin{items} \item 1. if 2 has an inverse in \spad{R} we can use the algorithm of \indented{3}{[Nijenhuis and Wilf,{} \spad{ch}.19,{} \spad{p}.158]; if 2 has no inverse,{}} \indented{3}{some modifications are necessary:} \item 2. if {\em n > 6} and \spad{R} is an integral domain with characteristic \indented{3}{different from 2 (the algorithm works if and only 2 is not a} \indented{3}{zero-divisor of \spad{R} 
637695`--and {\em characteristic()\$R ~= 2},{}} \indented{3}{but how to check that for any given \spad{R} ?),{}} \indented{3}{the local function {\em permanent2} is called;} \item 3. else,{} the local function {\em permanent3} is called \indented{3}{(works for all commutative rings \spad{R}).} \end{items}
637757`\spad{perm_to_vec(supp,{} p,{} degree)} should be local but conditional
637875`\spad{permutation(n,{} r)} returns the number of permutations of \spad{n} objects taken \spad{r} at a time,{} \spadignore{i.e.} \spad{n!/}(\spad{n}-\spad{r})!.
637991`\spad{permutation(n,{} m)} returns the number of permutations of \spad{n} objects taken \spad{m} at a time. Note: \spad{permutation(n,{} m) = n!/(n-m)!}.
638059`\spad{permutation(n)} returns \spad{!P(n,{} r) = n!/(n-r)!}. This is the number of permutations of \spad{n} objects taken \spad{r} at a time.
638126`\spad{permutationGroup(ls)} coerces a list of permutations {\em ls} to the group generated by this list.
638204`\spad{permutationRepresentation(x)} returns the permutation induced by \spad{x} on \spad{enumerate()\$G}
638292`\spad{permutationRepresentation(\spad{pi},{} n)} returns the matrix {\em (deltai,{} \spad{pi}(i))} (Kronecker delta) if the permutation {\em \spad{pi}} is in list notation and permutes {\em {1,{} 2,{} ...,{} n}}.
638391`\spad{permutationRepresentation([pi1,{} ...,{} pik],{} n)} returns the list of matrices {\em [(deltai,{} pi1(i)),{} ...,{} (deltai,{} pik(i))]} if the permutations {\em pi1},{} ...,{} {\em pik} are in list notation and are permuting {\em {1,{} 2,{} ...,{} n}}.
638502`\spad{permutationRepresentation([pi1,{} ...,{} pik],{} n)} returns the list of matrices {\em [(deltai,{} pi1(i)),{} ...,{} (deltai,{} pik(i))]} (Kronecker delta) for the permutations {\em pi1,{} ...,{} pik} of {\em {1,{} 2,{} ...,{} n}}.
638628`\spad{permutationRepresentation(\spad{pi},{} n)} returns the matrix {\em (deltai,{} \spad{pi}(i))} (Kronecker delta) for a permutation {\em \spad{pi}} of {\em {1,{} 2,{} ...,{} n}}.
638742`\spad{permutations(n)} is the stream of permutations \indented{1}{formed from \spad{1,{} 2,{} 3,{} ...,{} n}.}
638828`\spad{perpendicular(x,{} y)} returns a vector perpendicular to the two vectors in the case of 3D Euclidean space this is the cross the product of two vectors. We use this function to compute orthogonal
638883`\spad{perspective(v,{}s)} displays the graph in perspective if \spad{s} is "on",{} or does not display perspective if \spad{s} is "off" for the given three-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{ThreeDimensionalViewport}.
639006`\spad{Pfaffian(m)} returns the Pfaffian of the matrix \spad{m}. Error: if the matrix is not antisymmetric.
639085`\spad{Pfaffian(m)} returns the Pfaffian of the matrix \spad{m}. Error: if the matrix is not antisymmetric.
639175`\spad{phiCoord(pt)} returns the third element of the point,{} \spad{pt},{} although no assumptions are made as to the coordinate system being used. This function is defined for the convenience of the user dealing with a spherical coordinate system.
639228`\spad{physicalLength(x)} returns the number of elements \spad{x} can accomodate before growing
639375`\spad{physicalLength!(x,{} n)} changes the physical length of \spad{x} to be \spad{n} and returns the new array.
639508`\spad{\spad{pi}(x)} represents the NAG Library function X01AAF which returns \indented{1}{an approximation to the value of \spad{pi}}
639585`\spad{\spad{pi}()} returns the \spad{pi} operator
639725`\spad{\spad{pi}()} returns the constant \spad{pi}.
639780`\spad{\spad{pi}()} returns the symbolic \%\spad{pi}.
639807`\spad{pile(l)} creates the form consisting of the elements of \spad{l} which displays as a pile,{} \spadignore{i.e.} the elements begin on a new line and are indented right to the same margin.
639852`\spad{pivot(A,{} i)} returns the leading entry of the \spad{i}\spad{-}th row of the matrix \spad{A} together with its index.
639935`\spad{pivots(A)} returns all leading entries of the matrix \spad{A} together with their indices.
640100`\spad{plenaryPower(a,{} n)} is recursively defined to be \spad{plenaryPower(a,{} n-1)*plenaryPower(a,{} n-1)} for \spad{n>1} and \spad{a} for \spad{n=1}.
640177`\spad{pleskenSplit(poly,{} eps)} determines a start polynomial {\em start}\\ by using "startPolynomial then it increases the exponent \spad{n} of {\em start ^ n mod poly} to get an approximate factor of {\em poly},{} in general of degree "degree \spad{poly} \spad{-1"}. Then a divisor cascade is calculated and the best splitting is chosen,{} as soon as the error is small enough.
640257`\spad{pleskenSplit(poly,{} eps,{} info)} determines a start polynomial {\em start} by using "startPolynomial then it increases the exponent \spad{n} of {\em start ^ n mod poly} to get an approximate factor of {\em poly},{} in general of degree "degree \spad{poly} \spad{-1"}. Then a divisor cascade is calculated and the best splitting is chosen,{} as soon as the error is small enough. If {\em info} is {\em true},{} t
640257`--hen information messages are issued.
640345`\spad{plot(x,{} r)} \undocumented
640401`\spad{plot(x,{} r)} \undocumented
640455`\spad{plot(f,{} a..b)} plots the function \spad{f(x)} on the interval \spad{[a,{} b]}.
640533`\spad{plot([f1,{} ...,{} fm],{} a..b)} plots the functions \spad{y = f1(x)},{} ...,{} \spad{y = fm(x)} on the interval \spad{a..b}.
640617`\spad{plot(f,{} g,{} a..b)} plots the parametric curve \spad{x = f(t)},{} \spad{y = g(t)} as \spad{t} ranges over the interval \spad{[a,{} b]}.
640722`\spad{plot(f,{} a..b,{} c..d)} plots the function \spad{f(x)} on the interval \spad{[a,{} b]}; \spad{y}-range of \spad{[c,{} d]} is noted in Plot object.
640821`\spad{plot([f1,{} ...,{} fm],{} a..b,{} c..d)} plots the functions \spad{y = f1(x)},{} ...,{} \spad{y = fm(x)} on the interval \spad{a..b}; \spad{y}-range of \spad{[c,{} d]} is noted in Plot object.
640926`\spad{plot(fcn,{} x,{} seg)} plots the graph of \spad{y = f(x)} on a interval
641001`\spad{plot(f,{} g,{} t,{} seg)} plots the graph of \spad{x = f(t)},{} \spad{y = g(t)} as \spad{t} ranges over an interval.
641078`\spad{plot(f,{} g,{} h,{} a..b)} plots {/emx = \spad{f}(\spad{t}),{} \spad{y} = \spad{g}(\spad{t}),{} \spad{z} = \spad{h}(\spad{t})} as \spad{t} ranges over {/em[a,{} \spad{b}]}.
641239`\spad{plot(f,{} g,{} a..b,{} c..d,{} e..f)} plots the parametric curve \spad{x = f(t)},{} \spad{y = g(t)} as \spad{t} ranges over the interval \spad{[a,{} b]}; \spad{x}-range of \spad{[c,{} d]} and \spad{y}-range of \spad{[e,{} f]} are noted in Plot object.
641386`\spad{plot(f1,{} f2,{} f3,{} f4,{} x,{} y,{} z,{} w)} \undocumented
641610`\spad{plotPolar(f)} plots the polar curve \spad{r = f(theta)} as theta ranges over the interval \spad{[0,{} 2*\%\spad{pi}]}; this is the same as the parametric curve \spad{x = f(t) * cos(t)},{} \spad{y = f(t) * sin(t)}.
641672`\spad{plotPolar(f,{} a..b)} plots the polar curve \spad{r = f(theta)} as theta ranges over the interval \spad{[a,{} b]}; this is the same as the parametric curve \spad{x = f(t) * cos(t)},{} \spad{y = f(t) * sin(t)}.
641755`\spad{plotPolar(f,{} theta)} plots the graph of \spad{r = f(theta)} as theta ranges from 0 to 2 \spad{pi}
641814`\spad{plotPolar(f,{} theta,{} seg)} plots the graph of \spad{r = f(theta)} as \spad{theta} ranges over an interval
641894`\spad{plus(x,{} y)} returns \spad{x + y} where \spad{+} is the monoid operation,{} which is assumed commutative.
641947`\spad{plus(x,{} y)} adds two matrices,{} term by term we note that they must be the same size
642015`\spad{plus!(c,{} a,{} b)} computes the matrix sum \spad{a + b} and stores the result in the matrix \spad{c}. Error: if \spad{a},{} \spad{b},{} and \spad{c} do not have the same dimensions.
642114`\spad{plus(s,{} e,{} x)} returns \spad{e * s + x} where \spad{+} is the monoid operation,{} which is assumed commutative.
642168`\spad{plusInfinity()} returns +infinity.
642223`\spad{plusInfinity()} returns plusIinfinity.
642290`\spad{Pm(i,{} ind)} is like \spad{P(i,{} ind)} but \spad{ind} is always a multi-index.
642372`\spad{pmComplexintegrate(f,{} x)} returns either "failed" or \spad{[g,{} h]} such that \spad{integrate(f,{} x) = g + integrate(h,{} x)}. It only looks for special complex integrals that pmintegrate does not return.
642603`\spad{pmintegrate(f,{} x)} returns either "failed" or \spad{[g,{}h]} such that \spad{integrate(f,{} x) = g + integrate(h,{} x)}.
642827`\spad{pmintegrate(f,{} x = a..b)} returns the integral of \spad{f(x)dx} from a to \spad{b} if it can be found by the built-in pattern matching rules.
643061`\spad{Pnan?(p)} returns \spad{true} if any of its elements are not valid DoubleFloat values. Examples of invalid floating point numbers are when we have divided a given element by zero or taken sqrt of negative number at some stage? Note: we can still represent a point at infinity and we can represent points using complex numbers,{} but we do this using projective or conformal space or by using the appropriate instance of SPointCategory,{} not by using i
643061`--nvalid floating point numbers.
643110`\spad{point?(s)} queries whether the \spadtype{ThreeSpace},{} \spad{s},{} is composed of a single component which is a point and returns the boolean result.
643167`\spad{point(s)} checks to see if the \spadtype{ThreeSpace},{} \spad{s},{} is composed of only a single point and if so,{} returns the point. An error is signaled otherwise.
643224`\spad{point(l)} returns a point category defined by a list \spad{l} of elements from the domain \spad{R}.
643275`\spad{point(p)} returns a \spadtype{ThreeSpace} object which is composed of one component,{} the point \spad{p}.
643332`\spad{point(s,{} [x,{} y,{} z])} adds a point component defined by a list of elements which are from the \spad{PointDomain(R)} to the \spadtype{ThreeSpace},{} \spad{s},{} where \spad{R} is the \spadtype{Ring} over which the point elements are defined.
643391`\spad{point(s,{} i)} adds a point component which is placed into a component list of the \spadtype{ThreeSpace},{} \spad{s},{} at the index given by \spad{i}.
643461`\spad{point(s,{} p)} adds a point component defined by the point,{} \spad{p},{} specified as a list from \spad{List(R)},{} to the \spadtype{ThreeSpace},{} \spad{s},{} where \spad{R} is the \spadtype{Ring} over which the point is defined.
643521`\spad{point(\spad{gi},{} pt,{} pal)} modifies the graph \spad{\spad{gi}} of the domain \spadtype{GraphImage} to contain one point component,{} \spad{pt} whose point color is set to be the palette color \spad{pal},{} and whose line color and point size are determined by the default functions \spadfun{lineColorDefault} and \spadfun{pointSizeDefault}.
643590`\spad{point(x1,{} x2,{} x3,{} c)} creates and returns a point from the three specified coordinates \spad{x1},{} \spad{x2},{} \spad{x3},{} and also a fourth coordinate,{} \spad{c},{} which is generally used to specify the color of the point.
643694`\spad{pointColor(v)} specifies a color,{} \spad{v},{} for 2D graph points. This option is expressed in the form \spad{pointColor == v}.
643742`\spad{pointColor(p)} specifies a color index for 2D graph points from the spadcolors palette \spad{p}. This option is expressed in the form \spad{pointColor == p}.
643792`\spad{pointColorDefault()} returns the default color of points in a 2D viewport.
643856`\spad{pointColorDefault(p)} sets the default color of points in a 2D viewport to the palette \spad{p}.
643927`\spad{pointColorPalette(l,{} p)} takes the list of draw options,{} \spad{l},{} and checks the list to see if it contains the option \spad{pointColorPalette}. If the option does not exist the value,{} \spad{p} is returned.
644016`\spad{pointData(s)} returns the list of points from the point data field of the 3 dimensional subspace \spad{s}.
644075`\spad{pointList(me)} returns points at vertices of this mesh.
644127`\spad{pointList(gp)} should be local but conditional
644185`\spad{pointLists(\spad{gi})} returns the list of lists of points which compose the given graph,{} \spad{\spad{gi}},{} of the domain \spadtype{GraphImage}.
644258`\spad{pointPlot(f,{} g,{} h,{} a..b)} plots {/emx = \spad{f}(\spad{t}),{} \spad{y} = \spad{g}(\spad{t}),{} \spad{z} = \spad{h}(\spad{t})} as \spad{t} ranges over {/em[a,{} \spad{b}]}.
644350`\spad{pointPlot(t +-> (f(t),{} g(t)),{} a..b)} plots the parametric curve \spad{x = f(t)},{} \spad{y = g(t)} as \spad{t} ranges over the interval \spad{[a,{} b]}.
644440`\spad{pointPlot(t +-> (f(t),{} g(t)),{} a..b,{} c..d,{} e..f)} plots the parametric curve \spad{x = f(t)},{} \spad{y = g(t)} as \spad{t} ranges over the interval \spad{[a,{} b]}; \spad{x}-range of \spad{[c,{} d]} and \spad{y}-range of \spad{[e,{} f]} are noted in Plot object.
644572`\spad{pointPlot(f,{} x,{} y,{} z,{} w)} \undocumented
644727`\spad{points(v,{} n,{} s)} displays the points of the graph in field \spad{n} of the given two-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{TwoDimensionalViewport},{} if \spad{s} is "on",{} or does not display the points if \spad{s} is "off".
644805`\spad{pointSizeDefault()} returns the default size of the points in a 2D viewport.
644876`\spad{pointSizeDefault(i)} sets the default size of the points in a 2D viewport to \spad{i}.
644962`\spad{poisson(f)} \undocumented
645044`\spad{poissonDistribution(a)} produces a Poisson distribution of variance \spad{a}.
645122`\spad{pol(v)} turns the vector \spad{[v0,{} ...,{} vn]} into the polynomial \spad{v0+v1*x+ ... + vn*x^n}.
645220`\spad{polar(pt)} transforms \spad{pt} from polar coordinates to Cartesian coordinates: the function produced will map the point \spad{(r,{} theta)} to \spad{x = r * cos(theta)} ,{} \spad{y = r * sin(theta)}.
645353`\spad{polarCoordinates(x)} returns (\spad{r},{} phi) such that \spad{x} = \spad{r} * exp(\%\spad{i} * phi).
645493`\spad{polCase(contprod,{} numFacts,{} evallcs)},{} where \spad{contprod} is the product of the content of the leading coefficient of the polynomial to be factored with the content of the evaluated polynomial,{} \spad{numFacts} is the number of factors of the leadingCoefficient,{} and evallcs is the list of the evaluated factors of the leadingCoefficient,{} returns \spad{true} if the factors of the leading C
645493`--oefficient can be distributed with this valuation.
645590`\spad{pole?(x)} tests if the series \spad{x} has a pole. \indented{1}{Note: this is \spad{false} when \spad{x} is a Taylor series.}
645648`\spad{pole?(f)} determines if the power series \spad{f} has a pole.
645718`\spad{PollardSmallFactor(n)} returns a factor of \spad{n} or "failed" if no one is found
645805`\spad{poly_factor(p)} should be local but conditional.
646016`\spad{polygamma(x,{} y)} returns the polygamma function applied to \spad{x} and \spad{y}
646080`\spad{polygamma(k,{} x)} is the \spad{k-th} derivative of \spad{digamma(x)},{} (often written \spad{psi(k,{} x)} in the literature).
646140`\spad{polygamma(n,{} x)} is the \spad{n}-th derivative of \spad{digamma(x)}.
646256`\spad{polygamma(n,{} x)} is the \spad{n}-th derivative of \spad{digamma(x)}.
646354`\spad{polygon?(s)} returns \spad{true} if the \spadtype{ThreeSpace} \spad{s} contains a single polygon component,{} or \spad{false} otherwise.
646413`\spad{polygon(s)} checks to see if the \spadtype{ThreeSpace},{} \spad{s},{} is composed of a single polygon component defined by a list of points,{} and if so,{} returns the list of points; An error is signaled otherwise.
646478`\spad{polygon([p0,{} p1,{} ...,{} pn])} creates a polygon defined by a list of points,{} \spad{p0} through \spad{pn},{} and returns a \spadtype{ThreeSpace} whose component is the polygon.
646543`\spad{polygon(s,{} [[r0],{} [r1],{} ...,{} [rn]])} adds a polygon component defined by a list of points \spad{r0} through \spad{rn},{} which are lists of elements from the domain \spad{PointDomain(m,{} R)} to the \spadtype{ThreeSpace} \spad{s},{} where \spad{m} is the dimension of the points and \spad{R} is the \spadtype{Ring} over which the points are defined.
646610`\spad{polygon(s,{} [p0,{} p1,{} ...,{} pn])} adds a polygon component defined by a list of points,{} \spad{p0} throught \spad{pn},{} to the \spadtype{ThreeSpace} \spad{s}.
646678`\spad{poly_int(f,{} k,{} x)} generates polylogarithms.
646954`\spad{polylog(s,{} x)} is the polylogarithm of order \spad{s} at \spad{x}
647016`\spad{polylog(s,{} x)} is the polylogarithm of order \spad{s} at \spad{x}.
647074`\spad{polynomial(f,{} k)} returns a polynomial consisting of the sum of all terms of \spad{f} of degree \spad{<= k}.
647184`\spad{polynomial(f,{} k)} returns a polynomial consisting of the sum of all terms of \spad{f} of degree \spad{<= k}.
647288`\spad{polynomial(f,{} k1,{} k2)} returns a polynomial consisting of the sum of all terms of \spad{f} of degree \spad{d} with \spad{k1 <= d <= k2}.
647417`\spad{polynomial(f,{} k1,{} k2)} returns a polynomial consisting of the sum of all terms of \spad{f} of degree \spad{d} with \spad{k1 <= d <= k2}.
647540`\spad{polyPart(f)} returns the polynomial part of \spad{f}.
647607`\spad{polyred(u)} \undocumented
647676`\spad{polyRicDE(op,{} zeros)} returns \spad{[[p1,{} L1],{} [p2,{} L2],{} ... ,{} [pk,{} Lk]]} such that the polynomial part of any rational solution of the associated Riccati equation of \spad{op y = 0} must be one of the \spad{pi}\spad{'s} (up to the constant coefficient),{} in which case the equation for \spad{z
647676`-- = y e^{-int p}} is \spad{\spad{Li} z = 0}. \spad{zeros} is a zero finder in \spad{UP}.
647868`\spad{polyRicDE(op,{} zeros)} returns \spad{[[p1,{} L1],{} [p2,{} L2],{} ... ,{} [pk,{} Lk]]} such that the polynomial part of any rational solution of the associated Riccati equation of \spad{op y=0} must be one of the \spad{pi}\spad{'s} (up to the constant coefficient),{} in which case the equation for \spad{z=y e^{-int p}} is \spad{\spad{Li} z =0}. \spad{zeros} is a zero finder in \spad{UP}.
648029`\spad{pomopo!(p1,{} r,{} e,{} p2)} returns \spad{p1 + monomial(e,{} r) * p2} and may use \spad{p1} as workspace. The constant \spad{r} is assumed to be nonzero.
648096`\spad{pop!(s)} returns the top element \spad{x},{} destructively removing \spad{x} from \spad{s}. Note: Use \spad{top(s)} to obtain \spad{x} without removing it from \spad{s}. Error: if \spad{s} is empty.
648141`\spad{popFortranOutputStack()} pops the Fortran output stack
648212`\spad{position(x)} returns the integer \spad{n} associated to \spad{x}.
648272`\spad{position(f)} returns the current byte-position in the file \spad{f}.
648711`\spad{position!(f,{} i)} sets the current byte-position to \spad{i}.
648780`\spad{position(x,{} a)} returns the index \spad{i} of the first occurrence of \spad{x} in a,{} and \spad{minIndex(a) - 1} if there is no such \spad{x}.
648883`\spad{position(p,{} a)} returns the index \spad{i} of the first \spad{x} in \spad{a} such that \spad{p(x)} is \spad{true},{} and \spad{minIndex(a) - 1} if there is no such \spad{x}.
649175`\spad{position(s,{} t,{} i)} returns the position \spad{j} of the substring \spad{s} in string \spad{t},{} where \spad{j >= i} is required.
649239`\spad{position(cc,{} t,{} i)} returns the position \spad{j >= i} in \spad{t} of the first character belonging to \spad{cc}.
649315`\spad{position(x,{} a,{} n)} returns the index \spad{i} of the first occurrence of \spad{x} in \spad{a} where \spad{i >= n},{} and \spad{minIndex(a) - 1} if no such \spad{x} is found.
649530`\spad{positive?(u)} returns \spad{true} if every element of \spad{u} is positive,{} \spad{false} otherwise.
649588`\spad{positive?(x)} tests whether \spad{x} is strictly greater than 0.
649732`\spad{positive?(pol,{} aRoot)} answers if \spad{pol} interpreted as \spad{aRoot} is positive
649896`\spad{positivePower(x,{} n)} computes a positive integral power of the matrix \spad{x}. Error: if the matrix is not square.
649967`\spad{positiveRemainder(a,{} b)} (where \spad{b > 1}) yields \spad{r} where \spad{0 <= r < b} and \spad{r == a rem b}.
650031`\spad{positiveSolve(lp)} returns the same as \spad{positiveSolve(lp,{} false,{} false)}.
650157`\spad{positiveSolve(ts)} returns the points of the regular set of \spad{ts} with (real) strictly positive coordinates.
650282`\spad{positiveSolve(lp)} returns the same as \spad{positiveSolve(lp,{} info?,{} false)}.
650416`\spad{positiveSolve(lp,{} info?,{} lextri?)} returns the set of the points in the variety associated with \spad{lp} whose coordinates are (real) strictly positive. Moreover,{} if \spad{info?} is \spad{true} then some information is displayed during decomposition into regular chains. If \spad{lextri?} is \spad{true} then the lexTriangular algorithm is called from 
650416`--the \spadtype{LexTriangularPackage} constructor (see \spadopFrom{zeroSetSplit}{LexTriangularPackage}(\spad{lp},{} \spad{false})). Otherwise,{} the triangular decomposition is computed directly from the input system by using the \spadopFrom{zeroSetSplit}{RegularChain} from \spadtype{RegularChain}. WARNING: For each set of coordinates given by \spad{positiveSolve(lp,{} info?,{} lextri?)} the ordering of the indeterminates is reversed \spad{w}.\spad{r}.\spad{t}. \spad{ls}.
650794`\spad{possiblyInfinite?(s)} tests if the stream \spad{s} could possibly have an infinite number of elements. Note: for many datatypes,{} \spad{possiblyInfinite?(s) = not explictlyFinite?(s)}.
650859`\spad{possiblyNewVariety?(newlp,{} llp)} returns \spad{true} iff for every \spad{lp} in \spad{llp} certainlySubVariety?(\spad{newlp},{} \spad{lp}) does not hold.
650965`\spad{postfix(op,{} a)} creates a form which prints as: a \spad{op}.
651010`\spad{pow()} \undocumented
651067`\spad{pow(u,{} n,{} d,{} p)} returns u^n truncated after degree \spad{d},{} except if \spad{n=1},{} in which case \spad{u} itself is returned
651181`\spad{power(a,{} f)} returns the power series \spad{f} raised to the power \spad{a}.
651270`\spad{power!(a,{} b,{} c,{} m,{} n)} computes \spad{m} ^ \spad{n} and stores the result in \spad{a}. The matrices \spad{b} and \spad{c} are used to store intermediate results. Error: if \spad{a},{} \spad{b},{} \spad{c},{} and \spad{m} are not square and of the same dimensions.
651399`\spad{powerAssociative?()} tests if all subalgebras generated by a single element are associative.
651478`\spad{powern(r,{} f)} raises power series \spad{f} to the power \spad{r}.
651605`\spad{powers(\spad{li})} returns a list of 2-element lists. For each 2-element list,{} the first element is an entry of \spad{li} and the second element is the multiplicity with which the first element occurs in \spad{li}. There is a 2-element list for each value occurring in \spad{l}.
651673`\spad{powerSum n} is the \spad{n} th power sum symmetric \indented{1}{function.}
651813`\spad{powmod(a,{} b,{} p)},{} \spad{0<=a,{} b<p>1},{} means \spad{a^b mod p}.
651869`\spad{powToUPS should} be local but conditional
652382`\spad{pquo(a,{} b)} computes the pseudo-quotient of \spad{a} by \spad{b},{} both viewed as univariate polynomials in the main variable of \spad{b}.
652511`\spad{pquo(a,{} b,{} v)} computes the pseudo-quotient of \spad{a} by \spad{b},{} both viewed as univariate polynomials in \spad{v}.
652579`\spad{pr2dmp(p)} converts \spad{p} to target domain
652662`\spad{Pr(i,{} ind)} is like \spad{P(i,{} ind)} but \spad{ind} is always a repeated index.
652818`\spad{precision()} returns the number of digits in the model
652875`\spad{precision()} returns the precision in digits base.
652939`\spad{precision(p)} sets the number of digits in the model to \spad{p}
653011`\spad{precision(n)} set the precision in the base to \spad{n} decimal digits.
653116`\spad{precondition(f)} prepares form for formatting.
653184`\spad{predicate(p)} returns the predicate attached to \spad{p},{} the constant function \spad{true} if \spad{p} has no predicates attached to it.
653258`\spad{predicates(p)} returns \spad{[p1,{} ...,{} pn]} such that the predicate attached to \spad{p} is \spad{p1} and ... and \spad{pn}.
653310`\spad{prefix(f,{} l)} creates a form depicting the \spad{n}-ary prefix application of \spad{f} to a tuple of arguments given by list \spad{l}.
653412`\spad{prefix?(s,{} t)} tests if the string \spad{s} is the initial substring of \spad{t}. Note: \spad{prefix?(s,{} t) == reduce(and,{} [s.i = t.i for i in 0..maxIndex s])}.
653467`\spad{prefixRagits(rx)} returns the non-cyclic part of the ragits of the fractional part of a radix expansion. For example,{} if \spad{x = 3/28 = 0.10 714285 714285 ...},{} then \spad{prefixRagits(x)=[1,{} 0]}.
653533`\spad{pre_gauss(m)} performs Gaussian eliminaton on rows of \spad{m} using only 1 and \spad{-1} as pivots. Note: \spad{m} is modified in place
653677`\spad{prem(a,{} b)} computes the pseudo-remainder of \spad{a} by \spad{b},{} both viewed as univariate polynomials in the main variable of \spad{b}.
653806`\spad{prem(a,{} b,{} v)} computes the pseudo-remainder of \spad{a} by \spad{b},{} both viewed as univariate polynomials in \spad{v}.
653874`\spad{prepareDecompose(lp,{} lts,{} b1,{} b2)} is an internal subroutine,{} exported only for developement.
654022`\spad{prepareDecompose(lp,{} lts,{} b1,{} b2)} is an internal subroutine,{} exported only for developement.
654180`\spad{prepareSubResAlgo(p1,{} p2,{} ts)} is an internal subroutine,{} exported only for developement.
654300`\spad{pre_process(lp,{} b1,{} b2)} is an internal subroutine,{} exported only for developement.
654419`\spad{pre_process(lp,{} b1,{} b2)} is an internal subroutine,{} exported only for developement.
654548`\spad{pre_smith(m)} first performs pre_gauss(\spad{m}) and then drops all rows and colums of \spad{m} contaning pivots.
654631`\spad{presub(f,{} n)} creates a form for \spad{f} presubscripted by \spad{n}.
654675`\spad{presuper(f,{} n)} creates a form for \spad{f} presuperscripted by \spad{n}.
654721`\spad{pretendOfType(f)} returns the input form corresponding to \spad{f pretend R}
654795`\spad{previous(l)} returns the doubly-link list beginning with its previous element. Error: if \spad{l} has no previous element. Note: \spad{next(previous(l)) = l}.
654852`\spad{prevPrime(n)} returns the largest prime strictly smaller than \spad{n}
654907`\spad{primaryDecomp(I)} returns a list of primary ideals such that their intersection is the ideal \spad{I}.
655284`\spad{prime(f)} creates the form \spad{f} followed by a suffix prime (single quote).
655526`\spad{prime?(x)} tests if \spad{x} can never be written as the product of two non-units of the ring,{} \spadignore{i.e.} \spad{x} is an irreducible element.
655587`\spad{prime?(\spad{zi})} tests if the complex integer \spad{zi} is prime.
655665`\spad{prime?(n)} returns \spad{true} if \spad{n} is prime and \spad{false} if not. Note that we ignore sign of \spad{n},{} so \spad{-5} is considered prime. The algorithm used is Rabin\spad{'s} probabilistic primality test (reference: Knuth Volume 2 Semi Numerical Algorithms). If \spad{prime? n} returns \spad{false},{} \spad{n} is proven composite. If \spad{prime? n} returns \spad{true},{} prime? may be in error however,{} the probability of err
655665`--or is very low. and is zero below 25*10^9 (due to a result of Pomerance et al),{} below 10^12 and 10^13 due to results of Pinch,{} and below 341550071728321 due to a result of Jaeschke. Specifically,{} this implementation does at least 10 pseudo prime tests and so the probability of error is \spad{< 4^(-10)}. The running time of this method is cubic in the length of the input \spad{n},{} that is \spad{O( (log n)^3 )},{} for \spad{n<10^20}. beyond that,{} the algorithm is quartic,{} \spad{O( (l
655665`--og n)^4 )}. Two improvements due to Davenport have been incorporated which catches some trivial strong pseudo-primes,{} such as [Jaeschke,{} 1991] 1377161253229053 * 413148375987157,{} which the original algorithm regards as prime
655723`\spad{prime?(I)} tests if the ideal \spad{I} is prime.
655940`\spad{prime(f,{} n)} creates the form \spad{f} followed by \spad{n} primes.
655999`\spad{primeFactor(base,{} exponent)} creates a factored object with a single factor whose \spad{base} is asserted to be prime (flag = "prime").
656115`\spad{primeFrobenius(a)} returns \spad{a ^ p} where \spad{p} is the characteristic.
656261`\spad{primeFrobenius(a,{} s)} returns \spad{a^(p^s)} where \spad{p} is the characteristic.
656345`\spad{primes(a,{} b)} returns a list of all primes \spad{p} with \spad{a <= p <= b}
656405`primext(',{} ext,{} csolve,{} [\spad{g1},{} ...,{} \spad{gn}]) returns a basis of solutions of the homogeneous system \spad{h' + c1*g1 + ... + cn*gn = 0}. Argument ext is an extended integration function on \spad{F}. csolve is solver over constants.
656636`\spad{primintegrate(f,{} ',{} foo)} returns \spad{[g,{} a]} such that \spad{f = g' + a},{} and \spad{a = 0} or \spad{a} has no integral in UP. Argument foo is an extended integration function on \spad{F}.
656977`\spad{primitive?(f)} tests whether the polynomial \spad{f} over a finite field is primitive,{} \spadignore{i.e.} all its roots are primitive.
657077`\spad{primitive?(b)} tests whether the element \spad{b} is a generator of the (cyclic) multiplicative group of the field,{} \spadignore{i.e.} is a primitive element. Implementation Note: see \spad{ch}.IX.1.3,{} th.2 in \spad{D}. Lipson.
657136`\spad{primitiveElement()} returns a primitive element stored in a global variable in the domain. At first call,{} the primitive element is computed by calling \spadfun{createPrimitiveElement}.
657194`\spad{primitiveElement([a1,{} ...,{} an])} returns \spad{[a,{} [q1,{} ...,{} qn],{} q]} such that then \spad{k(a1,{} ...,{} an) = k(a)},{} \spad{\spad{ai} = \spad{qi}(a)},{} and \spad{q(a) = 0}. This operation uses the technique of \spadglossSee{groebner bases}{Groebner basis}.
657365`\spad{primitiveElement([p1,{} ...,{} pn],{} [a1,{} ...,{} an])} returns \spad{[[c1,{} ...,{} cn],{} [q1,{} ...,{} qn],{} q]} such that then \spad{k(a1,{} ...,{} an) = k(a)},{} where \spad{a = a1 c1 + ... + an cn},{} \spad{\spad{ai} = \spad{qi}(a)},{} and \spad{q(a) = 0}. The \spad{pi}\spad{'s} are the defining polyn
657365`--omials for the \spad{ai}\spad{'s}. This operation uses the technique of \spadglossSee{groebner bases}{Groebner basis}.
657555`\spad{primitiveElement(a1,{} a2)} returns \spad{[a,{} q1,{} q2,{} q]} such that \spad{k(a1,{} a2) = k(a)},{} \spad{\spad{ai} = \spad{qi}(a)},{} and \spad{q(a) = 0}. The minimal polynomial for \spad{a2} may involve \spad{a1},{} but the minimal polynomial for \spad{a1} may not invo
657555`--lve \spad{a2}; This operations uses \spadfun{resultant}.
657782`\spad{primitiveElement([p1,{} ...,{} pn],{} [a1,{} ...,{} an],{} a)} returns \spad{[[c1,{} ...,{} cn],{} [q1,{} ...,{} qn],{} q]} such that then \spad{k(a1,{} ...,{} an) = k(a)},{} where \spad{a = a1 c1 + ... + an cn},{} \spad{\spad{ai} = \spad{qi}(a)},{} and \spad{q(a) = 0}. The \spad{pi}\spad{'s} are the de
657782`--fining polynomials for the \spad{ai}\spad{'s}. This operation uses the technique of \spadglossSee{groebner bases}{Groebner basis}.
657979`\spad{primitiveElement(p1,{} a1,{} p2,{} a2)} returns \spad{[c1,{} c2,{} q]} such that \spad{k(a1,{} a2) = k(a)} where \spad{a = c1 a1 + c2 a2,{} and q(a) = 0}. The \spad{pi}\spad{'s} are the defining polynomials for the \spad{ai}\spad{'s}. The \spad{p2} may involve \spad{a1},{} but \spad{p1} must not involve \spad{a2}. This operation use
657979`--s \spadfun{resultant}.
658146`\spad{primitiveMonomials(p)} gives the list of monomials of the polynomial \spad{p} with their coefficients removed. Note: \spad{primitiveMonomials(sum(a_(i) X^(i))) = [X^(1),{} ...,{} X^(n)]}.
658663`\spad{primitivePart(p)} returns the unit normalized form of polynomial \spad{p} divided by the content of \spad{p}.
658745`\spad{primitivePart(f)} removes the content of the denominator and the common content of the numerator of \spad{f}.
658815`\spad{primitivePart(p)} returns the unitCanonical associate of the polynomial \spad{p} with its content divided out.
658899`\spad{primitivePart!(p)} replaces \spad{p} by its primitive part.
658988`\spad{primitivePart(l)} returns \spad{l0} such that \spad{l = a * l0} for some a in \spad{R},{} and \spad{content(l0) = 1}.
659148`\spad{primitivePart(p,{} q)} reduces the coefficient of \spad{p} modulo \spad{q},{} takes the primitive part of the result,{} and ensures that the leading coefficient of that result is monic.
659235`\spad{primitivePart(p,{} v)} returns the unitCanonical associate of the polynomial \spad{p} with its content with respect to the variable \spad{v} divided out.
659326`\spad{primitiveRowEchelon(A)} computes a row echelon form for the matrix \spad{A}. The algorithm used is fraction-free elimination. Every row is made primitive by division by the \spad{gcd}. The algorithm is especially adapted to matrices already close to row echelon form. The transformation matrix,{} the used pivots and the rank of the matrix are
659326`-- also returned.
659645`\spad{primPartElseUnitCanonical!(p)} replaces \spad{p} by \spad{primPartElseUnitCanonical(p)}.
659751`\spad{primPartElseUnitCanonical(p)} returns \spad{primitivePart(p)} if \spad{R} is a \spad{gcd}-domain,{} otherwise \spad{unitCanonical(p)}.
659856`\spad{prinb }\undocumented
660010`\spad{principal?(D)} tests if the argument is the divisor of a function.
660172`\spad{principalIdeal([f1,{} ...,{} fn])} returns a record whose generator component is a generator of the ideal generated by \spad{[f1,{} ...,{} fn]} whose coef component satisfies \spad{generator = sum (input.i * coef.i)}
660482`\spad{prindINFO }\undocumented
660665`\spad{prinpolINFO }\undocumented
660757`\spad{prinshINFO }\undocumented
660842`\spad{print(u)} prints the form \spad{u}.
660884`\spad{print(o)} writes the output form \spad{o} on standard output using the two-dimensional formatter.
660936`\spad{printCode(f)} prints out \spad{f} in FORTRAN notation.
660983`\spad{printHeader()} produces the FORTRAN header for the current subprogram in the global symbol table on the current FORTRAN output stream.
661033`\spad{printHeader(f)} produces the FORTRAN header for subprogram \spad{f} in the global symbol table on the current FORTRAN output stream.
661089`\spad{printHeader(f,{} tab)} produces the FORTRAN header for subprogram \spad{f} in symbol table tab on the current FORTRAN output stream.
661148`\spad{printInfo!(x,{} y)} initializes the mesages to be printed when manipulating items from the hash-table. If a key is retrieved then \spad{x} is displayed. If an item is stored then \spad{y} is displayed.
661492`\spad{printingInfo?()} returns \spad{true} iff messages are printed when manipulating items from the hash-table.
661571`\spad{printStatement(l)} creates a representation of a PRINT statement.
661635`\spad{printStats!()} prints the statistics.
661709`\spad{printSys(sys)} writes a list of functions as a vector of equations (with right hand side 0) and coerces the result to \spadtype{OutputForm}.
661784`\spad{printTypes(tab)} produces FORTRAN type declarations from \spad{tab},{} on the current FORTRAN output stream
661832`\spad{printTypes(tab)} produces FORTRAN type declarations from \spad{tab},{} on the current FORTRAN output stream
661887`\spad{probablyZeroDim?(lp)} returns \spad{true} iff the number of polynomials in \spad{lp} is not smaller than the number of variables occurring in these polynomials.
661976`\spad{processTemplate(tp)} processes the template \spad{tp},{} writing the result to the current FORTRAN output stream.
662043`\spad{processTemplate(tp,{} fn)} processes the template \spad{tp},{} writing the result out to \spad{fn}.
662119`\spad{prod(expr)} creates the form prefixing \spad{expr} by a capital \spad{pi}.
662158`\spad{prod(expr,{} lowerlimit)} creates the form prefixing \spad{expr} by a capital \spad{pi} with a lowerlimit.
662200`\spad{prod(expr,{} lowerlimit,{} upperlimit)} creates the form prefixing \spad{expr} by a capital \spad{pi} with both a \spad{lowerlimit} and upperlimit.
662245`\spad{prodiag(x)} performs "diagonal" infinite product of a stream of streams. When \spad{x(i)} is interpreted as stream of coefficients of series \spad{f_i(z),{} i=1,{}...},{} then \spad{prodiag(x) = (1 + z*f_1(z))*(1 + z^2*f_2(x))*...}
662330`\spad{product(f(n),{} n = a..b)} returns \spad{f}(a) * ... * \spad{f}(\spad{b}) as a formal product.
662404`\spad{product(f(n),{} n)} returns the formal product \spad{P}(\spad{n}) which verifies \spad{P}(\spad{n+1})\spad{/P}(\spad{n}) = \spad{f}(\spad{n}).
662467`\spad{product(a,{} b)} is the degree-preserving \spad{R}-linear product: \blankline \indented{2}{\spad{degree product(a,{} b) = degree a + degree b}} \indented{2}{\spad{product(a1+a2,{} b) = product(a1,{} b) + product(a2,{} b)}} \indented{2}{\spad{product(a,{} b1+b2) = product(a,{} b1) + product(a,{} b2)}} \indented{2}{\spad{product(r*a,{} b) = product(a,{} r*b) = r*product(a,{} b)}} \indented{2}{\spad{product(a,{} product(b,{} c)) = product(product(
662467`--a,{} b),{} c)}}
662520`\spad{product(s,{} t)} is the outer product of the tensors \spad{s} and \spad{t}. For example,{} if \spad{r = product(s,{} t)} for rank 2 tensors \spad{s} and \spad{t},{} then \spad{r} is a rank 4 tensor given by \indented{4}{\spad{r(i,{} j,{} k,{} l) = s(i,{} j)*t(k,{} l)}.}
662583`\spad{product(f(n),{} n = a..b)} returns \spad{f}(a) * ... * \spad{f}(\spad{b}) as a formal product.
662658`\spad{product(f(n),{} n)} returns the formal product \spad{P}(\spad{n}) which verifies \spad{P}(\spad{n+1})\spad{/P}(\spad{n}) = \spad{f}(\spad{n}).
662721`\spad{product(a,{} b,{} n)} returns \spad{a*b} (truncated up to order \spad{n}).
662799`\spad{project(de,{} q)} projects the differential equation \spad{de} of order higher than \spad{q} into the \spad{q}\spad{-}th order jet bundle.
662879`\spad{projection(c)} projects \spad{c} with respect to main variable
662944`\spad{projectionSet(lup)} performs one projection step
663108`\spad{prolateSpheroidal(a)} transforms from prolate spheroidal coordinates to Cartesian coordinates: \spad{prolateSpheroidal(a)} is a function which will map the point \spad{(\spad{xi},{} eta,{} phi)} to \spad{x = a*sinh(\spad{xi})*sin(eta)*cos(phi)},{} \spad{y = a*sinh(\spad{xi})*sin(eta)*sin(phi)},{} \spad{z = a*cosh(\spad{xi})*cos(eta)}.
663187`\spad{prologue(t)} extracts the prologue section of a formatted object \spad{t}.
663249`\spad{prologue(t)} extracts the prologue section of a TeX form \spad{t}.
663301`\spad{prolong(de)} prolongs the differential equation \spad{de}. Additionally the arising integrability conditions are returned.
663385`\spad{prolong(v,{} q)} prolongs a vector field \spad{v} defined on the base space into the jet bundle of order \spad{q}.
663456`\spad{prolong(de,{} q)} is like \spad{prolong(de)}. However,{} only equations of lower order than \spad{q} are prolonged.
663559`\spad{prolongMV(mv)} calculates the number of multiplicative variables for the prolongation of an involutive symbol.
663802`\spad{prolongSymbol(symb)} prolongs directly the symbol \spad{symb}.
663915`\spad{properties(op)} returns the list of all the properties currently attached to \spad{op}.
663989`\spad{property(op,{} s)} returns the value of property \spad{s} if it is attached to \spad{op},{} and "failed" otherwise.
664060`Constructs a proposition
664106`\spad{pseudoDivide(P,{} Q)} computes the pseudoDivide of \spad{P} by \spad{Q}.
664422`\spad{pseudoDivide(p,{} q)} returns \spad{[c,{} q,{} r]},{} when \spad{p' := p*lc(q)^(deg p - deg q + 1) = c * p} is pseudo right-divided by \spad{q},{} \spadignore{i.e.} \spad{p' = s q + r}.
664551`\spad{pseudoDivide(a,{} b)} computes \spad{[pquo(a,{} b),{} prem(a,{} b)]},{} both polynomials viewed as univariate polynomials in the main variable of \spad{b},{} if \spad{b} is not a constant polynomial.
664723`\spad{pseudoQuotient(p,{} q)} returns \spad{r},{} the quotient when \spad{p' := p*lc(q)^(deg p - deg q + 1)} is pseudo right-divided by \spad{q},{} \spadignore{i.e.} \spad{p' = s q + r}.
664817`\spad{pseudoRem(x,{} y,{} m)} computes pseudoremainder of \spad{x} by \spad{y} modulo \spad{m}.
664900`\spad{pseudoRemainder(p,{} q)} = \spad{r},{} for polynomials \spad{p} and \spad{q},{} returns the remainder \spad{r} when \spad{p' := p*lc(q)^(deg p - deg q + 1)} is pseudo right-divided by \spad{q},{} \spadignore{i.e.} \spad{p' = s q + r}.
664985`\spad{psolve(c)} solves the homogeneous linear system \spad{c} \spad{z} = 0 for all possible ranks of the matrix \spad{c}
665231`\spad{psolve(c,{} w)} solves \spad{c} \spad{z} = \spad{w} for all possible ranks of the matrix \spad{c} and given right hand side vector \spad{w}
665486`\spad{psolve(c,{} w)} solves \spad{c} \spad{z} = \spad{w} for all possible ranks of the matrix \spad{c} and indeterminate right hand side \spad{w}
665745`\spad{psolve(c)} solves the homogeneous linear system \spad{c} \spad{z} = 0 for all possible ranks \spad{>=} \spad{k} of the matrix \spad{c}
666007`\spad{psolve(c,{} s)} solves \spad{c} \spad{z} = 0 for all possible ranks of the matrix \spad{c} and given right hand side vector \spad{w},{} writes the results to a file named \spad{s},{} and returns the number of regimes
666099`\spad{psolve(c,{} w,{} k)} solves \spad{c} \spad{z} = \spad{w} for all possible ranks \spad{>=} \spad{k} of the matrix \spad{c} and given right hand side vector \spad{w}
666370`\spad{psolve(c,{} w,{} s)} solves \spad{c} \spad{z} = \spad{w} for all possible ranks of the matrix \spad{c} and given right hand side vector \spad{w},{} writes the results to a file named \spad{s},{} and returns the number of regimes
666471`\spad{psolve(c,{} w,{} k)} solves \spad{c} \spad{z} = \spad{w} for all possible ranks \spad{>=} \spad{k} of the matrix \spad{c} and indeterminate right hand side \spad{w}
666746`\spad{psolve(c,{} w,{} s)} solves \spad{c} \spad{z} = \spad{w} for all possible ranks of the matrix \spad{c} and indeterminate right hand side \spad{w},{} writes the results to a file named \spad{s},{} and returns the number of regimes
666851`\spad{psolve(c,{} k,{} s)} solves \spad{c} \spad{z} = 0 for all possible ranks \spad{>=} \spad{k} of the matrix \spad{c},{} writes the results to a file named \spad{s},{} and returns the number of regimes
666959`\spad{psolve(c,{} w,{} k,{} s)} solves \spad{c} \spad{z} = \spad{w} for all possible ranks \spad{>=} \spad{k} of the matrix \spad{c} and given right hand side \spad{w},{} writes the results to a file named \spad{s},{} and returns the number of regimes
667076`\spad{psolve(c,{} w,{} k,{} s)} solves \spad{c} \spad{z} = \spad{w} for all possible ranks \spad{>=} \spad{k} of the matrix \spad{c} and indeterminate right hand side \spad{w},{} writes the results to a file named \spad{s},{} and returns the number of regimes
667197`\spad{ptFunc(a,{} b,{} c,{} d)} is an internal function exported in order to compile packages.
667474`\spad{pToDmp(p)} converts \spad{p} from a \spadtype{POLY} to a \spadtype{DMP}.
667567`\spad{pToHdmp(p)} converts \spad{p} from a \spadtype{POLY} to a \spadtype{HDMP}.
667672`\spad{ptree(s)} is a leaf? pendant tree
667715`\spad{ptree(x,{} y)} \undocumented
667762`\spad{puiseux(f)} returns a Puiseux expansion of the expression \spad{f}. Note: \spad{f} should have only one variable; the series will be expanded in powers of that variable.
667834`\spad{puiseux(x)} returns \spad{x} viewed as a Puiseux series.
667910`\spad{puiseux(f,{} x = a)} expands the expression \spad{f} as a Puiseux series in powers of \spad{(x - a)}.
667995`\spad{puiseux(f,{} n)} returns a Puiseux expansion of the expression \spad{f}. Note: \spad{f} should have only one variable; the series will be expanded in powers of that variable and terms will be computed up to order at least \spad{n}.
668085`\spad{puiseux(r,{} f(x))} returns \spad{f(x^r)}.
668188`\spad{puiseux(f,{} x = a,{} n)} expands the expression \spad{f} as a Puiseux series in powers of \spad{(x - a)}; terms will be computed up to order at least \spad{n}.
668291`\spad{puiseux(n +-> a(n),{} x = a,{} r0..,{} r)} returns \spad{sum(n = r0,{} r0 + r,{} r0 + 2*r...,{} a(n) * (x - a)^n)}; \spad{puiseux(n +-> a(n),{} x = a,{} r0..r1,{} r)} returns \spad{sum(n = r0 + k*r while n <= r1,{} a(n) * (x - a)^n)}.
668447`\spad{puiseux(a(n),{} n,{} x = a,{} r0..,{} r)} returns \spad{sum(n = r0,{} r0 + r,{} r0 + 2*r...,{} a(n) * (x - a)^n)}; \spad{puiseux(a(n),{} n,{} x = a,{} r0..r1,{} r)} returns \spad{sum(n = r0 + k*r while n <= r1,{} a(n) * (x - a)^n)}.
668589`\spad{pureLex(v1,{} v2)} return \spad{true} if the vector \spad{v1} is less than the vector \spad{v2} in the lexicographic ordering.
668747`\spad{purelyAlgebraic?(ts)} returns \spad{true} iff for every algebraic variable \spad{v} of \spad{ts} we have \spad{algebraicCoefficients?(t_v,{} ts_v_-)} where \spad{ts_v} is \spadopFrom{select}{TriangularSetCategory}(\spad{ts},{} \spad{v}) and \spad{ts_v_-} is \spadopFrom{collectUnder}{TriangularSetCategory}(\spad{ts},{} \spad{v}).
668912`\spad{purelyAlgebraic?(p,{} ts)} returns \spad{true} iff every variable of \spad{p} is algebraic \spad{w}.\spad{r}.\spad{t}. \spad{ts}.
669094`\spad{purelyAlgebraicLeadingMonomial?(p,{} ts)} returns \spad{true} iff the main variable of any non-constant iterarted initial of \spad{p} is algebraic \spad{w}.\spad{r}.\spad{t}. \spad{ts}.
669281`\spad{purelyTranscendental?(p,{} ts)} returns \spad{true} iff every variable of \spad{p} is not algebraic \spad{w}.\spad{r}.\spad{t}. \spad{ts}
669371`\spad{purge!(A,{} crit)} eliminates all columns belonging to an index \spad{c} such that \spad{crit(c)} yields \spad{true}.
669441`\spad{push!(x,{} s)} pushes \spad{x} onto stack \spad{s},{} \spadignore{i.e.} destructively changing \spad{s} so as to have a new first (top) element \spad{x}. Afterwards,{} pop!(\spad{s}) produces \spad{x} and pop!(\spad{s}) produces the original \spad{s}.
669489`\spad{pushdown(p,{} lv)} \undocumented{}
669558`\spad{pushdown(p,{} v)} \undocumented{}
669621`\spad{pushdown(prf,{} var)} pushes all top level occurences of the variable var into the coefficient domain for the polynomial \spad{prf}.
669705`\spad{pushdterm(monom,{} var)} pushes all top level occurences of the variable var into the coefficient domain for the monomial \spad{monom}.
669818`\spad{pushFortranOutputStack(f)} pushes \spad{f} onto the Fortran output stack
669898`\spad{pushFortranOutputStack(f)} pushes \spad{f} onto the Fortran output stack
669976`\spad{pushucoef(upoly,{} var)} converts the anonymous univariate polynomial \spad{upoly} to a polynomial in var over rational functions.
670099`\spad{pushuconst(r,{} var)} takes a rational function and raises all occurances of the variable var to the polynomial level.
670205`\spad{pushup(p,{} lv)} \undocumented{}
670272`\spad{pushup(p,{} v)} \undocumented{}
670333`\spad{pushup(prf,{} var)} raises all occurences of the variable var in the coefficients of the polynomial \spad{prf} back to the polynomial level.
670415`\spad{putColorInfo(llp,{} lpal)} takes a list of list of points,{} \spad{llp},{} and returns the points with their hue and shade components set according to the list of palette colors,{} \spad{lpal}.
670532`\spad{putGraph(v,{} \spad{gi},{} n)} sets the graph field indicated by \spad{n},{} of the indicated two-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{TwoDimensionalViewport},{} to be the graph,{} \spad{\spad{gi}} of domain \spadtype{GraphImage}. The contents of viewport,{} \spad{v},{} will contain \spad{\spad{gi}} when the function \spadfun{makeViewport2D} is called to create the an updated viewport \
670532`--spad{v}.
670616`\spad{qcoerce(n)} coerces \spad{n} to \spad{\%} trusting that \spad{n} is nonnegative
670671`\spad{qcoerce(n)} coerces \spad{n} to \spad{\%} trusting that \spad{n} is positive
670723`\spad{qconvert(x)} converts \spad{x} to \% trusting that \spad{x} is in correct range.
670774`\spad{qcumulant2nthmoment(q,{} cc,{} n)} computes the \spad{n}th moment from the sequence of reduced \spad{q}-cumulants \spad{cc}
670917`\spad{qelt(u,{} x)} applies \spad{u} to \spad{x} without checking whether \spad{x} is in the domain of \spad{u}. If \spad{x} is not in the domain of \spad{u} a memory-access violation may occur. If a check on whether \spad{x} is in the domain of \spad{u} is required,{} use the function \spad{elt}.
670974`\spad{qelt(m,{} i,{} j)} returns the element in the \spad{i}th row and \spad{j}th column of the matrix \spad{m}. Note: there is NO error check to determine if indices are in the proper ranges.
671058`\spad{qelt(m,{} i,{} j)} returns the element in the \spad{i}th row and \spad{j}th column of the array \spad{m} NO error check to determine if indices are in proper ranges
671140`\spad{qinterval(inf,{} sup)} creates a new interval \spad{[inf,{} sup]},{} without checking the ordering on the elements.
671194`\spad{qlog(x)} computes natural logarithm of \spad{x}. It assumes that \spad{x > 0}.
671234`\spad{qnew(n)} creates a new uninitialized vector of length \spad{n}.
671292`\spad{qnew(n)} creates a new uninitialized vector of length \spad{n}.
671343`\spad{qnew(n,{} m)} creates a new uninitialized \spad{n} by \spad{m} matrix.
671409`\spad{qnew(n,{} m)} creates a new uninitialized \spad{n} by \spad{m} matrix.
671468`\spad{qnew(n,{} m)} creates a new uninitialized \spad{n} by \spad{m} matrix.
671519`\spad{qnew(n,{} m)} creates a new uninitialized \spad{n} by \spad{m} matrix.
671570`\spad{qnew(n,{} m)} creates a new uninitialized \spad{n} by \spad{m} matrix.
671620`\spad{qnew(m,{} n)} is is an \spad{m}-by-\spad{n} uninitilized array
671722`\spad{qPot(v,{} e)} computes \spad{v^(q^e)},{} interpreting \spad{v} as an element of normal basis field,{} \spad{q} the size of the ground field. This is done by a cyclic \spad{e}-shift of the vector \spad{v}.
671809`\spad{qroot(f,{} n)} returns \spad{[m,{} c,{} r]} such that \spad{f^(1/n) = c * r^(1/m)}.
672011`\spad{qsetelt!(u,{} x,{} y)} sets the image of \spad{x} to be \spad{y} under \spad{u},{} without checking that \spad{x} is in the domain of \spad{u}. If such a check is required use the function \spad{setelt}.
672099`\spad{qsetelt!(m,{} i,{} j,{} r)} sets the element in the \spad{i}th row and \spad{j}th column of \spad{m} to \spad{r} NO error check to determine if indices are in proper ranges
672187`setfirst!(\spad{u},{} \spad{x}) destructively changes the first element of \spad{u} to \spad{x} without checking for errors.
672273`setrest!(\spad{u},{} \spad{v}) destructively changes the rest of \spad{u} to \spad{v} without checking for errors.
672360`\spad{qShiftAction(q,{} k,{} l,{} g)} gives the coefficient of \spad{x^k} in \spad{z^l} \spad{g}(\spad{x}),{} where \spad{z*}(a+b*x+c*x^2+d*x^3+...) = (a+q*b*x+q^2*c*x^2+q^3*d*x^3+...). In terms of sequences,{} z*u(\spad{n})=q^n*u(\spad{n}).
672464`\spad{qShiftC} gives the coefficients \spad{c_}{\spad{k},{} \spad{k}} in the expansion <x^k> \spad{z} \spad{g}(\spad{x}) = sum_{\spad{i=0}}\spad{^k} \spad{c_}{\spad{k},{} \spad{i}} <x^i> \spad{g}(\spad{x}),{} where \spad{z} acts on \spad{g}(\spad{x}) by shifting. In fact,{} the result is [1,{} \spad{q},{} \spad{q^2},{} ...]
672548`\spad{qsqrt(x)} computes square root of \spad{x}. It assumes that \spad{x >= 0}.
672589`\spad{quadratic(u)} \undocumented
672659`\spad{quadratic(f,{} g,{} h)} \undocumented
672732`\spad{quadraticForm(m)} creates a quadratic form from a symmetric,{} square matrix \spad{m}.
672803`\spad{quadraticNorm(f)} returns the \spad{l2} norm of the polynomial \spad{f}.
672881`\spad{quartic(u)} \undocumented
672949`\spad{quartic(f,{} g,{} h,{} i,{} j)} \undocumented
673024`\spad{quasiAlgebraicSet(pl,{} q)} returns the quasi-algebraic set with defining equations \spad{p} = 0 for \spad{p} belonging to the list \spad{pl},{} and defining inequation \spad{q} \spad{~=} 0.
673215`\spad{quasiComponent(ts)} returns \spad{[lp,{} lq]} where \spad{lp} is the list of the members of \spad{ts} and \spad{lq}is \spad{initials(ts)}.
673388`\spad{quasiMonic?(p)} returns \spad{false} if \spad{p} belongs to \spad{R},{} otherwise returns \spad{true} iff the initial of \spad{p} lies in the base ring \spad{R}.
673463`\spad{quasiMonicPolynomials(lp)} returns \spad{qmps,{} nqmps} where \spad{qmps} is a list of the quasi-monic polynomials in \spad{lp} and \spad{nqmps} are the other ones.
673590`\spad{quasiRegular(x)} return \spad{x} minus its constant term.
673647`\spad{quasiRegular?(x)} return \spad{true} if \spad{constant(p)} is zero.
673710`\spad{quasiRegular(x)} return \spad{x} minus its constant term.
673765`\spad{quasiRegular?(x)} return \spad{true} if \spad{constant(x)} is zero.
673826`\spad{quatern(r,{} i,{} j,{} k)} constructs a quaternion from scalars.
673884`\spad{queue([x,{} y,{} ...,{} z])} creates a queue with first (top) element \spad{x},{} second element \spad{y},{} ...,{} and last (bottom) element \spad{z}.
673927`\spad{quickSort(f,{} agg)} sorts the aggregate agg with the ordering function \spad{f} using the quicksort algorithm.
674004`\spad{f quo g} creates the equivalent infix form.
674131`\spad{x quo y} is the same as \spad{divide(x,{} y).quotient}. See \spadfunFrom{divide}{EuclideanDomain}.
674177`\spad{a quo b} returns the quotient of \spad{a} and \spad{b},{} forgetting the remainder.
674226`\spad{quoByVar(a0 + a1 x + a2 x^2 + ...)} returns \spad{a1 + a2 x + a3 x^2 + ...} Thus,{} this function substracts the constant term and divides by the series variable. This function is used when Laurent series are represented by a Taylor series and an order.
674295`\spad{quote()} provides the string quote character,{} \spad{"}.
674332`\spad{quote(f)} creates the form \spad{f} with a prefix quote.
674372`\spad{quoted?(p)} tests if \spad{p} is of the form \spad{'s} for a symbol \spad{s}.
674419`\spad{quotedOperators(r)} returns the list of operators on the right hand side of \spad{r} that are considered quoted,{} that is they are not evaluated during any rewrite,{} but just applied formally to their arguments.
674490`\spad{quotient(I,{} J)} computes the quotient of the ideals \spad{I} and \spad{J},{} \spad{(I: J)}.
674563`\spad{quotient(I,{} f)} computes the quotient of the ideal \spad{I} by the principal ideal generated by the polynomial \spad{f},{} \spad{(I: (f))}.
674639`\spad{quotientByP(x)} returns \spad{b},{} where \spad{x = a + b p}.
674698`\spad{R1_to_R2_coercion should} be local but conditional
674769`\spad{r2m(ind)} transforms a repeated index into a multi-index.
674855`\spad{r2m(ind)} transforms a repeated index into a multi-index.
674945`Undocumented
675022`Undocumented.
675088`Undocumented
675153`Undocumented
675221`Undocumented.
675278`Undocumented
675334`\spad{radical(I)} returns the radical of the ideal \spad{I}.
675699`\spad{radicalEigenvalues(m)} computes the eigenvalues of the matrix \spad{m}; when possible,{} the eigenvalues are expressed in terms of radicals.
675819`\spad{radicalEigenvector(c,{} m)} computes the eigenvector(\spad{s}) of the matrix \spad{m} corresponding to the eigenvalue \spad{c}; when possible,{} values are expressed in terms of radicals.
675967`\spad{radicalEigenvectors(m)} computes the eigenvalues and the corresponding eigenvectors of the matrix \spad{m}; when possible,{} values are expressed in terms of radicals.
676161`\spad{radicalOfLeftTraceForm()} returns basis for null space of \spad{leftTraceMatrix()},{} if the algebra is associative,{} alternative or a Jordan algebra,{} then this space equals the radical (maximal nil ideal) of the algebra.
676230`\spad{radicalRoots(rf,{} x)} finds the roots expressed in terms of radicals of the rational function \spad{rf} with respect to the symbol \spad{x}.
676334`\spad{radicalRoots(lrf,{} lvar)} finds the roots expressed in terms of radicals of the list of rational functions \spad{lrf} with respect to the list of symbols lvar.
676456`\spad{radicalSimplify(s)} returns a different and presumably simpler representation of \spad{s} with the defining polynomials for the equ
676456`--ations forming a groebner basis,{} and the defining polynomial for the inequation reduced with respect to the basis,{} using using groebner basis of radical ideals
676826`\spad{radicalSolve(eq)} finds the solutions expressed in terms of radicals of the equation of rational functions \spad{eq} with respect to the unique symbol \spad{x} appearing in \spad{eq}.
676943`\spad{radicalSolve(rf)} finds the solutions expressed in terms of radicals of the equation \spad{rf} = 0,{} where \spad{rf} is a univariate rational function.
677050`\spad{radicalSolve(leq)} finds the solutions expressed in terms of radicals of the system of equations of rational functions \spad{leq} with respect to all symbols appearing in \spad{leq}.
677179`\spad{radicalSolve(lrf)} finds the solutions expressed in terms of radicals of the system of equations \spad{lrf} = 0,{} where \spad{lrf} is a list of rational functions.
677298`\spad{radicalSolve(eq,{} x)} finds the solutions expressed in terms of radicals of the equation of rational functions \spad{eq} with respect to the symbol \spad{x}.
677422`\spad{radicalSolve(rf,{} x)} finds the solutions expressed in terms of radicals of the equation \spad{rf} = 0 with respect to the symbol \spad{x},{} where \spad{rf} is a rational function.
677536`\spad{radicalSolve(leq,{} lvar)} finds the solutions expressed in terms of radicals of the system of equations of rational functions \spad{leq} with respect to the list of symbols lvar.
677678`\spad{radicalSolve(lrf,{} lvar)} finds the solutions expressed in terms of radicals of the system of equations \spad{lrf} = 0 with respect to the list of symbols lvar,{} where \spad{lrf} is a list of rational functions.
677810`\spad{radix(x,{} b)} converts \spad{x} to a radix expansion in base \spad{b}.
677878`\spad{radPoly(p(x,{} y))} returns \spad{[c(x),{} n]} if \spad{p} is of the form \spad{y^n - c(x)},{} "failed" otherwise.
678005`\spad{raisePolynomial(rpoly)} converts \spad{rpoly} from a univariate polynomial over \spad{r} to be a univariate polynomial with polynomial coefficients.
678127`\spad{ramified?(a)} tests whether \spad{x = a} is ramified.
678197`\spad{ramified?(p)} tests whether \spad{p(x) = 0} is ramified.
678268`\spad{ramifiedAtInfinity?()} tests if infinity is ramified.
678347`\spad{ran(k)} computes a random integer between \spad{-k} and \spad{k} as a member of \spad{R}.
678407`\spad{randnum()} is a random number between 0 and size().
678460`\spad{randnum(n)} is a random number between 0 and \spad{n}.
678667`\spad{random()} returns a random element from the set.
678702`\spad{random(n)}\$FFPOLY(\spad{GF}) generates a random monic polynomial of degree \spad{n} over the finite field {\em GF}.
678806`\spad{random(n)} creates a vector over the ground field with random entries.
678892`\spad{random(a)} creates a random element from 0 to \spad{n-1}.
678942`\spad{random(n)} returns a random integer from 0 to \spad{n-1}.
678980`\spad{random(n)} returns a random integer from 0 to \spad{n-1}.
679029`\spad{random(gp)} returns a random product of maximal 20 generators of the group {\em gp}. Note: {\em random(gp)=random(gp,{} 20)}.
679091`\spad{random(m,{} n)}\$FFPOLY(\spad{GF}) generates a random monic polynomial of degree \spad{d} over the finite field {\em GF},{} \spad{d} between \spad{m} and \spad{n}.
679211`\spad{random(gp,{} i)} returns a random product of maximal \spad{i} generators of the group {\em gp}.
679281`\spad{randomLC(n,{} x)} should be local but conditional.
679364`\spad{randomR()} should be local but conditional
679430`\spad{randomR produces} a random element of \spad{R}
679514`\spad{range([l])} provides a user-specified range \spad{l}. This option is expressed in the form \spad{range == [l]}.
679572`\spad{range([i])} provides a user-specified range \spad{i}. This option is expressed in the form \spad{range == [i]}.
679642`\spad{rangePascalTriangle()} returns the maximal number of lines stored.
679723`\spad{rangePascalTriangle(n)} sets the maximal number of lines which are stored and returns the previous value.
679822`\spad{ranges(\spad{gi})} returns the list of ranges of the point components from the indicated graph,{} \spad{\spad{gi}},{} of the domain \spadtype{GraphImage}.
679881`\spad{ranges(l)} provides a list of user-specified ranges \spad{l}. This option is expressed in the form \spad{ranges == l}.
679940`\spad{ranges(\spad{gi},{} lr)} modifies the list of ranges for the given graph,{} \spad{\spad{gi}} of the domain \spadtype{GraphImage},{} to be that of the list of range segments,{} \spad{lr},{} and returns the new range list for \spad{\spad{gi}}.
680020`\spad{ranges(l,{} r)} takes the list of draw options,{} \spad{l},{} and checks the list to see if it contains the option \spad{ranges}. If the option does not exist the value,{} \spad{r} is returned.
680180`\spad{rank()} returns the rank of the algebra.
680243`\spad{rank()} returns the rank of the algebra as \spad{R}-module.
680317`\spad{rank b} computes the rank of a basis,{} \spadignore{i.e.} the number of vectors in the basis.
680381`\spad{rank Lv} computes the rank of a list of vectors.
680458`\spad{rank(m)} returns the rank of the matrix \spad{m}.
680548`\spad{rank(m)} returns the rank of the matrix \spad{m}.
680639`\spad{rank(m)} returns the rank of the matrix \spad{m}.
680745`\spad{rank(t)} returns the tensorial rank of \spad{t} (that is,{} the number of indices). This is the same as the graded module degree.
680818`\spad{rank(m)} returns the rank of the matrix \spad{m}.
680924`\spad{rank(A,{} B)} computes the rank of the complete matrix \spad{(A|B)} of the linear system \spad{AX = B}.
681015`\spad{rank(A,{} B)} computes the rank of the complete matrix \spad{(A|B)} of the linear system \spad{AX = B}.
681101`\spad{rarrow(f,{} g)} creates a form for the mapping \spad{f -> g}.
681145`\spad{ratDenom(f)} rationalizes the denominators appearing in \spad{f} by moving all the algebraic quantities into the numerators.
681203`\spad{ratDenom(f,{} a)} removes \spad{a} from the denominators in \spad{f} if \spad{a} is an algebraic kernel.
681263`\spad{ratDenom(f,{} [a1,{} ...,{} an])} removes the \spad{ai}\spad{'s} which are algebraic kernels from the denominators in \spad{f}.
681329`\spad{ratDenom(f,{} [a1,{} ...,{} an])} removes the \spad{ai}\spad{'s} which are algebraic from the denominators in \spad{f}.
681403`\spad{ratDsolve(op,{} g)} returns \spad{["failed",{} []]} if the equation \spad{op y = g} has no rational solution. Otherwise,{} it returns \spad{[f,{} [y1,{} ...,{} ym]]} where \spad{f} is a particular rational solution and the \spad{yi}\spad{'s} form a basis for the rational solutions of the homogeneous equation.
681585`\spad{ratDsolve(op,{} [g1,{} ...,{} gm])} returns \spad{[[h1,{} ...,{} hq],{} M]} such that any rational solution of \spad{op y = c1 g1 + ... + cm gm} is of the form \spad{c1 h1 + ... + cq hq} where \spad{M [c1,{} ...,{} cq] = 0} and \spad{q >= m}.
681747`\spad{ratDsolve(op,{} g)} returns \spad{["failed",{} []]} if the equation \spad{op y = g} has no rational solution. Otherwise,{} it returns \spad{[f,{} [y1,{} ...,{} ym]]} where \spad{f} is a particular rational solution and the \spad{yi}\spad{'s} form a basis for the rational solutions of the homogeneous equation.
681932`\spad{ratDsolve(op,{} [g1,{} ...,{} gm])} returns \spad{[[h1,{} ...,{} hq],{} M]} such that any rational solution of \spad{op y = c1 g1 + ... + cm gm} is of the form \spad{c1 h1 + ... + cq hq} where \spad{M [c1,{} ...,{} cq] = 0} and \spad{q >= m}.
682577`\spad{rational?(x)} tests if \spad{x} is a rational number.
682660`\spad{rational?(n)} tests if \spad{n} is a rational number (see \spadtype{Fraction Integer}).
682718`\spad{rational?(o)} tests if \spad{o} is rational,{} \spadignore{i.e.} that all seven imaginary parts are 0.
682802`\spad{rational?(q)} returns {\it \spad{true}} if all the imaginary parts of \spad{q} are zero and the real part can be converted into a rational number,{} and {\it \spad{false}} otherwise.
682888`\spad{rational?(u)} tests if \spadvar{\spad{u}} is actually a rational number (see \spadtype{Fraction Integer}).
682964`\spad{rational?(x)} tests if \spad{x} is a finite rational number.
683050`\spad{rational?(x)} tests if \spad{x} is a finite rational number.
683135`\spad{rational(x)} returns \spad{x} as a rational number. Error: if \spad{x} is not a rational number.
683227`\spad{rational(n)} creates a rational number (see \spadtype{Fraction Integer})..
683294`\spad{rational(o)} returns the real part if all seven imaginary parts are 0. Error: if \spad{o} is not rational.
683387`\spad{rational(q)} tries to convert \spad{q} into a rational number. Error: if this is not possible. If \spad{rational?(q)} is \spad{true},{} the conversion will be done and the rational number returned.
683482`\spad{rational(u)} assumes spadvar{\spad{u}} is actually a rational number and does the conversion to rational number (see \spadtype{Fraction Integer}).
683567`\spad{rational(x)} returns \spad{x} as a finite rational number. Error: if \spad{x} is not a rational number.
683662`\spad{rational(x)} returns \spad{x} as a finite rational number. Error: if \spad{x} cannot be so converted.
683756`\spad{rational?(x)} returns \spad{true} if \spad{x} is a rational number,{} \spad{false} otherwise.
683816`\spad{rational(x)} returns \spad{x} as a rational number; error if \spad{x} is not a rational number.
683885`\spad{rationalApproximation(f,{} n)} computes a rational approximation \spad{r} to \spad{f} with relative error \spad{< 10^(-n)}.
683976`\spad{rationalApproximation(f,{} n)} computes a rational approximation \spad{r} to \spad{f} with relative error \spad{< 10^(-n)}.
684061`\spad{rationalApproximation(f,{} n,{} b)} computes a rational approximation \spad{r} to \spad{f} with relative error \spad{< b^(-n)} (that is,{} \spad{|(r-f)/f| < b^(-n)}).
684171`\spad{rationalApproximation(f,{} n,{} b)} computes a rational approximation \spad{r} to \spad{f} with relative error \spad{< b^(-n)},{} that is \spad{|(r-f)/f| < b^(-n)}.
684275`\spad{rationalFunction(f,{} k)} returns a rational function consisting of the sum of all terms of \spad{f} of degree \spad{<=} \spad{k}.
684409`\spad{rationalFunction(f,{} k1,{} k2)} returns a rational function consisting of the sum of all terms of \spad{f} of degree \spad{d} with \spad{k1 <= d <= k2}.
684893`\spad{rationalIfCan(x)} returns \spad{x} as a rational number,{} or "failed" if \spad{x} is not a rational number.
685006`\spad{rationalIfCan(n)} creates a rational number,{} or returns "failed" if this is not possible.
685094`\spad{rationalIfCan(o)} returns the real part if all seven imaginary parts are 0,{} and "failed" otherwise.
685208`\spad{rationalIfCan(q)} returns \spad{q} as a rational number,{} or "failed" if this is not possible. Note: if \spad{rational?(q)} is \spad{true},{} the conversion can be done and the rational number will be returned.
685324`\spad{rationalIfCan(u)} returns a rational number if \spad{u} really is one,{} and "failed" otherwise.
685430`\spad{rationalIfCan(x)} returns \spad{x} as a finite rational number if it is one,{} "failed" otherwise.
685546`\spad{rationalIfCan(x)} returns \spad{x} as a finite rational number if it is one and "failed" otherwise.
685661`\spad{rationalIfCan(x)} returns \spad{x} as a rational number,{} "failed" if \spad{x} is not a rational number.
685751`\spad{rationalize_ir(irf,{} k1)} eliminates square root \spad{k1} from the integration result.
685863`\spad{rationalPoint?(a,{} b)} tests if \spad{(x=a,{} y=b)} is on the curve.
685943`\spad{rationalPoint?(a,{} b)} tests if \spad{(x=a,{} y=b)} is on the curve.
686020`\spad{rationalPoints()} returns the list of all the affine rational points.
686103`\spad{rationalPoints()} returns the list of all the affine rational points.
686196`\spad{rationalPower(f(x))} returns \spad{r} where the Puiseux series \spad{f(x) = g(x^r)}.
686453`reconstruct vector of rational functions based on information stored in reconstructor.
686757`reconstruct rational function
686917`\spad{ratpart(ir)} returns the rational part of an integration result
686968`\spad{ratPoly(f)} returns a polynomial \spad{p} such that \spad{p} has no algebraic coefficients,{} and \spad{p(f) = 0}.
687053`\spad{ravel(t)} produces a list of components from a tensor such that \indented{2}{\spad{unravel(ravel(t)) = t}.}
687116`right contraction inner product
687171`\spad{rCoord(pt)} returns the first element of the point,{} \spad{pt},{} although no assumptions are made as to the coordinate system being used. This function is defined for the convenience of the user dealing with a spherical or a cylindrical coordinate system.
687222`\spad{rdHack1(v,{} u,{} n)} \undocumented
687310`\spad{rdregime(s)} reads in a list from a file with name \spad{s}
687554`\spad{read!(f)} extracts a value from file \spad{f}. The state of \spad{f} is modified so a subsequent call to \spadfun{read!} will return the next element.
687603`\spad{readable?(f)} tests if the named file exist and can it be opened for reading.
687658`\spad{readIfCan!(f)} returns a value from the file \spad{f},{} if possible. If \spad{f} is not open for reading,{} or if \spad{f} is at the end of file then \spad{"failed"} is the result.
687715`\spad{readIfCan!(f)} returns a value from the file \spad{f},{} if possible. If \spad{f} is not open for reading,{} or if \spad{f} is at the end of file then \spad{"failed"} is the result.
687787`\spad{readIfCan!(f)} returns a string of the contents of a line from file \spad{f},{} if possible. If \spad{f} is not readable or if it is positioned at the end of file,{} then \spad{"failed"} is returned.
687850`\spad{readLine!(f)} returns a string of the contents of a line from the file \spad{f}.
687896`\spad{readLineIfCan!(f)} returns a string of the contents of a line from file \spad{f},{} if possible. If \spad{f} is not readable or if it is positioned at the end of file,{} then \spad{"failed"} is returned.
687963`\spad{real?(t)} tests whether \spad{t} is equivalent to the FORTRAN type REAL.
688015`\spad{real(x)} returns real part of \spad{x}.
688061`\spad{real(o)} extracts real part of octonion \spad{o}.
688108`\spad{real(q)} extracts the real part of quaternion \spad{q}.
688157`\spad{real?(f)} returns \spad{true} if \spad{f = real f}.
688229`\spad{real?(f)} returns \spad{true} if \spad{f = real f}.
688294`\spad{real(f)} returns the real part of \spad{f} where \spad{f} is a complex function.
688371`\spad{real(f)} returns the real part of \spad{f} where \spad{f} is a complex function.
688429`\spad{realEigenvalues(m,{} eps)} computes the eigenvalues of the matrix \spad{m} to precision eps. The eigenvalues are expressed as floats or rational numbers depending on the type of eps (float or rational).
688531`\spad{realEigenvectors(m,{} eps)} returns a list of records each one containing a real eigenvalue,{} its algebraic multiplicity,{} and a list of associated eigenvectors. All these results are computed to precision eps as floats or rational numbers depending on the type of eps .
688691`\spad{realElementary(f)} rewrites \spad{f} in terms of the 4 fundamental real transcendental elementary functions: \spad{log,{} exp,{} tan,{} atan}.
688767`\spad{realElementary(f,{} x)} rewrites the kernels of \spad{f} involving \spad{x} in terms of the 4 fundamental real transcendental elementary functions: \spad{log,{} exp,{} tan,{} atan}.
688850`\spad{realLiouvillian(f)} rewrites \spad{f} elementary kernels of \spad{f} in terms 4 fundamental real elementary functions: \spad{log,{} exp,{} tan,{} atan}. Additionally,{} it rewrites Liouvillian functions as indefinite integrals to support better normalization.
688927`\spad{realLiouvillian(f,{} x)} rewrites \spad{f} elementary kernels of \spad{f} in terms 4 fundamental real elementary functions: \spad{log,{} exp,{} tan,{} atan}. Additionally,{} it rewrites Liouvillian functions of \spad{x} as indefinite integrals to support better normalization.
689011`\spad{realRoots(rf,{} eps)} finds the real zeros of a univariate rational function with precision given by eps.
689107`\spad{realRoots(lp,{} lv,{} eps)} computes the list of the real solutions of the list \spad{lp} of rational functions with rational coefficients with respect to the variables in \spad{lv},{} with precision eps. Each solution is expressed as a list of numbers in order corresponding to the variables in \spad{lv}.
689228`\spad{realSolve(lp)} returns the same as \spad{realSolve(ts,{} false,{} false,{} false)}
689350`\spad{realSolve(ts)} returns the set of the points in the regular zero set of \spad{ts} whose coordinates are all real. WARNING: For each set of coordinates given by \spad{realSolve(ts)} the ordering of the indeterminates is reversed \spad{w}.\spad{r}.\spad{t}. \spad{ls}.
689471`\spad{realSolve(ts,{} info?)} returns the same as \spad{realSolve(ts,{} info?,{} false,{} false)}.
689601`\spad{realSolve(lp,{} lv,{} eps)} = compute the list of the real solutions of the list \spad{lp} of polynomials with integer coefficients with respect to the variables in \spad{lv},{} with precision eps.
689708`\spad{realSolve(ts,{} info?,{} check?)} returns the same as \spad{realSolve(ts,{} info?,{} check?,{} false)}.
689846`\spad{realSolve(ts,{} info?,{} check?,{} lextri?)} returns the set of the points in the variety associated with \spad{lp} whose coordinates are all real. Moreover,{} if \spad{info?} is \spad{true} then some information is displayed during decomposition into regular chains. If \spad{check?} is \spad{true} then the result is checked. If \spad{lextri?} is \spad{
689846`--true} then the lexTriangular algorithm is called from the \spadtype{LexTriangularPackage} constructor (see \spadopFrom{zeroSetSplit}{LexTriangularPackage}(\spad{lp},{} \spad{false})). Otherwise,{} the triangular decomposition is computed directly from the input system by using the \spadopFrom{zeroSetSplit}{RegularChain} from \spadtype{RegularChain}. WARNING: For each set of coordinates given by \spad{realSolve(ts,{} info?,{} check?,{} lextri?)} the ordering of the indeterminates is reversed \s
689846`--pad{w}.\spad{r}.\spad{t}. \spad{ls}.
689992`\spad{realZeros(pol)} returns a list of isolating intervals for all the real zeros of the univariate polynomial \spad{pol}.
690105`\spad{realZeros(pol)} returns a list of isolating intervals for all the real zeros of the univariate polynomial \spad{pol}.
690219`\spad{realZeros(pol,{} eps)} returns a list of intervals of length less than the rational number eps for all the real roots of the polynomial \spad{pol}.
690350`\spad{realZeros(pol,{} eps)} returns a list of intervals of length less than the rational number eps for all the real roots of the polynomial \spad{pol}.
690482`\spad{realZeros(pol,{} range)} returns a list of isolating intervals for all the real zeros of the univariate polynomial \spad{pol} which lie in the interval expressed by the record range.
690650`\spad{realZeros(pol,{} range)} returns a list of isolating intervals for all the real zeros of the univariate polynomial \spad{pol} which lie in the interval expressed by the record range.
690819`\spad{realZeros(pol,{} int,{} eps)} returns a list of intervals of length less than the rational number eps for all the real roots of the polynomial \spad{pol} which lie in the interval expressed by the record \spad{int}.
691005`\spad{realZeros(pol,{} int,{} eps)} returns a list of intervals of length less than the rational number eps for all the real roots of the polynomial \spad{pol} which lie in the interval expressed by the record \spad{int}.
691192`\spad{recip()} returns \spad{matrix [[0,{} 1],{} [1,{} 0]]} representing the map \spad{x -> 1 / x}.
691239`\spad{recip(m)} = recip() * \spad{m}
691288`\spad{recip(x)} \undocumented
691388`\spad{recip(x)} \undocumented
691477`\spad{recip(a)} returns the power series reciprocal of \spad{a},{} or "failed" if not possible.
691974`\spad{recip(a)} returns an element,{} which is both a left and a right inverse of \spad{a},{} or \spad{"failed"} if there is no unit element,{} if such an element doesn\spad{'t} exist or cannot be determined (see unitsKnown).
692075`\spad{recip(a)} returns an element,{} which is both a left and a right inverse of \spad{a},{} or \spad{"failed"} if such an element doesn\spad{'t} exist or cannot be determined (see unitsKnown).
692134`\spad{recip(x)} tries to compute the multiplicative inverse for \spad{x} or "failed" if it cannot find the inverse (see unitsKnown).
692186`\spad{recip(x)} computes the multiplicative inverse of \spad{x} or "failed" if \spad{x} is not invertible.
692363`\spad{recip(p,{} ts)} returns the inverse of \spad{p} \spad{w}.\spad{r}.\spad{t} \spad{ts} assuming that \spad{p} is invertible \spad{w}.\spad{r}.\spad{t} \spad{ts}.
692444`\spad{recip(pol,{} aRoot)} tries to inverse \spad{pol} interpreted as \spad{aRoot}
692553`\spad{reciprocalPolynomial(p)} calulates a polynomial which has exactly the inverses of the non-zero roots of \spad{p} as roots,{} and the same number of 0-roots.
692629`\spad{recolor()},{} uninteresting to top level user; exported in order to compile package.
692839`combines rational reconstruction with removal of common denominators in blocks.
692954`\spad{reconstruct polynomials} in \spad{n} + 1 variables
693188`\spad{reconstruct polynomials} in \spad{n} + 1 variables from result of rational reconstruction
693463`\spad{rectangularMatrix(m)} converts a matrix of type \spadtype{Matrix} to a matrix of type \spad{RectangularMatrix}.
693536`\spad{recur(g)} is the function \spad{h} such that \indented{1}{\spad{h(n,{} x)= g(n,{} g(n-1,{} ..g(1,{} x)..))}.}
693630`\spad{recur(g,{} n,{} x)} is \spad{g(n,{} g(n-1,{} ..g(1,{} x)..))}.
693734`\spad{red()} returns the position of the red hue from total hues.
693765`\spad{redmat(m,{} g)} returns a matrix whose entries are those of \spad{m} modulo the ideal generated by the groebner basis \spad{g}
693862`\spad{redPo }\undocumented
693975`\spad{redPol }\undocumented
694067`normalForm(poly,{} \spad{gb}) reduces the polynomial poly modulo the precomputed groebner basis \spad{gb} giving up to a constant factor a canonical representative of the residue class.
694152`\spad{redpps(s,{} g)} returns the simplified form of \spad{s} after reducing modulo a groebner basis \spad{g}
694411`\spad{reduce(f)} simplifies all the unreduced algebraic numbers present in \spad{f} by applying their defining relations.
694462`\spad{reduce(x)} reduces algebraics in \spad{x}.
694516`\spad{reduce(x)} reduces the algebraics in \spad{x}.
694571`\spad{reduce(f)} produces the equivalence class of \spad{f} in the residue ring
694817`\spad{reduce(x)} \undocumented
694864`\spad{reduce(p)} returns [\spad{q},{} \spad{d}] such that \spad{p}(\spad{x}) = \spad{q}(\spad{x^d}) and \spad{d} is maximal with this property
695135`\spad{reduce(D)} converts \spad{D} to some reduced form (the reduced forms can be differents in different implementations).
695200`\spad{reduce(f)} simplifies all the unreduced algebraic numbers present in \spad{f} by applying their defining relations.
695246`\spad{reduce(f)} simplifies all the unreduced algebraic quantities present in \spad{f} by applying their defining relations.
695311`\spad{reduce(frac)} converts the fraction \spad{frac} to an algebra element.
695402`\spad{reduce(up)} converts the univariate polynomial \spad{up} to an algebra element,{} reducing by the \spad{definingPolynomial()} if necessary.
695521`\spad{reduce(r,{} m)} \undocumented
695609`\spad{reduce(r,{} m)} \undocumented
695687`\spad{reduce(r,{} m)} \undocumented
695932`\spad{reduce(f,{} u)} reduces the binary operation \spad{f} across \spad{u}. For example,{} if \spad{u} is \spad{[x,{} y,{} ...,{} z]} then \spad{reduce(f,{} u)} returns \spad{f(..f(f(x,{} y),{} ...),{} z)}. Note: if \spad{u} has one element \spad{x},{} \spad{reduce(f,{} u)} returns \spad{x}. Error: if \spad{u} is empty.
696249`\spad{reduce(func,{} vec,{} ident)} combines the elements in \spad{vec} using the binary function \spad{func}. Argument ident is returned if the vector is empty.
696340`\spad{reduce(fn,{} u,{} ident)} successively uses the binary function \spad{fn} on the elements of list \spad{u} and the result of previous applications. \spad{ident} is returned if the \spad{u} is empty. Note the order of application in the following examples: \spad{reduce(fn,{} [1,{} 2,{} 3],{} 0) = fn(3,{} fn(2,{} fn(1,{} 0)))} and \spad{reduce(*,{} [2,{} 3],{} 1) = 3 * (2 * 1)}.
696405`\spad{reduce(f,{} a,{} r)} applies function \spad{f} to each successive element of the one-dimensional array \spad{a} and an accumulant initialized to \spad{r}. For example,{} \spad{reduce(_+\$Integer,{} [1,{} 2,{} 3],{} 0)} does \spad{3+(2+(1+0))}. Note: third argument \spad{r} may be regarded as the identity element for the function \spad{f}.
696500`\spad{reduce(f,{} a,{} r)} applies function \spad{f} to each successive element of the primitive array \spad{a} and an accumulant initialized to \spad{r}. For example,{} \spad{reduce(_+\$Integer,{} [1,{} 2,{} 3],{} 0)} does \spad{3+(2+(1+0))}. Note: third argument \spad{r} may be regarded as the identity element for the function \spad{f}.
696585`\spad{reduce(func,{} vec,{} ident)} combines the elements in \spad{vec} using the binary function \spad{func}. Argument ident is returned if \spad{vec} is empty.
696654`\spad{reduce(b,{} f,{} u)},{} where \spad{u} is a finite stream \spad{[x0,{} x1,{} ...,{} xn]},{} returns the value \spad{r(n)} computed as follows: \spad{r0 = f(x0,{} b),{} r1 = f(x1,{} r0),{} ...,{} r(n) = f(xn,{} r(n-1))}.
696723`\spad{reduce(f,{} m,{} r)} traverses \spad{m} row by row passing \spad{m}(\spad{i},{} \spad{j}) as first argument to \spad{f}. The second argument to \spad{f} works as accumulator,{} value from previous call is passed to next call On first call \spad{r} is passed as second argument to \spad{f}. Return value is the last result returned by \spad{f}.
696826`\spad{reduce(f,{} m,{} r)} returns a matrix \spad{n} where \spad{n[i,{} j] = f(m[i,{} j],{} r)} for all indices spad{\spad{i}} and \spad{j}.
696944`\spad{reduce(f,{} a,{} r)} applies function \spad{f} to each successive element of the aggregate \spad{a} and an accumulant initialized to \spad{r}. For example,{} \spad{reduce(_+\$Integer,{} [1,{} 2,{} 3],{} 0)} does \spad{3+(2+(1+0))}. Note: third argument \spad{r} may be regarded as the identity element for the function \spad{f}.
697024`\spad{reduce(f,{} a,{} r)} applies function \spad{f} to each successive element of the aggregate \spad{a} and an accumulant initialised to \spad{r}. For example,{} \spad{reduce(_+\$Integer,{} [1,{} 2,{} 3],{} 0)} does a \spad{3+(2+(1+0))}. Note: third argument \spad{r} may be regarded as an identity element for the function.
697101`\spad{reduce(f,{} u,{} x)} reduces the binary operation \spad{f} across \spad{u},{} where \spad{x} is the identity operation of \spad{f}. Same as \spad{reduce(f,{} u)} if \spad{u} has 2 or more elements. Returns \spad{f(x,{} y)} if \spad{u} has one element \spad{y},{} \spad{x} if \spad{u} is empty. For example,{} \spad{reduce(+,{} u,{} 0)} returns the sum of the elements of \spad{u}.
697511`\spad{reduce(p,{} ts,{} redOp,{} redOp?)} returns a polynomial \spad{r} such that \spad{redOp?(r,{} p)} holds for every \spad{p} of \spad{ts} and there exists some product \spad{h} of the initials of the members of \spad{ts} such that \spad{h*p - r} lies in the ideal generated by \spad{ts}. The operation \spad{redOp} must satisfy the following conditions. For every \spad{p} and \spad{q} we have \spad{redOp?(redOp(p,{}
697511`-- q),{} q)} and there exists an integer \spad{e} and a polynomial \spad{f} such that \spad{init(q)^e*p = f*q + redOp(p,{} q)}.
697597`\spad{reduce(f,{} u,{} x,{} z)} reduces the binary operation \spad{f} across \spad{u},{} stopping when an "absorbing element" \spad{z} is encountered. As for \spad{reduce(f,{} u,{} x)},{} \spad{x} is the identity operation of \spad{f}. Same as \spad{reduce(f,{} u,{} x)} when \spad{u} contains no element \spad{z}. Thus the third argument \spad{x} is returned when \spad{u} is empty.
697914`Skips elements of sigma basis which does not satisfy degree bounds and puts sigma-basis into canonical form.
698211`\spad{reduceBasisAtInfinity(b1,{} ...,{} bn)} returns \spad{(x^i * bj)} for all \spad{i},{} \spad{j} such that \spad{x^i*bj} is locally integral at infinity.
698376`\spad{reduceByQuasiMonic(p,{} ts)} returns the same as \spad{remainder(p,{} collectQuasiMonic(ts)).polnum}.
698598`\spad{reduced?(a,{} b)} returns \spad{true} iff \spad{degree(a,{} mvar(b)) < mdeg(b)}.
698673`\spad{reduced?(q,{} lp)} returns \spad{true} iff \spad{reduced?(q,{} p)} holds for every \spad{p} in \spad{lp}.
698836`\spad{reduced?(p,{} ts,{} redOp?)} returns \spad{true} iff \spad{p} is reduced \spad{w}.\spad{r}.\spad{t}. in the sense of the operation \spad{redOp?},{} that is if for every \spad{t} in \spad{ts} \spad{redOp?(p,{} t)} holds.
698921`\spad{reducedContinuedFraction(b0,{} b)} constructs a continued fraction in the following way: if \spad{b = [b1,{} b2,{} ...]} then the result is the continued fraction \spad{b0 + 1/(b1 + 1/(b2 + ...))}. That is,{} the result is the same as \spad{continuedFraction(b0,{} [1,{} 1,{} 1,{} ...],{} [b1,{} b2,{} b3,{} ...])}.
698999`\spad{reducedDiscriminant(up)} \undocumented
699087`\spad{reducedForm(x)} puts the continued fraction \spadvar{\spad{x}} in reduced form,{} \spadignore{i.e.} the function returns an equivalent continued fraction of the form \spad{continuedFraction(b0,{} [1,{} 1,{} 1,{} ...],{} [b1,{} b2,{} b3,{} ...])}.
699143`\spad{reducedQPowers(f)} generates \spad{[x,{} x^q,{} x^(q^2),{} ...,{} x^(q^(n-1))]} reduced modulo \spad{f} where \spad{q = size()\$GF} and \spad{n = degree f}.
700258`\spad{reducedSystem(A)} returns a matrix \spad{B} such that \spad{A x = 0} and \spad{B x = 0} have the same solutions in \spad{R}.
700570`\spad{reducedSystem(A,{} ld)} returns a matrix of constants \spad{B} such that \spad{A x = 0} and \spad{B x = 0} have the same solutions over constants.
701872`\spad{reducedSystem(A,{} v)} returns a matrix \spad{B} and a vector \spad{w} such that \spad{A x = v} and \spad{B x = w} have the same solutions in \spad{R}.
701989`\spad{reducedSystem(A,{} v,{} ld)} returns matrix of constants \spad{B} and vector of constants \spad{w} such that \spad{A x = v} and \spad{B x = w} have the same solutions over constants.
702119`\spad{reduceLODE(op,{} g)} returns \spad{[m,{} v]} such that any solution in \spad{A} of \spad{op z = g} is of the form \spad{z = (z_1,{} ...,{} z_m) . (b_1,{} ...,{} b_m)} where the \spad{b_i's} are the basis of \spad{A} over \spad{F} returned by \spadfun{basis}() from \spad{A},{} and the \spad{z_i's} satisfy the differential system \spad{M.z = v}.
702212`\spad{reduceLODE(op,{} [g1,{} ...,{} gn])} returns \spad{[m,{} [v1,{} ...,{} vn]]} such that any solution in \spad{A} of \spad{op z = c1*g1 + ... + cn*gn} where \spad{ci} are constants satisfy the differential system \spad{M.z = c1*v1 + ... + cn*vn}
702318`\spad{reduceMod(sys1,{} sys2)} reduces the system \spad{sys1} modulo the system \spad{sys2}.
702481`\spad{ReduceOrder(op,{} s)} returns \spad{op1} such that for any solution \spad{z} of \spad{op1 z = 0},{} \spad{y = s \int z} is a solution of \spad{op y = 0}. \spad{s} must satisfy \spad{op s = 0}.
702538`\spad{ReduceOrder(op,{} [f1,{} ...,{} fk])} returns \spad{[op1,{} [g1,{} ...,{} gk]]} such that for any solution \spad{z} of \spad{op1 z = 0},{} \spad{y = gk \int(g_{k-1} \int(... \int(g1 \int z)...)} is a solution of \spad{op y = 0}. Each \spad{\spad{fi}} must satisfy \spad{op \spad{fi} = 0}.
702623`\spad{reduction(p,{} prime)} reduces the polynomial \spad{p} modulo prime of \spad{R}. Note: this function is exported only because it\spad{'s} conditional.
702676`\spad{reduction(f,{} p)} reduces the coefficients of the polynomial \spad{f} modulo the prime \spad{p}.
702746`\spad{reduction(u,{} pol)} computes the symmetric reduction of \spad{u} mod pol
702810`\spad{reductum(u)} returns \spad{u} minus its leading monomial returns zero if handed the zero element.
702889`\spad{reductum(p)},{} where \spad{p} is an antisymmetric polynomial,{} returns \spad{p} minus the leading term of \spad{p} if \spad{p} has at least two terms,{} and 0 otherwise.
702938`\spad{reductum(df)},{} where \spad{df} is a differential form,{} returns \spad{df} minus the leading term of \spad{df} if \spad{df} has two or more terms,{} and 0 otherwise.
703005`\spad{reductum(x)} \undocumented
703077`\spad{reductum(x)} \undocumented
703133`\spad{reductum(p)} returns \spad{p} minus its leading term. An error is produced if \spad{p} is zero.
703319`\spad{reductum(u)} returns \spad{u} minus its leading monomial returns zero if handed the zero element.
703374`\spad{reductum(z)} returns a new element created by removing the leading coefficient/support pair from the element \spad{z}. Error: if \spad{z} has no support.
703440`\spad{reductum(l)} is \spad{l - monomial(a(n),{} n)} if \indented{2}{\spad{l = sum(monomial(a(i),{} i),{} i = 0..n)}.}
703573`\spad{reductum(p,{} v)} returns the reductum of \spad{p},{} where \spad{p} is viewed as a univariate polynomial in \spad{v}.
703642`attempt to simplify theory apply recursively to subnodes normally this should not be necessary since logic values are interpreted when constructed
703678`beta reduction - apply beta reduction recusivly to all subnodes
703718`weak reduction - apply this combinator to rearange its subnodes then apply recusivly to its subnodes
703766`\spad{ref(n)} creates a pointer (reference) to the object \spad{n}.
703805`\spad{refine(x)} \undocumented
703842`\spad{refine(p)} performs a refinement on the plot \spad{p}
703877`\spad{refine(rootChar)} shrinks isolating interval around \spad{rootChar}
703965`\spad{refine(p,{} x)} \undocumented{}
704031`\spad{refine(x,{} r)} \undocumented
704089`\spad{refine(x,{} r)} \undocumented
704145`\spad{refine(u,{} fn)} is used to apply the function \userfun{\spad{fn}} to each factor of \spadvar{\spad{u}} and then build a new factored object from the results. For example,{} if \spadvar{\spad{u}} were created by calling \spad{nilFactor(10,{} 2)} then \spad{refine(u,{} factor)} would create a factored object equal to that created by \spad{factor(100)} or \spad{primeFactor(2,{} 2) * primeFactor(5,{} 2)}.
704239`\spad{refine(pol,{} int,{} eps)} refines the interval \spad{int} containing exactly one root of the univariate polynomial \spad{pol} to size less than the rational number eps.
704416`\spad{refine(pol,{} int,{} eps)} refines the interval \spad{int} containing exactly one root of the univariate polynomial \spad{pol} to size less than the rational number eps.
704594`\spad{refine(pol,{} int,{} range)} takes a univariate polynomial \spad{pol} and and isolating interval \spad{int} containing exactly one real root of \spad{pol}; the operation returns an isolating interval which is contained within range,{} or "failed" if no such isolating int
704594`--erval exists.
704824`\spad{refine(pol,{} int,{} range)} takes a univariate polynomial \spad{pol} and and isolating interval \spad{int} which must contain exactly one real root of \spad{pol},{} and returns an isolating interval which is contained within range,{} or "failed" if no such isolating in
704824`--terval exists.
705055`\spad{regime(y,{} c,{} w,{} p,{} r,{} rm,{} m)} returns a regime,{} a list of polynomials specifying the consistency condit
705055`--ions,{} a particular solution and basis representing the general solution of the parametric linear system \spad{c} \spad{z} = \spad{w} on that regime. The regime returned depends on the subdeterminant \spad{y}.det and the row and column indices. The solutions are simplified using the assumption that the system has rank \spad{r} and maximum rank \spad{rm}. The list \spad{p} represents a list of list of factors of polynomials in a groebner basis of the ideal generated by higher order subdetermin
705055`--ants,{} and ius used for the simplification. The mode \spad{m} distinguishes the cases when the system is homogeneous,{} or the right hand side is arbitrary,{} or when there is no new right hand side variables.
705439`\spad{region(v,{} n,{} s)} displays the bounding box of the graph in field \spad{n} of the given two-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{TwoDimensionalViewport},{} if \spad{s} is "on",{} or does not display the bounding box if \spad{s} is "off".
705517`\spad{regularRepresentation(x)} returns the matrix representation of the permutation \spad{permutationRep(x)}
705665`\spad{regularRepresentation(a)} returns the matrix \spad{m} of the linear map defined by left multiplication by \spad{a} with respect to the fixed basis. That is for all \spad{x} we have \spad{coordinates(a*x) = m*coordinates(x)}.
705899`\spad{regularRepresentation(a,{} basis)} returns the matrix \spad{m} of the linear map defined by left multiplication by \spad{a} with respect to the basis \spad{basis}. That is for all \spad{x} we have \spad{coordinates(a*x,{} basis) = m*coordinates(x,{} basis)}.
705986`\spad{reindex(t,{} [i1,{} ...,{} idim])} permutes the indices of \spad{t}. For example,{} if \spad{r = reindex(t,{} [4,{} 1,{} 2,{} 3])} for a rank 4 tensor \spad{t},{} then \spad{r} is the rank for tensor given by \indented{4}{\spad{r(i,{} j,{} k,{} l) = t(l,{} i,{} j,{} k)}.}
706060`\spad{relationsIdeal(polyList)} returns the ideal of relations among the polynomials in \spad{polyList}.
706235`\spad{relativeApprox(n,{} p)} gives a relative approximation of \spad{n} that has precision \spad{p}
706313`\spad{relativeApprox(exp,{} c,{} p) = a} is relatively close to exp as a polynomial in \spad{c} ip to precision \spad{p}
706434`\spad{approximate(term,{} root,{} prec)} gives an approximation of \spad{term} over \spad{root} with precision \spad{prec}
706546`\spad{relerror(x,{} y)} computes the absolute value of \spad{x - y} divided by \spad{y},{} when \spad{y \~= 0}.
706592`\spad{f rem g} creates the equivalent infix form.
706719`\spad{x rem y} is the same as \spad{divide(x,{} y).remainder}. See \spadfunFrom{divide}{EuclideanDomain}.
706765`\spad{a rem b} returns the remainder of \spad{a} and \spad{b}.
706909`\spad{remainder(a,{} ps)} returns \spad{[c,{} b,{} r]} such that \spad{b} is fully reduced in the sense of Groebner bases \spad{w}.\spad{r}.\spad{t}. \spad{ps},{} \spad{r*a - c*b} lies in the ideal generated by \spad{ps}. Furthermore,{} if \spad{R} is a \spad{gcd}-domain,{} \spad{b} is primitive.
707028`Polynomial remainder
707191`\spad{RemainderList(p)} returns the regular part of \spad{p} as a list of terms.
707284`\spad{remap_variables(p,{} lv1,{} lv2)} replaces corresponding variables from \spad{l1} by variables from \spad{lv2}. Assumes that \spad{lv1} and \spad{lv2} have the same length and that \spad{p} has variables in \spad{lv1}.
708273`\spad{remove!(s,{} a)} replaces a by remove(\spad{s},{} a)
708342`\spad{remove(s,{} a)} returns the splitting tree obtained from a by removing every sub-tree \spad{b} such that \spad{value(b)} and \spad{s} have the same value,{} condition and status.
708410`\spad{remove!(k,{} t)} searches the table \spad{t} for the key \spad{k} removing (and return) the entry if there. If \spad{t} has no such key,{} \spad{remove!(k,{}t)} returns "failed".
708491`\spad{remove(x,{} u)} returns a copy of \spad{u} with all elements \spad{y = x} removed. Note: \spad{remove(y,{} c) == [x for x in c | x ~= y]}.
708582`\spad{remove!(x,{} d)} destructively changes dictionary \spad{d} by removing all entries \spad{y} such that \spad{y = x}.
708684`\spad{remove!(x,{} u)} destructively removes all values \spad{x} from \spad{u}.
708764`\spad{remove(p,{} u)} returns a copy of \spad{u} removing all elements \spad{x} such that \spad{p(x)} is \spad{true}. Note: \spad{remove(p,{} u) == [x for x in u | not p(x)]}.
708844`\spad{remove!(p,{} d)} destructively changes dictionary \spad{d} by removeing all entries \spad{x} such that \spad{p(x)} is \spad{true}.
708935`\spad{remove!(p,{} u)} destructively removes all elements \spad{x} of \spad{u} such that \spad{p(x)} is \spad{true}.
709008`\spad{remove(f,{} st)} returns a stream consisting of those elements of stream st which do not satisfy the predicate \spad{f}. Note: \spad{remove(f,{} st) = [x for x in st | not f(x)]}.
709074`\spad{remove(x,{} ms,{} number)} removes at most \spad{number} copies of element \spad{x} if \spad{number} is positive,{} all of them if \spad{number} equals zero,{} and all but at most \spad{-number} if \spad{number} is negative.
709126`\spad{remove!(x,{} ms,{} number)} removes destructively at most \spad{number} copies of element \spad{x} if \spad{number} is positive,{} all of them if \spad{number} equals zero,{} and all but at most \spad{-number} if \spad{number} is negative.
709179`\spad{remove(p,{} ms,{} number)} removes at most \spad{number} copies of elements \spad{x} such that \spad{p(x)} is \spadfun{\spad{true}} if \spad{number} is positive,{} all of them if \spad{number} equals zero,{} and all but at most \spad{-number} if \spad{number} is negative.
709242`\spad{remove!(p,{} ms,{} number)} removes destructively at most \spad{number} copies of elements \spad{x} such that \spad{p(x)} is \spadfun{\spad{true}} if \spad{number} is positive,{} all of them if \spad{number} equals zero,{} and all but at most \spad{-number} if \spad{number} is negative.
709306`\spad{removeChild!(n,{} c)} removes the specified child node \spad{'c'} below node \spad{'n'}
709357`\spad{removeConstantTerm(f,{} x)} returns \spad{f} minus any additive constant with respect to \spad{x}.
709447`\spad{removeCoshSq(f)} converts every \spad{cosh(u)^2} appearing in \spad{f} into \spad{1 - sinh(x)^2},{} and also reduces higher powers of \spad{cosh(u)} with that formula.
709514`\spad{removeCosSq(f)} converts every \spad{cos(u)^2} appearing in \spad{f} into \spad{1 - sin(x)^2},{} and also reduces higher powers of \spad{cos(u)} with that formula.
709580`remove common denominators in blocks
709726`\spad{remove_denoms(offsets,{} nums,{} denoms,{} p)} removes common denominator from vectors of rational functions. Several vectors of rational functions are packed into \spad{nums} (storing numerators) and dens (storing denominators) Vector \spad{i} starts at position \spad{offsets}(\spad{i}). Computations are done modulo \spad{p}.
710055`\spad{removeDuplicates(u)} returns a copy of \spad{u} with all duplicates removed.
710154`\spad{removeDuplicates!(u)} destructively removes duplicates from \spad{u}.
710242`\spad{removeDuplicates!(d)} destructively removes any duplicate values in dictionary \spad{d}.
710302`\spad{removeIrreducibleRedundantFactors(lp,{} lq)} returns the same as \spad{irreducibleFactors(concat(lp,{} lq))} assuming that \spad{irreducibleFactors(lp)} returns \spad{lp} up to replacing some polynomial \spad{pj} in \spad{lp} by some polynomial \spad{qj} associated to \spad{pj}.
710469`\spad{removeRedundantFactors(lp)} returns \spad{lq} such that if \spad{lp = [p1,{} ...,{} pn]} and \spad{lq = [q1,{} ...,{} qm]} then the product \spad{p1*p2*...*pn} vanishes iff the product \spad{q1*q2*...*qm} vanishes,{} and the product of degrees of the \spad{\spad{qi}} is not greater than the one of the \spad{pj},{} and no polynomial in \spad{lq} divides another polynomial in \spad{lq}. In particular,{} p
710469`--olynomials lying in the base ring \spad{R} are removed. Moreover,{} \spad{lq} is sorted \spad{w}.\spad{r}.\spad{t} \spad{infRittWu?}. Furthermore,{} if \spad{R} is \spad{gcd}-domain,{} the polynomials in \spad{lq} are pairwise without common non trivial factor.
710564`\spad{removeRedundantFactors(lp,{} lq)} returns the same as \spad{removeRedundantFactors(concat(lp,{} lq))} assuming that \spad{removeRedundantFactors(lp)} returns \spad{lp} up to replacing some polynomial \spad{pj} in \spad{lp} by some polynomial \spad{qj} associated to \spad{pj}.
710667`\spad{removeRedundantFactors(lp,{} q)} returns the same as \spad{removeRedundantFactors(cons(q,{} lp))} assuming that \spad{removeRedundantFactors(lp)} returns \spad{lp} up to replacing some polynomial \spad{pj} in \spad{lp} by some some polynomial \spad{qj} associated to \spad{pj}.
710764`\spad{removeRedundantFactors(p,{} q)} returns the same as \spad{removeRedundantFactors([p,{} q])}
710855`\spad{removeRedundantFactors(lp,{} lq,{} remOp)} returns the same as \spad{concat(remOp(removeRoughlyRedundantFactorsInPols(lp,{} lq)),{} lq)} assuming that \spad{remOp(lq)} returns \spad{lq} up to similarity.
710977`\spad{removeRedundantFactorsInContents(lp,{} lf)} returns \spad{newlp} where \spad{newlp} is obtained from \spad{lp} by removing in the content of every polynomial of \spad{lp} any non trivial factor of any polynomial \spad{f} in \spad{lf}. Moreover,{} squares over \spad{R} are first removed in the content of every polynomial of \spad{lp}.
711106`\spad{removeRedundantFactorsInPols(lp,{} lf)} returns \spad{newlp} where \spad{newlp} is obtained from \spad{lp} by removing in every polynomial \spad{p} of \spad{lp} any non trivial factor of any polynomial \spad{f} in \spad{lf}. Moreover,{} squares over \spad{R} are first removed in every polynomial \spad{lp}.
711231`\spad{removeRepeats!(u)} destructively replaces runs of consequtive equal elements of \spad{u} by single elements.
711346`\spad{removeRoughlyRedundantFactorsInContents(lp,{} lf)} returns \spad{newlp}where \spad{newlp} is obtained from \spad{lp} by removing in the content of every polynomial of \spad{lp} any occurence of a polynomial \spad{f} in \spad{lf}. Moreover,{} squares over \spad{R} are first removed in the content of every polynomial of \spad{lp}.
711482`\spad{removeRoughlyRedundantFactorsInPol(p,{} lf)} returns the same as removeRoughlyRedundantFactorsInPols([\spad{p}],{} \spad{lf},{} \spad{true})
711585`\spad{removeRoughlyRedundantFactorsInPols(lp,{} lf)} returns \spad{newlp}where \spad{newlp} is obtained from \spad{lp} by removing in every polynomial \spad{p} of \spad{lp} any occurence of a polynomial \spad{f} in \spad{lf}. This may involve a lot of exact-quotients computations.
711701`\spad{removeRoughlyRedundantFactorsInPols(lp,{} lf,{} opt)} returns the same as \spad{removeRoughlyRedundantFactorsInPols(lp,{} lf)} if \spad{opt} is \spad{false} and if the previous operation does not return any non null and constant polynomial,{} else return \spad{[1]}.
711825`\spad{removeSinhSq(f)} converts every \spad{sinh(u)^2} appearing in \spad{f} into \spad{1 - cosh(x)^2},{} and also reduces higher powers of \spad{sinh(u)} with that formula.
711892`\spad{removeSinSq(f)} converts every \spad{sin(u)^2} appearing in \spad{f} into \spad{1 - cos(x)^2},{} and also reduces higher powers of \spad{sin(u)} with that formula.
711958`\spad{removeSquaresIfCan(lp)} returns \spad{removeDuplicates [squareFreePart(p)\$P for p in lp]} if \spad{R} is \spad{gcd}-domain else returns \spad{lp}.
712049`\spad{removeSuperfluousCases(llpwt)} is an internal subroutine,{} exported only for developement.
712193`\spad{removeSuperfluousCases(llpwt)} is an internal subroutine,{} exported only for developement.
712347`\spad{removeSuperfluousQuasiComponents(lts)} removes from \spad{lts} any \spad{ts} such that \spad{subQuasiComponent?(ts,{} us)} holds for another \spad{us} in \spad{lts}.
712449`\spad{removeSuperfluousQuasiComponents(lts)} removes from \spad{lts} any \spad{ts} such that \spad{subQuasiComponent?(ts,{} us)} holds for another \spad{us} in \spad{lts}.
712624`\spad{removeZero(p,{} ts)} returns \spad{0} if \spad{p} reduces to \spad{0} by pseudo-division \spad{w}.\spad{r}.\spad{t} \spad{ts} otherwise returns a polynomial \spad{q} computed from \spad{p} by removing any coefficient in \spad{p} reducing to \spad{0}.
712746`\spad{removeZeroes(x)} removes leading zeroes from the representation of the \spad{p}-adic rational \spad{x}. A \spad{p}-adic rational is represented by (1) an exponent and (2) a \spad{p}-adic integer which may have leading zero digits. When the \spad{p}-adic integer has a leading zero digit,{} a 'leading zero' is removed from the \spad{p}-adic rational as follows: the number is rewritten by increasing the exponent by 1 and dividing 
712746`--the \spad{p}-adic integer by \spad{p}. Note: \spad{removeZeroes(f)} removes all leading zeroes from \spad{f}.
712864`\spad{removeZeroes(f(x))} removes leading zeroes from the representation of the Laurent series \spad{f(x)}. A Laurent series is represented by (1) an exponent and (2) a Taylor series which may have leading zero coefficients. When the Taylor series has a leading zero coefficient,{} the 'leading zero' is removed from the Laurent series as follows: the series is rewritten by increasing the exponent by 1 and dividing t
712864`--he Taylor series by its variable. Note: \spad{removeZeroes(f)} removes all leading zeroes from \spad{f}
713017`\spad{removeZeroes(n,{} x)} removes up to \spad{n} leading zeroes from the \spad{p}-adic rational \spad{x}.
713151`\spad{removeZeroes(n,{} f(x))} removes up to \spad{n} leading zeroes from the Laurent series \spad{f(x)}. A Laurent series is represented by (1) an exponent and (2) a Taylor series which may have leading zero coefficients. When the Taylor series has a leading zero coefficient,{} the 'leading zero' is removed from the Laurent series as follows: the series is rewritten by increasing the exponent by 1 and divi
713151`--ding the Taylor series by its variable.
713248`\spad{removeZeros(s,{} k)} removes leading zero terms in \spad{s} with exponent smaller than \spad{k}
713342`\spad{rename!(x,{} name)} changes the way \spad{x} is printed
713400`\spad{rename(x,{} name)} gives a new number that prints as name
713457`\spad{reopen!(f,{} mode)} returns a file \spad{f} reopened for operation in the indicated mode: "input" or "output". \spad{reopen!(f,{}"input")} will reopen the file \spad{f} for input.
713516`\spad{reorder(p,{} perm)} applies the permutation perm to the variables in a polynomial and returns the new correctly ordered polynomial
713601`\spad{reorder(p,{} perm)} applies the permutation perm to the variables in a polynomial and returns the new correctly ordered polynomial
713695`\spad{reorder(p,{} perm)} applies the permutation perm to the variables in a polynomial and returns the new correctly ordered polynomial
713791`\spad{repack1(x,{} a,{} d,{} m)} stores coefficients of \spad{x} in a. \spad{d} is degree of \spad{x}. Corresponding exponents are given by pack_exps.
713887`convert polynomials represented as parallel vector of exponents in \spad{k} variables and vector of univariate polynomials to parallel vector of exponents in \spad{k+1} variables and coefficients
714113`\spad{repeatedIndex(jv)} returns the multi-index of the jet variable \spad{jv} in repeated index notation.
714259`\spad{repeating(l)} is a repeating stream whose period is the list \spad{l}.
714307`\spad{repeating?(l,{} s)} returns \spad{true} if a stream \spad{s} is periodic with period \spad{l},{} and \spad{false} otherwise.
714382`\spad{repeatUntilLoop(s,{} c)} creates a repeat ... until loop in FORTRAN.
714440`\spad{replace(s,{} i..j,{} t)} replaces the substring \spad{s(i..j)} of \spad{s} by string \spad{t}.
714600`\spad{replaceKthElement(S,{} k,{} p)} replaces the \spad{k^}{th} element of \spad{S} by \spad{p},{} and returns "failed" if the result is not a set of \spad{M} integers in \spad{1..n} any more.
714717`\spad{representationType()} returns the type of the representation,{} one of: \spad{prime},{} \spad{polynomial},{} \spad{normal},{} or \spad{cyclic}.
715100`\spad{represents([a1,{} ..,{} an])} returns \spad{a1*v1 + ... + an*vn},{} where \spad{v1},{} ...,{} \spad{vn} are the elements of the fixed basis.
715174`\spad{represents([a1,{} ..,{} an])} returns \spad{a1*v1 + ... + an*vn},{} where \spad{v1},{} ...,{} \spad{vn} are the elements of the fixed basis.
715235`\spad{represents([a1,{} ...,{} an])} returns \spad{a1*v1 + ... + an*vn},{} where \spad{v1},{} ...,{} \spad{vn} are the elements of the fixed \spad{R}-module basis.
715776`\spad{represents([a1,{} ..,{} an],{} [v1,{} ..,{} vn])} returns \spad{a1*v1 + ... + an*vn}.
715852`\spad{represents([a1,{} ...,{} am],{} [v1,{} ...,{} vm])} returns the linear combination \spad{a1*vm + ... + an*vm}.
715939`\spad{represents([A0,{} ...,{} A(n-1)],{} D)} returns \spad{(A0 + A1 y +...+ A(n-1)*y^(n-1))/D}.
716017`\spad{repSq(v,{} e)} computes \spad{v^e} by repeated squaring,{} interpreting \spad{v} as an element of a normal basis field.
716116`\spad{reseed(n)} restarts the random number generator at \spad{n}.
716172`\spad{reset(v)} sets the current state of the graph characteristics of the given two-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{TwoDimensionalViewport},{} back to their initial settings.
716226`\spad{reset(v)} sets the current state of the graph characteristics of the given three-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{ThreeDimensionalViewport},{} back to their initial settings.
716282`\spad{resetBadValues(p)} initializes the list of "bad values" for \spad{p} to \spad{[]}. Note: \spad{p} is not allowed to match any of its "bad values".
716331`\spad{resetNew()} resets the internals counters that new() and new(\spad{s}) use to return distinct symbols every time.
716370`\spad{resetVariableOrder()} cancels any previous use of setVariableOrder and returns to the default system ordering.
716440`\spad{reshape(lt,{} ts)} organizes the list of components \spad{lt} into a tensor with the same shape as \spad{ts}.
716572`\spad{resize(v,{} w,{} h)} displays the two-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{TwoDimensionalViewport},{} with a width of \spad{w} and a height of \spad{h},{} keeping the upper left-hand corner position unchanged.
716659`\spad{resize(v,{} w,{} h)} displays the three-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{ThreeDimensionalViewport},{} with a width of \spad{w} and a height of \spad{h},{} keeping the upper left-hand corner position unchanged.
716748`\spad{rest(x)} return \spad{x} without the first entry or error if \spadopFrom{retractable?}{FreeMagma}(\spad{x}) is \spad{true}.
716795`\spad{rest(x)} returns \spad{x} except the first letter.
716838`\spad{rest([l1]*[l2]*...[ln])} returns the list \spad{l2,{} .... ln}.
717076`\spad{rest(u)} returns an aggregate consisting of all but the first element of \spad{u} (equivalently,{} the next node of \spad{u}).
717132`\spad{rest(ts)} returns the polynomials of \spad{ts} with smaller main variable than \spad{mvar(ts)} if \spad{ts} is not empty,{} otherwise returns "failed"
717344`\spad{rest(u,{} n)} returns the \spad{n}th (\spad{n} \spad{>=} 0) node of \spad{u}. Note: \spad{rest(u,{} 0) = u}.
717419`\spad{result(a)} where \spad{ls} is the leaves list of \spad{a} returns \spad{[[value(s),{} condition(s)]\$VT for s in ls]} if the computations are terminated in \spad{a} else an error is produced.
717494`\spad{resultant(P,{} Q)} returns the resultant of \spad{P} and \spad{Q}
717566`\spad{resultant(a,{} b)} computes the resultant of \spad{a} and \spad{b} where \spad{a} and \spad{b} are assumed to have the same main variable \spad{v} and are viewed as univariate polynomials in \spad{v}.
717659`\spad{resultant(p,{} q)} returns the resultant of the polynomials \spad{p} and \spad{q}.
717818`\spad{resultant(v1,{} v2,{} p)} computes resultant of \spad{v1} and \spad{v2} modulo \spad{p}.
717912`\spad{resultant(p,{} q,{} v)} returns the resultant of the polynomials \spad{p} and \spad{q} with respect to the variable \spad{v}.
718009`\spad{resultantEuclidean(P,{} Q)} carries out the equality \spad{coef1*P + coef2*Q = resultant(P,{} Q)}
718130`\spad{resultantEuclidean_naif(P,{} Q)} returns the extended resultant of \spad{P} and \spad{Q} computed by means of the naive algorithm.
718256`\spad{resultantEuclidean_naif(P,{} Q)} returns the resultant of \spad{P} and \spad{Q} computed by means of the naive algorithm.
718333`\spad{resultantReduit(P,{}Q)} returns the "reduce resultant" of \spad{P} and \spad{Q}.
718427`\spad{resultantReduitEuclidean(P,{} Q)} returns the "reduce resultant" and carries out the equality \spad{coef1*P + coef2*Q = resultantReduit(P,{} Q)}.
718734`\spad{retract(de)} returns the system defining the differential equation \spad{de}.
719308`\spad{retract(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
719379`\spad{retract(e)} takes \spad{e} and transforms it into a \indented{1}{FortranExpression checking that it contains no non-Fortran} \indented{1}{functions,{} and that it only contains the given basic symbols} \indented{1}{and subscripted symbols which correspond to scalar and array} \indented{1}{parameters respectively.}
719506`\spad{retract(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
719579`\spad{retract(e)} takes \spad{e} and transforms it into a \indented{1}{FortranExpression checking that it contains no non-Fortran} \indented{1}{functions,{} and that it only contains the given basic symbols} \indented{1}{and subscripted symbols which correspond to scalar and array} \indented{1}{parameters respectively.}
719710`\spad{retract(e)} takes \spad{e} and transforms it into a \indented{1}{FortranExpression checking that it contains no non-Fortran} \indented{1}{functions,{} and that it only contains the given basic symbols} \indented{1}{and subscripted symbols which correspond to scalar and array} \indented{1}{parameters respectively.}
719806`\spad{retract(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
719887`\spad{retract(e)} takes \spad{e} and transforms it into a \indented{1}{FortranExpression checking that it contains no non-Fortran} \indented{1}{functions,{} and that it only contains the given basic symbols} \indented{1}{and subscripted symbols which correspond to scalar and array} \indented{1}{parameters respectively.}
720024`\spad{retract(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
720107`\spad{retract(e)} takes \spad{e} and transforms it into a \indented{1}{FortranExpression checking that it contains no non-Fortran} \indented{1}{functions,{} and that it only contains the given basic symbols} \indented{1}{and subscripted symbols which correspond to scalar and array} \indented{1}{parameters respectively.}
720248`\spad{retract(p)} is like \spad{retractIfCan(p)} put yields a hard error,{} if \spad{p} contains further jet variables.
720404`\spad{retract(p)} is like \spad{retractIfCan(p)} put yields a hard error,{} if \spad{p} contains further jet variables.
720482`\spad{retract(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
720567`\spad{retract(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
720654`\spad{retract(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
720749`\spad{retract(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
720846`\spad{retract(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
720931`\spad{retract(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
721018`\spad{retract(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
721089`\spad{retract(e)} takes \spad{e} and transforms it into a \indented{1}{FortranExpression checking that it contains no non-Fortran} \indented{1}{functions,{} and that it only contains the given basic symbols} \indented{1}{and subscripted symbols which correspond to scalar and array} \indented{1}{parameters respectively.}
721306`\spad{retract(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
721379`\spad{retract(e)} takes \spad{e} and transforms it into a \indented{1}{FortranExpression checking that it contains no non-Fortran} \indented{1}{functions,{} and that it only contains the given basic symbols} \indented{1}{and subscripted symbols which correspond to scalar and array} \indented{1}{parameters respectively.}
721664`\spad{retract(a)} transforms a into an element of \% if possible. Error: if a cannot be made into an element of \%.
724359`\spad{retract(e)} takes \spad{e} and transforms it into a FortranExpression \indented{1}{checking that it is one of the given basic symbols} \indented{1}{or subscripted symbols which correspond to scalar and array} \indented{1}{parameters respectively.}
724448`\spad{retract(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
724533`\spad{retract(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
724620`\spad{retract(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
724715`\spad{retract(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
724812`\spad{retract(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
724897`\spad{retract(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
724984`\spad{retract(a)} transforms a into an element of \spad{S} if possible. Error: if a cannot be made into an element of \spad{S}.
725032`\spad{retract(a)} tries to convert \spad{a} into an object of type \spad{S}. If possible,{} it returns the object. Error: if no such retraction is possible.
725081`\spad{retract(p)} returns \spad{p} as an element of the current domain if \spad{retractIfCan(p)} does not return "failed",{} otherwise an error is produced.
725242`\spad{retract(p)} returns \spad{p} as an element of the current domain if \spad{retractIfCan(p)} does not return "failed",{} otherwise an error is produced.
725393`\spad{retract(p)} returns \spad{p} as an element of the current domain if \spad{retractIfCan(p)} does not return "failed",{} otherwise an error is produced.
725573`\spad{retract(p)} returns \spad{p} as an element of the current domain if \spad{retractIfCan(p)} does not return "failed",{} otherwise an error is produced.
725761`\spad{retract(p)} returns \spad{p} as an element of the current domain if \spad{retractIfCan(p)} does not return "failed",{} otherwise an error is produced.
725967`\spad{retract(p)} returns \spad{p} as an element of the current domain if \spad{retractIfCan(p)} does not return "failed",{} otherwise an error is produced.
726146`\spad{retractable?(p)} tests if \spad{p} is a 0-form,{} \spadignore{i.e.} if degree(\spad{p}) = 0.
726205`\spad{retractable?(df)} tests if differential form \spad{df} is a 0-form,{} \spadignore{i.e.} if degree(\spad{df}) = 0.
726282`\spad{retractable?(x)} tests if \spad{x} is a tree with only one entry.
726342`\spad{retractable?(x)} tests if \spad{x} is a tree with only one entry.
726403`\spad{retractable?([l1]*[l2]*...[ln])} returns \spad{true} iff \spad{n} equals \spad{1}.
726485`\spad{retractable?(a)} tests if \spad{a} can be converted into an object of type \spad{S}.
727638`\spad{retractIfCan(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
727730`\spad{retractIfCan(e)} takes \spad{e} and tries to transform it into a \indented{1}{FortranExpression checking that it contains no non-Fortran} \indented{1}{functions,{} and that it only contains the given basic symbols} \indented{1}{and subscripted symbols which correspond to scalar and array} \indented{1}{parameters respectively.}
727878`\spad{retractIfCan(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
727972`\spad{retractIfCan(e)} takes \spad{e} and tries to transform it into a \indented{1}{FortranExpression checking that it contains no non-Fortran} \indented{1}{functions,{} and that it only contains the given basic symbols} \indented{1}{and subscripted symbols which correspond to scalar and array} \indented{1}{parameters respectively.}
728124`\spad{retractIfCan(e)} takes \spad{e} and tries to transform it into a \indented{1}{FortranExpression checking that it contains no non-Fortran} \indented{1}{functions,{} and that it only contains the given basic symbols} \indented{1}{and subscripted symbols which correspond to scalar and array} \indented{1}{parameters respectively.}
728241`\spad{retractIfCan(x)} \undocumented
728390`\spad{retractIfCan(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
728492`\spad{retractIfCan(e)} takes \spad{e} and tries to transform it into a \indented{1}{FortranExpression checking that it contains no non-Fortran} \indented{1}{functions,{} and that it only contains the given basic symbols} \indented{1}{and subscripted symbols which correspond to scalar and array} \indented{1}{parameters respectively.}
728650`\spad{retractIfCan(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
728754`\spad{retractIfCan(e)} takes \spad{e} and tries to transform it into a \indented{1}{FortranExpression checking that it contains no non-Fortran} \indented{1}{functions,{} and that it only contains the given basic symbols} \indented{1}{and subscripted symbols which correspond to scalar and array} \indented{1}{parameters respectively.}
728916`\spad{retractIfCan(p)} tries to write a general expression as a linear function.
729093`\spad{retractIfCan(p)} checks whether \spad{p} depends only on the independent variables. If yes,{} it is coerced.
729277`\spad{retractIfCan(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
729383`\spad{retractIfCan(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
729491`\spad{retractIfCan(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
729607`\spad{retractIfCan(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
729725`\spad{retractIfCan(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
729831`\spad{retractIfCan(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
729939`\spad{retractIfCan(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
730031`\spad{retractIfCan(e)} takes \spad{e} and tries to transform it into a \indented{1}{FortranExpression checking that it contains no non-Fortran} \indented{1}{functions,{} and that it only contains the given basic symbols} \indented{1}{and subscripted symbols which correspond to scalar and array} \indented{1}{parameters respectively.}
730290`\spad{retractIfCan(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
730384`\spad{retractIfCan(e)} takes \spad{e} and tries to transform it into a \indented{1}{FortranExpression checking that it contains no non-Fortran} \indented{1}{functions,{} and that it only contains the given basic symbols} \indented{1}{and subscripted symbols which correspond to scalar and array} \indented{1}{parameters respectively.}
730732`\spad{retractIfCan(a)} transforms a into an element of \% if possible. Returns "failed" if a cannot be made into an element of \%.
734616`\spad{retractIfCan(e)} takes \spad{e} and tries to transform it into a FortranExpression \indented{1}{checking that it is one of the given basic symbols} \indented{1}{or subscripted symbols which correspond to scalar and array} \indented{1}{parameters respectively.}
734726`\spad{retractIfCan(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
734832`\spad{retractIfCan(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
734940`\spad{retractIfCan(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
735056`\spad{retractIfCan(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
735174`\spad{retractIfCan(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
735280`\spad{retractIfCan(e)} tries to convert \spad{e} into an ASP,{} checking that \indented{1}{legal Fortran-77 is produced.}
735388`\spad{retractIfCan(a)} transforms a into an element of \spad{S} if possible. Returns "failed" if a cannot be made into an element of \spad{S}.
735457`\spad{retractIfCan(a)} tries change \spad{a} into an object of type \spad{S}. If it can,{} then such an object is returned. Otherwise,{} "failed" is returned.
735527`\spad{retractIfCan(p)} returns \spad{p} as an element of the current domain if all its variables belong to \spad{V}.
735709`\spad{retractIfCan(p)} returns \spad{p} as an element of the current domain if all its variables belong to \spad{V}.
735881`\spad{retractIfCan(p)} returns \spad{p} as an element of the current domain if all its variables belong to \spad{V}.
736082`\spad{retractIfCan(p)} returns \spad{p} as an element of the current domain if all its variables belong to \spad{V}.
736291`\spad{retractIfCan(p)} returns \spad{p} as an element of the current domain if all its variables belong to \spad{V}.
736518`\spad{retractIfCan(p)} returns \spad{p} as an element of the current domain if all its variables belong to \spad{V}.
736718`\spad{returns()} creates a representation of a FORTRAN RETURN statement.
736760`\spad{returns(e)} creates a representation of a FORTRAN RETURN statement with a returned value.
736828`\spad{returns(e)} creates a representation of a FORTRAN RETURN statement with a returned value.
736887`\spad{returns(e)} creates a representation of a FORTRAN RETURN statement with a returned value.
736948`\spad{returns(e)} creates a representation of a FORTRAN RETURN statement with a returned value.
737016`\spad{returns(e)} creates a representation of a FORTRAN RETURN statement with a returned value.
737082`\spad{returns(e)} creates a representation of a FORTRAN RETURN statement with a returned value.
737150`\spad{returnType!(t)} declares that the return type of he current subprogram in the global symbol table is \spad{t}.
737241`\spad{returnType!(f,{} t)} declares that the return type of subprogram \spad{f} in the global symbol table is \spad{t}.
737339`\spad{returnType!(f,{} t,{} tab)} declares that the return type of subprogram \spad{f} in symbol table tab is \spad{t}.
737440`\spad{returnTypeOf(f,{} tab)} returns the type of the object returned by \spad{f}
737537`\spad{reverse!(l)} reverses the list of monomials forming \spad{l},{} destroying the element \spad{l}.
737592`\spad{reverse(l)} reverses the list of monomials forming \spad{l}. This has some effect if the monoid is non-abelian,{} \spadignore{i.e.} \spad{reverse(a1\^e1 ... an\^en) = an\^en ... a1\^e1} which is different.
737797`\spad{reverse(p)} returns the reverse polynomial of \spad{p}.
737866`\spad{reverse!(d)} destructively replaces \spad{d} by its reverse dequeue,{} \spadignore{i.e.} the top (front) element is now the bottom (back) element,{} and so on.
737919`\spad{reverse!(u)} returns \spad{u} with its elements in reverse order.
738024`\spad{reverse(a)} returns a copy of \spad{a} with elements in reverse order.
738098`implements reverse for a single term by using: grade: 0 1 2 3... multi: 1 1 \spad{-1} \spad{-1}...
738156`\spad{reverseLex(v1,{} v2)} return \spad{true} if the vector \spad{v1} is less than the vector \spad{v2} in the ordering which is total degree refined by the reverse lexicographic ordering.
738297`\spad{revert(f(x))} returns a Taylor series \spad{g(x)} such that \spad{f(g(x)) = g(f(x)) = x}. Series \spad{f(x)} should have constant coefficient 0 and invertible 1st order coefficient.
738365`\spad{revert(a)} computes the inverse of a power series \spad{a} with respect to composition. the series should have constant coefficient 0 and invertible first order coefficient.
738541`\spad{rewriteIdealWithHeadRemainder(lp,{} cs)} returns \spad{lr} such that the leading monomial of every polynomial in \spad{lr} is reduced in the sense of Groebner bases \spad{w}.\spad{r}.\spad{t}. \spad{cs} and \spad{(lp,{} cs)} and \spad{(lr,{} cs)} generate the same ideal in \spad{(R)^(-1) P}.
738665`\spad{rewriteIdealWithQuasiMonicGenerators(lp,{} redOp?,{} redOp)} returns \spad{lq} where \spad{lq} and \spad{lp} generate the same ideal in \spad{R^(-1) P} and \spad{lq} has rank not higher than the one of \spad{lp}. Moreover,{} \spad{lq} is computed by reducing \spad{lp} \spad{w}.\spad{r}.\spad{t}. some basic set of the ideal generated by the quasi-monic polynomials in
738665`-- \spad{lp}.
738894`\spad{rewriteIdealWithRemainder(lp,{} cs)} returns \spad{lr} such that every polynomial in \spad{lr} is fully reduced in the sense of Groebner bases \spad{w}.\spad{r}.\spad{t}. \spad{cs} and \spad{(lp,{} cs)} and \spad{(lr,{} cs)} generate the same ideal in \spad{(R)^(-1) P}.
739014`\spad{rewriteSetByReducingWithParticularGenerators(lp,{} pred?,{} redOp?,{} redOp)} returns \spad{lq} where \spad{lq} is computed by the following algorithm. Chose a basic set \spad{w}.\spad{r}.\spad{t}. the reduction-test \spad{redOp?} among the polynomials satisfying property \spad{pred?},{} if it is empty then leave,{} else reduce the other polynom
739014`--ials by this basic set \spad{w}.\spad{r}.\spad{t}. the reduction-operation \spad{redOp}. Repeat while another basic set with smaller rank can be computed. See code. If \spad{pred?} is \spad{quasiMonic?} the ideal is unchanged.
739281`\spad{rewriteSetWithReduction(lp,{} ts,{} redOp,{} redOp?)} returns a list \spad{lq} of polynomials such that \spad{[reduce(p,{} ts,{} redOp,{} redOp?) for p in lp]} and \spad{lp} have the same zeros inside the regular zero set of \spad{ts}. Moreover,{} for every polynomial \spad{q} in \spad{lq} and every polynomial \spad{t} in \spad{ts} \spad{redOp?(q,{} t)} holds and there exists a polyn
739281`--omial \spad{p} in the ideal generated by \spad{lp} and a product \spad{h} of \spad{initials(ts)} such that \spad{h*p - r} lies in the ideal generated by \spad{ts}. The operation \spad{redOp} must satisfy the following conditions. For every \spad{p} and \spad{q} we have \spad{redOp?(redOp(p,{} q),{} q)} and there exists an integer \spad{e} and a polynomial \spad{f} such that \spad{init(q)^e*p = f*q + redOp(p,{} q)}.
739397`\spad{RF2UTS(f)} converts \spad{f} to a Taylor series.
739484`\spad{rhs(f)} returns the right side of \spad{f}
739528`\spad{rhs(r)} returns the right hand side of the rule \spad{r}.
739577`\spad{rhs(eqn)} returns the right hand side of equation \spad{eqn}.
739616`\spad{ricDsolve(op)} returns the rational solutions of the associated Riccati equation of \spad{op y = 0}.
739764`\spad{ricDsolve(op)} returns the rational solutions of the associated Riccati equation of \spad{op y = 0}.
739915`\spad{ricDsolve(op,{} ezfactor)} returns the rational solutions of the associated Riccati equation of \spad{op y = 0}. Argument \spad{ezfactor} is a factorisation in \spad{UP},{} not necessarily into irreducibles.
740082`\spad{ricDsolve(op,{} zeros)} returns the rational solutions of the associated Riccati equation of \spad{op y = 0}. \spad{zeros} is a zero finder in \spad{UP}.
740213`\spad{ricDsolve(op,{} ezfactor)} returns the rational solutions of the associated Riccati equation of \spad{op y = 0}. Argument \spad{ezfactor} is a factorisation in \spad{UP},{} not necessarily into irreducibles.
740383`\spad{ricDsolve(op,{} zeros)} returns the rational solutions of the associated Riccati equation of \spad{op y = 0}. \spad{zeros} is a zero finder in \spad{UP}.
740517`\spad{ricDsolve(op,{} zeros,{} ezfactor)} returns the rational solutions of the associated Riccati equation of \spad{op y = 0}. \spad{zeros} is a zero finder in \spad{UP}. Argument \spad{ezfactor} is a factorisation in \spad{UP},{} not necessarily into irreducibles.
740667`\spad{ricDsolve(op,{} zeros,{} ezfactor)} returns the rational solutions of the associated Riccati equation of \spad{op y = 0}. \spad{zeros} is a zero finder in \spad{UP}. Argument \spad{ezfactor} is a factorisation in \spad{UP},{} not necessarily into irreducibles.
740820`\spad{ridHack1(i,{} j,{} k,{} l)} \undocumented
740914`\spad{riemannZeta(z)} is the Riemann Zeta function
740979`\spad{riemannZeta(z)} is the Riemann Zeta function.
741039`\spad{right(x)} returns right subtree of \spad{x} or error if \spadopFrom{retractable?}{FreeMagma}(\spad{x}) is \spad{true}.
741087`\spad{right(x)} returns right subtree of \spad{x} or error if \spadopFrom{retractable?}{LyndonWord}(\spad{x}) is \spad{true}.
741136`\spad{right(f)} right-justifies form \spad{f} in total space.
741177`\spad{right(a)} returns the right child.
741235`\spad{right(rootChar)} is the right bound of the isolating interval
741329`\spad{right(f,{} n)} right-justifies form \spad{f} within space of width \spad{n}.
741378`\spad{rightAlternative?()} tests if \spad{2*associator(a,{} b,{} b) = 0} for all \spad{a},{} \spad{b} in the algebra. Note: we only can test this; in general we don\spad{'t} know whether \spad{2*a=0} implies \spad{a=0}.
741461`\spad{rightAlternative?()} tests if \spad{2*associator(a,{} b,{} b) = 0} for all \spad{a},{} \spad{b} in the algebra. Note: we only can test this; in general we don\spad{'t} know whether \spad{2*a=0} implies \spad{a=0}.
741653`\spad{rightCharacteristicPolynomial(a)} returns the characteristic polynomial of the right regular representation of \spad{a} with respect to any basis.
741769`\spad{rightDiscriminant()} returns the determinant of the \spad{n}-by-\spad{n} matrix whose element at the \spad{i}\spad{-}th row and \spad{j}\spad{-}th column is given by the right trace of the product \spad{vi*vj},{} where \spad{v1},{} ...,{} \spad{vn} are the elements of the fixed \spad{R}-module basis. Note: the same as \spad{determinant(rightTraceMatrix())}.
741842`\spad{rightDiscriminant()} returns the determinant of the \spad{n}-by-\spad{n} matrix whose element at the \spad{i}\spad{-}th row and \spad{j}\spad{-}th column is given by the right trace of the product \spad{vi*vj},{} where \spad{v1},{} ...,{} \spad{vn} are the elements of the fixed \spad{R}-module basis. Note: the same as \spad{determinant(rightTraceMatrix())}.
742068`\spad{rightDiscriminant([v1,{} ...,{} vn])} returns the determinant of the \spad{n}-by-\spad{n} matrix whose element at the \spad{i}\spad{-}th row and \spad{j}\spad{-}th column is given by the right trace of the product \spad{vi*vj}. Note: the same as \spad{determinant(rightTraceMatrix([v1,{} ...,{} vn]))}.
742152`\spad{rightDivide(a,{} b)} returns the pair \spad{[q,{} r]} such that \spad{a = q*b + r} and the degree of \spad{r} is less than the degree of \spad{b}. This process is called ``right division\spad{''}.
742269`\spad{rightDivide(a,{} b,{} sigma)} returns the pair \spad{[q,{} r]} such that \spad{a = q*b + r} and the degree of \spad{r} is less than the degree of \spad{b}. This process is called ``right division\spad{''}. \spad{\sigma} is the morphism to use.
742495`\spad{rightExactQuotient(a,{} b)} computes the value \spad{q},{} if it exists such that \spad{a = q*b}.
742713`\spad{rightExtendedGcd(a,{} b)} returns \spad{[c,{} d,{} g]} such that \spad{g = c * a + d * b = rightGcd(a,{} b)}.
742966`\spad{right_ext_ext_GCD(a,{} b)} returns \spad{g,{} c,{} d,{} u,{} v} such that \spad{g = c * a + d * b = rightGcd(a,{} b)},{} \spad{u * a = - v * b = leftLcm(a,{} b)} and matrix \spad{matrix([[c,{} d],{} [u,{} v]} is invertible.
743113`\spad{rightFactorCandidate(p,{} n)} \undocumented
743207`\spad{rightFactorIfCan(f,{} d,{} c)} returns a candidate to be the right factor (\spad{h} in \spad{f} = \spad{g} \spad{o} \spad{h}) of degree \spad{d} with leading coefficient \spad{c} of a functional decomposition of the polynomial \spad{f} or \spad{"failed"} if no such candidate.
743398`\spad{rightGcd(a,{} b)} computes the value \spad{g} of highest degree such that \indented{3}{\spad{a = aa*g}} \indented{3}{\spad{b = bb*g}} for some values \spad{aa} and \spad{bb}. The value \spad{g} is computed using right-division.
743548`\spad{rightLcm(a,{} b)} computes the value \spad{m} of lowest degree such that \spad{m = a*aa = b*bb} for some values \spad{aa} and \spad{bb}. The value \spad{m} is computed using left-division.
743737`\spad{rightMinimalPolynomial(a)} returns the polynomial determined by the smallest non-trivial linear combination of right powers of \spad{a}. Note: the polynomial never has a constant term as in general the algebra has no unit.
743867`\spad{rightMult(a,{} s)} returns \spad{a * s} where \spad{*} is the monoid operation,{} which is assumed non-commutative.
743989`\spad{rightNorm(a)} returns the determinant of the right regular representation of \spad{a}.
744057`\spad{rightOne(eq)} divides by the right hand side.
744130`\spad{rightOne(eq)} divides by the right hand side.
744382`\spad{rightPower(a,{} n)} returns the \spad{n}\spad{-}th right power of \spad{a},{} \spadignore{i.e.} \spad{rightPower(a,{} n) := rightPower(a,{} n-1) * a} and \spad{rightPower(a,{} 0) := 1}.
744450`\spad{rightPower(a,{} n)} returns the \spad{n}\spad{-}th right power of \spad{a},{} \spadignore{i.e.} \spad{rightPower(a,{} n) := rightPower(a,{} n-1) * a} and \spad{rightPower(a,{} 1) := a}.
744578`\spad{rightQuotient(a,{} b)} computes the pair \spad{[q,{} r]} such that \spad{a = q*b + r} and the degree of \spad{r} is less than the degree of \spad{b}. The value \spad{q} is returned.
744667`\spad{rightRank(x)} determines the number of linearly independent elements in \spad{b1*x},{} ...,{} \spad{bn*x},{} where \spad{b=[b1,{} ...,{} bn]} is a basis.
744736`\spad{rightRankPolynomial()} returns the right minimimal polynomial of the generic element
744891`\spad{rightRankPolynomial()} calculates the right minimal polynomial of the generic element in the algebra,{} defined by the same structural constants over the polynomial ring in symbolic coefficients with respect to the fixed basis.
745006`\spad{rightRankPolynomial()} calculates the right minimal polynomial of the generic element in the algebra,{} defined by the same structural constants over the polynomial ring in symbolic coefficients with respect to the fixed basis.
745211`\spad{rightRecip(a)} returns an element,{} which is a right inverse of \spad{a},{} or \spad{"failed"} if there is no unit element,{} if such an element doesn\spad{'t} exist or cannot be determined (see unitsKnown).
745318`\spad{rightRecip(a)} returns an element,{} which is a right inverse of \spad{a},{} or \spad{"failed"} if such an element doesn\spad{'t} exist or cannot be determined (see unitsKnown).
745468`\spad{rightRegularRepresentation(a)} returns the matrix of the linear map defined by right multiplication by \spad{a} with respect to the fixed \spad{R}-module basis.
745751`\spad{rightRegularRepresentation(a,{} [v1,{} ...,{} vn])} returns the matrix \spad{m} of the linear map defined by right multiplication by \spad{a} with respect to the \spad{R}-module basis \spad{b = [v1,{} ...,{} vn]}. That is for all \spad{x} \spad{coordinates(x*a,{} b) = m*coordinates(x,{} b)}.
745927`\spad{rightRemainder(a,{} b)} computes the pair \spad{[q,{} r]} such that \spad{a = q*b + r} and the degree of \spad{r} is less than the degree of \spad{b}. The value \spad{r} is returned.
746017`\spad{rightScalarTimes!(c,{} a,{} r)} computes the scalar product \spad{a * r} and stores the result in the matrix \spad{c}. Error: if \spad{a} and \spad{c} do not have the same dimensions.
746186`\spad{rightTrace(a)} returns the trace of the right regular representation of \spad{a}.
746255`\spad{rightTraceMatrix()} is the \spad{n}-by-\spad{n} matrix whose element at the \spad{i}\spad{-}th row and \spad{j}\spad{-}th column is given by the right trace of the product \spad{vi*vj},{} where \spad{v1},{} ...,{} \spad{vn} are the elements of the fixed \spad{R}-module basis.
746335`\spad{rightTraceMatrix()} is the \spad{n}-by-\spad{n} matrix whose element at the \spad{i}\spad{-}th row and \spad{j}\spad{-}th column is given by the right trace of the product \spad{vi*vj},{} where \spad{v1},{} ...,{} \spad{vn} are the elements of the fixed \spad{R}-module basis.
746582`\spad{rightTraceMatrix([v1,{} ...,{} vn])} is the \spad{n}-by-\spad{n} matrix whose element at the \spad{i}\spad{-}th row and \spad{j}\spad{-}th column is given by the right trace of the product \spad{vi*vj}.
746673`\spad{rightTrim(s,{} c)} returns \spad{s} with all trailing occurrences of \spad{c} deleted. For example,{} \spad{rightTrim(" abc ",{} char " ")} returns \spad{" abc"}.
746733`\spad{rightTrim(s,{} cc)} returns \spad{s} with all trailing occurences of characters in \spad{cc} deleted. For example,{} \spad{rightTrim("(abc)",{} charClass "()")} returns \spad{"(abc"}.
746873`\spad{rightUnit()} returns a right unit of the algebra (not necessarily unique),{} or \spad{"failed"} if there is none.
746977`\spad{rightUnits()} returns the affine space of all right units of the algebra,{} or \spad{"failed"} if there is none
747212`\spad{rightUnits()} returns the affine space of all right units of the algebra,{} or \spad{"failed"} if there is none.
747351`\spad{rightZero(eq)} subtracts the right hand side.
747416`\spad{risch_de_ext(n,{} f,{} g,{} x)} returns \spad{[y,{} h,{} p,{} b]} such that \spad{dy/dx + n df/dx y + exp(-nf)dp = h} and \spad{b := h = g}. The equation \spad{dy/dx + n df/dx y = g} has no solution if \spad{h \~~= g} (\spad{y} is a partial solution in that case).
747537`\spad{rischDEsys(n,{} f,{} g_1,{} g_2,{} x,{} lim,{} ext)} returns \spad{y_1.y_2} such that \spad{(dy1/dx,{} dy2/dx) + ((0,{} - n df/dx),{} (n df/dx,{} 0)) (y1,{} y2) = (g1,{} g2)} if \spad{y_1,{}y_2} exist,{} "failed" otherwise. \spad{lim} is a limited integration
747537`-- function,{} ext is an extended integration function.
747780`\spad{rischNormalize(f,{} lx)} is rischNormalize([\spad{f}],{} \spad{lx})
747917`\spad{rischNormalize(f,{} x)} is rischNormalize([\spad{f}],{} [\spad{x}]) rischNormalize(\spad{f},{} \spad{x}) returns \spad{[g,{} [k1,{} ...,{} kn],{} [h1,{} ...,{} hn]]} such that \spad{g = normalize(f,{} x)} and each \spad{\spad{ki}} was rewritten as \spad{\spad{hi}} during the normalization.
748048`\spad{rischNormalize(lf,{} lx)} returns \spad{[lg,{} [k1,{} ...,{} kn],{} [h1,{} ...,{} hn]]} such that \spad{lg = normalize(lf,{} lx)} and each \spad{\spad{ki}} was rewritten as \spad{\spad{hi}} during the normalization.
748290`\spad{RittWuCompare(a,{}b)} returns \spad{"failed"} if \spad{a} and \spad{b} have same rank \spad{w}.\spad{r}.\spad{t}. Ritt and Wu Wen Tsun ordering using the refinement of Lazard,{} otherwise returns \spad{infRittWu?(a,{} b)}.
748387`\spad{rk4(y,{} n,{} x1,{} h,{} derivs)} uses a 4-th order Runge-Kutta method to numerically integrate the ordinary differential equation {\em dy/dx = f(y,{} x)} of \spad{n} variables,{} where \spad{y} is an \spad{n}-vector. Argument \spad{y} is a vector of initial conditions of length \spad{n} which upon exit contains the solution at \spad{x1 + h},{} \spad{n} is t
748387`--he number of dependent variables,{} \spad{x1} is the initial point,{} \spad{h} is the step size,{} and \spad{derivs} is a function which computes the right hand side of the ordinary differential equation. For details,{} see \spadtype{NumericalOrdinaryDifferentialEquations}.
748529`\spad{rk4(y,{} n,{} x1,{} h,{} derivs,{} t1,{} t2,{} t3,{} t4)} is the same as \spad{rk4(y,{} n,{} x1,{} h,{} derivs)} except that you must provide 4 scratch arrays \spad{t1}-\spad{t4} of size \spad{n}. For details,{} see \con{NumericalOrdinaryDifferentialEquations}.
748727`\spad{rk4a(y,{} n,{} x1,{} x2,{} eps,{} h,{} ns,{} derivs)} is a driver function for the numerical integration of an ordinary differential equation {\em dy/dx = f(y,{} x)} of \spad{n} variables,{} where \spad{y} is an \spad{n}-vector using a 4-th order Runge-Kutta method. For details,{} see \con{NumericalOrdinaryDifferentialEquations}.
748890`\spad{rk4f(y,{} n,{} x1,{} x2,{} ns,{} derivs)} uses a 4-th order Runge-Kutta method to numerically integrate the ordinary differential equation {\em dy/dx = f(y,{} x)} of \spad{n} variables,{} where \spad{y} is an \spad{n}-vector. Starting with \spad{y} at \spad{x1},{} this function uses \spad{ns} fixed steps of a 4-th order Runge-Kutta integrator to adv
748890`--ance the solution vector to \spad{x2} and return the values in \spad{y}. For details,{} see \con{NumericalOrdinaryDifferentialEquations}.
749041`\spad{rk4qc(y,{} n,{} x1,{} step,{} eps,{} yscal,{} derivs,{} t1,{} t2,{} t3,{} t4,{} t5,{} t6,{} t7)} is a subfunction for the numerical integration of an ordinary differential equation {\em dy/dx = f(y,{} x)
749041`--} of \spad{n} variables,{} where \spad{y} is an \spad{n}-vector using a 4-th order Runge-Kutta method. This function takes a 5-th order Runge-Kutta \spad{step} with monitoring of local truncation to ensure accuracy and adjust stepsize. For details,{} see \con{NumericalOrdinaryDifferentialEquations}.
749340`\spad{rk4qc(y,{} n,{} x1,{} step,{} eps,{} yscal,{} derivs)} is a subfunction for the numerical integration of an ordinary differential equation {\em dy/dx = f(y,{} x)} of \spad{n} variables,{} where \spad{y} is an \spad{n}-vector using a 4-th order Runge-Kutta method. This function takes a 5-th order Runge
749340`---Kutta \spad{step} with monitoring of local truncation to ensure accuracy and adjust stepsize. For details,{} see \con{NumericalOrdinaryDifferentialEquations}.
749540`\spad{rmap(f,{} e)} rewrites \spad{e} replacing each kernel \spad{k} in \spad{e} by \spad{f}(\spad{k})
749622`\spad{roman(n)} creates a roman numeral for \spad{n}.
749670`\spad{roman(n)} creates a roman numeral for symbol \spad{n}.
749717`\spad{romberg(fn,{} a,{} b,{} epsrel,{} epsabs,{} nmin,{} nmax)} uses the romberg method to numerically integrate function \spadvar{\spad{fn}} over the closed interval \spad{a} to \spad{b},{} with relative accuracy \spad{epsrel} and absolute accuracy \spad{epsabs},{} with the refinement levels for convergence checking vary from \spad{nmin} 
749717`--to \spad{nmax}. The value returned is a record containing the value of the integral,{} the estimate of the error in the computation,{} the total number of function evaluations,{} and either a boolean value which is \spad{true} if the integral was computed within the user specified error criterion. See \spadtype{NumericalQuadrature} for details.
749883`\spad{rombergo(fn,{} a,{} b,{} epsrel,{} epsabs,{} nmin,{} nmax)} uses the romberg method to numerically integrate function \spad{fn} over the open interval from \spad{a} to \spad{b},{} with relative accuracy \spad{epsrel} and absolute accuracy \spad{epsabs},{} with the refinement levels for convergence checking vary from \spad{nmin} to \s
749883`--pad{nmax}. The value returned is a record containing the value of the integral,{} the estimate of the error in the computation,{} the total number of function evaluations,{} and either a boolean value which is \spad{true} if the integral was computed within the user specified error criterion. See \spadtype{NumericalQuadrature} for details.
750050`\spad{root(f)} creates a form for the square root of form \spad{f}.
750090`\spad{root?(x)} \undocumented
750139`\spad{root(f,{} n)} creates a form for the \spad{n}th root of form \spad{f}.
750182`\spad{root(f,{} a)} returns a root of the polynomial \spad{f}. Argument \spad{a} must be a root of \spad{f} \spad{(mod p)}.
750276`\spad{rootBound(p)} returns a bound on the largest norm of the complex roots of \spad{p}.
750357`\spad{rootFactor(f)} transforms every radical of the form \spad{(a1*...*am)^(1/n)} appearing in \spad{f} into \spad{a^(1/n)*...*am^(1/n)}. This transformation is not in general valid for all complex numbers \spad{a} and \spad{b}.
750544`\spad{rootKerSimp(op,{} f,{} n)} should be local but conditional.
750732`\spad{rootNormalize(f,{} k)} returns \spad{f} rewriting either \spad{k} which must be an \spad{n}th-root in terms of radicals already in \spad{f},{} or some radicals in \spad{f} in terms of \spad{k}.
751188`\spad{rootOf(p)} returns \spad{y} such that \spad{p(y) = 0}. Error: if \spad{p} has more than one variable \spad{y}.
751255`\spad{rootOf(p)} returns \spad{y} such that \spad{p(y) = 0}. Error: if \spad{p} has more than one variable \spad{y}.
751323`\spad{rootOf(p)} returns \spad{y} such that \spad{p(y) = 0}.
751407`\spad{rootOf(p,{} y)} returns \spad{y} such that \spad{p(y) = 0}. The object returned displays as \spad{'y}.
751965`\spad{rootOf(p,{} y)} returns \spad{y} such that \spad{p(y) = 0}. The object returned displays as \spad{'y}.
752039`\spad{rootOf(pol,{} n)} creates the \spad{n}th root for the order of \spad{pol} and gives it unique name
752146`\spad{rootOf(p,{} y)} returns \spad{y} such that \spad{p(y) = 0}. The object returned displays as \spad{'y}.
752237`\spad{rootOf(pol,{} n)} gives the \spad{n}th root for the order of the Real Closure
752470`\spad{rootOf(pol,{} n,{} name)} creates the \spad{n}th root for the order of \spad{pol} and names it \spad{name}
752588`\spad{rootOfIrreduciblePoly(f)} computes one root of the monic,{} irreducible polynomial \spad{f},{} which degree must divide the extension degree of {\em F} over {\em GF},{} \spadignore{i.e.} \spad{f} splits into linear factors over {\em F}.
752697`\spad{rootPoly(g,{} n)} returns \spad{[m,{} c,{} P]} such that \spad{c * g ^ (1/n) = P ^ (1/m)} thus if \spad{y^n = g},{} then \spad{z^m = P} where \spad{z = c * y}.
752850`\spad{rootPower(f)} transforms every radical power of the form \spad{(a^(1/n))^m} into a simpler form if \spad{m} and \spad{n} have a common factor.
753003`\spad{rootProduct(f)} combines every product of the form \spad{(a^(1/n))^m * (a^(1/s))^t} into a single power of a root of \spad{a},{} and transforms every radical power of the form \spad{(a^(1/n))^m} into a simpler form.
753158`\spad{rootRadius(p)} calculates the root radius of \spad{p} with a maximal error quotient of {\em 1+globalEps},{} where {\em globalEps} is the internal error bound,{} which can be set by {\em setErrorBound}.
753224`\spad{rootRadius(p,{} errQuot)} calculates the root radius of \spad{p} with a maximal error quotient of {\em errQuot}.
753292`\spad{rootSimp(f)} transforms every radical of the form \spad{(a * b^(q*n+r))^(1/n)} appearing in \spad{f} into \spad{b^q * (a * b^r)^(1/n)}. This transformation is not in general valid for all complex numbers \spad{b}.
753849`\spad{rootsOf(p,{} y)} returns \spad{[y1,{} ...,{} yn]} such that \spad{p(\spad{yi}) = 0}; Note: the returned values \spad{y1},{} ...,{} \spad{yn} contain new symbols which are bound in the interpreter to the respective values. Error: if \spad{p} has more than one variable \spad{y}.
753923`\spad{rootsOf(p)} returns \spad{[y1,{} ...,{} yn]} such that \spad{p(\spad{yi}) = 0}. Note: the returned values \spad{y1},{} ...,{} \spad{yn} contain new symbols which are bound in the interpreter to the respective values. Error: if \spad{p} has more than one variable \spad{y}.
753998`\spad{rootsOf(p)} returns \spad{[y1,{} ...,{} yn]} such that \spad{p(\spad{yi}) = 0}. Note: the returned values \spad{y1},{} ...,{} \spad{yn} contain new symbols which are bound in the interpreter to the respective values.
754363`\spad{rootsOf(p,{} y)} returns \spad{[y1,{} ...,{} yn]} such that \spad{p(\spad{yi}) = 0}; The returned roots contain new symbols \spad{'\%z0},{} \spad{'\%z1} ...; Note: the new symbols are bound in the interpreter to the respective values.
754444`\spad{rootsOf(p,{} z)} returns \spad{[y1,{} ...,{} yn]} such that \spad{p(\spad{yi}) = 0}; The returned roots contain new symbols \spad{'\%z0},{} \spad{'\%z1} ...; Note: the new symbols are bound in the interpreter to the respective values.
754542`\spad{rootSplit(f)} transforms every radical of the form \spad{(a/b)^(1/n)} appearing in \spad{f} into \spad{a^(1/n) / b^(1/n)}. This transformation is not in general valid for all complex numbers \spad{a} and \spad{b}.
754602`\spad{rootSum(expr,{} p,{} s)}
754792`\spad{rotate! q} rotates queue \spad{q} so that the element at the front of the queue goes to the back of the queue. Note: rotate! \spad{q} is equivalent to enqueue!(dequeue!(\spad{q})).
754842`\spad{rotate(v,{} th,{} phi)} rotates the graph to the longitudinal view angle \spad{th} radians and the latitudinal view angle \spad{phi} radians for the viewport \spad{v},{} which is of the domain \spadtype{ThreeDimensionalViewport}.
754912`\spad{rotate(v,{} th,{} phi)} rotates the graph to the longitudinal view angle \spad{th} degrees and the latitudinal view angle \spad{phi} degrees for the viewport \spad{v},{} which is of the domain \spadtype{ThreeDimensionalViewport}. The new rotation position is not displayed until the function \spadfun{makeViewport3D} is executed again for \spad{v}.
754986`\spad{rotatex(r)} returns a dhmatrix for rotation about axis \spad{X} for \spad{r} degrees
755044`\spad{rotatey(r)} returns a dhmatrix for rotation about axis \spad{Y} for \spad{r} degrees
755102`\spad{rotatez(r)} returns a dhmatrix for rotation about axis \spad{Z} for \spad{r} degrees
755232`\spad{roughBase?(ps)} returns \spad{true} iff for every pair \spad{{p,{} q}} of polynomials in \spad{ps} their leading monomials are relatively prime.
755329`\spad{roughBasicSet(lp)} returns the smallest (with Ritt-Wu ordering) triangular set contained in \spad{lp}.
755559`\spad{roughEqualIdeals?(ps1,{} ps2)} returns \spad{true} iff it can proved that \spad{ps1} and \spad{ps2} generate the same ideal in \spad{(R)^(-1) P} without computing Groebner bases.
755744`\spad{roughSubIdeal?(ps1,{} ps2)} returns \spad{true} iff it can proved that all polynomials in \spad{ps1} lie in the ideal generated by \spad{ps2} in \spad{\spad{(R)^(-1) P}} without computing Groebner bases.
755925`\spad{roughUnitIdeal?(ps)} returns \spad{true} iff \spad{ps} contains some non null element lying in the base ring \spad{R}.
756070`\spad{round x} computes the integer closest to \spad{x}.
756117`\spad{routeArrows(s,{} a,{} b)} gives the shortest route between nodes 'a' and \spad{'b'} as a sequence of arrow indexes. [] if 'a' = \spad{'b'} [0] if it is not possible to go from 'a' to \spad{'b'}
756335`the cumulative weight of a given route. The route is given in terms of a sequence of arrow indexes.
756419`\spad{routeNodes(s,{} a,{} b)} gives the shortest route between nodes 'a' and \spad{'b'} as a sequence of node indexes. [a] if 'a' = \spad{'b'} [] if it is not possible to go from 'a' to \spad{'b'}
756635`the cumulative weight of a given route. The route is given in terms of a sequence of node indexes.
756718`\spad{row(A,{} i)} returns the \spad{i}\spad{-}th row of the matrix \spad{A}.
756888`\spad{row(m,{} i)} returns the \spad{i}th row of the matrix \spad{m}. Error: if the index is outside the proper range.
756966`\spad{row(m,{} i)} returns the \spad{i}th row of \spad{m} error check to determine if index is in proper ranges
757042`\spad{rowEch(m)} computes a modular row-echelon form of \spad{m},{} finding an appropriate modulus.
757119`\spad{primitiveRowEchelon(A)} computes a row echelon form for the matrix \spad{A}. The algorithm used is fraction-free elimination. It is especially adapted to matrices already close to row echelon form. The transformation matrix,{} the used pivots and the rank of the matrix are also returned.
757243`\spad{rowEchelon(m)} returns the row echelon form of the matrix \spad{m}.
757330`\spad{rowEchelon(m)} returns the row echelon form of the matrix \spad{m}. the result will have entries in the quotient field.
757427`\spad{rowEchelon(m)} returns the row echelon form of the matrix \spad{m}.
757507`\spad{rowEchelon(m)} returns the row echelon form of the matrix \spad{m}.
757590`\spad{rowEchelon(m)} returns the row echelon form of the matrix \spad{m}.
757688`\spad{rowEchelon(m)} returns the row echelon form of the matrix \spad{m}.
757785`\spad{rowEchelon(m,{} d)} computes a modular row-echelon form mod \spad{d} of \indented{3}{[\spad{d}\space{5}]} \indented{3}{[\space{2}\spad{d}\space{3}]} \indented{3}{[\space{4}. ]} \indented{3}{[\space{5}\spad{d}]} \indented{3}{[\space{3}\spad{M}\space{2}]} where \spad{M = m mod d}.
757868`\spad{rowEchelon(m,{} c,{} lv)} returns [\spad{m2},{} \spad{lv2}] such that \spad{m2} is the row echelon form of the matrix \spad{m}. \spad{lv2} is transformed \spad{lv} using \spad{c} as paramenter to \spad{apply}.
758006`\spad{rowEchelonLocal(m,{} d,{} p)} computes the row-echelon form of \spad{m} concatenated with \spad{d} times the identity matrix over a local ring where \spad{p} is the only prime.
758096`\spad{rowEchLocal(m,{} p)} computes a modular row-echelon form of \spad{m},{} finding an appropriate modulus over a local ring where \spad{p} is the only prime.
758180`\spad{rowMatrix} returns a single row out of a matrix. The row is put into a one by \spad{N} matrix.
758260`\spad{row_operation_base should} be local,{} but conditional
758385`\spad{row_operation_modular should} be local,{} but conditional
758521`\spad{rows} returns several rows out of a matrix. The rows are stacked into a matrix.
758602`\spad{rows} returns several rows out of a matrix. The rows are stacked into a matrix.
758768`\spad{rowSlice(m)} returns a segment \spad{s} such that for \spad{m} the access \spad{m}(\spad{s},{} \spad{j}) gives the \spad{j}-th column.
758854`\spad{rquo(x,{} y)} returns the exact right quotient of \spad{x} by \spad{y} \spadignore{i.e.} \spad{q} such that \spad{x = q * y},{} "failed" if \spad{x} is not of the form \spad{q * y}.
758916`\spad{rquo(x,{} s)} returns the exact right quotient of \spad{x} by \spad{s}.
758977`\spad{rquo(x,{} y)} returns the right simplification of \spad{x} by \spad{y}.
759028`\spad{rquo(x,{} w)} returns the right simplification of \spad{x} by \spad{w}.
759091`\spad{rquo(x,{} v)} returns the right simplification of \spad{x} by the variable \spad{v}.
759142`\spad{rquo(x,{} y)} returns the right simplification of \spad{x} by \spad{y}.
759255`\spad{rroot(f,{} n)} returns \spad{[m,{} c,{} r]} such that \spad{f^(1/n) = c * r^(1/m)}.
759381`\spad{rspace(n,{} m)} creates rectangular white space,{} \spad{n} wide by \spad{m} high.
759436`\spad{rst(s)} returns a pointer to the next node of stream \spad{s}. Caution: this function should only be called after a \spad{empty?} test has been made since there no error check.
759487`\spad{rubiksGroup constructs} the permutation group representing Rubic\spad{'s} Cube acting on integers {\em 10*i+j} for {\em 1 <= i <= 6},{} {\em 1 <= j <= 8}. The faces of Rubik\spad{'s} Cube are labelled in the obvious way Front,{} Right,{} Up,{} Down,{} Left,{} Back and numbered from 1 to 6 in this given ordering,{} the pieces on each face (except the unmoveable center piece) are clockwise numbered from 1 to 8 starting
759487`-- with the piece in the upper left corner. The moves of the cube are represented as permutations on these pieces,{} represented as a two digit integer {\em ij} where \spad{i} is the numer of theface (1 to 6) and \spad{j} is the number of the piece on this face. The remaining ambiguities are resolved by looking at the 6 generators,{} which represent a 90 degree turns of the faces,{} or from the following pictorial description. Permutation group representing Rubic\spad{'s} Cube acting on integers
759487`-- 10*i+j for 1 \spad{<=} \spad{i} \spad{<=} 6,{} 1 \spad{<=} \spad{j} \spad{<=8}. \blankline\begin{verbatim}Rubik's Cube:   +
759487`--
759487`---+ +
759487`-- B   where: marks Side # :               / U   /|/              /     / |         F(ront)    <->    1      L 
759487`-->  +
759487`--
759487`---+ R|         R(ight)    <->    2             |     |  +         U(p)       <->    3             |  F  | /          D(own)     <->    4             |     |/           L(eft)     <->    5             +
759487`--
759487`---+            B(ack)     <->    
759487`--6                ^                |                DThe Cube's surface:                               The pieces on each side            +
759487`---+              (except the unmoveable center            |567|              piece) are clockwise numbered            |4U8|              from 1 to 8 starting with the            |321|              piece in the upper left        +
759487`---+
759487`---+
759487`---+          corner (see figure on the        |781|123|345|          left).  The moves of the cube        |
759487`--6L2|8F4|2R6|          are represented as        |543|765|187|          permutations on these pieces.        +
759487`---+
759487`---+
759487`---+          Each of the pieces is            |123|              represented as a two digit            |8D4|              integer ij where i is the            |765|              # of the side ( 1 to 6 for            +
759487`---+              F to B (see table above ))            |567|              and j is the # of the piece.            |4B8|            |321|            +
759487`--
759487`---+\end{verbatim}
759569`\spad{rule(f,{} g)} creates the rewrite rule: \spad{f == eval(g,{} g is f)},{} with left-hand side \spad{f} and right-hand side \spad{g}.
759621`\spad{rule(f,{} g,{} [f1,{} ...,{} fn])} creates the rewrite rule \spad{f == eval(eval(g,{} g is f),{} [f1,{} ...,{} fn])},{} that is a rule with left-hand side \spad{f} and right-hand side \spad{g}; The symbols \spad{f1},{} ...,{} \spad{fn} are the operators that are considered quoted,{} that is they are not evaluated during any rewrite,{} but just applied formally to their arguments.
759686`\spad{rules(r)} returns the rules contained in \spad{r}.
759759`\spad{ruleset([r1,{} ...,{} rn])} creates the rule set \spad{{r1,{} ...,{} rn}}.
759834`\spad{rur(lp)} returns the same as \spad{rur(lp,{} true)}
760011`\spad{rur(lp,{} univ?)} returns a rational univariate representation of \spad{lp}. This assumes that \spad{lp} defines a regular triangular \spad{ts} whose associated variety is zero-dimensional over \spad{R}. \spad{rur(lp,{} univ?)} returns a list of items \spad{[u,{} lc]} where \spad{u} is an irreducible univariate poly
760011`--nomial and each \spad{c} in \spad{lc} involves two variables: one from \spad{ls},{} called the coordinate of \spad{c},{} and an extra variable which represents any root of \spad{u}. Every root of \spad{u} leads to a tuple of values for the coordinates of \spad{lc}. Moreover,{} a point \spad{x} belongs to the variety associated with \spad{lp} iff there exists an item \spad{[u,{} lc]} in \spad{rur(lp,{} univ?)} and a root \spad{r} of \spad{u} such that \spad{x} is given by the tuple of values fo
760011`--r the coordinates of \spad{lc} evaluated at \spad{r}. If \spad{univ?} is \spad{true} then each polynomial \spad{c} will have a constant leading coefficient \spad{w}.\spad{r}.\spad{t}. its coordinate. See the example which illustrates the \spadtype{ZeroDimensionalSolvePackage} package constructor.
760196`\spad{rur(ts,{} univ?)} returns a rational univariate representation of \spad{ts}. This assumes that the lowest polynomial in \spad{ts} is a variable \spad{v} which does not occur in the other polynomials of \spad{ts}. This variable will be used to define the simple algebraic extension over which these other polynomials will be rewritten as univariate polynomials with degree one. If \spad{univ?} is \spa
760196`--d{true} then these polynomials will have a constant initial.
760298`\spad{rur(lp,{} univ?,{} check?)} returns the same as \spad{rur(lp,{} true)}. Moreover,{} if \spad{check?} is \spad{true} then the result is checked.
760491`Constructs a \spad{S} combinator
760534`\spad{safeCeiling(x)} returns the integer which is greater than any integer with the same floating point number representation.
760624`\spad{safeFloor(x)} returns the integer which is lower or equal to the largest integer which has the same floating point number representation.
760712`\spad{safety returns} the specified safety or 1 as default.
760796`\spad{safety(d)} specifies the number of values reserved for testing any solutions found. This option is expressed in the form \spad{safety == d}.
760855`\spad{safetyMargin()} returns the number of low weight digits we do not trust in the floating point representation (used by \spadfun{safeCeiling}).
760956`\spad{safetyMargin(n)} sets to \spad{n} the number of low weight digits we do not trust in the floating point representation and returns the previous value (for use by \spadfun{safeCeiling}).
761224`\spad{sample yields} a value of type \%
761267`\spad{sample yields} a value of type \%
761306`\spad{sample yields} a value of type \%
761349`\spad{sample yields} a value of type \%
761385`\spad{sample()} returns an object of type \%.
761443`\spad{sample()} returns a sample of \%
761479`\spad{samplePoint(c)} returns the sample point of \spad{c}
761542`\spad{samplePoint(c)} returns the sample point of \spad{c}
761613`\spad{satisfy?(r,{} p)} returns \spad{true} if the matches satisfy the top-level predicate of \spad{p},{} \spad{false} if they don\spad{'t},{} and "failed" if not enough variables of \spad{p} are matched in \spad{r} to decide.
761702`\spad{satisfy?(v,{} p)} returns \spad{f}(\spad{v}) where \spad{f} is the predicate attached to \spad{p}.
761773`\spad{satisfy?([v1,{} ...,{} vn],{} p)} returns \spad{f(v1,{} ...,{} vn)} where \spad{f} is the top-level predicate attached to \spad{p}.
761850`\spad{saturate(I,{} f)} is the saturation of the ideal \spad{I} with respect to the multiplicative set generated by the polynomial \spad{f}.
761927`\spad{saturate(I,{} f,{} lvar)} is the saturation with respect to the prime principal ideal which is generated by \spad{f} in the polynomial ring \spad{F[lvar]}.
762017`\spad{save()} creates a representation of a SAVE statement.
762056`\spad{say(l)} sends a list of strings \spad{l} to output.
762111`\spad{say(s)} sends a string \spad{s} to output.
762160`\spad{sayLength(l)} returns the length of a list of strings \spad{l} as an integer.
762224`\spad{sayLength(s)} returns the length of a string \spad{s} as an integer.
762282`\spad{scalarMatrix(r)} returns an \spad{n}-by-\spad{n} matrix with \spad{r}\spad{'s} on the diagonal and zeroes elsewhere.
762432`\spad{scalarMatrix(n,{} r)} returns an \spad{n}-by-\spad{n} matrix with \spad{r}\spad{'s} on the diagonal and zeroes elsewhere.
762513`\spad{scalarTypeOf(t)} returns the FORTRAN data type of \spad{t}
762600`\spad{scale(k)} returns \spad{matrix [[k,{} 0],{} [0,{} 1]]} representing the map \spad{x -> k * x}.
762649`\spad{scale(m,{} h)} returns \spad{scale(h) * m} (see \spadfunFrom{shift}{MoebiusTransform}).
762701`\spad{scale(sx,{} sy,{} sz)} returns a dhmatrix for scaling in the \spad{X},{} \spad{Y} and \spad{Z} directions
762761`\spad{scale(v,{} n,{} sx,{} sy)} displays the graph in field \spad{n} of the given two-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{TwoDimensionalViewport},{} scaled by the factor \spad{sx} in the \spad{x}-coordinate direction and by the factor \spad{sy} in the \spad{y}-coordinate direction.
762844`\spad{scaleRoots(p,{} c)} returns the polynomial which has \spad{c} times the roots of \spad{p}.
762918`\spad{scan(func,{} vec,{} ident)} creates a new vector whose elements are the result of applying reduce to the binary function \spad{func},{} increasing initial subsequences of the vector \spad{vec},{} and the element ident.
763027`\spad{scan(fn,{} u,{} ident)} successively uses the binary function \spad{fn} to reduce more and more of list \spad{u}. \spad{ident} is returned if the \spad{u} is empty. The result is a list of the reductions at each step. See \spadfun{reduce} for more information. Examples: \spad{scan(fn,{} [1,{} 2],{} 0) = [fn(2,{} fn(1,{} 0)),{} fn(1,{} 0)]} and \spad{scan(*,{} [2,{} 3],{} 1) = [2 * 1,{} 3 * (2 * 1)]}.
763097`\spad{scan(f,{} a,{} r)} successively applies \spad{reduce(f,{} x,{} r)} to more and more leading sub-arrays \spad{x} of one-dimensional array \spad{a}. More precisely,{} if \spad{a} is \spad{[a1,{} a2,{} ...]},{} then \spad{scan(f,{} a,{} r)} returns \spad{[reduce(f,{} [a1],{} r),{} reduce(f,{} [a1,{} a2],{} r),{} ...]}.
763212`\spad{scan(f,{} a,{} r)} successively applies \spad{reduce(f,{} x,{} r)} to more and more leading sub-arrays \spad{x} of primitive array \spad{a}. More precisely,{} if \spad{a} is \spad{[a1,{} a2,{} ...]},{} then \spad{scan(f,{} a,{} r)} returns \spad{[reduce(f,{} [a1],{} r),{} reduce(f,{} [a1,{} a2],{} r),{} ...]}.
763312`\spad{scan(func,{} vec,{} ident)} creates a new vector whose elements are the result of applying reduce to the binary function \spad{func},{} increasing initial subsequences of the vector \spad{vec},{} and the element ident.
763388`\spad{scan(b,{} h,{} [x0,{} x1,{} x2,{} ...])} returns \spad{[y0,{} y1,{} y2,{} ...]},{} where \spad{y0 = h(x0,{} b)},{} \spad{y1 = h(x1,{} y0)},{} \spad{...} \spad{yn = h(xn,{} y(n-1))}.
763464`\spad{scan(f,{} a,{} r)} successively applies \spad{reduce(f,{} x,{} r)} to more and more leading sub-aggregates \spad{x} of aggregrate \spad{a}. More precisely,{} if \spad{a} is \spad{[a1,{} a2,{} ...]},{} then \spad{scan(f,{} a,{} r)} returns \spad{[reduce(f,{} [a1],{} r),{} reduce(f,{} [a1,{} a2],{} r),{} ...]}.
763543`\spad{scan(f,{} a,{} r)} successively applies \spad{reduce(f,{} x,{} r)} to more and more leading sub-aggregates \spad{x} of aggregate \spad{a}. More precisely,{} if \spad{a} is \spad{[a1,{} a2,{} ...]},{} then \spad{scan(f,{} a,{} r)} returns \spad {[reduce(f,{} [a1],{} r),{} reduce(f,{} [a1,{} a2],{} r),{} ...]}.
763619`\spad{ScanArabic(s)} forms an integer from an Arabic numeral string \spad{s}.
763685`\spad{ScanFloatIgnoreSpaces(s)} forms a floating point number from the string \spad{s} ignoring any spaces. Error is generated if the string is not recognised as a floating point number.
763752`\spad{ScanFloatIgnoreSpacesIfCan(s)} tries to form a floating point number from the string \spad{s} ignoring any spaces.
763840`\spad{scanOneDimSubspaces(basis,{} n)} gives a canonical representative of the {\em n}\spad{-}th one-dimensional subspace of the vector space generated by the elements of {\em basis},{} all from {\em R^n}. The coefficients of the representative are of shape {\em (0,{} ...,{} 0,{} 1,{} *,{} ...,{} *)},{} {\em *} in \spad{R}. If the size of \spad{R} is \spad{q},{} then there are
763840`-- {\em (q^n-1)/(q-1)} of them. We first reduce \spad{n} modulo this number,{} then find the largest \spad{i} such that {\em +/[q^i for i in 0..i-1] <= n}. Subtracting this sum of powers from \spad{n} results in an \spad{i}-digit number to \spad{basis} \spad{q}. This fills the positions of the stars.
763969`\spad{ScanRoman(s)} forms an integer from a Roman numeral string \spad{s}.
764034`\spad{schema(P,{} Q)} returns the list of degrees of non zero subresultants of \spad{P} and \spad{Q}.
764126`\spad{schwerpunkt(p)} determines the 'Schwerpunkt' of the roots of the polynomial \spad{p} of degree \spad{n},{} \spadignore{i.e.} the center of gravity,{} which is {\em coefficient of \spad{x^(n-1)}} divided by {\em n times coefficient of \spad{x^n}}.
764202`\spad{screenCoords(pt)} returns screen coordinates as a list.
764269`\spad{screenCoordX(pt)} returns the \spad{'x'}(left to right) screen coordinate.
764330`\spad{screenCoordY(pt)} returns the \spad{'y'}(bottom to top) screen coordinate.
764391`\spad{screenCoordZ(pt)} returns the \spad{'z'}(out from screen) screen coordinate.
764452`\spad{screenResolution()} returns the screen resolution
764501`\spad{screenResolution()} returns the screen resolution \spad{n}.
764562`\spad{screenResolution(n)} sets the screen resolution to \spad{n}.
764630`\spad{screenResolution3D()} returns the screen resolution for a 3d graph.
764683`\spad{script(s,{} [a,{} b,{} c,{} d,{} e])} returns \spad{s} with subscripts a,{} superscripts \spad{b},{} pre-superscripts \spad{c},{} pre-subscripts \spad{d},{} and argument-scripts \spad{e}. Omitted components are taken to be empty. For example,{} \spad{script(s,{} [a,{} b,{} c])} is equivalent to \spad{script(s,{} [a,{} b,{} c,{} [],{} []])}.
764744`\spad{script(s,{} [a,{} b,{} c,{} d,{} e])} returns \spad{s} with subscripts a,{} superscripts \spad{b},{} pre-superscripts \spad{c},{} pre-subscripts \spad{d},{} and argument-scripts \spad{e}.
764902`\spad{scripted?(s)} is \spad{true} if \spad{s} has been given any scripts.
764948`\spad{scripts(s)} returns all the scripts of \spad{s}.
765104`\spad{scripts(f,{} l)} where \spad{l} is \spad{[sub,{} super,{} presuper,{} presub]} creates a form for \spad{f} with scripts on all 4 corners. If \spad{l} has less than 4 elements corresponding scripts are absent.
765156`\spad{se2rfi(l)} converts \spad{l} to target domain
765266`\spad{search(k,{} t)} searches the table \spad{t} for the key \spad{k},{} returning the entry stored in \spad{t} for key \spad{k}. If \spad{t} has no such key,{} \spad{search(k,{}t)} returns "failed".
765347`\spad{sec(x)} applies the secant operator to \spad{x}
765511`\spad{sec(st)} computes secant of a power series \spad{st}.
765595`\spad{sec(st)} computes secant of a power series \spad{st}.
765693`\spad{sec(z)} returns the secant of Laurent series \spad{z}.
765780`\spad{sec(z)} returns the secant of a Puiseux series \spad{z}.
765876`\spad{sec(x)} returns the secant of \spad{x}.
765934`\spad{sec2cos(f)} converts every \spad{sec(u)} appearing in \spad{f} into \spad{1/cos(u)}.
765997`\spad{sech(x)} applies the hyperbolic secant operator to \spad{x}
766161`\spad{sech(st)} computes the hyperbolic secant of a power series \spad{st}.
766246`\spad{sech(st)} computes the hyperbolic secant of a power series \spad{st}.
766345`\spad{sech(z)} returns the hyperbolic secant of Laurent series \spad{z}.
766433`\spad{sech(z)} returns the hyperbolic secant of a Puiseux series \spad{z}.
766530`\spad{sech(x)} returns the hyperbolic secant of \spad{x}.
766586`\spad{sech2cosh(f)} converts every \spad{sech(u)} appearing in \spad{f} into \spad{1/cosh(u)}.
766651`\spad{sechIfCan(z)} returns sech(\spad{z}) if possible,{} and "failed" otherwise.
766733`\spad{secIfCan(z)} returns sec(\spad{z}) if possible,{} and "failed" otherwise.
766814`\spad{second(x)} selects second component of the product
766910`\spad{second(u)} returns the second element of \spad{u}. Note: \spad{second(u) = first(rest(u))}.
766967`\spad{seed()} returns the current seed value.
767018`\spad{SEGMENT(x)} creates the prefix form: \spad{x..}.
767061`\spad{segment(segb)} returns the segment from the right hand side of the \spadtype{SegmentBinding}. For example,{} if \spad{segb} is \spad{v=a..b},{} then \spad{segment(segb)} returns \spad{a..b}.
767119`\spad{l..} produces a half open segment,{} that is,{} one with no upper bound.
767170`\spad{segment(l)} is an alternate way to construct the segment \spad{l..}.
767221`\spad{SEGMENT(x,{} y)} creates the infix form: \spad{x..y}.
767267`\spad{l..h} creates a segment with \spad{l} and \spad{h} as the endpoints.
767319`\spad{segment(i,{} j)} is an alternate way to create the segment \spad{i..j}.
767371`\spad{select(x,{} n)} returns the \spad{n}-th element of tuple \spad{x}. tuples are 0-based
767806`\spad{select(ts,{} v)} returns the polynomial of \spad{ts} with \spad{v} as main variable,{} if any.
767885`\spad{select(p,{} u)} returns a copy of \spad{u} containing only those elements such \spad{p(x)} is \spad{true}. Note: \spad{select(p,{} u) == [x for x in u | p(x)]}.
767966`\spad{select!(p,{} d)} destructively changes dictionary \spad{d} by removing all entries \spad{x} such that \spad{p(x)} is not \spad{true}.
768058`\spad{select!(p,{} u)} destructively changes \spad{u} by keeping only values \spad{x} such that \spad{p(x)}.
768132`\spad{select(f,{} st)} returns a stream consisting of those elements of stream st satisfying the predicate \spad{f}. Note: \spad{select(f,{} st) = [x for x in st | f(x)]}.
768199`\spad{select(p,{} t)} returns \spad{[x for x in t | p(x)]}.
768260`\spad{selectAndPolynomials(lpred?,{} ps)} returns \spad{gps,{} bps} where \spad{gps} is a list of the polynomial \spad{p} in \spad{ps} such that \spad{pred?(p)} holds for every \spad{pred?} in \spad{lpred?} and \spad{bps} are the other ones.
768406`\spad{selectOrPolynomials(lpred?,{} ps)} returns \spad{gps,{} bps} where \spad{gps} is a list of the polynomial \spad{p} in \spad{ps} such that \spad{pred?(p)} holds for some \spad{pred?} in \spad{lpred?} and \spad{bps} are the other ones.
768551`\spad{selectPolynomials(pred?,{} ps)} returns \spad{gps,{} bps} where \spad{gps} is a list of the polynomial \spad{p} in \spad{ps} such that \spad{pred?(p)} holds and \spad{bps} are the other ones.
768688`\spad{semicolonSeparate(l)} creates the form separating the elements of \spad{l} by semicolons.
768747`\spad{indiceSubResultant(P,{} Q,{} i)} returns a subresultant \spad{S} of degree \spad{d} and carries out the equality \spad{...P + coef2*Q = S_i}. Warning: \spad{degree(P) >= degree(Q)}.
768895`\spad{discriminantEuclidean(P)} carries out the equality \spad{...P + coef2 * D(P) = discriminant(P)}. Warning: \spad{degree(P) >= degree(Q)}.
769010`\spad{semiIndiceSubResultantEuclidean(P,{} Q,{} i)} returns the subresultant \spad{S_i(P,{} Q)} and carries out the equality \spad{...P + coef2*Q = S_i(P,{} Q)} Warning: \spad{degree(P) >= degree(Q)}.
769158`\spad{semiLastSubResultantEuclidean(P,{} Q)} computes the last non zero subresultant \spad{S} and carries out the equality \spad{...P + coef2*Q = S}. Warning: \spad{degree(P) >= degree(Q)}.
769285`\spad{semiResultantEuclidean1(P,{} Q)} carries out the equality \spad{coef1.P + ? Q = resultant(P,{} Q)}.
769400`\spad{semiResultantEuclidean2(P,{} Q)} carries out the equality \spad{...P + coef2*Q = resultant(P,{} Q)}. Warning: \spad{degree(P) >= degree(Q)}.
769515`\spad{resultantEuclidean_naif(P,{} Q)} returns the semi-extended resultant of \spad{P} and \spad{Q} computed by means of the naive algorithm.
769634`\spad{semiResultantReduitEuclidean(P,{} Q)} returns the "reduce resultant" and carries out the equality \spad{...P + coef2*Q = resultantReduit(P,{} Q)}.
769776`\spad{semiSubResultantGcdEuclidean1(P,{} Q)} carries out the equality \spad{coef1*P + ? Q = +/- S_i(P,{} Q)} where the degree (not the indice) of the subresultant \spad{S_i(P,{} Q)} is the smaller as possible.
769894`\spad{semiSubResultantGcdEuclidean2(P,{} Q)} carries out the equality \spad{...P + coef2*Q = +/- S_i(P,{} Q)} where the degree (not the indice) of the subresultant \spad{S_i(P,{} Q)} is the smaller as possible. Warning: \spad{degree(P) >= degree(Q)}.
770012`\spad{sendGraphImage(\spad{gi})} takes the given graph,{} \spad{\spad{gi}} of the domain \spadtype{GraphImage},{} and sends it\spad{'s} data to the viewport manager where it waits to be included in a two-dimensional viewport window. \spad{\spad{gi}} cannot be an empty graph.
770132`\spad{separant(p)} returns the partial derivative of the differential polynomial \spad{p} with respect to its leader.
770205`\spad{separate(s)} makes each of the components of the \spadtype{SubSpace},{} \spad{s},{} into a list of separate and distinct subspaces and returns the list.
770258`\spad{separate(x)} \undocumented
770469`\spad{separate(p,{} q)} returns \spad{[a,{} b]} such that polynomial \spad{p = a b} and \spad{a} is relatively prime to \spad{q}.
770585`\spad{separateDegrees(p)} splits the square free polynomial \spad{p} into factors each of which is a product of irreducibles of the same degree.
770697`\spad{separateFactors(lfact)} takes the list produced by \spadfunFrom{separateDegrees}{DistinctDegreeFactorization} and produces the complete list of factors.
770815`\spad{separateFactors(ddl,{} p)} refines the distinct degree factorization produced by \spadfunFrom{ddFact}{ModularDistinctDegreeFactorizer} to give a complete list of factors.
770938`\spad{sequence(x)} turns the stream \spad{x} into a sequence
770998`\spad{sequence(f,{} s0)} generates a stream recursively by applying the function \spad{f:} \spad{S} \spad{->} \spad{S} to the last computed value.
771057`\spad{sequences([l0,{} l1,{} l2,{} ..,{} ln])} is the set of \indented{1}{all sequences formed from} \spad{l0} 0\spad{'s},{} \spad{l1} 1\spad{'s},{} \spad{l2} 2\spad{'s},{} ...,{} \spad{ln} \spad{n}\spad{'s}.
771147`\spad{sequences(l1,{} l2)} is the stream of all sequences that \indented{1}{can be composed from the multiset defined from} \indented{1}{two lists of integers \spad{l1} and \spad{l2}.} \indented{1}{For example,{} the pair \spad{([1,{} 2,{} 4],{} [2,{} 3,{} 5])} represents} \indented{1}{multi-set with 1 \spad{2},{} 2 \spad{3}\spad{'s},{} and 4 \spad{5}\spad{'s}.}
771251`\spad{series(s)} creates a power series from a stream of \indented{1}{ring elements.} \indented{1}{For univariate series types,{} the stream \spad{s} should be a stream} \indented{1}{of Taylor coefficients. For multivariate series types,{} the} \indented{1}{stream \spad{s} should be a stream of forms the \spad{n}th element} \indented{1}{of which is a} \indented{1}{form of degree \spad{n} in the power series variables.}
771316`\spad{series(st)} creates a series from a stream of non-zero terms,{} where a term is an exponent-coefficient pair. The terms in the stream should be ordered by increasing order of exponents.
771416`\spad{series(st)} creates a series from a stream of coefficients.
771501`\spad{series(f)} returns a series expansion of the expression \spad{f}. Note: \spad{f} should have only one variable; the series will be expanded in powers of that variable.
771573`\spad{series([a0,{} a1,{} a2,{} ...])} is the Taylor series \spad{a0 + a1 x + a2 x^2 + ...}.
771651`\spad{series(st)} creates a series from a stream of non-zero terms,{} where a term is an exponent-coefficient pair. The terms in the stream should be ordered by increasing order of exponents.
771750`\spad{series(st)} creates a series from a stream of non-zero terms,{} where a term is an exponent-coefficient pair. The terms in the stream should be ordered by increasing order of exponents.
771859`\spad{series(x)} returns \spad{x} viewed as a series.
771935`\spad{series(f,{} x = a)} expands the expression \spad{f} as a series in powers of (\spad{x} - a).
772020`\spad{series(f,{} n)} returns a series expansion of the expression \spad{f}. Note: \spad{f} should have only one variable; the series will be expanded in powers of that variable and terms will be computed up to order at least \spad{n}.
772110`\spad{series(n +-> a(n),{} x = a)} returns \spad{sum(n = 0..,{} a(n)*(x-a)^n)}.
772202`\spad{series(n,{} st)} creates a series from a common denomiator and a stream of non-zero terms,{} where a term is an exponent-coefficient pair. The terms in the stream should be ordered by increasing order of exponents and \spad{n} should be a common denominator for the exponents in the stream of terms.
772330`\spad{series(f,{} x = a,{} n)} expands the expression \spad{f} as a series in powers of (\spad{x} - a); terms will be computed up to order at least \spad{n}.
772433`\spad{series(a(n),{} n,{} x = a)} returns \spad{sum(n = 0..,{} a(n)*(x-a)^n)}.
772521`\spad{series(n +-> a(n),{} x = a,{} n0..)} returns \spad{sum(n = n0..,{} a(n) * (x - a)^n)}; \spad{series(n +-> a(n),{} x = a,{} n0..n1)} returns \spad{sum(n = n0..n1,{} a(n) * (x - a)^n)}.
772639`\spad{series(a(n),{} n,{} x=a,{} n0..)} returns \spad{sum(n = n0..,{} a(n) * (x - a)^n)}; \spad{series(a(n),{} n,{} x=a,{} n0..n1)} returns \spad{sum(n = n0..n1,{} a(n) * (x - a)^n)}.
772753`\spad{series(n +-> a(n),{} x = a,{} r0..,{} r)} returns \spad{sum(n = r0,{} r0 + r,{} r0 + 2*r...,{} a(n) * (x - a)^n)}; \spad{series(n +-> a(n),{} x = a,{} r0..r1,{} r)} returns \spad{sum(n = r0 + k*r while n <= r1,{} a(n) * (x - a)^n)}.
772909`\spad{series(a(n),{} n,{} x = a,{} r0..,{} r)} returns \spad{sum(n = r0,{} r0 + r,{} r0 + 2*r...,{} a(n) * (x - a)^n)}; \spad{series(a(n),{} n,{} x = a,{} r0..r1,{} r)} returns \spad{sum(n = r0 + k*r while n <= r1,{} a(n) * (x - a)^n)}.
773229`\spad{seriesSolve(eq,{} y,{} x=a,{} y a = b)} returns a Taylor series solution of \spad{eq} around \spad{x} = a with initial condition \spad{y(a) = b}. Note: \spad{eq} must be of the form \spad{f(x,{} y x) y'(x) + g(x,{} y x) = h(x,{} y x)}.
773343`\spad{seriesSolve(eq,{} y,{} x=a,{} b)} is equivalent to \spad{seriesSolve(eq,{} y,{} x=a,{} y a = b)}.
773447`\spad{seriesSolve(eq,{} y,{} x=a,{} [b0,{} ...,{} b(n-1)])} returns a Taylor series solution of \spad{eq} around \spad{x = a} with initial conditions \spad{y(a) = b0},{} \spad{y'(a) = b1},{} \spad{y''(a) = b2},{} ...,{} \spad{y(n-1)(a) = b(n-1)} \spad{eq} must be of the form \spad{f(x,{} y x,{} y'(x),{} ...,{} y(n-1)(x)) y(n)(x) + g(x,{} y x,{} y'(x),{} ...,{} y(n-1)(x)) = h(x,{} y x,{} y'(x),{}
773447`-- ...,{} y(n-1)(x))}.
773557`\spad{seriesSolve(eq,{} y,{} x = a,{} y a = b)} is equivalent to \spad{seriesSolve(eq=0,{} y,{} x=a,{} y a = b)}.
773661`\spad{seriesSolve(eq,{} y,{} x = a,{} b)} is equivalent to \spad{seriesSolve(eq = 0,{} y,{} x = a,{} y a = b)}.
773755`\spad{seriesSolve(eq,{} y,{} x = a,{} [b0,{} ...,{} bn])} is equivalent to \spad{seriesSolve(eq = 0,{} y,{} x = a,{} [b0,{} ...,{} b(n-1)])}.
773855`\spad{seriesSolve([eq1,{} ...,{} eqn],{} [y1,{} ...,{} yn],{} x = a,{} [y1 a = b1,{} ...,{} yn a = bn])} returns a taylor series solution of \spad{[eq1,{} ...,{} eqn]} around \spad{x = a} with initial conditions \spad{\spad{yi}(a) = \spad{bi}}. Note: eqi must be of the form \spad{\spad{fi}(x,{} y1 x,{} y2 x,{} ...,{} yn x) y1'(x) + \spad{gi}(x,{} y1 x,{} y2 x,{} ...,{} yn x
773855`--) = h(x,{} y1 x,{} y2 x,{} ...,{} yn x)}.
773987`\spad{seriesSolve([eq1,{} ...,{} eqn],{} [y1,{} ...,{} yn],{} x=a,{} [b1,{} ...,{} bn])} is equivalent to \spad{seriesSolve([eq1,{} ...,{} eqn],{} [y1,{} ...,{} yn],{} x = a,{} [y1 a = b1,{} ...,{} yn a = bn])}.
774109`\spad{seriesSolve([eq1,{} ...,{} eqn],{} [y1,{} ...,{} yn],{} x = a,{} [y1 a = b1,{} ...,{} yn a = bn])} is equivalent to \spad{seriesSolve([eq1=0,{} ...,{} eqn=0],{} [y1,{} ...,{} yn],{} x = a,{} [y1 a = b1,{} ...,{} yn a = bn])}.
774231`\spad{seriesSolve([eq1,{} ...,{} eqn],{} [y1,{} ...,{} yn],{} x=a,{} [b1,{} ...,{} bn])} is equivalent to \spad{seriesSolve([eq1=0,{} ...,{} eqn=0],{} [y1,{} ...,{} yn],{} x=a,{} [b1,{} ...,{} bn])}.
774343`\spad{seriesToOutputForm(st,{} refer,{} var,{} cen,{} r)} prints the series \spad{f((var - cen)^r)}.
774575`\spad{set()}\$\spad{D} creates an empty set aggregate of type \spad{D}.
774668`\spad{set([x,{} y,{} ...,{} z])} creates a set aggregate containing items \spad{x},{} \spad{y},{} ...,{} \spad{z}.
774717`\spad{setAdaptive(true)} turns adaptive plotting on \spad{setAdaptive(false)} turns adaptive plotting off
774768`\spad{setAdaptive3D(true)} turns adaptive plotting on; setAdaptive3D(\spad{false}) turns adaptive plotting off.
774890`\spad{setchildren!(u,{} v)} replaces the current children of node \spad{u} with the members of \spad{v} in left-to-right order.
774982`\spad{setClipValue(x)} sets to \spad{x} the maximum value to plot when drawing complex functions. Returns \spad{x}.
775049`\spad{setClosed(t,{} b)} declares the given tube plot \spad{t} to be closed if \spad{b} is \spad{true},{} or if \spad{b} is \spad{false},{} \spad{t} is set to be open.
775193`\spad{setColumn!(m,{} j,{} v)} sets to \spad{j}th column of \spad{m} to \spad{v}
775279`\spad{setCondition!(n,{} t)} returns \spad{n} whose condition has been replaced by \spad{t} if it is not empty,{} else an error is produced.
775338`\spad{setDifference(u1,{} u2)} returns a list of the elements of \spad{u1} that are not also in \spad{u2}. The order of elements in the resulting list is unspecified.
775403`\spad{setelt!(n,{} m)} changes the value of the object \spad{n} to \spad{m}.
776464`\spad{setelt!(u,{} x,{} y)} sets the image of \spad{x} to be \spad{y} under \spad{u},{} assuming \spad{x} is in the domain of \spad{u}. Error: if \spad{x} is not in the domain of \spad{u}.
776552`\spad{setelt!(u,{} "first",{} x)} (also written: \spad{u.first := x}) is equivalent to \spad{setfirst!(u,{} x)}.
776644`\spad{setelt!(t,{} k,{} e)} (also written \spad{t.k := e}) is equivalent to \spad{(insert([k,{} e],{} t); e)}.
776715`\spad{setelt!(u,{} "last",{} x)} (also written: \spad{u.last := b}) is equivalent to \spad{setlast!(u,{} v)}.
776806`\spad{setelt!(a,{} "left",{} b)} (also written \spad{a.left := b}) is equivalent to \spad{setleft!(a,{} b)}.
776900`\spad{setelt!(u,{} "rest",{} v)} (also written: \spad{u.rest := v}) is equivalent to \spad{setrest!(u,{} v)}.
776993`\spad{setelt!(a,{} "right",{} b)} (also written \spad{b.right := b}) is equivalent to \spad{setright!(a,{} b)}.
777088`\spad{lib.k := v} saves the value \spad{v} in the library \spad{lib}. It can later be extracted using the key \spad{k}.
777140`\spad{setelt!(u,{} i..j,{} x)} (also written: \spad{u(i..j) := x}) destructively replaces each element in the segment \spad{u(i..j)} by \spad{x}. The value \spad{x} is returned. Note: \spad{u} is destructively change so that \spad{u.k := x for k in i..j}; its length remains unchanged.
777242`\spad{setelt!(a,{} "value" ,{}x)} (also written \spad{a.value := x}) is equivalent to \spad{setvalue!(a,{} x)}
777329`\spad{setelt!(A,{} i,{} c,{} d)} sets the entry of the matrix \spad{A} in row \spad{i} and in the column with index \spad{c} to the value \spad{d}.
778588`\spad{setelt!(m,{} i,{} j,{} r)} sets the element in the \spad{i}th row and \spad{j}th column of \spad{m} to \spad{r} error check to determine if indices are in proper ranges
778676`\spad{setelt!(x,{} row,{} colList)} assigns to an 1-by-\spad{n} selection of the array,{} where \spad{n = \# colList}.
778772`\spad{setelt!(x,{} row,{} ls2)} is equivalent to \spad{setelt!(x,{} row,{} l2)} where \spad{l2} is obtained appending expansions of elements of \spad{ls2},{} but should be more convenient and more efficient.
778877`\spad{setelt!(x,{} rowList,{} col)} assigns to an \spad{m}-by-1 selection of the array,{} where \spad{m = \# rowList}.
778973`\spad{setelt!(x,{} rowList,{} colList,{} y)} destructively alters the array \spad{x}. If \spad{y} is \spad{m}-by-\spad{n},{} \spad{rowList = [i<1>,{} i<2>,{} ...,{} i<m>]} and \spad{colList = [j<1>,{} j<2>,{} ...,{} j<n>]},{} then \spad{x(i<k>,{} j<l>)} is set to \spad{y(k,{} l)} for \spad{k = 1,{} ...,{} m} and \spad{l = 1,{} ...,{} n}.
779075`\spad{setelt!(x,{} l1,{} s2)} is equivalent to \spad{setelt!(x,{} l1,{} expand(s2))} but should be more convenient and more efficient.
779180`\spad{setelt!(x,{} ls1,{} col)} is equivalent to \spad{setelt!(x,{} l1,{} col)} where \spad{l1} is obtained appending expansions of elements of \spad{ls1},{} but should be more convenient and more efficient.
779285`\spad{setelt!(x,{} ls1,{} ls1)} is equivalent to \spad{setelt!(x,{} l1,{} l2)} where \spad{li} is obtained appending expansions of elements of lsi,{} but should be more convenient and more efficient.
779405`\spad{setelt!(x,{} ls1,{} s2)} is equivalent to \spad{setelt!(x,{} l1,{} l2)} where \spad{li} is obtained appending expansions of elements of lsi,{} but should be more convenient and more efficient.
779519`\spad{setelt!(x,{} s1,{} l2)} is equivalent to \spad{setelt!(x,{} expand(s1),{} l2)} but should be more convenient and more efficient.
779624`\spad{setelt!(x,{} s1,{} ls2)} is equivalent to \spad{setelt!(x,{} l1,{} l2)} where \spad{li} is obtained appending expansions of elements of lsi,{} but should be more convenient and more efficient.
779738`\spad{setelt!(x,{} s1,{} s2)} is equivalent to \spad{setelt!(x,{} expand(s1),{} expand(s2))} but should be more convenient and more efficient.
779846`\spad{setelt!(x,{} i,{} j,{} k,{} s)} (or \spad{x}.\spad{i}.\spad{j}.\spad{k} \spad{:=} \spad{s}) sets a specific element of the array to some value of type \spad{R}
779962`\spad{setEmpty!(n)} replaces \spad{n} by \spad{empty()\$\%}.
780015`\spad{setEpilogue!(t,{} strings)} sets the epilogue section of a formatted object \spad{t} to strings.
780095`\spad{setEpilogue!(t,{} strings)} sets the epilogue section of a TeX form \spad{t} to strings.
780165`\spad{setErrorBound(eps)} changes the internal error bound,{} by default being {\em 10 ^ (-3)} to \spad{eps},{} if \spad{R} is a member in the category \spadtype{QuotientFieldCategory Integer}. The internal {\em globalDigits} is set to {\em ceiling(1/r)^2*10} being {\em 10^7} by default.
780233`\spad{setFieldInfo(m,{} p)} initializes the field arithmetic,{} where \spad{m} is the multiplication table and \spad{p} is the respective normal element of the ground field \spad{GF}.
780358`\spad{setfirst!(u,{} x)} destructively changes the first element of \spad{u} to \spad{x}. Error if \spad{u} is empty.
780444`\spad{setFormula!(t,{} strings)} sets the formula section of a formatted object \spad{t} to strings.
780523`\spad{setGcdMode(s)} sets a new value for the flag deciding on the method used to compute gcd`s for lists. Possible values for \spad{s} are \spad{iterated} and \spad{random}.
780607`\spad{setImagSteps(i)} sets to \spad{i} the number of steps to use in the imaginary direction when drawing complex functions. Returns \spad{i}.
780666`\spad{setIntersection(u1,{} u2)} returns a list of the elements that lists \spad{u1} and \spad{u2} have in common. The order of elements in the resulting list is unspecified.
780733`\spad{setLabelValue(i)} resets the counter which produces labels to \spad{i}
780862`\spad{setlast!(u,{} x)} destructively changes the last element of \spad{u} to \spad{x}.
780947`\spad{setleaves!(t,{} ls)} sets the leaves of \spad{t} in left-to-right order to the elements of \spad{ls}.
781012`\spad{setleft!(a,{} b)} sets the left child of \spad{a} to be \spad{b}.
781100`\spad{setLegalFortranSourceExtensions(l)} \undocumented{}
781191`\spad{setMaxPoints(i)} sets the maximum number of points in a plot to \spad{i}
781243`\spad{setMaxPoints3D(i)} sets the maximum number of points in a plot to \spad{i}.
781299`\spad{setMinPoints(i)} sets the minimum number of points in a plot to \spad{i}
781351`\spad{setMinPoints3D(i)} sets the minimum number of points in a plot to \spad{i}.
781407`allows override of parameters such as orthogonal used for debugging
781482`\spad{setnext!(u,{} v)} destructively sets the next node of doubly-linked aggregate \spad{u} to \spad{v},{} returning \spad{v}.
781567`\spad{setNotation(s)} chooses the notation used for derivatives. Returns the old value.
781764`\spad{setOfMinN([a_1,{} ...,{} a_m])} returns the set {\spad{a_1},{} ...,{} a_m}. Error if {\spad{a_1},{} ...,{} a_m} is not a set of \spad{M} integers in \spad{1..n}.
781845`\spad{setOrder([a1,{} ...,{} an])} defines a partial ordering on \spad{S} given \spad{by:} \indented{3}{(1)\space{2}\spad{a1 < a2 < ... < an}.} \indented{3}{(2)\space{2}\spad{b < \spad{ai}\space{3}for i = 1..n} and \spad{b} not among the \spad{ai}\spad{'s}.} \indented{3}{(3)\space{2}undefined on \spad{(b,{} c)} if neither is among the \spad{ai}\spad{'s}.}
781915`\spad{setOrder([b1,{} ...,{} bm],{} [a1,{} ...,{} an])} defines a partial ordering on \spad{S} given \spad{by:} \indented{3}{(1)\space{2}\spad{b1 < b2 < ... < bm < a1 < a2 < ... < an}.} \indented{3}{(2)\space{2}\spad{bj < c < \spad{ai}}\space{2}for \spad{c} not among the \spad{ai}\spad{'s} and \spad{bj}\spad{'s}.} \indented{3}{(3)\space{2}undefined on \spad{(c,{} d)} if neither is among the \spad{ai}\spad{'s},{} \spad{bj}\spad
781915`--{'s}.}
781993`\spad{setOutput(i)} controls amount of generated output during the completion algorithm: \spad{i = 0} 
781993`--> no display,{} \spad{i = 1} 
781993`--> result is displayed,{} \spad{i = 2} 
781993`--> Cartan characters are displayed,{} \spad{i = 3} 
781993`--> integrability conditions are traced,{} \spad{i = 4} 
781993`--> intermediate dimensions are traced,{} \spad{i = 5} 
781993`--> all intermediate systems are traced,{} \spad{i = 6} 
781993`--> all intermediate system
781993`--s and symbols are traced,{} if \spad{i > 10} then TeX output is produced. Default is 0. The old value is returned.
782082`\spad{setPoly(x)} \undocumented
782132`\spad{setPosition(x,{} n)} associates the integer \spad{n} to \spad{x}.
782201`\spad{setPredicates(p,{} [p1,{} ...,{} pn])} attaches the predicate \spad{p1} and ... and \spad{pn} to \spad{p}.
782260`\spad{setprevious!(u,{} v)} destructively sets the previous node of doubly-linked aggregate \spad{u} to \spad{v},{} returning \spad{v}.
782349`\spad{setPrologue!(t,{} strings)} sets the prologue section of a formatted object \spad{t} to strings.
782429`\spad{setPrologue!(t,{} strings)} sets the prologue section of a TeX form \spad{t} to strings.
782499`\spad{setProperties(op,{} l)} sets the property list of \spad{op} to \spad{l}. Argument \spad{op} is modified "in place",{} \spadignore{i.e.} no copy is made.
782580`\spad{setProperty(op,{} s,{} v)} attaches property \spad{s} to \spad{op},{} and sets its value to \spad{v}. Argument \spad{op} is modified "in place",{} \spadignore{i.e.} no copy is made.
782642`\spad{setRealSteps(i)} sets to \spad{i} the number of steps to use in the real direction when drawing complex functions. Returns \spad{i}.
782701`\spad{setRedMode(i)} sets the flag for the reduction mode. Returns old value. Current values are: \spad{i = 0} 
782701`--> No reduction of integrability conditions etc. \spad{i = 1} 
782701`--> Autoreduction of complete system and reduction \indented{16}{of all integrability conditions.} Default is 0.
782790`\spad{setref(n,{} m)} same as \spad{setelt!(n,{} m)}.
782835`\spad{setrest!(u,{} v)} destructively changes the rest of \spad{u} to \spad{v}. Error if \spad{u} is empty.
782922`\spad{setrest!(x,{} n,{} y)} sets rest(\spad{x},{} \spad{n}) to \spad{y}. The function will expand cycles if necessary.
782976`\spad{setright!(a,{} x)} sets the right child of \spad{t} to be \spad{x}.
783065`\spad{setRow!(A,{} i,{} ind,{} ent)} sets the \spad{i}\spad{-}th row of the matrix \spad{A} to the value \spad{r}.
783250`\spad{setRow!(m,{} i,{} v)} sets to \spad{i}th row of \spad{m} to \spad{v}
783333`\spad{setRow!(A,{} i,{} ind,{} ent)} sets the \spad{i}\spad{-}th row of the matrix \spad{A}. Its indices are \spad{ind}; the entries \spad{ent}.
783416`\spad{setScreenResolution(i)} sets the screen resolution to \spad{i}
783475`\spad{setScreenResolution3D(i)} sets the screen resolution for a 3d graph to \spad{i}.
783538`\spad{setSimplifyDenomsFlag(x)} sets flag affecting simplification of denominators. If \spad{true} irrational algebraics are removed from denominators. If \spad{false} they are kept.
783629`\spad{setSimpMode(i)} sets the flag controlling the used simplifications and returns the old value. Current values are: \spad{i = 0} \spad{->} No simplification modulo lower order equations. \spad{i = 1} \spad{->} Simplification modulo lower order equations. Default is 0.
783727`\spad{setSimpMode(i)} sets the simplification mode used in \spad{JetDifferentialEquation}. Returns old value.
783817`\spad{setStatus!(n,{} b)} returns \spad{n} whose status has been replaced by \spad{b} if it is not empty,{} else an error is produced.
783879`\spad{setStatus(s,{} t)} returns the same representation for \spad{s},{} but asserts the following: if \spad{t} is \spad{true},{} then \spad{s} is empty,{} if \spad{t} is \spad{false},{} then \spad{s} is non-empty,{} and if \spad{t} = "failed",{} then no assertion is made (that is,{} "don\spad{'t} know"). Note: for internal use only,{} with care.
784064`\spad{setsubMatrix(x,{} i1,{} j1,{} y)} destructively alters the array \spad{x}. Here \spad{x(i,{} j)} is set to \spad{y(i-i1+1,{} j-j1+1)} for \spad{i = i1,{} ...,{} i1-1+nrows y} and \spad{j = j1,{} ...,{} j1-1+ncols y}.
784160`\spad{setTex!(t,{} strings)} sets the TeX section of a TeX form \spad{t} to strings.
784225`\spad{setTopPredicate(x,{} [a1,{} ...,{} an],{} f)} returns \spad{x} with the top-level predicate set to \spad{f(a1,{} ...,{} an)}.
784293`\spad{setTransform!(n,{} tran)} changes the transform without altering the scene hierarchy
784358`\spad{setUnion(u1,{} u2)} appends the two lists \spad{u1} and \spad{u2},{} then removes all duplicates. The order of elements in the resulting list is unspecified.
784418`\spad{setValue!(n,{} v)} returns \spad{n} whose value has been replaced by \spad{v} if it is not empty,{} else an error is produced.
784531`\spad{setvalue!(u,{} x)} sets the value of node \spad{u} to \spad{x}.
784612`\spad{setVariableOrder([a1,{} ...,{} an])} defines an ordering on the variables given by \spad{a1 > a2 > ... > an > other variables}.
784693`\spad{setVariableOrder([b1,{} ...,{} bm],{} [a1,{} ...,{} an])} defines an ordering on the variables given by \spad{b1 > b2 > ... > bm >} other variables \spad{> a1 > a2 > ... > an}.
784787`\spad{SFunction(\spad{li})} is the \spad{S}-function of the partition \spad{\spad{li}} \indented{1}{expressed in terms of power sum symmetric functions.}
784884`\spad{sh(x,{} y)} returns the shuffle-product of \spad{x} by \spad{y}. This multiplication is associative and commutative.
784955`\spad{sh(x,{} n)} returns the shuffle power of \spad{x} to the \spad{n}.
785042`\spad{shade(pt)} returns the fourth element of the two dimensional point,{} \spad{pt},{} although no assumptions are made with regards as to how the components of higher dimensional points are interpreted. This function is defined for the convenience of the user using specifically,{} shade to express a fourth dimension.
785093`\spad{shade(p)} returns the shade index of the indicated palette \spad{p}.
785136`\spad{shallowCopy(x)} \undocumented
785186`\spad{shallowExpand(x)} \undocumented{}
785260`\spad{shanksDiscLogAlgorithm(b,{} a,{} p)} computes \spad{s} with \spad{b^s = a} for assuming that \spad{a} and \spad{b} are elements in a 'small' cyclic group of order \spad{p} by Shank\spad{'s} algorithm. Note: this is a subroutine of the function \spadfun{discreteLog}.
785387`\spad{shellSort(f,{} agg)} sorts the aggregate agg with the ordering function \spad{f} using the shellSort algorithm.
785465`\spad{Shi(f)} denotes the hyperbolic sine integral
785516`\spad{Shi(x)} returns the hyperbolic sine integral of \spad{x},{} \spadignore{i.e.} the integral of \spad{sinh(x) / x dx}.
785572`\spad{Shi(f)} denotes the hyperbolic sine integral
785718`\spad{Shi(f)} denotes the hyperbolic sine integral
785777`\spad{shift(k)} returns \spad{matrix [[1,{} k],{} [0,{} 1]]} representing the map \spad{x -> x + k}.
785826`\spad{shift(m,{} h)} returns \spad{shift(h) * m} (see \spadfunFrom{shift}{MoebiusTransform}).
785878`\spad{shift(a,{} i)} shift \spad{a} by \spad{i} digits.
785931`\spad{shift(x,{} n)} adds \spad{n} to the exponent of float \spad{x}.
785975`\spad{shift(a,{} i)} shift \spad{a} by \spad{i} bits.
786032`\spad{ShiftAction(k,{} l,{} g)} gives the coefficient of \spad{x^k} in \spad{z^l} \spad{g}(\spad{x}),{} where \spad{z*(a+b*x+c*x^2+d*x^3+...) = (b*x+2*c*x^2+3*d*x^3+...)}. In terms of sequences,{} z*u(\spad{n})=n*u(\spad{n}).
786134`\spad{ShiftC} gives the coefficients \spad{c_}{\spad{k},{} \spad{k}} in the expansion <x^k> \spad{z} \spad{g}(\spad{x}) = sum_{\spad{i=0}}\spad{^k} \spad{c_}{\spad{k},{} \spad{i}} <x^i> \spad{g}(\spad{x}),{} where \spad{z} acts on \spad{g}(\spad{x}) by shifting. In fact,{} the result is [0,{} 1,{} 2,{} ...]
792612`\spad{shiftHP options} returns a specification for Hermite-Pade approximation with the shift operator
798085`\spad{shiftHP options} returns a specificat
798085`--ion for Hermite-Pade approximation with the \$\spad{q}\$-shift operator,{} or,{} if \spad{maxMixedDegree > 0} for mixed shifts
799050`\spad{shiftLeft(p,{} n)} returns \spad{p * monomial(1,{} n)}
799135`\spad{shiftRight(p,{} n)} returns \spad{monicDivide(p,{} monomial(1,{} n)).quotient}
799232`\spad{shiftRoots(p,{} c)} returns the polynomial which has for roots \spad{c} added to the roots of \spad{p}.
799306`\spad{show(v,{} n,{} s)} displays the graph in field \spad{n} of the given two-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{TwoDimensionalViewport},{} if \spad{s} is "on",{} or does not display the graph if \spad{s} is "off".
799383`\spad{showAll?()} returns \spad{true} if all computed entries of streams will be displayed.
799447`\spad{showAllElements(s)} creates an output form which displays all computed elements.
799523`\spad{showArrayValues(true)} forces the values of array components to be \indented{1}{displayed rather than just their types.}
799580`\spad{showClipRegion(v,{} s)} displays the clipping region of the given three-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{ThreeDimensionalViewport},{} if \spad{s} is "on",{} or does not display the region if \spad{s} is "off".
799653`\spad{showElements(n,{} st)} computes and creates and output form of the first \spad{n} entries of st.
799745`\spad{showFortranOutputStack()} returns the Fortran output stack
799827`\spad{showRegion(v,{} s)} displays the bounding box of the given three-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{ThreeDimensionalViewport},{} if \spad{s} is "on",{} or does not display the box if \spad{s} is "off".
799896`\spad{showScalarValues(true)} forces the values of scalar components to be \indented{1}{displayed rather than just their types.}
799954`\spad{showTheSymbolTable()} returns the current symbol table.
800010`\spad{showTypeInOutput(bool)} affects the way objects of \spadtype{Any} are displayed. If \spad{bool} is \spad{true} then the type of the original object that was converted to \spadtype{Any} will be printed. If \spad{bool} is \spad{false},{} it will not be printed.
800064`\spad{shrinkable(b)} sets the shrinkable attribute of flexible arrays to \spad{b} and returns the previous value
800192`\spad{shuffle(l1,{} l2)} forms the stream of all shuffles of \spad{l1} \indented{1}{and \spad{l2},{} \spadignore{i.e.} all sequences that can be formed from} \indented{1}{merging \spad{l1} and \spad{l2}.}
800294`\spad{shufflein(l,{} st)} maps shuffle(\spad{l},{} \spad{u}) on to all \indented{1}{members \spad{u} of st,{} concatenating the results.}
800406`\spad{\spad{Si}(f)} denotes the sine integral
800456`\spad{\spad{Si}(x)} returns the sine integral of \spad{x},{} \spadignore{i.e.} the integral of \spad{sin(x) / x dx}.
800511`\spad{\spad{Si}(f)} denotes the sine integral
800655`\spad{\spad{Si}(f)} denotes the sine integral
800713`\spad{sierpinskiDivide(me,{} level)} for each edge of each face calculate a new point in the centre of the edge,{} then build a new set of faces which include the new points.
800786`\spad{sign(r)} \undocumented
800894`\spad{sign(x)} is 1 if \spad{x} is positive,{} \spad{-1} if \spad{x} is negative,{} 0 if \spad{x} equals 0.
800940`\spad{sign(p)} returns the signum of the permutation \spad{p},{} \spad{+1} or \spad{-1}.
800989`\spad{sign f} returns the sign of \spad{f} if it is constant everywhere.
801084`\spad{sign(f)} returns the sign of \spad{f} if it is constant everywhere.
801161`\spad{sign(pol,{} aRoot)} gives the sign of \spad{pol} interpreted as \spad{aRoot}
801254`\spad{sign(f,{} x,{} a)} returns the sign of \spad{f} as \spad{x} approaches \spad{a},{} from both sides if \spad{a} is finite.
801399`\spad{sign(f,{} x,{} a)} returns the sign of \spad{f} as \spad{x} nears \spad{a},{} from both sides if \spad{a} is finite.
801504`\spad{sign(f,{} x,{} a,{} s)} returns the sign of \spad{f} as \spad{x} nears \spad{a} from the left (below) if \spad{s} is the string \spad{"left"},{} or from the right (above) if \spad{s} is the string \spad{"right"}.
801637`\spad{sign(f,{} x,{} a,{} s)} returns the sign of \spad{f} as \spad{x} nears \spad{a} from below if \spad{s} is "left",{} or above if \spad{s} is "right".
801730`\spad{signAround(u,{} i,{} f)} \undocumented
801843`\spad{signAround(u,{} r,{} f)} \undocumented
801950`\spad{signAround(u,{} r,{} i,{} f)} \undocumented
802065`\spad{simpleCells(c)} returns lists of simple cells determining \spad{c}. That is \spad{c} = makeCell(simpleCells(\spad{c}))
802177`\spad{simplify(s)} returns a different and presumably simpler representation of \spad{s} with the defining polynomials for the equations forming a groebner basis,{} and the defining polynomial for the inequation reduced with respect to the basis,{} using a heuristic algorithm based on factoring.
802300`\spad{simplify(de)} simplifies the equations of each order separately using the procedure \spad{simplify} from \spad{D}. Found integrability conditions are also returned separately.
802386`\spad{simplify(an)} applies simplifications to \spad{an}
802487`\spad{simplify(f)} performs the following simplifications on \spad{f:} \begin{items} \item 1. rewrites trigs and hyperbolic trigs in terms of \spad{sin} ,{} \spad{cos},{} \spad{sinh},{} \spad{cosh}. \item 2. rewrites \spad{sin^2} and \spad{sinh^2} in terms of \spad{cos} and \spad{cosh},{} \item 3. rewrites \spad{exp(a)*exp(b)} as \spad{exp(a+b)}. \item 4. rewrites \spad{(a^(1/n))^m * (a^(1/s))^t} as a single power of a single radical of \sp
802487`--ad{a}. \end{items}
802551`\spad{simplify(sys,{} jm)} simplifies a system with given Jacobi matrix. The Jacobi matrix of the simplified system is returned,{} too. \spad{Depend} contains for each equation of the simplified system the numbers of the equations of the original system out of which it is build,{} if it is possible to obtain 
802551`--this information. If one can generate equations of lower order by purely algebraic operations,{} then \spad{simplify} should do this.
802940`\spad{simplifyCoeffs(d,{} la)} should be local but conditional
803134`\spad{simplifyExp(f)} converts every product \spad{exp(a)*exp(b)} appearing in \spad{f} into \spad{exp(a+b)}.
803201`\spad{simplifyLog(f)} converts every \spad{log(a) - log(b)} appearing in \spad{f} into \spad{log(a/b)},{} every \spad{log(a) + log(b)} into \spad{log(a*b)} and every \spad{n*log(a)} into \spad{log(a^n)}.
803268`\spad{simplifyPower(f,{} n)} \undocumented{}
803349`\spad{simpMod(sys1,{} sys2)} simplifies the system \spad{sys1} modulo the system \spad{sys2}.
803509`\spad{simpMod(sys1,{} sys2)} simplifies the system \spad{sys1} modulo the system \spad{sys2}. Returns the same information as \spad{simplify}.
803913`\spad{simpOne(f)} removes unnecessary coefficients and exponents,{} denominators etc.
804032`\spad{simpson(fn,{} a,{} b,{} epsrel,{} epsabs,{} nmin,{} nmax)} uses the simpson method to numerically integrate function \spad{fn} over the closed interval \spad{a} to \spad{b},{} with relative accuracy \spad{epsrel} and absolute accuracy \spad{epsabs},{} with the refinement levels for convergence checking vary from \spad{nmin} to \spad{n
804032`--max}. The value returned is a record containing the value of the integral,{} the estimate of the error in the computation,{} the total number of function evaluations,{} and either a boolean value which is \spad{true} if the integral was computed within the user specified error criterion. See \spadtype{NumericalQuadrature} for details.
804198`\spad{simpsono(fn,{} a,{} b,{} epsrel,{} epsabs,{} nmin,{} nmax)} uses the simpson method to numerically integrate function \spad{fn} over the open interval from \spad{a} to \spad{b},{} with relative accuracy \spad{epsrel} and absolute accuracy \spad{epsabs},{} with the refinement levels for convergence checking vary from \spad{nmin} to \s
804198`--pad{nmax}. The value returned is a record containing the value of the integral,{} the estimate of the error in the computation,{} the total number of function evaluations,{} and either a boolean value which is \spad{true} if the integral was computed within the user specified error criterion. See \spadtype{NumericalQuadrature} for details.
804365`\spad{sin(x)} represents the Fortran intrinsic function SIN
804446`\spad{sin?(x)} returns \spad{true} if term is a sin,{} otherwise \spad{false}
804500`\spad{sin(x)} makes a sin kernel for use in Fourier series
804547`\spad{sin(x)} applies the sine operator to \spad{x}
804699`\spad{sin(st)} computes sine of a power series \spad{st}.
804783`\spad{sin(st)} computes sine of a power series \spad{st}.
804881`\spad{sin(z)} returns the sine of Laurent series \spad{z}.
804968`\spad{sin(z)} returns the sine of a Puiseux series \spad{z}.
805064`\spad{sin(x)} returns the sine of \spad{x}.
805122`\spad{sin2csc(f)} converts every \spad{sin(u)} appearing in \spad{f} into \spad{1/csc(u)}.
805185`\spad{sincos(st)} returns a record containing the sine and cosine of a power series \spad{st}.
805301`\spad{singleFace(ptin)} constructs a ifs representation of a face from an array of points
805355`\spad{singleFactorBound(p,{} r)} returns a bound on the infinite norm of the factor of \spad{p} with smallest Bombieri\spad{'s} norm. \spad{p} shall be of degree higher or equal to 2.
805444`\spad{singleFactorBound(p,{} r)} returns a bound on the infinite norm of the factor of \spad{p} with smallest Bombieri\spad{'s} norm. \spad{r} is a lower bound for the number of factors of \spad{p}. \spad{p} shall be of degree higher or equal to 2.
805552`\spad{singRicDE(op,{} ezfactor)} returns \spad{[[f1,{} L1],{} [f2,{} L2],{} ...,{} [fk,{} Lk]]} such that the singular \spad{++} part of any rational solution of the associated Riccati equation of \spad{op y = 0} must be one of the \spad{fi}\spad{'s} (up to the constant coefficient),{} in which case
805552`-- the equation for \spad{z = y e^{-int \spad{ai}}} is \spad{\spad{Li} z = 0}. Argument \spad{ezfactor} is a factorisation in \spad{UP},{} not necessarily into irreducibles.
805760`\spad{singRicDE(op,{} zeros,{} ezfactor)} returns \spad{[[f1,{} L1],{} [f2,{} L2],{} ... ,{} [fk,{} Lk]]} such that the singular part of any rational solution of the associated Riccati equation of \spad{op y=0} must be one of the \spad{fi}\spad{'s} (up to the constant coefficient),{} in which case the equation for \spad{z=y e^{-int p}} is \spad{
805760`--\spad{Li} z=0}. \spad{zeros(C(x),{} H(x,{} y))} returns all the \spad{P_i(x)}\spad{'s} such that \spad{H(x,{} P_i(x)) = 0 modulo C(x)}. Argument \spad{ezfactor} is a factorisation in \spad{UP},{} not necessarily into irreducibles.
805921`\spad{singular?(a)} tests whether \spad{x = a} is singular.
805992`\spad{singular?(p)} tests whether \spad{p(x) = 0} is singular.
806064`\spad{singularAtInfinity?()} tests if there is a singularity at infinity.
806144`\spad{sinh(x)} represents the Fortran intrinsic function SINH
806226`\spad{sinh(x)} applies the hyperbolic sine operator to \spad{x}
806433`\spad{sinh(st)} computes the hyperbolic sine of a power series \spad{st}.
806518`\spad{sinh(st)} computes the hyperbolic sine of a power series \spad{st}.
806617`\spad{sinh(z)} returns the hyperbolic sine of Laurent series \spad{z}.
806705`\spad{sinh(z)} returns the hyperbolic sine of a Puiseux series \spad{z}.
806802`\spad{sinh(x)} returns the hyperbolic sine of \spad{x}.
806858`\spad{sinh2csch(f)} converts every \spad{sinh(u)} appearing in \spad{f} into \spad{1/csch(u)}.
806923`\spad{sinhcosh(st)} returns a record containing the hyperbolic sine and cosine of a power series \spad{st}.
807043`\spad{sinhIfCan(z)} returns sinh(\spad{z}) if possible,{} and "failed" otherwise.
807125`\spad{sinIfCan(z)} returns sin(\spad{z}) if possible,{} and "failed" otherwise.
807206`\spad{sipnt(a,{} b)} constructs a 2D point defined by a and \spad{b} of type Integer
807319`\spad{sipnt(a,{} b,{} c)} constructs a 3D point defined by a,{} \spad{b} and \spad{c} of type Integer
807448`\spad{sivec(a,{} b)} constructs a 2D vector defined by a and \spad{b} of type Integer
807561`\spad{sivec(a,{} b,{} c)} constructs a 3D vector defined by a,{} \spad{b} and \spad{c} of type Integer
808038`\spad{size()} is the base of the random number generator
808089`\spad{size()} returns the number of elements in the set.
808139`\spad{size(x)} returns the number of monomials in \spad{x}.
808197`\spad{size(x)} returns the number of monomials in \spad{x}.
808256`\spad{size(l)} returns the number of monomials forming \spad{l}.
808323`\spad{size(x)} returns the number of terms in \spad{x}. mapGen(\spad{f},{} \spad{a1}\spad{\^}\spad{e1} ... an\spad{\^}en) returns \spad{f(a1)\^e1 ... f(an)\^en}.
808399`The size of the isolating interval
808792`\spad{size?(u,{} n)} tests if \spad{u} has exactly \spad{n} elements.
808910`\spad{sizeLess?(x,{} y)} tests whether \spad{x} is strictly smaller than \spad{y} with respect to the \spadfunFrom{euclideanSize}{EuclideanDomain}.
808968`\spad{sizeMultiplication()} returns the number of entries in the multiplication table of the field. Note: the time of multiplication of field elements depends on this size.
809077`\spad{sizeMultiplication()} returns the number of entries in the multiplication table of the field. Note: the time of multiplication of field elements depends on this size.
809177`\spad{sizeMultiplication()} returns the number of entries in the multiplication table of the field. Note: The time of multiplication of field elements depends on this size.
809267`\spad{sizeMultiplication(m)} returns the number of entries of the multiplication table {\em m}.
809399`\spad{sizePascalTriangle()} returns the number of entries currently stored in the table.
809480`\spad{skewSFunction(li1,{} li2)} is the \spad{S}-function \indented{1}{of the partition difference \spad{li1 - li2}} \indented{1}{expressed in terms of power sum symmetric functions.}
809595`Constructs variable combinator
809642`Constructs a node combinator over combinators
809692`\spad{slash(f,{} g)} creates a form for the horizontal fraction of \spad{f} over \spad{g}.
809736`\spad{slex(ls)} sorts the argument sequence \spad{ls},{} then zips (see \spadfunFrom{map}{\spad{ListFunctions3}}) the original argument sequence with the sorted result to a list of pairs
809800`\spad{smaller?(x,{} y)} is a strict total ordering on the elements of the set.
810373`\spad{smesh(ptin,{} clos)} constructs a ifs representation of a mesh from a 2 dimensional array of points
810436`\spad{smith(m)} computes Smith normal form of \spad{m}
810515`\spad{smith(m)} returns the Smith Normal form of the matrix \spad{m}.
810572`\spad{smith(m,{} full)} computes Smith normal form of \spad{m}. It first reduces \spad{m} to smaller matrix and then usess full to finish.
810686`Undocumented.
810782`Undocumented.
810851`\spad{sncndn(s,{} c)} is used internally.
810963`\spad{solid?(x)} \undocumented
811025`\spad{solid(x,{} b)} \undocumented
811094`\spad{solve1(pol,{} eps)} finds the roots of the univariate polynomial polynomial \spad{pol} to precision eps. If \spad{K} is \spad{Fraction Integer} then only the real roots are returned,{} if \spad{K} is \spad{Complex Fraction Integer} then all roots are found.
811195`\spad{solve(lp)} finds the solution in the algebraic closure of \spad{R} of the list \spad{lp} of rational functions with respect to all the symbols appearing in \spad{lp}.
811310`\spad{solve(u)} \undocumented
811377`\spad{solve(eq)} finds the solutions of the equation \spad{eq} where \spad{eq} is an equation of functions of type Expression(\spad{R}) with respect to the unique symbol \spad{x} appearing in \spad{eq}.
811476`\spad{solve(eq)} finds the solutions of the equation \spad{eq} with respect to the unique variable appearing in \spad{eq}.
811596`\spad{solve(expr)} finds the solutions of the equation \spad{expr} = 0 where \spad{expr} is a function of type Expression(\spad{R}) with respect to the unique symbol \spad{x} appearing in eq.
811685`\spad{solve(p)} finds the solution of a rational function \spad{p} = 0 with respect to the unique variable appearing in \spad{p}.
811795`\spad{solve(le)} finds the solutions of the list \spad{le} of equations of rational functions with respect to all symbols appearing in \spad{le}.
811927`\spad{solve(lp)} finds the solutions of the list \spad{lp} of rational functions with respect to all symbols appearing in \spad{lp}.
812049`\spad{solve(lp,{} lv)} finds the solutions in the algebraic closure of \spad{R} of the list \spad{lp} of rational functions with respect to the list of symbols \spad{lv}.
812177`\spad{solve(p,{} eps)} finds the real zeroes of a univariate rational polynomial \spad{p} with precision eps.
812266`\spad{solve(p,{} eps)} finds the real zeroes of a univariate integer polynomial \spad{p} with precision eps.
812345`\spad{solve(eq,{} x)} finds the solutions of the equation \spad{eq} where \spad{eq} is an equation of functions of type Expression(\spad{R}) with respect to the symbol \spad{x}.
812451`\spad{solve(eq,{} eps)} finds all of the real solutions of the univariate equation \spad{eq} of rational functions with respect to the unique variables appearing in \spad{eq},{} with precision eps.
812576`\spad{solve(eq,{} v)} finds the solutions of the equation \spad{eq} with respect to the variable \spad{v}.
812703`\spad{solve(expr,{} x)} finds the solutions of the equation \spad{expr} = 0 with respect to the symbol \spad{x} where \spad{expr} is a function of type Expression(\spad{R}).
812799`\spad{solve(p,{} eps)} finds all of the real solutions of the univariate rational function \spad{p} with rational coefficients with respect to the unique variable appearing in \spad{p},{} with precision eps.
812914`\spad{solve(p,{} v)} solves the equation \spad{p=0},{} where \spad{p} is a rational function with respect to the variable \spad{v}.
813031`\spad{solve(leqs,{} lvar)} returns a list of solutions to the list of equations \spad{leqs} with respect to the list of symbols lvar.
813155`\spad{solve(leq,{} eps)} finds all of the real solutions of the system \spad{leq} of equationas of rational functions with respect to all the variables appearing in \spad{lp},{} with precision eps.
813292`\spad{solve(le,{} lv)} finds the solutions of the list \spad{le} of equations of rational functions with respect to the list of symbols \spad{lv}.
813437`\spad{solve(lp,{} eps)} finds all of the real solutions of the system \spad{lp} of rational functions over the rational numbers with respect to all the variables appearing in \spad{lp},{} with precision eps.
813564`\spad{solve(lp,{} lv)} finds the solutions of the list \spad{lp} of rational functions with respect to the list of symbols \spad{lv}.
813699`\spad{solve(A,{} LB)} finds a particular soln of the systems \spad{AX = B} and a basis of the associated homogeneous systems \spad{AX = 0} where \spad{B} varies in the list of column vectors \spad{LB}.
813856`\spad{solve(A,{} B)} finds a particular solution of the system \spad{AX = B} and a basis of the associated homogeneous system \spad{AX = 0}.
814001`\spad{solve(A,{} LB)} finds a particular soln of the systems \spad{AX = B} and a basis of the associated homogeneous systems \spad{AX = 0} where \spad{B} varies in the list of column vectors \spad{LB}.
814154`\spad{solve(m,{} x)} returns a basis for the solutions of \spad{D y = m y}. \spad{x} is the dependent variable.
814260`\spad{solve(A,{} B)} finds a particular solution of the system \spad{AX = B} and a basis of the associated homogeneous system \spad{AX = 0}.
814401`\spad{solve(A,{} B)} finds a particular solution of the system \spad{AX = B} and a basis of the associated homogeneous system \spad{AX = 0}.
814525`\spad{solve(A,{} LB)} finds a particular soln of the systems \spad{AX = B} and a basis of the associated homogeneous systems \spad{AX = 0} where \spad{B} varies in the list of column vectors \spad{LB}.
814661`\spad{solve(m,{} lv,{} solve)} is a parametric version of solve(\spad{m},{} \spad{v},{} solve)
814911`\spad{solve(m,{} v,{} solve)} returns \spad{[v_p,{} bm]} such that the solutions in \spad{F} of the system \spad{D x = m x + v} are \spad{v_p + c_1 v_1 + ... + c_m v_m} where the \spad{c_i's} are constants,{} and the \spad{v_i's} are columns of \spad{bm} and form a basis for the solutions of \spad{D x = m x}. Argument \s
814911`--pad{solve} is a function for solving a single linear ordinary differential equation in \spad{F}.
815097`\spad{solve(eq,{} y,{} x)} returns either a solution of the ordinary differential equation \spad{eq} or "failed" if no non-trivial solution can be found; If the equation is linear ordinary,{} a solution is of the form \spad{[h,{} [b1,{} ...,{} bm]]} where \spad{h} is a particular solution and \spad{[b1,{} ...bm]} are linearly independent solutions of the associat
815097`--ed homogenuous equation \spad{f(x,{} y) = 0}; A full basis for the solutions of the homogenuous equation is not always returned,{} only the solutions which were found; If the equation is of the form {dy/dx = \spad{f}(\spad{x},{} \spad{y})},{} a solution is of the form \spad{h(x,{} y)} where \spad{h(x,{} y) = c} is a first integral of the equation for any constant \spad{c}; error if the equation is not one of those 2 forms.
815240`\spad{solve(eq,{} y,{} x)} returns either a solution of the ordinary differential equation \spad{eq} or "failed" if no non-trivial solution can be found; If the equation is linear ordinary,{} a solution is of the form \spad{[h,{} [b1,{} ...,{} bm]]} where \spad{h} is a particular solution and and \spad{[b1,{} ...bm]} are linearly independent solutions of the associated hom
815240`--ogenuous equation \spad{f(x,{} y) = 0}; A full basis for the solutions of the homogenuous equation is not always returned,{} only the solutions which were found; If the equation is of the form {dy/dx = \spad{f}(\spad{x},{} \spad{y})},{} a solution is of the form \spad{h(x,{} y)} where \spad{h(x,{} y) = c} is a first integral of the equation for any constant \spad{c}.
815373`\spad{solve(op,{} g,{} x)} returns either a solution of the ordinary differential equation \spad{op y = g} or "failed" if no non-trivial solution can be found; When found,{} the solution is returned in the form \spad{[h,{} [b1,{} ...,{} bm]]} where \spad{h} is a particular solution and and \spad{[b1,{} ...bm]} are linearly independent solutions of the associated homogenuous equation 
815373`--\spad{op y = 0}. A full basis for the solutions of the homogenuous equation is not always returned,{} only the solutions which were found; \spad{x} is the dependent variable.
815495`\spad{solve([eq_1,{}...,{}eq_n],{} [y_1,{}...,{}y_n],{} x)} returns either "failed" or,{} if the equations form a fist order linear system,{} a solution of the form \spad{[y_p,{} [b_1,{} ...,{} b_n]]} where \spad{h_p} is a particular solution and \spad{[b_1,{} ...b_m]} are linearly independent solutions of the associated homogenuous syst
815495`--em. error if the equations do not form a first order linear system
815664`\spad{solve([eq_1,{}...,{}eq_n],{} [y_1,{}...,{}y_n],{} x)} returns either "failed" or,{} if the equations form a fist order linear system,{} a solution of the form \spad{[y_p,{} [b_1,{} ...,{} b_n]]} where \spad{h_p} is a particular solution and \spad{[b_1,{} ...b_m]} are linearly independent solutions of the associated homogenuous system. error 
815664`--if the equations do not form a first order linear system
815823`\spad{solve(m,{} v,{} x)} returns \spad{[v_p,{} [v_1,{} ...,{} v_m]]} such that the solutions of the system \spad{D y = m y + v} are \spad{v_p + c_1 v_1 + ... + c_m v_m} where the \spad{c_i's} are constants,{} and the \spad{v_i's} form a basis for the solutions of \spad{D y = m y}. \spad{x} is the dependent variable.
815974`\spad{solve(M(x,{} y),{} N(x,{} y),{} y,{} x)} returns \spad{F(x,{} y)} such that \spad{F(x,{} y) = c} for a constant \spad{c} is a first integral of the equation \spad{M(x,{} y) dx + N(x,{} y) dy = 0},{} or "failed" if no first-integral can be found.
816075`\spad{solve(m,{} c,{} lv,{} solf)} returns "failed" of [[\spad{vp1},{} ...,{} vp_m],{} [\spad{b1},{} ...,{} \spad{bl}]] such that \spad{bi}-\spad{s} are basis of solutions of homogeneous system \spad{m} \spad{bi} = 0. Each vp
816075`--i = [\spad{r},{} [\spad{c1},{} ...,{} \spad{cn}]] is a particuar solution of a parametic matrix equation \spad{m} \spad{r} = \sum \spad{ci} \spad{vi} where \spad{lv} = [\spad{v1},{} ...,{} \spad{vn}]. solf is scalar solver,{} \spad{c} is a paramenter to \spad{apply} (needed for astion of LO on \spad{F}). "failed" means that system is underdetermined.
816358`\spad{solve(eq,{} y,{} x = a,{} [y0,{} ...,{} ym])} returns either the solution of the initial value problem \spad{eq,{} y(a) = y0,{} y'(a) = y1,{} ...} or "failed" if the solution cannot be found; error if the equation is not one linear ordinary or of the form \spad{dy/dx = f(x,{} y)}.
816479`\spad{solve(eq,{} y,{} x = a,{} [y0,{} ...,{} ym])} returns either the solution of the initial value problem \spad{eq,{} y(a) = y0,{} y'(a) = y1,{} ...} or "failed" if the solution cannot be found; error if the equation is not one linear ordinary or of the form \spad{dy/dx = f(x,{} y)}.
816590`\spad{solve(op,{} g,{} x,{} a,{} [y0,{} ...,{} ym])} returns either the solution of the initial value problem \spad{op y = g,{} y(a) = y0,{} y'(a) = y1,{} ...} or "failed" if the solution cannot be found; \spad{x} is the dependent variable.
816689`\spad{solveFor(fun,{} jv)} tries to solve \spad{fun} for the jet variable \spad{jv}.
816771`\spad{solveid(h,{} prime,{} table)} computes the coefficients of the extended euclidean algorithm for a list of polynomials whose tablePow is table and with right side \spad{h}.
816862`\spad{solveInField(lp)} finds the solution of the list \spad{lp} of rational functions with respect to all the symbols appearing in \spad{lp}.
816984`\spad{solveInField(lp,{} lv)} finds the solutions of the list \spad{lp} of rational functions with respect to the list of symbols \spad{lv}.
817119`\spad{solveInField(m,{} lv,{} solve)} is a parametric version of solveInField(\spad{m},{} \spad{v},{} solve)
817377`\spad{solveInField(m,{} v,{} solve)} returns \spad{[[v_1,{} ...,{} v_m],{} v_p]} such that the solutions in \spad{F} of the system \spad{m x = v} are \spad{v_p + c_1 v_1 + ... + c_m v_m} where the \spad{c_i's} are constants,{} and the \spad{v_i's} form a basis for the solutions of \spad{m x = 0}. Argument \
817377`--spad{solve} is a function for solving a single linear ordinary differential equation in \spad{F}.
817577`\spad{solveLinear([v1,{} ...,{} vn],{} u)} returns solution of the system \spad{c1*v1 + ... + cn*vn = u} and and a basis of the associated homogeneous system \spad{c1*v1 + ... + cn*vn = 0}
817753`\spad{solveLinear([v1,{} ...,{} vn],{} u)} returns solution of the system \spad{c1*v1 + ... + cn*vn = u} and and a basis of the associated homogeneous system \spad{c1*v1 + ... + cn*vn = 0}
817904`\spad{solveLinear([v1,{} ...,{} vn],{} u)} returns solution of the system \spad{c1*v1 + ... + cn*vn = u} and and a basis of the associated homogeneous system \spad{c1*v1 + ... + cn*vn = 0}
818072`\spad{solveLinear([v1,{} ...,{} vn],{} u)} returns solution of the system \spad{c1*v1 + ... + cn*vn = u} and and a basis of the associated homogeneous system \spad{c1*v1 + ... + cn*vn = 0}
818215`\spad{solveLinearlyOverQ([v1,{} ...,{} vn],{} u)} returns solution of the system \spad{c1*v1 + ... + cn*vn = u} and and a basis of the associated homogeneous system \spad{c1*v1 + ... + cn*vn = 0}
818398`\spad{solveLinearlyOverQ([v1,{} ...,{} vn],{} u)} returns solution of the system \spad{c1*v1 + ... + cn*vn = u} and and a basis of the associated homogeneous system \spad{c1*v1 + ... + cn*vn = 0}
818573`\spad{solveLinearOverConstants([v1,{} ...,{} vn],{} u,{} ld)} returns solution of the system \spad{c1*v1 + ... + cn*vn = u} and and a basis of the associated homogeneous system \spad{c1*v1 + ... + cn*vn = 0}
818746`\spad{solveLinearOverConstants([v1,{} ...,{} vn],{} u,{} ld)} returns solution of the system \spad{c1*v1 + ... + cn*vn = u} and and a basis of the associated homogeneous system \spad{c1*v1 + ... + cn*vn = 0}
818911`\spad{solveLinearPolynomialEquation([f1,{} ...,{} fn],{} g)} (where the \spad{fi} are relatively prime to each other) returns a list of \spad{ai} such that \spad{g/prod \spad{fi} = sum ai/fi} or returns "failed" if no such list of \spad{ai}\spad{'s} exists.
819050`\spad{solveLinearPolynomialEquation([f1,{} ...,{} fn],{} g)} where (\spad{fi} relatively prime to each other) returns a list of \spad{ai} such that \spad{g} = sum \spad{ai} prod \spad{fj} (\spad{j} \spad{\=} \spad{i}) or equivalently g/prod \spad{fj} = sum (ai/fi) or returns "failed" if n
819050`--o such list exists
819269`\spad{solveLinearPolynomialEquation([f1,{} ...,{} fn],{} g)} (where the \spad{fi} are relatively prime to each other) returns a list of \spad{ai} such that \spad{g/prod \spad{fi} = sum ai/fi} or returns "failed" if no such list of \spad{ai}\spad{'s} exists.
820257`\spad{solveLinearPolynomialEquation([f1,{} ...,{} fn],{} g)} (where the \spad{fi} are relatively prime to each other) returns a list of \spad{ai} such that \spad{g/prod \spad{fi} = sum ai/fi} or returns "failed" if no such list of \spad{ai}\spad{'s} exists.
820458`\spad{solveLinearPolynomialEquationByFractions([f1,{} ...,{} fn],{} g)} (where the \spad{fi} are relatively prime to each other) returns a list of \spad{ai} such that \spad{g/prod \spad{fi} = sum ai/fi} or returns "failed" if no such exists.
820674`\spad{solveLinearPolynomialEquationByRecursion([p1,{} ...,{} pn],{} p)} returns the list of polynomials \spad{[q1,{} ...,{} qn]} such that \spad{sum qi/pi = p / prod \spad{pi}},{} a recursion step for solveLinearPolynomialEquation as defined in \spadfun{PolynomialFactorizationExpli
820674`--cit} category (see \spadfun{solveLinearPolynomialEquation}). If no such list of \spad{qi} exists,{} then "failed" is returned.
820900`\spad{solveRetract(lp,{} lv)} finds the solutions of the list \spad{lp} of rational functions with respect to the list of symbols \spad{lv}. The function tries to retract all the coefficients of the equations to \spad{Q} before solving if possible.
821035`\spad{solve_u(f1,{} u,{} x)} returns [[\spad{c1},{} \spad{k1}],{} ...,{} [\spad{cn},{} \spad{kn}]] such that \spad{f1} = \spad{c1*u^k1} + ... + cn^kn and \spad{D}(\spad{ci},{} \spad{x}) = 0 or "failed".
821130`\spad{someBasis()} returns some \spad{R}-module basis.
821205`\spad{Somos returns} whether we allow only Somos-like operators,{} default being \spad{false}
821300`\spad{Somos(d)} specifies whether we want that the total degree of the differential operators is constant,{} and equal to \spad{d},{} or maxDerivative if \spad{true}. If \spad{true},{} maxDerivative must be set,{} too.
821556`\spad{sort!(u)} returns \spad{u} with its elements in ascending order.
821676`\spad{sort(u)} returns an \spad{u} with elements in ascending order. Note: \spad{sort(u) = sort(<=,{} u)}.
821770`\spad{sort(lp)} sorts a list of permutations {\em lp} according to cycle structure first according to length of cycles,{} second,{} if \spad{S} has \spadtype{Finite} or \spad{S} has \spadtype{OrderedSet} according to lexicographical order of entries in cycles of equal length.
822169`\spad{sort(v,{} ps)} returns \spad{us,{} vs,{} ws} such that \spad{us} is \spad{collectUnder(ps,{} v)},{} \spad{vs} is \spad{collect(ps,{} v)} and \spad{ws} is \spad{collectUpper(ps,{} v)}.
822273`\spad{sort!(p,{} u)} returns \spad{u} with its elements ordered by \spad{p}.
822390`\spad{sort(p,{} a)} returns a copy of \spad{a} sorted using total ordering predicate \spad{p}.
822643`\spad{sorted?(u)} tests if the elements of \spad{u} are in ascending order.
822957`\spad{sorted?(p,{} a)} tests if \spad{a} is sorted according to predicate \spad{p}.
823051`\spad{sortedPurge!(A,{} crit)} is like \spad{purge},{} however,{} with the additional assumption that \spad{crit} respects the ordering of the indices.
823128`\spad{sortLD(sys)} sorts the functions in \spad{sys} according to their leading derivatives.
823269`\spad{space()} provides the blank character.
823307`\spad{space(l)} takes a list of draw options,{} \spad{l},{} and checks to see if it contains the option \spad{space}. If the the option doesn\spad{'t} exist,{} then an empty space is returned.
823393`\spad{space specifies} the space into which we will draw. If none is given then a new space is created.
823455`\spad{spanningForestArrow(s)} constructs a spanning tree for every arrow.
823603`\spad{spanningForestNode(s)} constructs a spanning tree for every vertex.
823749`\spad{spanningTreeArrow(s,{} i)} constructs a spanning tree for graph \spad{'s'} rooted at the arrow indexed by 'i'. The tree will expand out from 'i' only stopping when reaching a arrow that has already been visited (that is: loop detected). Elements in the tree are Integer,{} a positive Integer represents a arrow and a negative Integer represents a repeated arrow. note: it is possible that nodes may be visited many 
823749`--times,{} only arrows must not be re-visited.
823919`\spad{spanningTreeNode(s,{} i)} constructs a spanning tree for graph \spad{'s'} rooted at the node indexed by 'i'. The tree will expand out from 'i' only stopping when reaching a vertex that has already been visited (that is: loop detected). Elements in the tree are Integer,{} a positive Integer represents a vertex and a negative Integer represents a repeated vertex.
824087`\spad{SPDE1(b,{} c,{} D)} solves \spad{Q'} + \spad{b} \spad{Q} = \spad{c} and returns [\spad{Q},{} \spad{r}] where \spad{r} = \spad{c} - ( \spad{Q'} + \spad{b} \spad{Q}). That is when \spad{r} is zero then \spad{Q} is \spad{true} solution,{} otherwise \spad{r} represet
824087`--s unsolved part of \spad{c}. Moreover def(\spad{r}) < deg(\spad{bQ}). Note: \spad{SPDE1} assumes that deg(\spad{Q'}) < deg(\spad{bQ}) for all \spad{Q}.
824326`\spad{specialise(lp,{} c)} specializes all \spad{p} in \spad{lp} to the sample point of \spad{c}.
824491`\spad{specialTrigs(x,{} l)} should be local but conditional
824600`\spad{spherical(pt)} transforms \spad{pt} from spherical coordinates to Cartesian coordinates: the function produced will map the point \spad{(r,{} theta,{} phi)} to \spad{x = r*sin(phi)*cos(theta)},{} \spad{y = r*sin(phi)*sin(theta)},{} \spad{z = r*cos(phi)}.
824667`\spad{split(u(x) + sum_{P(a)=0} Q(a,{} x))} returns \spad{u(x) + sum_{P1(a)=0} Q(a,{} x) + ... + sum_{Pn(a)=0} Q(a,{} x)} where \spad{P1},{} ...,{} \spad{Pn} are the factors of \spad{P}.
824766`\spad{split(u(x) + sum_{P(a)=0} Q(a,{} x))} returns \spad{u(x) + sum_{P1(a)=0} Q(a,{} x) + ... + sum_{Pn(a)=0} Q(a,{} x)} where \spad{P1},{} ...,{} \spad{Pn} are the factors of \spad{P}.
824909`\spad{split(p)} returns a prime factorisation of \spad{p} over its splitting field.
825024`\spad{split(p,{} D)} returns \spad{[n,{}s]} such that \spad{p = n s},{} all the squarefree factors of \spad{n} are normal \spad{w}.\spad{r}.\spad{t}. \spad{D},{} and \spad{s} is special \spad{w}.\spad{r}.\spad{t}. \spad{D}. \spad{D} is the derivation to use.
825116`\spad{split(p,{} D)} returns \spad{[n,{} s]} such that \spad{p = n s},{} all the squarefree factors of \spad{n} are normal \spad{w}.\spad{r}.\spad{t}. \spad{D},{} and \spad{s} is special \spad{w}.\spad{r}.\spad{t}. \spad{D}. \spad{D} is the derivation to use.
825210`\spad{split(s,{} cc)} returns a list of substrings delimited by characters in \spad{cc}.
825277`\spad{split(s,{} c)} returns a list of substrings delimited by character \spad{c}.
825339`\spad{split!(u,{} n)} splits \spad{u} into two aggregates: \spad{v = rest(u,{} n)} and \spad{w = first(u,{} n)},{} returning \spad{v}. Note: afterwards \spad{rest(u,{} n)} returns \spad{empty()}.
825429`\spad{split(aG,{} vector)} returns a subalgebra \spad{A} of all square matrix of dimension \spad{n} as a list of list of matrices,{} generated by the list of matrices \spad{aG},{} where \spad{n} denotes both the size of vector as well as the dimension of each of the square matrices. {\em V R} is an A-module in the natural way. split(\spad{aG},{} vector) then checks whether the cyclic submodule g
825429`--enerated by {\em vector} is a proper submodule of {\em V R}. If successful,{} it returns a two-element list,{} which contains first the list of the representations of the submodule,{} then the list of the representations of the factor module. If the vector generates the whole module,{} a one-element list of the old representation is given. Note: a later version this should call the other split.
825539`\spad{split(aG,{} submodule)} uses a proper submodule of {\em R^n} to create the representations of the submodule and of the factor module.
825657`\spad{split(x,{} b)} splits binary tree \spad{b} into two trees,{} one with elements greater than \spad{x},{} the other with elements less than \spad{x}.
825733`\spad{splitConstant(f,{} x)} returns \spad{[c,{} g]} such that \spad{f = c * g} and \spad{c} does not involve \spad{t}.
825828`\spad{splitDenominator([q1,{} ...,{} qn])} returns \spad{[[p1,{} ...,{} pn],{} d]} such that \spad{\spad{qi} = pi/d} and \spad{d} is a common denominator for the \spad{qi}\spad{'s}.
825917`\spad{splitDenominator(q)} returns \spad{[p,{} d]} such that \spad{q = p/d} and \spad{d} is a common denominator for the coefficients of \spad{q}.
826018`\spad{splitDenominator([q1,{} ...,{} qn])} returns \spad{[[p1,{} ...,{} pn],{} d]} such that \spad{\spad{qi} = pi/d} and \spad{d} is a common denominator for the \spad{qi}\spad{'s}.
826100`\spad{splitDenominator(q)} returns \spad{[p,{} d]} such that \spad{q = p/d} and \spad{d} is a common denominator for the elements of \spad{q}.
826301`\spad{splitDenominator(op,{} [g1,{} ...,{} gm])} returns \spad{op0,{} [h1,{} ...,{} hm]} such that the equations \spad{op y = c1 g1 + ... + cm gm} and \spad{op0 y = c1 h1 + ... + cm hm} have the same solutions.
826419`\spad{splitNodeOf!(l,{} a,{} ls)} returns \spad{a} where the children list of \spad{l} has been set to \spad{[[s]\$\% for s in ls | not nodeOf?(s,{} a)]}. Thus,{} if \spad{l} is not a node of \spad{a},{} this latter splitting tree is unchanged.
826503`\spad{splitNodeOf!(l,{} a,{} ls,{} sub?)} returns \spad{a} where the children list of \spad{l} has been set to \spad{[[s]\$\% for s in ls | not subNodeOf?(s,{} a,{} sub?)]}. Thus,{} if \spad{l} is not a node of \spad{a},{} this latter splitting tree is unchanged.
826602`\spad{splitSquarefree(p,{} D)} returns \spad{[n_1 n_2\^2 ... n_m\^m,{} s_1 s_2\^2 ... s_q\^q]} such that \spad{p = n_1 n_2\^2 ... n_m\^m s_1 s_2\^2 ... s_q\^q},{} each \spad{n_i} is normal \spad{w}.\spad{r}.\spad{t}. \spad{D} and each \spad{s_i} is special \spad{w}.\spad{r}.\spad{t} \spad{D}. \spad{D} is the derivation to use.
826726`\spad{spnt(a,{} b)} constructs a 2D point defined by a and \spad{b} of type \spad{R}
826791`\spad{spnt(a,{} b,{} c)} constructs a 3D point defined by a,{} \spad{b} and \spad{c} of type \spad{R}
826868`\spad{sPol }\undocumented
827010`sPol
827145`\spad{sqfree(p)} returns the product of square free factors of \spad{p}
827218`\spad{sqfrFactor(base,{} exponent)} creates a factored object with a single factor whose \spad{base} is asserted to be square-free (flag = "sqfr").
827272`\spad{sqrt(x)} represents the Fortran intrinsic function SQRT
827540`\spad{sqrt(x)} returns the square root of \spad{x}. The branch cut lies along the negative real axis,{} continuous with quadrant II.
827585`\spad{sqrt(x)} is \spad{x ^ (1/2)}
827630`\spad{sqrt(x)} is \spad{x ^ (1/2)}
827690`\spad{sqrt(x)} is \spad{x ^ (1/2)}
827797`\spad{sqrt(b,{} a)} returns a square root of \spad{b}. Argument \spad{a} is a square root of \spad{b} \spad{(mod p)}.
827858`\spad{sqrt(x,{} n)} is \spad{x ^ (1/n)}
828052`\spad{square?(m)} returns \spad{true} if \spad{m} is a square matrix (\spadignore{i.e.} if \spad{m} has the same number of rows as columns) and \spad{false} otherwise.
828115`\spad{square?(m)} returns \spad{true} if \spad{m} is a square matrix (\spadignore{i.e.} if \spad{m} has the same number of rows as columns) and \spad{false} otherwise.
828193`\spad{squareFree(n)} returns the square free factorization of integer \spad{n}
828267`\spad{squareFree(p)} computes the square free decomposition of a multivariate polynomial \spad{p}.
828343`\spad{squareFree(p)} returns the square-free factorization of the polynomial \spad{p}. Each factor has no repeated roots,{} and the factors are pairwise relatively prime.
828422`\spad{squareFree(p)} computes the square-free factorization of the univariate polynomial \spad{p}. Each factor has no repeated roots,{} and the factors are pairwise relatively prime.
828812`\spad{squareFree(p)} computes the square free decomposition of a multivariate polynomial \spad{p} presented as a univariate polynomial with multivariate coefficients.
828944`\spad{squareFree(p)} returns the square free factorization of the polynomial \spad{p}.
829036`\spad{squareFree(x)} returns the square-free factorization of \spad{x} \spadignore{i.e.} such that the factors are pairwise relatively prime and each has multiple prime factors.
829107`\spad{squareFree(ts)} returns the square-free factorization of \spad{ts}. Moreover,{} each factor is a Lazard triangular set and the decomposition is a Kalkbrener split of \spad{ts},{} which is enough here for the matter of solving zero-dimensional algeb
829107`--raic systems. WARNING: \spad{ts} is not checked to be zero-dimensional.
829361`\spad{squareFreeBasis(lp)} computes \spad{gcd} basis of square-free parts of elements of \spad{lp}
829459`\spad{squareFreeFactors(p)} returns the square-free factors of \spad{p} over \spad{R}
829560`\spad{squareFreeLexTriangular(base,{} norm?)} decomposes the variety associated with \spad{base} into square-free regular chains. Thus a point belongs to this variety iff it is a regular zero of a regu
829560`--lar set in in the output. Note that \spad{base} needs to be a lexicographical Groebner basis of a zero-dimensional ideal. If \spad{norm?} is \spad{true} then the regular sets are normalized.
829867`\spad{squareFreePart(p)} returns a polynomial which has the same irreducible factors as the univariate polynomial \spad{p},{} but each factor has multiplicity one.
830133`\spad{squareFreePart(p)} returns product of all the irreducible factors of polynomial \spad{p} each taken with multiplicity one.
830219`\spad{squareFreePart(x)} returns a product of prime factors of \spad{x} each taken with multiplicity one.
830284`\spad{squareFreePart(p,{} ts)} returns \spad{lpwt} such that \spad{lpwt.i.val} is a square-free polynomial \spad{w}.\spad{r}.\spad{t}. \spad{lpwt.i.tower},{} this polynomial being associated with \spad{p} modulo \spad{lpwt.i.tower},{} for every \spad{i}. Moreover,{} the list of the \spad{lpwt.i.tower} is a split of Kalkbrener of \spad{ts}. WARNING: This assumes that \spad{p} is a non-constant polynom
830284`--ial such that if \spad{p} is added to \spad{ts},{} then the resulting set is a regular triangular set.
830527`\spad{squareFreePolynomial(p)} returns the square-free factorization of the univariate polynomial \spad{p}.
830670`\spad{squareFreePrim(p)} compute the square free decomposition of a primitive multivariate polynomial \spad{p}.
830750`\spad{squareMatrix(m)} converts a matrix of type \spadtype{Matrix} to a matrix of type \spadtype{SquareMatrix}.
830883`\spad{squareTop(m)} returns an \spad{n}-by-\spad{n} array consisting of the first \spad{n} rows of the \spad{m}-by-\spad{n} array \spad{m}. Error: if \spad{m < n}.
830956`\spad{stack([x,{} y,{} ...,{} z])} creates a stack with first (top) element \spad{x},{} second element \spad{y},{} ...,{} and last element \spad{z}.
831000`\spad{standardBasisOfCyclicSubmodule(lm,{} v)} returns a matrix as follows. It is assumed that the size \spad{n} of the vector equals the number of rows and columns of the matrices. Then the matrices generate a subalgebra,{} say \spad{A},{} of the algebra of all square matrices of dimension \spad{n}. {\em V R} is an \spad{A}-module in the natural way. standardBasisOfCyclic
831000`--Submodule(\spad{lm},{} \spad{v}) calculates a matrix whose non-zero column vectors are the \spad{R}-Basis of {\em Av} achieved in the way as described in section 6 of \spad{R}. A. Parker\spad{'s} "The Meat-Axe". Note: in contrast to {\em cyclicSubmodule},{} the result is not in echelon form.
831133`\spad{startPolynomial(p)} uses the ideas of Schoenhage\spad{'s} variant of Graeffe\spad{'s} method to construct circles which separate roots to get a good start polynomial,{} \spadignore{i.e.} one whose image under the Chinese Remainder Isomorphism has both entries of norm smaller and greater or equal to 1. In case the roots are found during internal calculations. The corresponding factors are in {
831133`--\em factors} which are otherwise 1.
831240`\spad{startStats!(x)} initializes the statisitics process and sets the comments to display when statistics are printed
831321`\spad{startTableGcd!(s1,{} s2,{} s3)} is an internal subroutine,{} exported only for developement.
831411`\spad{startTableGcd!(s1,{} s2,{} s3)} is an internal subroutine,{} exported only for developement.
831511`\spad{startTableGcd!(s1,{} s2,{} s3)} is an internal subroutine,{} exported only for developement.
831719`\spad{startTableInvSet!(s1,{} s2,{} s3)} is an internal subroutine,{} exported only for developement.
831933`\spad{statement2Fortran(of)}
832010`\spad{statistics()} prints a statistic on the use of the lazy evaluation mechanism. It displays the number of lazy differentiations performed and how many of them had to be executed explicitly later on.
832067`\spad{statistics()} prints out a summary of the outcome of the testcases so far. Use \spad{clear completely} to reset the statistics.
832116`\spad{status(n)} returns the status of the node \spad{n}.
832171`\spad{status(s)} returns \spad{true} if the quasi-algebraic set is empty,{} \spad{false} if it is not,{} and "failed" if not yet known
832260`\spad{stFunc1(f)} is a local function exported due to compiler problem. This function is of no interest to the top-level user.
832368`\spad{stFunc2(f)} is a local function exported due to compiler problem. This function is of no interest to the top-level user.
832493`\spad{stFuncN(f)} is a local function xported due to compiler problem. This function is of no interest to the top-level user.
832613`\spad{stirling1(n,{} m)} returns the Stirling number of the first kind denoted \spad{S[n,{} m]}.
832679`\spad{stirling2(n,{} m)} returns the Stirling number of the second kind denoted \spad{SS[n,{} m]}.
832745`\spad{stirling(i,{} k,{} q)} computes the corresponding modified Stirling number.
832870`\spad{stop()} creates a representation of a STOP statement.
832909`\spad{stopMusserTrials()} returns the bound on the number of factors for which \spadfun{modularFactor} stops to look for an other prime. You will have to remember that the step of recombining the extraneous factors may take up to \spad{2^stopMusserTrials()} trials.
832987`\spad{stopMusserTrials(n)} sets to \spad{n} the bound on the number of factors for which \spadfun{modularFactor} stops to look for an other prime. You will have to remember that the step of recombining the extraneous factors may take up to \spad{2^n} trials. Returns the previous value.
833080`\spad{stopTableGcd!()} is an internal subroutine,{} exported only for developement.
833149`\spad{stopTableGcd!()} is an internal subroutine,{} exported only for developement.
833228`\spad{stopTableGcd!()} is an internal subroutine,{} exported only for developement.
833394`\spad{stopTableInvSet!()} is an internal subroutine,{} exported only for developement.
835162`\spad{STransform(x)} returns the Taylor expansion the \spad{S}-transform \spad{S(z)} of the distribution \spad{x} if the mean is nonzero.
835249`\spad{stransform(cpx)} construct transform as function of complex variable can only be used when \spad{PT} is SArgand so this can be converted to \spad{PT} \spad{->} \spad{PT}
835341`\spad{stransform(m)} construct transorm using a multivector
835406`\spad{stransform(m)} constructs transform with given matrix elements
835477`\spad{stransform(gen)} construct transform in general form as a mapping from \spad{PT} to \spad{PT}
835533`\spad{STransform(x)} returns the Puiseux expansion of the \spad{S}-transform \spad{S(z)}.
835619`\spad{STransform(x)} returns the Puiseux expansion of the \spad{S}-transform \spad{S(z)} if the mean is zero.
835706`\spad{stranslate(offsetx,{} offsety,{} offsetz,{} scalex,{} scaley,{} scalez)} constructs a transform which represents pure translation we can also combine with scale which,{} for instance,{} is useful when writing to \spad{SVG} file because the \spad{y} dimension is inverted
835825`\spad{stream(x)} returns stream of entries
835883`\spad{stream(f)} creates an infinite stream all of whose elements are equal to \spad{f()}. Note: \spad{stream(f) = [f(),{} f(),{} f(),{} ...]}.
835927`\spad{stream(f,{} s)} returns \spad{[s,{} f(s),{} f(f(s)),{} ...]}.
835981`\spad{stream(f,{} x)} creates an infinite stream whose first element is \spad{x} and whose \spad{n}th element (\spad{n > 1}) is \spad{f} applied to the previous element. Note: \spad{stream(f,{} x) = [x,{} f(x),{} f(f(x)),{} ...]}.
836028`\spad{string?(f)} checks if \spad{f} is a string,{} this implies atom?(\spad{f})
836089`\spad{string(f)} gives string corresponding to \spad{f}. Valid only when string?(\spad{f}) is \spad{true}
836148`\spad{string?(s)} is \spad{true} if \spad{s} is an atom and belong to \spad{Str}.
836222`\spad{string(s)} returns \spad{s} as an element of \spad{Str}. Error: if \spad{s} is not an atom that also belongs to \spad{Str}.
836291`\spad{string(s)} converts the symbol \spad{s} to a string. Error: if the symbol is subscripted.
836333`\spad{string(i)} returns the decimal representation of \spad{i} in a string
836384`\spad{stripCommentsAndBlanks(s)} treats \spad{s} as a piece of FriCAS input,{} and removes comments,{} and leading and trailing blanks.
836457`\spad{strongGenerators(gp)} returns strong generators for the group {\em gp}.
836603`\spad{stronglyReduce(p,{} ts)} returns a polynomial \spad{r} such that \spad{stronglyReduced?(r,{} ts)} holds and there exists some product \spad{h} of \spad{initials(ts)} such that \spad{h*p - r} lies in the ideal generated by \spad{ts}.
836747`\spad{stronglyReduced?(ts)} returns \spad{true} iff every element of \spad{ts} is reduced \spad{w}.\spad{r}.\spad{t} to any other element of \spad{ts}.
836899`\spad{stronglyReduced?(p,{} ts)} returns \spad{true} iff \spad{p} is reduced \spad{w}.\spad{r}.\spad{t}. \spad{ts}.
836978`\spad{structuralConstants()} calculates the structural constants \spad{[(gammaijk) for k in 1..rank()]} defined by \spad{\spad{vi} * vj = gammaij1 * v1 + ... + gammaijn * vn},{} where \spad{v1},{} ...,{} \spad{vn} is the fixed \spad{R}-module basis.
837069`\spad{structuralConstants()} calculates the structural constants \spad{[(gammaijk) for k in 1..rank()]} defined by \spad{\spad{vi} * vj = gammaij1 * v1 + ... + gammaijn * vn},{} where \spad{v1},{} ...,{} \spad{vn} is the fixed \spad{R}-module basis.
837349`\spad{structuralConstants(basis)} takes the \spad{basis} of a matrix algebra,{} \spadignore{e.g.} the result of \spadfun{basisOfCentroid} and calculates the structural constants. Note,{} that the it is not checked,{} whether \spad{basis} really is a \spad{basis} of a matrix algebra.
837451`\spad{structuralConstants([v1,{} v2,{} ...,{} vm])} calculates the structural constants \spad{[(gammaijk) for k in 1..m]} defined by \spad{\spad{vi} * vj = gammaij1 * v1 + ... + gammaijm * vm},{} where \spad{[v1,{} ...,{} vm]} is an \spad{R}-module basis of a subalgebra.
837553`\spad{structuralConstants(ls,{} mt)} determines the structural constants of an algebra with generators \spad{ls} and multiplication table \spad{mt},{} the entries of which must be given as linear polynomials in the indeterminates given by \spad{ls}. The result is in particular useful \indented{1}{as fourth argument for \spadtype{AlgebraGivenByStructural
837553`--Constants}} \indented{1}{and \spadtype{GenericNonAssociativeAlgebra}.}
837706`\spad{structuralConstants(ls,{} mt)} determines the structural constants of an algebra with generators \spad{ls} and multiplication table \spad{mt},{} the entries of which must be given as linear polynomials in the indeterminates given by \spad{ls}. The result is in particular useful \indented{1}{as fourth argument for \spadtype{AlgebraGivenByStructuralConstants}} \indente
837706`--d{1}{and \spadtype{GenericNonAssociativeAlgebra}.}
837839`\spad{struveH(v,{} z)} is the Struve \spad{H} function
837902`\spad{struveH(v,{} z)} is the Struve \spad{H} function.
837961`\spad{struveL(v,{} z)} is the Struve \spad{L} function defined by the formula \spad{struveL(v,{} z) = -\%i^exp(-v*\%pi*\%i/2)*struveH(v,{} \%i*z)}
838024`\spad{struveL(v,{} z)} is the Struve \spad{L} function defined by the formula \spad{struveL(v,{} z) = -\%i^exp(-v*\%pi*\%i/2)*struveH(v,{} \%i*z)}.
838083`\spad{stube(functions: List Clipd,{} r,{} n)} creates a tube of radius \spad{r} around the curve functions.
838256`\spad{SturmHabicht(p1,{} p2)} computes \spad{c_}{+}\spad{-c_}{-} where \spad{c_}{+} is the number of real roots of \spad{p1} with \spad{p2>0} and \spad{c_}{-} is the number of real roots of \spad{p1} with \spad{p2<0}. If \spad{p2=1} what you get is the number of real roots of \spad{p1}.
838372`\spad{SturmHabichtCoefficients(p1,{} p2)} computes the principal Sturm-Habicht coefficients of \spad{p1} and \spad{p2}
838500`\spad{SturmHabichtMultiple(p1,{} p2)} computes \spad{c_}{+}\spad{-c_}{-} where \spad{c_}{+} is the number of real roots of \spad{p1} with \spad{p2>0} and \spad{c_}{-} is the number of real roots of \spad{p1} with \spad{p2<0}. If \spad{p2=1} what you get is the number of real roots of \spad{p1}.
838640`\spad{SturmHabichtSequence(p1,{} p2)} computes the Sturm-Habicht sequence of \spad{p1} and \spad{p2}
838788`\spad{sturmSequence(p) = sylvesterSequence(p,{} p')}
838891`\spad{sturmVariationsOf(l)} is the number of sign variations in the list of numbers \spad{l},{} note that the first term counts as a sign
839035`\spad{style(s)} specifies the drawing style in which the graph will be plotted by the indicated string \spad{s}. This option is expressed in the form \spad{style == s}.
839080`\spad{style(l,{} s)} takes the list of draw options,{} \spad{l},{} and checks the list to see if it contains the option \spad{style}. If the option does not exist the value,{} \spad{s} is returned.
839156`\spad{sub(f,{} n)} creates a form for \spad{f} subscripted by \spad{n}.
839198`\spad{subCase?(lpwt1,{} lpwt2)} is an internal subroutine,{} exported only for developement.
839325`\spad{subCase?(lpwt1,{} lpwt2)} is an internal subroutine,{} exported only for developement.
839462`\spad{subdiagramSvg(sc,{} n,{} dispArrowName,{} deep)} creates a branch of an \spad{SVG} diagram diagram under an already existing scene node \spad{sc}. \spad{n:} \% is the graph that will be written dispArrowName: Boolean is \spad{true} to include the name of each arrow
839642`\spad{subdivide(me)} for each face calculate a new point in the centre of the face,{} then build a new set of faces which include the new point.
839689`\spad{subMatrix} returns several elements out of a matrix. The elements are stacked into a submatrix.
839797`\spad{subMatrix} returns several elements out of a matrix. The elements are stacked into a submatrix.
840011`\spad{subMatrix(x,{} i1,{} i2,{} j1,{} j2)} extracts the submatrix \spad{[x(i,{} j)]} where the index \spad{i} ranges from \spad{i1} to \spad{i2} and the index \spad{j} ranges from \spad{j1} to \spad{j2}.
840116`\spad{submod(a,{} b,{} p)},{} \spad{0<=a,{} b<p>1},{} means \spad{a-b mod p}.
840173`\spad{subNode?(n1,{} n2,{} o2)} returns \spad{true} iff \spad{value(n1) = value(n2)} and \spad{o2(condition(n1),{} condition(n2))}
840248`\spad{subNodeOf?(s,{} a,{} sub?)} returns \spad{true} iff for some node \spad{n} in \spad{a} we have \spad{s = n} or \spad{status(n)} and \spad{subNode?(s,{} n,{} sub?)}.
840341`\spad{subPolSet?(lp1,{} lp2)} returns \spad{true} iff \spad{lp1} is a sub-set of \spad{lp2}.
840428`\spad{subPolSet?(lp1,{} lp2)} returns \spad{true} iff \spad{lp1} is a sub-set of \spad{lp2}.
840525`\spad{subQuasiComponent?(ts,{} lus)} returns \spad{true} iff \spad{subQuasiComponent?(ts,{} us)} holds for one \spad{us} in \spad{lus}.
840616`\spad{subQuasiComponent?(ts,{} lus)} returns \spad{true} iff \spad{subQuasiComponent?(ts,{} us)} holds for one \spad{us} in \spad{lus}.
840717`\spad{subQuasiComponent?(ts,{} us)} returns \spad{true} iff \spadopFrom{internalSubQuasiComponent?}{QuasiComponentPackage} returs \spad{true}.
840802`\spad{subQuasiComponent?(ts,{} us)} returns \spad{true} iff \spadopFrom{internalSubQuasiComponent?(\spad{ts},{} us)}{QuasiComponentPackage} returs \spad{true}.
840897`\spad{subResultantChain(a,{} b)},{} where \spad{a} and \spad{b} are not contant polynomials with the same main variable,{} returns the subresultant chain of \spad{a} and \spad{b}.
841004`\spad{subResultantGcd(P,{} Q)} returns the \spad{gcd} of two primitive polynomials \spad{P} and \spad{Q}.
841085`\spad{subResultantGcd(a,{} b)} computes a \spad{gcd} of \spad{a} and \spad{b} where \spad{a} and \spad{b} are assumed to have the same main variable \spad{v} and are viewed as univariate polynomials in \spad{v} with coefficients in the fraction field of the polynomial ring generated by their other variables over \spad{R}.
841184`\spad{subResultantGcd(p,{} q)} computes the \spad{gcd} of the polynomials \spad{p} and \spad{q} using the SubResultant \spad{GCD} algorithm.
841280`\spad{subResultantGcdEuclidean(P,{} Q)} carries out the equality \spad{coef1*P + coef2*Q = +/- S_i(P,{} Q)} where the degree (not the indice) of the subresultant \spad{S_i(P,{} Q)} is the smaller as possible.
841404`\spad{subResultantsChain(a,{} b)} returns the list of the non-zero sub-resultants of \spad{a} and \spad{b} sorted by increasing degree.
841510`\spad{subresultantSequence(p1,{} p2)} computes the (standard) subresultant sequence of \spad{p1} and \spad{p2}
841658`\spad{subresultantVector(p,{} q)} returns \spad{[p0,{} ...,{} pn]} where \spad{pi} is the \spad{i}-th subresultant of \spad{p} and \spad{q}. In particular,{} \spad{p0 = resultant(p,{} q)}.
841746`\spad{subscript(s,{} [a1,{} ...,{} an])} returns \spad{s} subscripted by \spad{[a1,{} ...,{} an]}.
841861`\spad{subset?(u,{} v)} tests if \spad{u} is a subset of \spad{v}. Note: equivalent to \spad{reduce(and,{} {member?(x,{} v) for x in u},{} true,{} false)}.
841917`\spad{subSet(n,{} m,{} k)} calculates the {\em k}\spad{-}th {\em m}-subset of the set {\em 0,{} 1,{} ...,{} (n-1)} in the lexicographic order considered as a decreasing map from {\em 0,{} ...,{} (m-1)} into {\em 0,{} ...,{} (n-1)}. See \spad{S}.\spad{G}. Williamson: Theorem 1.60. Error: if not {\em (0 <= m <= n and 0 < = k < (n choose m))}.
842016`\spad{subspace()} \undocumented
842061`\spad{subspace(s)} returns the \spadtype{SubSpace} which holds all the point information in the \spadtype{ThreeSpace},{} \spad{s}.
842127`\spad{subspace(v)} returns the contents of the viewport \spad{v},{} which is of the domain \spadtype{ThreeDimensionalViewport},{} as a subspace of the domain \spad{ThreeSpace}.
842206`\spad{subspace?(B1,{} B2)} tests if the first space is included in the second.
842268`\spad{subspace(v,{} sp)} places the contents of the viewport \spad{v},{} which is of the domain \spadtype{ThreeDimensionalViewport},{} in the subspace \spad{sp},{} which is of the domain \spad{ThreeSpace}.
842578`\spad{subst(eq1,{} eq2)} substitutes \spad{eq2} into both sides of \spad{eq1} the \spad{lhs} of \spad{eq2} should be a kernel
842645`\spad{subst(f,{} k = g)} replaces the kernel \spad{k} by \spad{g} formally in \spad{f}.
842704`\spad{subst(f,{} [k1 = g1,{} ...,{} kn = gn])} replaces the kernels \spad{k1},{} ...,{} \spad{kn} by \spad{g1},{} ...,{} \spad{gn} formally in \spad{f}.
842769`substitution of 'a' for \spad{'b'} in \spad{'n'}
842816`\spad{subst(f,{} jv,{} exp)} substitutes \spad{exp} for the jet variable \spad{jv} in the function \spad{f}.
843014`\spad{subst(f,{} [k1...,{} kn],{} [g1,{} ...,{} gn])} replaces the kernels \spad{k1},{} ...,{} \spad{kn} by \spad{g1},{} ...,{} \spad{gn} formally in \spad{f}.
848370`\spad{substHP options} returns a specification for Hermite-Pade approximation with the substitution operator
849263`\spad{substitute(x,{} y,{} d)} replace \spad{x}\spad{'s} with \spad{y}\spad{'s} in dictionary \spad{d}.
849325`\spad{substring?(s,{} t,{} i)} tests if \spad{s} is a substring of \spad{t} beginning at index \spad{i}. Note: \spad{substring?(s,{} t,{} 0) = prefix?(s,{} t)}.
849461`\spad{subst_vars(p,{} lv1,{} lv2)} substitutes variables from list \spad{lv2} for corresponding variables from \spad{lv1}.
849620`\spad{subtractIfCan(x,{} y)} returns an element \spad{z} such that \spad{z+y=x} or "failed" if no such element exists.
849703`\spad{subTriSet?(ts,{} us)} returns \spad{true} iff \spad{ts} is a sub-set of \spad{us}.
849780`\spad{subTriSet?(ts,{} us)} returns \spad{true} iff \spad{ts} is a sub-set of \spad{us}.
849867`\spad{suchThat(p,{} f)} makes a copy of \spad{p} and adds the predicate \spad{f} to the copy,{} which is returned.
849952`\spad{suchThat(p,{} [f1,{} ...,{} fn])} makes a copy of \spad{p} and adds the predicate \spad{f1} and ... and \spad{fn} to the copy,{} which is returned.
850043`\spad{suchThat(x,{} foo)} attaches the predicate foo to \spad{x}; error if \spad{x} is not a symbol.
850124`\spad{suchThat(x,{} [f1,{} f2,{} ...,{} fn])} attaches the predicate \spad{f1} and \spad{f2} and ... and \spad{fn} to \spad{x}. Error: if \spad{x} is not a symbol.
850211`\spad{suchThat(x,{} foo)} attaches the predicate foo to \spad{x}.
850298`\spad{suchThat(x,{} [f1,{} f2,{} ...,{} fn])} attaches the predicate \spad{f1} and \spad{f2} and ... and \spad{fn} to \spad{x}.
850391`\spad{suchThat(p,{} [a1,{} ...,{} an],{} f)} returns a copy of \spad{p} with the top-level predicate set to \spad{f(a1,{} ...,{} an)}.
850495`\spad{suchThat(r,{} [a1,{} ...,{} an],{} f)} returns the rewrite rule \spad{r} with the predicate \spad{f(a1,{} ...,{} an)} attached to it.
850582`\spad{suffix?(s,{} t)} tests if the string \spad{s} is the final substring of \spad{t}. Note: \spad{suffix?(s,{} t) == reduce(and,{} [s.i = t.(n - m + i) for i in 0..maxIndex s])} where \spad{m} and \spad{n} denote the maxIndex of \spad{s} and \spad{t} respectively.
850638`\spad{sum(expr)} creates the form prefixing \spad{expr} by a capital sigma.
850677`\spad{sum(expr,{} lowerlimit)} creates the form prefixing \spad{expr} by a capital sigma with a lowerlimit.
850719`\spad{sum(p(n),{} n)} returns \spad{P(n)},{} the indefinite sum of \spad{p(n)} with respect to upward difference on \spad{n},{} \spadignore{i.e.} \spad{P(n+1) - P(n) = a(n)}.
850793`\spad{sum(f(n),{} n = a..b)} returns \spad{f(a) + f(a+1) + ... f(b)}.
850947`\spad{sum(a(n),{} n)} returns \spad{A} which is the indefinite sum of \spad{a} with respect to upward difference on \spad{n},{} \spadignore{i.e.} \spad{A(n+1) - A(n) = a(n)}.
851068`\spad{sum(f(n),{} n = a..b)} returns \spad{f}(a) + \spad{f}(\spad{a+1}) + ... + \spad{f}(\spad{b}).
851134`\spad{sum(a(n),{} n)} returns A(\spad{n}) such that A(\spad{n+1}) - A(\spad{n}) = a(\spad{n}).
851189`\spad{sum(f(n),{} n = a..b)} returns \spad{f(a) + f(a+1) + ... f(b)}.
851302`\spad{sum(a(n),{} n)} returns \spad{A} which is the indefinite sum of \spad{a} with respect to upward difference on \spad{n},{} \spadignore{i.e.} \spad{A(n+1) - A(n) = a(n)}.
851392`\spad{sum(expr,{} lowerlimit,{} upperlimit)} creates the form prefixing \spad{expr} by a capital sigma with both a \spad{lowerlimit} and upperlimit.
851437`\spad{sum(p(n),{} n = a..b)} returns \spad{p(a) + p(a+1) + ... + p(b)}.
851522`\spad{sumBasis Lb} computes a basis of the sum of list of subspaces. This function is slightly more efficient than \spad{reduce(sumBasis,{} Lb)}.
851581`\spad{sumBasis LLv} computes a basis of the sum of the list of subspaces represented by \spad{LLv}. This function is slightly more efficient than \spad{reduce(sumBasis,{} LLv)}.
851653`\spad{sumBasis(B1,{} B2)} computes a basis of the sum of the two subspaces.
851709`\spad{sumBasis(Lv1,{} Lv2)} computes a basis of the sum of the two subspaces spanned by the vectors of \spad{Lv1} and \spad{Lv2}.
851791`\spad{summation(f(n),{} n = a..b)} returns \spad{f}(a) + ... + \spad{f}(\spad{b}) as a formal sum.
851868`\spad{summation(f(n),{} n)} returns the formal sum \spad{S}(\spad{n}) which verifies \spad{S}(\spad{n+1}) - \spad{S}(\spad{n}) = \spad{f}(\spad{n}).
851934`\spad{summation(f(n),{} n = a..b)} returns \spad{f}(a) + ... + \spad{f}(\spad{b}) as a formal sum.
852012`\spad{summation(f(n),{} n)} returns the formal sum \spad{S}(\spad{n}) which verifies \spad{S}(\spad{n+1}) - \spad{S}(\spad{n}) = \spad{f}(\spad{n}).
852078`\spad{sumOfDivisors(n)} returns the sum of the integers between 1 and \spad{n} (inclusive) which divide \spad{n}. The sum of the divisors of \spad{n} is often denoted by \spad{sigma(n)}.
852155`\spad{sumOfKthPowerDivisors(n,{} k)} returns the sum of the \spad{k}th powers of the integers between 1 and \spad{n} (inclusive) which divide \spad{n}. the sum of the \spad{k}th powers of the divisors of \spad{n} is often denoted by \spad{sigma_k(n)}.
852259`\spad{sumSquares(p)} construct \spad{a} and \spad{b} such that \spad{a^2+b^2} is equal to the integer prime \spad{p},{} and otherwise returns an error. It will succeed if the prime number \spad{p} is 2 or congruent to 1 mod 4.
852339`\spad{sunion(x,{} y)} gives the union of two boundaries as a box,{} \indented{2}{that is it gives a box that is external to both.} \spad{x:} \% is first boundary to be combined \spad{y:} \% is second boundary to be combined
852387`\spad{sup(u)} returns the supremum of \spad{u}.
852434`\spad{sup(x,{} y)} returns the least element from which both \spad{x} and \spad{y} can be subtracted.
852489`\spad{supDimElseRittWu(ts,{} us)} returns \spad{true} iff \spad{ts} has less elements than \spad{us} otherwise if \spad{ts} has higher rank than \spad{us} \spad{w}.\spad{r}.\spad{t}. Riit and Wu ordering.
852573`\spad{supDimElseRittWu(ts,{} us)} returns \spad{true} iff \spad{ts} has less elements than \spad{us} otherwise if \spad{ts} has higher rank than \spad{us} \spad{w}.\spad{r}.\spad{t}. Ritt and Wu ordering.
852667`\spad{super(f,{} n)} creates a form for \spad{f} superscripted by \spad{n}.
852711`\spad{superscript(s,{} [a1,{} ...,{} an])} returns \spad{s} superscripted by \spad{[a1,{} ...,{} an]}.
852771`\spad{supersub(a,{} [sub1,{} super1,{} sub2,{} super2,{} ...])} creates a form with each subscript aligned under each superscript.
852824`\spad{support(x)} returns the list of basis elements with nonzero coefficients.
852958`\spad{supRittWu?(a,{} b)} returns \spad{true} if \spad{a} is greater than \spad{b} \spad{w}.\spad{r}.\spad{t}. the Ritt and Wu Wen Tsun ordering using the refinement of Lazard.
853036`\spad{surface(c1,{} c2,{} c3)} creates a surface from 3 parametric component functions \spad{c1},{} \spad{c2},{} and \spad{c3}.
853156`\spad{svec(a,{} b)} constructs a 2D vector defined by a and \spad{b} of type \spad{R}
853221`\spad{svec(a,{} b,{} c)} constructs a 3D vector defined by a,{} \spad{b} and \spad{c} of type \spad{R}
853298`\spad{swap(p(x,{} y))} returns \spad{p}(\spad{y},{} \spad{x}).
853378`\spad{swap(eq)} interchanges left and right hand side of equation \spad{eq}.
853489`\spad{swap!(u,{} i,{} j)} interchanges elements \spad{i} and \spad{j} of aggregate \spad{u}. No meaningful value is returned.
853674`\spad{swapColumns!(m,{} i,{} j)} interchanges the \spad{i}th and \spad{j}th columns of \spad{m}. This destructively alters the array.
853850`\spad{swapRows!(m,{} i,{} j)} interchanges the \spad{i}th and \spad{j}th rows of \spad{m}. This destructively alters the array.
853939`\spad{sylvesterMatrix(p,{} q)} returns the Sylvester matrix for the two polynomials \spad{p} and \spad{q}.
854010`\spad{sylvesterSequence(p,{} q)} is the negated remainder sequence of \spad{p} and \spad{q} divided by the last computed term
854125`\spad{symbol?(p)} tests if \spad{p} is a symbol.
854173`\spad{symbol(sys)} computes directly the symbol of the family \spad{sys} of functions.
854350`\spad{symbol?(f)} checks if \spad{f} is a symbol,{} this implies atom?(\spad{f})
854411`\spad{symbol(f)} gives symbol corresponding to \spad{f}. Valid only when symbol?(\spad{f}) is \spad{true}
854470`\spad{symbol?(s)} is \spad{true} if \spad{s} is an atom and belong to \spad{Sym}.
854544`\spad{symbol(s)} returns \spad{s} as an element of \spad{Sym}. Error: if \spad{s} is not an atom that also belongs to \spad{Sym}.
854613`\spad{symbolIfCan(k)} returns \spad{k} viewed as a symbol if \spad{k} is a symbol,{} and "failed" otherwise.
854679`\spad{symbolTable(l)} creates a symbol table from the elements of \spad{l}.
854767`\spad{symbolTableOf(f,{} tab)} returns the symbol table of \spad{f}
854836`\spad{symFunc([r1,{} ...,{} rn])} returns the vector of the elementary symmetric functions in the \spad{\spad{ri}'s}: \spad{[r1 + ... + rn,{} r1 r2 + ... + r(n-1) rn,{} ...,{} r1 r2 ... rn]}.
854902`\spad{symFunc(r,{} n)} returns the vector of the elementary symmetric functions in \spad{[r,{} r,{} ...,{} r]} \spad{n} times.
855117`\spad{symmetric?(m)} returns \spad{true} if the matrix \spad{m} is square and symmetric (\spadignore{i.e.} \spad{m[i,{} j] = m[j,{} i]} for all \spad{i} and \spad{j}) and \spad{false} otherwise.
855183`\spad{symmetric?(m)} returns \spad{true} if the matrix \spad{m} is square and symmetric (\spadignore{i.e.} \spad{m[i,{} j] = m[j,{} i]} for all \spad{i} and \spad{j}) and \spad{false} otherwise.
855384`\spad{symmetricDifference(u,{} v)} returns the set aggregate of elements \spad{x} which are members of set aggregate \spad{u} or set aggregate \spad{v} but not both. If \spad{u} and \spad{v} have no elements in common,{} \spad{symmetricDifference(u,{} v)} returns a copy of \spad{u}. Note: \spad{symmetricDifference(u,{} v) = union(difference(u,{} v),{} difference(v,{} u))}
855447`\spad{symmetricGroup(\spad{li})} constructs the symmetric group acting on the integers in the list {\em \spad{li}},{} generators are the cycle given by {\em \spad{li}} and the 2-cycle {\em (\spad{li}.1,{} \spad{li}.2)}. Note: duplicates in the list will be removed.
855545`\spad{symmetricGroup(n)} constructs the symmetric group {\em Sn} acting on the integers 1,{} ...,{} \spad{n},{} generators are the {\em n}-cycle {\em (1,{} ...,{} n)} and the 2-cycle {\em (1,{} 2)}.
855645`\spad{symmetricPower(a,{} n)} computes an operator \spad{c} of minimal order such that the nullspace of \spad{c} is generated by all the products of \spad{n} solutions of \spad{a}.
855761`\spad{symmetricPower(a,{} n,{} D)} computes an operator \spad{c} of minimal order such that the nullspace of \spad{c} is generated by all the products of \spad{n} solutions of \spad{a}. \spad{D} is the derivation to use.
855868`\spad{symmetricProduct(a,{} b)} computes an operator \spad{c} of minimal order such that the nullspace of \spad{c} is generated by all the products of a solution of \spad{a} by a solution of \spad{b}.
855970`\spad{symmetricProduct(a,{} b,{} D)} computes an operator \spad{c} of minimal order such that the nullspace of \spad{c} is generated by all the products of a solution of \spad{a} by a solution of \spad{b}. \spad{D} is the derivation to use.
856123`\spad{symmetricRemainder(a,{} b)} (where \spad{b > 1}) yields \spad{r} where \spad{ -b/2 <= r < b/2 }.
856270`\spad{symmetricSquare(a)} computes \spad{symmetricProduct(a,{} a)} using a more efficient method.
856368`\spad{symmetricTensors(la,{} n)} applies to each \spad{m}-by-\spad{m} square matrix in the list {\em la} the irreducible,{} polynomial representation of the general linear group {\em GLm} which corresponds to the partition {\em (n,{} 0,{} ...,{} 0)} of \spad{n}. Error: if the matrices in {\em la} are not square matrices. Note: this corresponds to the symmetrization of the representation with the 
856368`--trivial representation of the symmetric group {\em Sn}. The carrier spaces of the representation are the symmetric tensors of the \spad{n}-fold tensor product.
856477`\spad{symmetricTensors(a,{} n)} applies to the \spad{m}-by-\spad{m} square matrix {\em a} the irreducible,{} polynomial representation of the general linear group {\em GLm} which corresponds to the partition {\em (n,{} 0,{} ...,{} 0)} of \spad{n}. Error: if {\em a} is not a square matrix. Note: this corresponds to the symmetrization of the representation with the trivial representation of the symmetric group
856477`-- {\em Sn}. The carrier spaces of the representation are the symmetric tensors of the \spad{n}-fold tensor product.
856574`\spad{systemCommand(cmd)} takes the string \spadvar{\spad{cmd}} and passes it to the runtime environment for execution as a system command. Although various things may be printed,{} no usable value is returned.
856637`\spad{t(n)} \undocumented
856711`\spad{tab1(lp)} creates a tableau from a list of pairs \spad{lp}
856787`\spad{tab(ls)} creates a tableau from \spad{ls} by first creating a list of pairs using \spadfunFrom{slex}{TableauBumpers},{} then creating a tableau using \spadfunFrom{\spad{tab1}}{TableauBumpers}.
856903`\spad{table()}\$\spad{T} creates an empty table of type \spad{T}.
856957`\spad{table(h)} creates an empty hash table that uses \spad{h} instead of hash\$Key. Note that \spad{h} should be a mathematical function in the sense that from \spad{k1=k2} follows \spad{h}(\spad{k1})\spad{=h}(\spad{k2}). If that is not the case,{} \spad{k1} and \spad{k2} will internally be considered as being different keys.
857027`\spad{table(lv)} computes the commutator table for a given list of vector fields.
857188`\spad{table([x,{} y,{} ...,{} z])} creates a table consisting of entries \spad{x,{} y,{} ...,{} z}.
857275`\spad{tableau(ll)} converts a list of lists \spad{ll} to a tableau.
857329`\spad{tableau(symb,{} chi)} computes the tableau parametrized by a given one-form.
857459`\spad{tableau(symb,{} lchi)} computes the extended tableau parametrized by a given list of one-forms.
857595`\spad{tableForDiscreteLogarithm(a,{} n)} returns a table of the discrete logarithms of \spad{a^0} up to \spad{a^(n-1)} which,{} called with key \spad{lookup(a^i)} returns \spad{i} for \spad{i} in \spad{0..n-1}. Error: if not called for prime divisors of order of \indented{7}{multiplicative group.}
857709`\spad{tablePow(maxdeg,{} prime,{} lpol)} constructs the table with the coefficients of the Extended Euclidean Algorithm for lpol. Here the right side is \spad{x^k},{} for \spad{k} less to \spad{maxdeg}. The operation returns "failed" when the elements are not coprime modulo \spad{prime}.
857974`\spad{tail(l)} returns the doubly-linked aggregate \spad{l} starting at its second element. Error: if \spad{l} is empty.
858028`\spad{tail(p)} returns its reductum,{} where \spad{p} is viewed as a univariate polynomial in its main variable.
858092`\spad{tail(u)} returns the last node of \spad{u}. Note: if \spad{u} is \spad{shallowlyMutable},{} \spad{setrest(tail(u),{} v) = concat(u,{} v)}.
858148`\spad{tan(x)} represents the Fortran intrinsic function TAN
858229`\spad{tan(x)} applies the tangent operator to \spad{x}
858435`\spad{tan(st)} computes tangent of a power series \spad{st}.
858519`\spad{tan(st)} computes tangent of a power series \spad{st}.
858617`\spad{tan(z)} returns the tangent of Laurent series \spad{z}.
858704`\spad{tan(z)} returns the tangent of a Puiseux series \spad{z}.
858800`\spad{tan(x)} returns the tangent of \spad{x}.
858858`\spad{tan2cot(f)} converts every \spad{tan(u)} appearing in \spad{f} into \spad{1/cot(u)}.
858921`\spad{tan2trig(f)} converts every \spad{tan(u)} appearing in \spad{f} into \spad{sin(u)/cos(u)}.
858985`\spad{tanAn(a,{} n)} returns \spad{P(x)} such that if \spad{a = tan(u)} then \spad{P(tan(u/n)) = 0}.
859078`\spad{tanh(x)} represents the Fortran intrinsic function TANH
859160`\spad{tanh(x)} applies the hyperbolic tangent operator to \spad{x}
859367`\spad{tanh(st)} computes the hyperbolic tangent of a power series \spad{st}.
859452`\spad{tanh(st)} computes the hyperbolic tangent of a power series \spad{st}.
859551`\spad{tanh(z)} returns the hyperbolic tangent of Laurent series \spad{z}.
859639`\spad{tanh(z)} returns the hyperbolic tangent of a Puiseux series \spad{z}.
859736`\spad{tanh(x)} returns the hyperbolic tangent of \spad{x}.
859792`\spad{tanh2coth(f)} converts every \spad{tanh(u)} appearing in \spad{f} into \spad{1/coth(u)}.
859857`\spad{tanh2trigh(f)} converts every \spad{tanh(u)} appearing in \spad{f} into \spad{sinh(u)/cosh(u)}.
859923`\spad{tanhIfCan(z)} returns tanh(\spad{z}) if possible,{} and "failed" otherwise.
860005`\spad{tanIfCan(z)} returns tan(\spad{z}) if possible,{} and "failed" otherwise.
860086`\spad{tanNa(a,{} n)} returns \spad{f(a)} such that if \spad{a = tan(u)} then \spad{f(a) = tan(n * u)}.
860143`\spad{tanQ(q,{} a)} is a local function with a conditional implementation.
860228`\spad{tanSum([a1,{} ...,{} an])} returns \spad{f(a1,{} ...,{} an)} such that if \spad{\spad{ai} = tan(\spad{ui})} then \spad{f(a1,{} ...,{} an) = tan(u1 + ... + un)}.
860284`\spad{taylor(f(x))} converts the Laurent series \spad{f}(\spad{x}) to a Taylor series,{} if possible. Error: if this is not possible.
860369`\spad{taylor(f)} returns a Taylor expansion of the expression \spad{f}. Note: \spad{f} should have only one variable; the series will be expanded in powers of that variable.
860441`\spad{taylor(x)} returns \spad{x} viewed as a Taylor series.
860517`\spad{taylor(f,{} x = a)} expands the expression \spad{f} as a Taylor series in powers of \spad{(x - a)}.
860602`\spad{taylor(f,{} n)} returns a Taylor expansion of the expression \spad{f}. Note: \spad{f} should have only one variable; the series will be expanded in powers of that variable and terms will be computed up to order at least \spad{n}.
860693`\spad{taylor(n +-> a(n),{} x = a)} returns \spad{sum(n = 0..,{} a(n)*(x-a)^n)}.
860785`\spad{taylor(f,{} x = a)} expands the expression \spad{f} as a Taylor series in powers of \spad{(x - a)}; terms will be computed up to order at least \spad{n}.
860889`\spad{taylor(a(n),{} n,{} x = a)} returns \spad{sum(n = 0..,{} a(n)*(x-a)^n)}.
860977`\spad{taylor(n +-> a(n),{} x = a,{} n0..)} returns \spad{sum(n=n0..,{} a(n)*(x-a)^n)}; \spad{taylor(n +-> a(n),{} x = a,{} n0..n1)} returns \spad{sum(n = n0..,{} a(n)*(x-a)^n)}.
861106`\spad{taylor(a(n),{} n,{} x = a,{} n0..)} returns \spad{sum(n = n0..,{} a(n)*(x-a)^n)}; \spad{taylor(a(n),{} n,{} x = a,{} n0..n1)} returns \spad{sum(n = n0..,{} a(n)*(x-a)^n)}.
861231`\spad{taylorIfCan(f(x))} converts the Laurent series \spad{f(x)} to a Taylor series,{} if possible. If this is not possible,{} "failed" is returned.
861337`\spad{taylorQuoByVar(a0 + a1 x + a2 x^2 + ...)} returns \spad{a1 + a2 x + a3 x^2 + ...}
861415`\spad{taylorRep(f(x))} returns \spad{g(x)},{} where \spad{f = x^n * g(x)} is represented by \spad{[n,{} g(x)]}.
861503`\spad{taylor_via_deriv(f,{} [x1,{} ...,{} xn],{} [D1,{} ...,{} Dn])} expands \spad{f} into Taylor series at (\spad{x1},{} ...,{} \spad{xn}) using \spad{D1},{} ...,{} \spad{Dn} as partial derivatives
861619`\spad{taylor_via_deriv(f,{} [x1,{} ...,{} xn],{} [D1,{} ...,{} Dn])} expands \spad{f} into Taylor series at (\spad{x1},{} ...,{} \spad{xn}) using \spad{D1},{} ...,{} \spad{Dn} as partial derivatives
861738`\spad{taylor_via_deriv(f,{} [x1,{} ...,{} xn],{} [D1,{} ...,{} Dn])} expands \spad{f} into Taylor series at (\spad{x1},{} ...,{} \spad{xn}) using \spad{D1},{} ...,{} \spad{Dn} as partial derivatives
861852`\spad{taylor_via_deriv(f,{} [x1,{} ...,{} xn],{} [D1,{} ...,{} Dn])} expands \spad{f} into Taylor series at (\spad{x1},{} ...,{} \spad{xn}) using \spad{D1},{} ...,{} \spad{Dn} as partial derivatives
861969`\spad{taylor_via_lode([a0,{} ...,{} ak],{} z,{} [c0,{} ...,{} ck])} expands into Taylor series solution of the linear ordinary differential equation
862185`\spad{tensor([x1,{} x2,{} ...,{} xn])} constructs the tensor product of \spad{x1,{} x2,{} ...,{} xn}.
862248`\spad{tensor(a,{} b)} creates a form for a tensor \spad{b}
862348`\spad{tensor(x,{} y)} constructs the tensor product of the elements \spad{x} and \spad{y}.
862409`\spad{tensorMap([s1,{} s2,{} ...],{} f)} returns the stream consisting of all elements of \spad{f}(\spad{s1}) followed by all elements of \spad{f}(\spad{s2}) and so on.
862486`\spad{tensorProduct([a1,{} ...ak])} calculates the list of Kronecker products of each matrix {\em \spad{ai}} with itself for {1 \spad{<=} \spad{i} \spad{<=} \spad{k}}. Note: If the list of matrices corresponds to a group representation (repr. of generators) of one group,{} then these matrices correspond to the tensor product of the representation with itself.
862576`\spad{tensorProduct(a)} calculates the Kronecker product of the matrix {\em a} with itself.
862654`\spad{tensorProduct([a1,{} ...,{} ak],{} [b1,{} ...,{} bk])} calculates the list of Kronecker products of the matrices {\em \spad{ai}} and {\em \spad{bi}} for {1 \spad{<=} \spad{i} \spad{<=} \spad{k}}. Note: If each list of matrices corresponds to a group representation (repr. of generators) of one group,{} then these matrices correspond to the tensor product of the two representations.
862760`\spad{tensorProduct(a,{} b)} calculates the Kronecker product of the matrices {\em a} and \spad{b}. Note: if each matrix corresponds to a group representation (repr. of generators) of one group,{} then these matrices correspond to the tensor product of the two representations.
862848`\spad{terminal(a)} constructs a graph over a with a single vertex and a single loop
862895`\spad{terms(e1 a1 + ... + en an)} returns \spad{[[a1,{} e1],{} ...,{} [an,{} en]]}.
862979`\spad{terms(f)} gives the list of non-zero coefficients combined with their corresponding basis element as records. This is the internal representation.
863052`\spad{terms(f(x))} returns a stream of non-zero terms,{} where a a term is an exponent-coefficient pair. The terms in the stream are ordered by increasing order of exponents.
863152`\spad{test(b)} returns \spad{b} and is provided for compatibility with the new compiler.
863194`\spad{testAbsolutePrecision(eps)} returns the current absolute precision used for floating point comparison,{} and then sets it to \spad{eps}. The default value is 1.0e-15.
863276`\spad{testcase s} starts a new testcase with \spad{s} as title. It also calls \spad{clear all}. A testcase is composed of several tests.
863329`\spad{testcaseNoClear s},{} starts a new testcase with \spad{s} as title,{} without calling \spad{clear all}. A testcase is composed of several tests.
863389`test function.
863662`\spad{testComplexEquals(ex1,{} ex2)} states that \spad{ex1} and \spad{ex2} should be approximately equal as complex numbers,{} taking into acount \spadfun{testAbsolutePrecision} and \spadfun{testRelativePrecision}.
863726`testComplexEquals(inp \spad{ex1},{} \spad{ex2}) states that \spad{ex1} and \spad{ex2} should be approximately equal as complex numbers,{} taking into acount \spadfun{testAbsolutePrecision} and \spadfun{testRelativePrecision}.
863837`test function.
864264`test function.
864567`\spad{testDim(lp,{} lv)} tests if the polynomial system \spad{lp} in variables \spad{lv} is zero dimensional.
864775`\spad{testEquals(ex1,{} ex2)} states that \spad{ex1} and \spad{ex2} should be equal. To sidestep the possibility that the equality function of the domain \spad{R} performs some simplifications,{} we convert \spad{ex1} and \spad{ex2} to \spad{InputForm},{} if possible
864832`testEquals(inp,{} \spad{ex1},{} \spad{ex2}) states that \spad{ex1} and \spad{ex2} should be equal. To sidestep the possibility that the equality function of the domain \spad{R} performs some simplifications,{} we convert \spad{ex1} and \spad{ex2} to \spad{InputForm},{} if possible.
864895`\spad{testEqualsAuxCmp should} be local but is conditional
864957`test function.
865600`test function.
865981`test function.
866506`test function.
867608`test function.
868710`test function.
868858`test function.
869039`test func
869039`--tion.
869538`\spad{testLibraryError ex} states that ex should throw an error. Such a test will never count as a fatal error.
869594`testLibraryError(inp,{} ex) states that ex should throw an error. Such a test will never count as a fatal error.
869661`test function.
870176`test function.
871415`test function.
871788`test function.
872511`\spad{testModulus(p,{} lp)} returns \spad{true} if the the prime \spad{p} is valid for the list of polynomials \spad{lp},{} \spadignore{i.e.} preserves the degree and they remain relatively prime.
872578`\spad{testNotEquals(ex1,{} ex2)} states that \spad{ex1} and \spad{ex2} should be different.
872638`testNotEquals(inp,{} \spad{ex1},{} \spad{ex2}) states that \spad{ex1} and \spad{ex2} should be different.
872704`test function.
873067`test function.
873355`\spad{testRealEquals(ex1,{} ex2)} states that \spad{ex1} and \spad{ex2} should be approximately equal as real numbers,{} taking into acount \spadfun{testAbsolutePrecision} and \spadfun{testRelativePrecision}.
873416`testRealEquals(inp,{} \spad{ex1},{} \spad{ex2}) states that \spad{ex1} and \spad{ex2} should be approximately equal as real numbers,{} taking into acount \spadfun{testAbsolutePrecision} and \spadfun{testRelativePrecision}.
873506`\spad{testRelativePrecision(eps)} returns the current absolute precision used for floating point comparison,{} and then sets it to \spad{eps}. The default value is 1.0e-15.
873588`test function.
874025`t--est function.
874532`test function.
875049`\spad{testsuite s} starts a new testsuite with \spad{s} as title. It also calls \spad{clear all}. A testsuite is composed of several testcases.
875103`\spad{testsuiteNoClear s} starts a new testsuite with \spad{s} as title,{} without calling \spad{clear all}. A testsuite is composed of several testcases.
875164`\spad{testTrue ex} states that ex should be \spad{true}.
875212`\spad{testTrueAux(inp,{} ex)} states that ex should be \spad{true}.
875271`\spad{tex(t)} extracts the TeX section of a TeX form \spad{t}.
875319`\spad{thetaCoord(pt)} returns the second element of the point,{} \spad{pt},{} although no assumptions are made as to the coordinate system being used. This function is defined for the convenience of the user dealing with a spherical or a cylindrical coordinate system.
875427`\spad{third(u)} returns the third element of \spad{u}. Note: \spad{third(u) = first(rest(rest(u)))}.
875483`\spad{times!(c,{} a,{} b)} computes the matrix product \spad{a * b} and stores the result in the matrix \spad{c}. Error: if \spad{a},{} \spad{b},{} and \spad{c} do not have compatible dimensions.
875584`\spad{times(p,{} q,{} sigma,{} delta)} returns \spad{p * q}. \spad{\sigma} and \spad{\delta} are the maps to use.
875678`\spad{title(s)} specifies a title for a plot by the indicated string \spad{s}. This option is expressed in the form \spad{title == s}.
875723`\spad{title(v,{} s)} changes the title which is shown in the two-dimensional viewport window,{} \spad{v} of domain \spadtype{TwoDimensionalViewport}.
875785`\spad{title(l,{} s)} takes the list of draw options,{} \spad{l},{} and checks the list to see if it contains the option \spad{title}. If the option does not exist the value,{} \spad{s} is returned.
875861`\spad{title(v,{} s)} changes the title which is shown in the three-dimensional viewport window,{} \spad{v} of domain \spadtype{ThreeDimensionalViewport}.
875925`convert PermutationGroup to a Cayley graph
876026`convert permutation generators to a Cayley graph permList should contain generator permutations and should not contain identity permutation. if permutationNames then names generated represent permutation
876136`\spad{to_mod_pa(s,{} p)} reduces coefficients of polynomial \spad{s} modulo prime \spad{p} and converts the result to vector
876248`deprecated: this has been superseded by version with SBoundary(\spad{PT}) do not use,{} may be removed in the future.
876421`\spad{toObj(n,{} ptLst,{} indexLst,{} indexNxt,{} tran,{} bb)} creates an .OBJ (Wavefront) file from scenegraph tree structure called recursively for each node,{} so when called on root node in scenegraph all other nodes in the scenegraph will get called. \spad{n} is the scene to be output to \spad{ptLst} and \spad{indexLst} \spad{ptLst} is th
876421`--e points. This will be set to ref([]) at the start \indented{6}{and will be built up as this function is called recursively} \spad{indexLst} is list of faces,{} where faces are list of points indexed \indented{9}{by \spad{ptLst} This will be set to ref(nil()) at the start} \indented{6}{and will be built up as this function is called recursively} \spad{tran} is the default transform which may be overridden by subnodes \spad{bb} is the default boundary which may be overridden by subnodes
876584`\spad{top(s)} returns the top element \spad{x} from \spad{s}; \spad{s} remains unchanged. Note: Use \spad{pop!(s)} to obtain \spad{x} and remove it from \spad{s}.
876629`generates a permutation group from this graph assumes this graph represents a valid group
876723`\spad{topFortranOutputStack()} returns the top element of the Fortran output stack
876797`\spad{toPoint(p)} returns a Point with the same coordinates as \spad{p} If \spad{p} was originally a vector then that will be treated as the distance from the origin.
876844`\spad{topPredicate(x)} returns \spad{[[a1,{} ...,{} an],{} f]} where the top-level predicate of \spad{x} is \spad{f(a1,{} ...,{} an)}. Note: \spad{n} is 0 if \spad{x} has no top-level predicate.
876923`\spad{toroidal(a)} transforms from toroidal coordinates to Cartesian coordinates: \spad{toroidal(a)} is a function which will map the point \spad{(u,{} v,{} phi)} to \spad{x = a*sinh(v)*cos(phi)/(cosh(v)-cos(u))},{} \spad{y = a*sinh(v)*sin(phi)/(cosh(v)-cos(u))},{} \spad{z = a*sin(u)/(cosh(v)-cos(u))}.
876994`\spad{torsion?(f)} \undocumented
877111`\spad{torsion?(f)} \undocumented
877209`\spad{torsionIfCan(f)} \undocumented
877382`\spad{torsionIfCan(f)}\\ undocumented
877536`\spad{toScale(b)} specifies whether or not a plot is to be drawn to scale; if \spad{b} is \spad{true} it is drawn to scale,{} if \spad{b} is \spad{false} it is not. This option is expressed in the form \spad{toScale == b}.
877584`\spad{toScale(l,{} b)} takes the list of draw options,{} \spad{l},{} and checks the list to see if it contains the option \spad{toScale}. If the option does not exist the value,{} \spad{b} is returned.
877664`\spad{toseInvertible?(p1,{} p2,{} ts)} has the same specifications as \spadopFrom{invertible?}{RegularTriangularSetCategory}.
877754`\spad{toseInvertible?(p1,{} p2,{} ts)} has the same specifications as \spadopFrom{invertible?}{RegularTriangularSetCategory}.
877871`\spad{toseInvertibleSet(p1,{} p2,{} ts)} has the same specifications as \spadopFrom{invertibleSet}{RegularTriangularSetCategory}.
877964`\spad{toseLastSubResultant(p1,{} p2,{} ts)} has the same specifications as \spadopFrom{lastSubResultant}{RegularTriangularSetCategory}.
878082`\spad{toseSquareFreePart(p,{} ts)} has the same specifications as \spadopFrom{squareFreePart}{RegularTriangularSetCategory}.
878196`returns the name and the type in string form.
878240`creates a string representaion of this term and its sub-terms
878284`return string representation using deBruijn index for bound variables. notation assumes association to the left,{} in the absence of brackets,{} the term to the left binds more tightly than the one on the right.
878332`\spad{toString(n)} returns string representation for debug purposes.
878390`output
878519`\spad{toString(x,{} n)} returns a string representation of \spad{x} truncated to \spad{n} decimal digits.
878595`return string representation using conventional notation,{} that is deBruijn index is replaced by name using String value for bound variables. notation assumes association to the left,{} in the absence of brackets,{} the term to the left binds more tightly than the one on the right.
878662`similar to 'toString' but does not put outer compound terms in brackets
878715`deprecated: this has been superseded by version with SBoundary(\spad{PT}) do not use,{} may be removed in the future.
878934`\spad{toSVG(n,{} mat,{} tran,{} bb,{} scale,{} clipEn,{} useInteger,{} npt)} creates an XmlElement containing a 'SVG' representation of node \spad{'n'} and the nodes below it. \spad{n} is the scene to be output to \spad{XML} elements \spad{mat} is the default material which may be overridden by sub
878934`--nodes \spad{tran} is the default transform which may be overridden by subnodes \spad{bb} is the default boundary which may be overridden by subnodes \spad{scale} is the \spad{scale} used to \spad{scale} into canvas,{} it would be better \indented{6}{to merge this into trans.} \spad{clipEn} if \spad{true} this clips the output to the boundary \spad{useInteger} if \spad{true} quantise to integer values. \spad{npt} names points can be provided. If not required then set \indented{4}{to namedBranch
878934`--([],{} [])}
879143`displays multiplication table for binary operation which is represented as a function with two parameters. row number represents first operand in binary order column number represents second operand in binary order could have returned type 'List List \%' but matrix displays better
879218`displays table of unary function such as inverse,{} reverse,{} complement,{} or dual basis could have returned type 'List List \%' but matrix displays better
879290`\spad{totalDegree(p)} returns the largest sum over all monomials of all exponents of a monomial.
879541`\spad{totalDegree(p,{} lv)} returns the maximum sum (over all monomials of polynomial \spad{p}) of the variables in the list \spad{lv}.
879846`\spad{totalDegreeSorted(p,{} lv)} returns the maximum sum (over all monomials of polynomial \spad{p}) of the degree in variables in the list \spad{lv}. \spad{lv} is assumed to be sorted in decreasing order.
880055`\spad{totalDifferential(x)} returns the total differential (gradient) form for element \spad{x}.
880150`\spad{totalfract(prf)} takes a polynomial whose coefficients are themselves fractions of polynomials and returns a record containing the numerator and denominator resulting from putting \spad{prf} over a common denominator.
880274`\spad{totalGroebner(lp,{} lv)} computes Groebner basis for the list of polynomials \spad{lp} with the terms ordered first by total degree and then refined by reverse lexicographic ordering. The variables are ordered by their position in the list \spad{lv}.
880375`\spad{totalLex(v1,{} v2)} return \spad{true} if the vector \spad{v1} is less than the vector \spad{v2} in the ordering which is total degree refined by lexicographic ordering.
880455`\spad{totolex }\undocumented
880703`\spad{toVector returns} a Vector with the same coordinates as \spad{p} If \spad{p} was originally a point then the vector will be the distance from the origin.
880869`\spad{tower(f)} returns all the kernels appearing in \spad{f},{} no matter what their levels are.
880929`\spad{tower([f1,{}...,{}fn])} returns all the kernels appearing in \spad{f1},{} ...,{} \spad{fn} no matter what their levels are.
880995`deprecated: this has been superseded by version with SBoundary(\spad{PT}) do not use,{} may be removed in the future.
881165`\spad{toX3D(n,{} mat,{} tran,{} bb)} creates an XmlElement containing a 'X3D' representation of node \spad{'n'} and the nodes below it. \spad{n} is the scene to be output to \spad{XML} elements \spad{mat} is the default material which may be overridden by subnodes \spad{tran} is the default transform which may be overridden by subnodes \spad{bb} 
881165`--is the default boundary which may be overridden by subnodes
881489`\spad{trace(a)} computes the trace of \spad{a} with respect to the field considered as an algebra with 1 over the ground field \spad{F}.
881551`\spad{trace(a)} returns the trace of the regular representation of \spad{a} with respect to any basis.
881604`\spad{trace(m)} returns the trace of the matrix \spad{m}. this is the sum of the elements on the diagonal of the matrix \spad{m}.
881744`\spad{trace(x,{} n)} \undocumented{} See \spadfunFrom{trace}{FiniteAlgebraicExtensionField}
881841`\spad{trace2PowMod(u,{} k,{} v)} produces the sum of \spad{u^(2^i)} for \spad{i} running from 1 to \spad{k} all computed modulo the polynomial \spad{v}.
881930`\spad{trace(a,{} d)} computes the trace of \spad{a} with respect to the field of extension degree \spad{d} over the ground field of size \spad{q}. Error: if \spad{d} does not divide the extension degree of \spad{a}. Note: \spad{trace(a,{} d) = reduce(+,{} [a^(q^(d*i)) for i in 0..n/d])}.
882022`\spad{traceMatrix()} is the \spad{n}-by-\spad{n} matrix ( \spad{Tr(\spad{vi} * vj)} ),{} where \spad{v1},{} ...,{} \spad{vn} are the elements of the fixed basis.
882086`\spad{traceMatrix()} is the \spad{n}-by-\spad{n} matrix ( \spad{Tr(\spad{vi} * vj)} ),{} where \spad{v1},{} ...,{} \spad{vn} are the elements of the fixed basis.
882285`\spad{traceMatrix([v1,{} ..,{} vn])} is the \spad{n}-by-\spad{n} matrix ( \spad{Tr}(\spad{vi} * \spad{vj}) )
882360`\spad{tracePowMod(u,{} k,{} v)} produces the sum of \spad{u^(q^i)} for \spad{i} running and \spad{q=} size \spad{F}
882448`\spad{trailingCoefficient }\undocumented
882515`\spad{tRange(p)} returns the range of the parameter in a parametric plot \spad{p}.
882571`\spad{tRange(p)} returns the range of the parameter in a parametric plot \spad{p}
882713`\spad{transcendenceDegree()} returns the transcendence degree of the field extension,{} 0 if the extension is algebraic.
882918`\spad{transcendent?(a)} tests whether an element \spad{a} is transcendent with respect to the ground field \spad{F}.
883621`\spad{transform }\undocumented
883765`\spad{transform(jv)} transforms a jet variable \spad{jv} into a function of the new coordinates.
883863`\spad{transform(f)} rewrites a function of the old coordinates in the new ones.
883982`\spad{transform(f)} transforms expressions between the different function types involved.
884113`\spad{translate(v,{} dx,{} dy)} sets the horizontal viewport offset to \spad{dx} and the vertical viewport offset to \spad{dy},{} for the viewport \spad{v},{} which is of the domain \spadtype{ThreeDimensionalViewport}.
884186`\spad{translate(X,{} Y,{} Z)} returns a dhmatrix for translation by \spad{X},{} \spad{Y},{} and \spad{Z}
884250`\spad{translate(v,{} n,{} dx,{} dy)} displays the graph in field \spad{n} of the given two-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{TwoDimensionalViewport},{} translated by \spad{dx} in the \spad{x}-coordinate direction from the center of the viewport,{} and by \spad{dy} in the \spad{y}-coordinate direction from the center. Setting \spad{dx} and \spad{dy} to \spad{0} places the center of the gr
884250`--aph at the center of the viewport.
884337`\spad{transpose(m)} returns the transpose of the matrix \spad{m}.
884572`\spad{transpose(m)} returns the transpose of the array \spad{m}.
884645`\spad{transpose(t)} exchanges the first and last indices of \spad{t}. For example,{} if \spad{r = transpose(t)} for a rank 4 tensor \spad{t},{} then \spad{r} is the rank 4 tensor given by \indented{4}{\spad{r(i,{} j,{} k,{} l) = t(l,{} j,{} k,{} i)}.}
884708`\spad{transpose(r)} converts the row \spad{r} to a row matrix.
884769`\spad{transpose(t,{} i,{} j)} exchanges the \spad{i}\spad{-}th and \spad{j}\spad{-}th indices of \spad{t}. For example,{} if \spad{r = transpose(t,{} 2,{} 3)} for a rank 4 tensor \spad{t},{} then \spad{r} is the rank 4 tensor given by \indented{4}{\spad{r(i,{} j,{} k,{} l) = t(i,{} k,{} j,{} l)}.}
884848`\spad{trapezoidal(fn,{} a,{} b,{} epsrel,{} epsabs,{} nmin,{} nmax)} uses the trapezoidal method to numerically integrate function \spadvar{\spad{fn}} over the closed interval \spad{a} to \spad{b},{} with relative accuracy \spad{epsrel} and absolute accuracy \spad{epsabs},{} with the refinement levels for convergence checking vary from 
884848`--\spad{nmin} to \spad{nmax}. The value returned is a record containing the value of the integral,{} the estimate of the error in the computation,{} the total number of function evaluations,{} and either a boolean value which is \spad{true} if the integral was computed within the user specified error criterion. See \spadtype{NumericalQuadrature} for details.
885018`\spad{trapezoidalo(fn,{} a,{} b,{} epsrel,{} epsabs,{} nmin,{} nmax)} uses the trapezoidal method to numerically integrate function \spad{fn} over the open interval from \spad{a} to \spad{b},{} with relative accuracy \spad{epsrel} and absolute accuracy \spad{epsabs},{} with the refinement levels for convergence checking vary from \spad
885018`--{nmin} to \spad{nmax}. The value returned is a record containing the value of the integral,{} the estimate of the error in the computation,{} the total number of function evaluations,{} and either a boolean value which is \spad{true} if the integral was computed within the user specified error criterion. See \spadtype{NumericalQuadrature} for details.
885189`\spad{traverse(s,{} \spad{li})} follows the branch list of the 3 dimensional subspace,{} \spad{s},{} along the path dictated by the list of non negative integers,{} \spad{li},{} which points to the component which has been traversed to. The subspace,{} \spad{s},{} is returned,{} where \spad{s} is now the subspace pointed to by \spad{li}.
885261`\spad{tree(ls)} creates a tree from a list of elements of \spad{s}.
885303`\spad{tree(nd)} creates a tree with value \spad{nd},{} and no children
885339`\spad{tree(nd,{} ls)} creates a tree with value \spad{nd},{} and children \spad{ls}.
885384`\spad{trial_division(p,{} q,{} lm,{} v,{} lz)} checks if \spad{p} is divisible by \spad{q}. \spad{lm} is a list of defining equations for algebraic parameters,{} \spad{v} is main variable,{} \spad{lz} is the list of algebraic parameters.
885510`\spad{triangSolve(lp)} returns the same as \spad{triangSolve(lp,{} false,{} false)}
885623`\spad{triangSolve(lp,{} info?)} returns the same as \spad{triangSolve(lp,{} false)}
885744`\spad{triangSolve(lp,{} info?,{} lextri?)} decomposes the variety associated with \spad{lp} into regular chains. Thus a point belongs to this variety iff it is a regular zero of a regular set in in the output. Note that \spad{lp} needs to generate a zero-dimensional ideal. If \spad{lp} is not zero-dimensional then the result is only a decomposition of its zero-set in the sense
885744`-- of the closure (\spad{w}.\spad{r}.\spad{t}. Zarisky topology). Moreover,{} if \spad{info?} is \spad{true} then some information is displayed during the computations. See \spadopFrom{zeroSetSplit}{RegularTriangularSetCategory}(\spad{lp},{} \spad{true},{} \spad{info?}). If \spad{lextri?} is \spad{true} then the lexTriangular algorithm is called from the \spadtype{LexTriangularPackage} constructor (see \spadopFrom{zeroSetSplit}{LexTriangularPackage}(\spad{lp},{} \spad{false})). Otherwise,{} the 
885744`--triangular decomposition is computed directly from the input system by using the \spadopFrom{zeroSetSplit}{RegularChain} from \spadtype{RegularChain}.
885946`\spad{triangular?(ps)} returns \spad{true} iff \spad{ps} is a triangular set,{} \spadignore{i.e.} two distinct polynomials have distinct main variables and no constant lies in \spad{ps}.
886044`\spad{triangularSystems(lf,{} lv)} solves the system of equations defined by \spad{lf} with respect to the list of symbols \spad{lv}; the system of equations is obtaining by equating to zero the list of rational functions \spad{lf}. The output is a list of solutions where each solution is expressed as a "reduced" triangular system of polynomials.
886171`\spad{triangulate(A,{} lv)} is a parametric version of triangulate(A,{} \spad{v}).
886336`\spad{triangulate(M,{} v)} returns \spad{A,{} [[C_1,{} g_1,{} L_1,{} h_1],{} ...,{} [C_k,{} g_k,{} L_k,{} h_k]]} such that under the change of variable \spad{y = A z},{} the first order linear system \spad{D y = M y + v} is uncoupled as \spad{D z_i = C_i z_i + g_i} and each \spad{C_i} is a companion matrix corresponding to the scalar equation \spad{L_i z_j = h_
886336`--i}.
886481`\spad{triangulate(m,{} [v1,{} ...,{} vn])} returns \spad{[m_0,{} [w1,{} ...,{} wn]]} such that for any constant \spad{c1,{} ...,{} cn} the system \spad{m_0 x = c1*w1 + ... + cn*wn} is equivalent to to \spad{m x = c1*v1 + ... + cn*vn}
886604`\spad{triangulate(m,{} v)} returns \spad{[m_0,{} v_0]} such that \spad{m_0} is upper triangular and the system \spad{m_0 x = v_0} is equivalent to \spad{m x = v}.
886714`\spad{trigs(f)} rewrites all the complex logs and exponentials appearing in \spad{f} in terms of trigonometric functions.
886781`\spad{trigs(f)} rewrites all the complex logs and exponentials appearing in \spad{f} in terms of trigonometric functions.
886841`\spad{trigs2explogs(f,{} [k1,{} ...,{} kn])} rewrites all the trigonometric functions appearing in \spad{f} in terms of complex logarithms and exponentials. A kernel of the form \spad{tan(u)} is expressed using \spad{exp(u)^2} if it is one of the \spad{\spad{ki}'s},{} in terms of \spad{exp(2*u)} otherwise.
887043`\spad{trim(s,{} c)} returns \spad{s} with all characters \spad{c} deleted from right and left ends. For example,{} \spad{trim(" abc ",{} char " ")} returns \spad{"abc"}.
887098`\spad{trim(s,{} cc)} returns \spad{s} with all characters in \spad{cc} deleted from right and left ends. For example,{} \spad{trim("(abc)",{} charClass "()")} returns \spad{"abc"}.
887233`\spad{trivialIdeal?(ps)} returns \spad{true} iff \spad{ps} does not contain non-zero elements.
887312`\spad{true} is a logical constant.
887347`\spad{trueEqual(x,{} y)} tries to determine if the two numbers are equal
887410`\spad{trunc(p,{} n)} returns the polynomial \spad{p} truncated at order \spad{n}.
887484`\spad{trunc(p,{} n)} returns the polynomial \spad{p} truncated at order \spad{n}.
887601`\spad{truncate x} returns the integer between \spad{x} and 0 closest to \spad{x}.
887651`\spad{truncate(f,{} k)} returns a (finite) power series consisting of the sum of all terms of \spad{f} of degree \spad{<= k}.
887732`\spad{truncate(f,{} k1,{} k2)} returns a (finite) power series consisting of the sum of all terms of \spad{f} of degree \spad{d} with \spad{k1 <= d <= k2}.
887819`\spad{truncated_mul_add(x,{} y,{} z,{} d,{} p)} adds to \spad{z} the produce x*y truncated after degree \spad{d}
887936`\spad{truncated_multiplication(x,{} y,{} d,{} p)} computes x*y truncated after degree \spad{d}
888055`\spad{tryFunctionalDecomposition?()} returns \spad{true} if factorizers try functional decomposition of polynomials before factoring them.
888136`\spad{tryFunctionalDecomposition(b)} chooses whether factorizers have to look for functional decomposition of polynomials (\spad{true}) or not (\spad{false}). Returns the previous value.
888223`\spad{tryTwoFactor(p)} returns the factorisation of polynomial \spad{p},{} if it does not require using field extensions,{} otherwise returns \spad{p} unfactored (nil factorization).
888396`\spad{tube(c,{} r,{} n)} creates a tube of radius \spad{r} around the curve \spad{c}.
888484`\spad{tube(c,{} ll,{} b)} creates a tube of the domain \spadtype{TubePlot} from a space curve \spad{c} of the category \spadtype{PlottableSpaceCurveCategory},{} a list of lists of points (loops) \spad{ll} and a boolean \spad{b} which if \spad{true} indicates a closed tube,{} or if \spad{false} an open tube.
888571`\spad{tubePlot(f,{} g,{} h,{} colorFcn,{} a..b,{} r,{} n)} puts a tube of radius \spad{r}(\spad{t}) with \spad{n} points on each circle about the curve \spad{x = f(t)},{} \spad{y = g(t)},{} \spad{z = h(t)} for \spad{t} in \spad{[a,{} b]}. The tube is considered to be open.
888777`\spad{tubePlot(f,{} g,{} h,{} colorFcn,{} a..b,{} r,{} n)} puts a tube of radius \spad{r} with \spad{n} points on each circle about the curve \spad{x = f(t)},{} \spad{y = g(t)},{} \spad{z = h(t)} for \spad{t} in \spad{[a,{} b]}. The tube is considered to be open.
888968`\spad{tubePlot(f,{} g,{} h,{} colorFcn,{} a..b,{} r,{} n,{} s)} puts a tube of radius \spad{r(t)} with \spad{n} points on each circle about the curve \spad{x = f(t)},{} \spad{y = g(t)},{} \spad{z = h(t)} for \spad{t} in \spad{[a,{}b]}. If \spad{s} = "closed",{} the tube is considered to be clos
888968`--ed; if \spad{s} = "open",{} the tube is considered to be open.
889181`\spad{tubePlot(f,{} g,{} h,{} colorFcn,{} a..b,{} r,{} n,{} s)} puts a tube of radius \spad{r} with \spad{n} points on each circle about the curve \spad{x = f(t)},{} \spad{y = g(t)},{} \spad{z = h(t)} for \spad{t} in \spad{[a,{} b]}. If \spad{s} = "closed",{} the tube is considered to be closed; if \spad{s} =
889181`-- "open",{} the tube is considered to be open.
889379`\spad{tubePoints(n)} specifies the number of points,{} \spad{n},{} defining the circle which creates the tube around a 3D curve,{} the default is 6. This option is expressed in the form \spad{tubePoints == n}.
889438`\spad{tubePoints(l,{} n)} takes the list of draw options,{} \spad{l},{} and checks the list to see if it contains the option \spad{tubePoints}. If the option does not exist the value,{} \spad{n} is returned.
889537`\spad{tubePointsDefault()} returns the number of points to be used when creating the circle to be used in creating a 3D tube plot.
889610`\spad{tubePointsDefault(i)} sets the number of points to use when creating the circle to be used in creating a 3D tube plot to \spad{i}.
889698`\spad{tubeRadius(r)} specifies a radius,{} \spad{r},{} for a tube plot around a 3D curve; is expressed in the form \spad{tubeRadius == 4}.
889747`\spad{tubeRadius(l,{} n)} takes the list of draw options,{} \spad{l},{} and checks the list to see if it contains the option \spad{tubeRadius}. If the option does not exist the value,{} \spad{n} is returned.
889826`\spad{tubeRadiusDefault()} returns the radius used for a 3D tube plot.
889895`\spad{tubeRadiusDefault(r)} sets the default radius for a 3D tube plot to \spad{r}.
889969`\spad{tValues(p)} returns a list of lists of the values of the parameter for which a point is computed,{} one list for each curve in the plot \spad{p}.
890029`\spad{twist(f)} is the function \spad{g} \indented{1}{such that \spad{g (a,{} b)= f(b,{} a)}.}
890094`\spad{twoFactor(p,{} n)} returns the factorisation of polynomial \spad{p},{} a sparse univariate polynomial (sup) over a sup over \spad{F}. Also,{} \spad{p} is assumed primitive and square-free and \spad{n} is the degree of the inner variable of \spad{p} (maximum of the degrees of the coefficients of \spad{p}).
890272`\spad{type(jv)} yields the type (\spad{Const,{} Indep,{} Dep,{} Deriv}) of the jet variable \spad{jv}.
890323`\spad{typeList(t,{} tab)} returns a list of all the objects of type \spad{t} in tab
890459`\spad{typeLists(tab)} returns a list of lists of types of objects in \spad{tab}
890584`\spad{U()} generates the only dependent variable.
890817`\spad{U(i)} generates the \spad{i}\spad{-}th dependent variable.
891125`\spad{ucodeToString(n)} converts Unicode code point to one-character string. If UTF-8 is in use the string may contain multiple octets.
891175`\spad{uentries(s)} converts \spad{s} to a list of Unicode code points encoding characters in \spad{s}. It work even if lower layer does not support Unicode,{} in such case string is treated as sequence of octets using UTF-8 encoding. Consegently length of returened list may be smaller than length of the string in octets.
891232`\spad{unary?(op)} tests if \spad{op} is unary.
891282`\spad{unaryFunction(a)} is a local function
891361`if this is a lambda term then replace De Bruijn index in sub-nodes with string name
891403`\spad{uncouplingMatrices(M)} returns \spad{[A_1,{} ...,{} A_n]} such that if \spad{y = [y_1,{} ...,{} y_n]} is a solution of \spad{y' = M y},{} then \spad{[\$y_j',{} y_j'',{} ...,{} y_j^{(n)}\$] = \$A_j y\$} for all \spad{j}\spad{'s}.
891493`constructor for graph with given objects more objects and arrows can be added later if required.
891619`constructor for graph with given list of object names. Use this version of the constructor if you don\spad{'t} intend to create diagrams and therefore don\spad{'t} care about \spad{x},{} \spad{y} coordinates. more objects and arrows can be added later if required.
891683`constructor for graph with given objects and arrows more objects and arrows can be added later if required.
891973`constructor for graph with given objects and adjacency matrix.
892140`\spad{unexpand(p)} returns \spad{p} in recursive form.
892234`\spad{uniform01()} \undocumented
892294`\spad{uniform(s)} \undocumented
892376`\spad{uniform(s)} \undocumented
892438`\spad{uniform(f,{} g)} \undocumented
892511`\spad{union(x)} constructs a compound boundary from the union of \spad{x} \spad{x:} List \% is supplied list of boundaries to form union
892561`\spad{union(a,{} b)} makes the set-union of two match results.
892802`\spad{union(l1,{} l2)} returns set-theoretic union of \spad{l1} and \spad{l2}.
892988`\spad{union(u,{} v)} returns the set aggregate of elements which are members of either set aggregate \spad{u} or \spad{v}.
893037`\spad{union(u,{} x)} returns the set aggregate \spad{u} with the element \spad{x} added. If \spad{u} already contains \spad{x},{} \spad{union(u,{} x)} returns a copy of \spad{u}.
893085`\spad{union(x,{} u)} returns the set aggregate \spad{u} with the element \spad{x} added. If \spad{u} already contains \spad{x},{} \spad{union(x,{} u)} returns a copy of \spad{u}.
893203`\spad{unit()} returns a unit of the algebra (necessarily unique),{} or \spad{"failed"} if there is none.
893345`\spad{unit?(x)} tests whether \spad{x} is a unit,{} \spadignore{i.e.} is invertible.
893391`\spad{unit(u)} extracts the unit part of the factorization.
893431`\spad{unit(lf)} will mark off the units according to the indicated list \spad{lf}. This option is expressed in the form \spad{unit == [f1,{} f2]}.
893480`\spad{unit(objs,{} arrowName)} constructs a graph with vertices (from \spad{objs}) and arrows from each object to itself. arrowName is a prefix for all arrow names,{} this will be followed by a number starting at 1 and incremented for each arrow
893621`\spad{unitCanonical(x)} returns \spad{unitNormal(x).canonical}.
893909`\spad{unitNormal(x)} tries to choose a canonical element from the associate class of \spad{x}. The attribute canonicalUnitNormal,{} if asserted,{} means that the "canonical" element is the same across all associates of \spad{x} if \spad{unitNormal(x) = [u,{} c,{} a]} then \spad{u*c = x},{} \spad{a*u = 1}.
893994`\spad{unitNormalize(u)} normalizes the unit part of the factorization. For example,{} when working with factored integers,{} this operation will ensure that the bases are all positive integers.
894044`\spad{units(\spad{gi})} returns the list of unit increments for the \spad{x} and \spad{y} axes of the indicated graph,{} \spad{\spad{gi}},{} of the domain \spadtype{GraphImage}.
894094`\spad{units(\spad{gi},{} lu)} modifies the list of unit increments for the \spad{x} and \spad{y} axes of the given graph,{} \spad{\spad{gi}} of the domain \spadtype{GraphImage},{} to be that of the list of unit increments,{} \spad{lu},{} and returns the new list of units for \spad{\spad{gi}}.
894156`\spad{units(l,{} u)} takes the list of draw options,{} \spad{l},{} and checks the list to see if it contains the option \spad{unit}. If the option does not exist the value,{} \spad{u} is returned.
894242`\spad{units(v,{} n,{} c)} displays the units of the graph in field \spad{n} of the given two-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{TwoDimensionalViewport},{} with the units color set to the given palette color \spad{c}.
894321`\spad{units(v,{} n,{} s)} displays the units of the graph in field \spad{n} of the given two-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{TwoDimensionalViewport},{} if \spad{s} is "on",{} or does not display the units if \spad{s} is "off".
894399`\spad{unitsColorDefault()} returns the default color of the unit ticks in a 2D viewport.
894464`\spad{unitsColorDefault(p)} sets the default color of the unit ticks in a 2D viewport to the palette \spad{p}.
894536`\spad{unitVector(p)} returns a vector with the same direction as \spad{p} but with unit length. We scale until length is 1
894586`\spad{unitVector(x)} \undocumented
894661`\spad{unitVector(p)} creates the unit vector of the point \spad{p} and returns the result as a point. Note: \spad{unitVector(p) = p/|p|}.
894742`\spad{unitVector(n)} produces a vector with 1 in position \spad{n} and zero elsewhere.
894858`\spad{univariate?(p)} returns \spad{true} iff \spad{p} involves one and only one variable.
894937`\spad{univariate(p)} converts the multivariate polynomial \spad{p},{} which should actually involve only one variable,{} into a univariate polynomial in that variable,{} whose coefficients are in the ground ring. Error: if polynomial is genuinely multivariate
895030`\spad{univariate(f,{} v)} returns \spad{f} viewed as a univariate rational function in \spad{v}.
895245`\spad{univariate(f,{} k)} returns \spad{f} viewed as a univariate fraction in \spad{k}.
895367`\spad{univariate(p,{} v)} converts the multivariate polynomial \spad{p} into a univariate polynomial in \spad{v},{} whose coefficients are still multivariate polynomials (in all the other variables).
895468`\spad{univariate(f,{} v)} returns \spad{f} viewed as a univariate rational function in \spad{v}.
895610`\spad{univariate(p,{} x)} converts the polynomial \spad{p} to a one of type \spad{UnivariatePolynomial(x,{} Polynomial(R))},{} ie. as a member of \spad{R[...][x]}.
895741`\spad{univariate(f,{} x,{} p)} returns \spad{f} viewed as a univariate polynomial in \spad{x},{} using the side-condition \spad{p(x) = 0}.
895881`\spad{univariate(f,{} k,{} k,{} p)} \undocumented
896058`\spad{univariatePolynomial(f,{} k)} returns a univariate polynomial \indented{1}{consisting of the sum of all terms of \spad{f} of degree \spad{<= k}.}
896193`\spad{univariatePolynomial(f,{} k)} returns a univariate polynomial \indented{1}{consisting of the sum of all terms of \spad{f} of degree \spad{<= k}.}
896441`\spad{univariatePolynomials(lp)} returns \spad{ups,{} nups} where \spad{ups} is a list of the univariate polynomials,{} and \spad{nups} are the other ones.
896569`\spad{univariatePolynomialsGcds(lp)} returns \spad{lg} where \spad{lg} is a list of the gcds of every pair in \spad{lp} of univariate polynomials in the same main variable.
896684`\spad{univariatePolynomialsGcds(lp,{} opt)} returns the same as \spad{univariatePolynomialsGcds(lp)} if \spad{opt} is \spad{false} and if the previous operation does not return any non null and constant polynomial,{} else return \spad{[1]}.
896807`\spad{univariateSolve(lp)} returns the same as \spad{univariateSolve(lp,{} false,{} false,{} false)}.
896988`\spad{univariateSolve(ts)} returns a univariate representation of \spad{ts}. See \spadopFrom{rur}{RationalUnivariateRepresentationPackage}(\spad{lp},{} \spad{true}).
897168`\spad{univariateSolve(lp,{} info?)} returns the same as \spad{univariateSolve(lp,{} info?,{} false,{} false)}.
897357`\spad{univariateSolve(lp,{} info?,{} check?)} returns the same as \spad{univariateSolve(lp,{} info?,{} check?,{} false)}.
897554`\spad{univariateSolve(lp,{} info?,{} check?,{} lextri?)} returns a univariate representation of the variety associated with \spad{lp}. Moreover,{} if \spad{info?} is \spad{true} then some information is displayed during the decomposition into regular chains. If \spad{check?} is \spad{true} then the res
897554`--ult is checked. See \spadopFrom{rur}{RationalUnivariateRepresentationPackage}(\spad{lp},{} \spad{true}). If \spad{lextri?} is \spad{true} then the lexTriangular algorithm is called from the \spadtype{LexTriangularPackage} constructor (see \spadopFrom{zeroSetSplit}{LexTriangularPackage}(\spad{lp},{} \spad{false})). Otherwise,{} the triangular decomposition is computed directly from the input system by using the \spadopFrom{zeroSetSplit}{RegularChain} from \spadtype{RegularChain}.
897759`\spad{univcase should} be local
897885`\spad{universe()}\$\spad{D} returns the universal set for finite set aggregate \spad{D}.
897951`unkext(ext,{} csolve,{} [\spad{g1},{} ...,{} \spad{gn}]) is like primextint and expextint but for makes no assumption about generator of the extension.
898251`\spad{unmakeSUP(sup)} converts \spad{sup} of type \spadtype{SparseUnivariatePolynomial(R)} to be a member of the given type. Note: converse of makeSUP.
898344`\spad{unpack_poly(vars,{} exps,{} coeffs,{} lo,{} \spad{hi})} converts polynomial from packed to sparse representation. Coefficients of packed polynomial are stored in \spad{coeffs}(\spad{l0}) up to \spad{coeffs}(\spad{hi}) Exponents are stored in corresponding elements of \spad{exps}.
898515`\spad{unparse(f)} returns a string \spad{s} such that the parser would transform \spad{s} to \spad{f}. Error: if \spad{f} is not the parsed form of a string.
898561`\spad{unprotectedRemoveRedundantFactors(p,{} q)} returns the same as \spad{removeRedundantFactors(p,{} q)} but does assume that neither \spad{p} nor \spad{q} lie in the base ring \spad{R} and assumes that \spad{infRittWu?(p,{} q)} holds. Moreover,{} if \spad{R} is \spad{gcd}-domain,{} then \spad{p} and \spad{q} are assumed to be square free.
898664`\spad{unrankImproperPartitions0(n,{} m,{} k)} computes the {\em k}\spad{-}th improper partition of nonnegative \spad{n} in \spad{m} nonnegative parts in reverse lexicographical order. Example: {\em [0,{} 0,{} 3] < [0,{} 1,{} 2] < [0,{} 2,{} 1] < [0,{} 3,{} 0] < [1,{} 0,{} 2] < [1,{} 1,{} 1] < [1,{} 2,{} 0] < [2,{} 0,{} 1] < [2,{} 1,{} 0] < [3,{} 0,{} 0]}. Error: if \spad{k} is negative o
898664`--r too big. Note: counting of subtrees is done by \spadfunFrom{numberOfImproperPartitions}{SymmetricGroupCombinatoricFunctions}.
898782`\spad{unrankImproperPartitions1(n,{} m,{} k)} computes the {\em k}\spad{-}th improper partition of nonnegative \spad{n} in at most \spad{m} nonnegative parts ordered as follows: first,{} in reverse lexicographically according to their non-zero parts,{} then according to their positions (\spadignore{i.e.} lexicographical order using {\em subSet}: {\em [3,{} 0,{} 0] < [0,{} 3,{} 0] < [0,{}
898782`-- 0,{} 3] < [2,{} 1,{} 0] < [2,{} 0,{} 1] < [0,{} 2,{} 1] < [1,{} 2,{} 0] < [1,{} 0,{} 2] < [0,{} 1,{} 2] < [1,{} 1,{} 1]}). Note: counting of subtrees is done by {\em numberOfImproperPartitionsInternal}.
898900`\spad{unravel(t)} produces a tensor from a list of components such that \indented{2}{\spad{unravel(ravel(t)) = t}.}
898966`\spad{untab(lp,{} llp)} is an auxiliary function which unbumps a tableau \spad{llp},{} using \spad{lp} to accumulate pairs
899057`\spad{UnVectorise(v)} \undocumented
899187`\spad{unvectorise(v)} returns the polynomial which has for coefficients the entries of \spad{v} in the increasing order.
899262`\spad{unvectorise(vect,{} var,{} n)} returns \spad{vect(1) + vect(2)*var + ... + vect(n+1)*var^(n)} where \spad{vect} is the vector of the coefficients of the polynomial,{} \spad{var} the new variable and \spad{n} the degree.
899454`\spad{UP2UTS(p)} converts \spad{p} to a Taylor series.
899510`\spad{updatD }\undocumented
899801`\spad{update!(hs,{} x)} computes new values of HashState from \spad{hs} and \spad{x} and might destructively operate on its first argument.
899857`\spad{update(v,{} gr,{} n)} drops the graph \spad{gr} in slot \spad{n} of viewport \spad{v}. The graph \spad{gr} must have been transmitted already and acquired an integer key.
900426`\spad{updateStatus!(a)} returns a where the status of the vertices are updated to satisfy the "termination condition".
900483`\spad{updatF }\undocumented
900677`\spad{upperCase()} returns the class of all characters for which \spadfunFrom{upperCase?}{Character} is \spad{true}.
900770`\spad{upperCase!(s)} destructively replaces the alphabetic characters in \spad{s} by upper case characters.
900821`\spad{upperCase(s)} returns the string with all characters in upper case.
900871`\spad{upperCase(c)} converts a lower case letter to the corresponding upper case letter. If \spad{c} is not a lower case letter,{} then it is returned unchanged.
900915`\spad{upperCase?(c)} tests if \spad{c} is an upper case letter,{} \spadignore{i.e.} one of A..\spad{Z}.
900965`\spad{UpTriBddDenomInv(B,{} d)} returns \spad{M},{} where \spad{B} is a non-singular upper triangular matrix and \spad{d} is an element of \spad{R} such that \spad{M = d * inv(B)} has entries in \spad{R}.
901046`\spad{useEisensteinCriterion?()} returns \spad{true} if factorizers check Eisenstein\spad{'s} criterion before factoring.
901123`\spad{useEisensteinCriterion(b)} chooses whether factorizers check Eisenstein\spad{'s} criterion before factoring: \spad{true} for using it,{} \spad{false} else. Returns the previous value.
901206`\spad{useNagFunctions()} indicates whether NAG functions are being used \indented{1}{for mathematical and machine constants.}
901302`\spad{useNagFunctions(v)} sets the flag which controls whether NAG functions \indented{1}{are being used for mathematical and machine constants.\space{2}The previous} \indented{1}{value is returned.}
901405`\spad{userOrdered?()} tests if the partial ordering induced by \spadfunFrom{setOrder}{UserDefinedPartialOrdering} is not empty.
901475`\spad{useSingleFactorBound?()} returns \spad{true} if algorithm with single factor bound is used for factorization,{} \spad{false} for algorithm with overall bound.
901550`\spad{useSingleFactorBound(b)} chooses the algorithm to be used by the factorizers: \spad{true} for algorithm with single factor bound,{} \spad{false} for algorithm with overall bound. Returns the previous value.
901631`\spad{usingTable?()} returns \spad{true} iff the hash-table is used
901709`\spad{UTS2UP(s,{} n)} converts the first \spad{n} terms of \spad{s} to a univariate polynomial.
901784`\spad{validExponential([k1,{} ...,{} kn],{} f,{} x)} returns \spad{g} if \spad{exp(f)=g} and \spad{g} involves only \spad{k1...kn},{} and "failed" otherwise.
901902`\spad{value(x)} returns a SingleInteger value corresponding to \spad{x}.
901953`returns: \indented{2}{"T"::Symbol = \spad{T}} \indented{2}{"F"::Symbol = \spad{_|_}} \indented{2}{"E"::Symbol = error} \indented{2}{"P"::Symbol = proposition} \indented{2}{"C"::Symbol = compound} Constructs lambda term and bind any variables with the name provided
901994`\spad{value(n)} returns the value of the node \spad{n}.
902142`\spad{value(x)} returns the integer associated with \spad{x}
902188`\spad{value(u)} returns the value of the node \spad{u}.
902239`\spad{value(q)} returns the value (\spadignore{i.e.} right hand side) of \spad{q}.
902287`\spad{values()} returns the number of initial values to display at most.
902356`\spad{values N} sets the number of initial values to display at most.
902443`constructs variable with a name but no type.
902482`\spad{var1Steps(n)} indicates the number of subdivisions,{} \spad{n},{} of the first range variable. This option is expressed in the form \spad{var1Steps == n}.
902540`\spad{var1Steps(l,{} n)} takes the list of draw options,{} \spad{l},{} and checks the list to see if it contains the option \spad{var1Steps}. If the option does not exist the value,{} \spad{n} is returned.
902638`\spad{var1StepsDefault()} is the current setting for the number of steps to take when creating a 3D mesh in the direction of the first defined free variable (a free variable is considered defined when its range is specified (\spadignore{e.g.} \spad{x=0}..10)).
902710`\spad{var1StepsDefault(i)} sets the number of steps to take when creating a 3D mesh in the direction of the first defined free variable to \spad{i} (a free variable is considered defined when its range is specified (\spadignore{e.g.} \spad{x=0}..10)).
902797`constructs variable with a name and also a type.
902843`\spad{var2Steps(n)} indicates the number of subdivisions,{} \spad{n},{} of the second range variable. This option is expressed in the form \spad{var2Steps == n}.
902901`\spad{var2Steps(l,{} n)} takes the list of draw options,{} \spad{l},{} and checks the list to see if it contains the option \spad{var2Steps}. If the option does not exist the value,{} \spad{n} is returned.
902999`\spad{var2StepsDefault()} is the current setting for the number of steps to take when creating a 3D mesh in the direction of the first defined free variable (a free variable is considered defined when its range is specified (\spadignore{e.g.} \spad{x=0}..10)).
903071`\spad{var2StepsDefault(i)} sets the number of steps to take when creating a 3D mesh in the direction of the first defined free variable to \spad{i} (a free variable is considered defined when its range is specified (\spadignore{e.g.} \spad{x=0}..10)).
903158`\spad{variable()} returns the symbol
903207`returns \spad{true} if this is an variable
903265`\spad{variable(s)} returns a member of the variable set or failed
903352`\spad{variable(v)} returns \spad{s} if \spad{v} is any derivative of the differential indeterminate \spad{s}.
903416`\spad{variable(f)} returns the (unique) power series variable of the power series \spad{f}.
903495`\spad{variable(q)} returns the variable (\spadignore{i.e.} left hand side) of \spad{q}.
903546`\spad{variable(segb)} returns the variable from the left hand side of the \spadtype{SegmentBinding}. For example,{} if \spad{segb} is \spad{v=a..b},{} then \spad{variable(segb)} returns \spad{v}.
903601`\spad{variableName returns} the name of the variable used in by the algebraic differential equation,{} default being \spad{x}
903679`\spad{variableName(d)} specifies the variable used in by the algebraic differential equation. This option is expressed in the form \spad{variableName == d}.
903732`\spad{variableOf(c)} returns variable of \spad{c}
903800`\spad{variables(p)} returns the list of matching variables appearing in \spad{p}.
903851`\spad{variables(e)} return a list of all the variables in \spad{e}.
903948`\spad{variables(p)} returns the list of those variables actually appearing in the polynomial \spad{p}.
904032`\spad{variables(f)} returns the list of variables appearing in the numerator or the denominator of \spad{f}.
904180`\spad{variables(q)} computes the list of all jet variables up to order \spad{q}.
904642`\spad{variables(upoly)} returns the list of variables for the coefficients of \spad{upoly}.
904738`\spad{variables(f)} returns the list of all the variables of \spad{f}.
904799`\spad{variables(f)} returns a list of the variables occurring in the power series \spad{f}.
904876`\spad{variables(ps)} returns the decreasingly sorted list of the variables which are variables of some polynomial in \spad{ps}.
904956`\spad{variables(f)} returns the list of variables appearing in the numerator or the denominator of \spad{f}.
905041`\spad{variables([f1,{} ...,{} fn])} returns the list of all the variables of \spad{f1},{} ...,{} \spad{fn}.
905108`\spad{variables(q,{} c)} computes all jet variables of order \spad{q} whose class is greater than or equal to \spad{c}.
905285`\spad{variablesOf(c)} returns list of variables of \spad{c}
905346`\spad{variationOfParameters(op,{} g,{} [f1,{} ...,{} fm])} returns \spad{[u1,{} ...,{} um]} such that a particular solution of the equation \spad{op y = g} is \spad{f1 int(u1) + ... + fm int(um)} where \spad{[f1,{} ...,{} fm]} are linearly independent and \spad{op(\spad{fi})=0}. The value "failed" is returned if \spad{m < n} and no particular solution is found.
905444`\spad{vark([f1,{} ...,{} fn],{} x)} returns the set-theoretic union of \spad{(varselect(f1,{} x),{} ...,{} varselect(fn,{} x))}.
905520`\spad{varList(x)} returns the list of variables of \spad{x}.
905587`\spad{varList(x)} returns the list of distinct entries of \spad{x}.
905647`\spad{varList(g)} returns the list of variables of \spad{g}.
905721`\spad{varList(x)} returns the list of distinct entries of \spad{x}.
905782`\spad{varList([l1]*[l2]*...[ln])} returns the list of variables in the word \spad{l1*l2*...*ln}.
905864`\spad{varList(x)} returns the list of distinct entries of \spad{x}.
905931`\spad{varList(x)} returns the list of variables which appear in \spad{x}.
905988`\spad{varselect([k1,{} ...,{} kn],{} x)} returns the \spad{ki} which involve \spad{x}.
906077`\spad{vconcat(u)} vertically concatenates all forms in list \spad{u}.
906126`\spad{vconcat(f,{} g)} vertically concatenates forms \spad{f} and \spad{g}.
906172`\spad{vector(l)} converts the list \spad{l} to a vector.
906252`\spad{vector(l)} converts the list \spad{l} to a vector.
906298`\spad{vector_add_mul(v1,{} v2,{} m,{} n,{} c,{} p)} sets \spad{v1}(\spad{m}),{} ...,{} \spad{v1}(\spad{n}) to corresponding extries in \spad{v1} + \spad{c*v2} modulo \spad{p}.
906418`\spad{vector_combination(v1,{} c1,{} v2,{} c2,{} n,{} delta,{} p)} replaces first \spad{n} + 1 entires of \spad{v1} by corresponding entries of \spad{c1*v1+c2*x^delta*v2} mod \spad{p}.
906550`\spad{Vectorise(x)} \undocumented
906695`\spad{vectorise(p,{} n)} returns \spad{[a0,{} ...,{} a(n-1)]} where \spad{p = a0 + a1*x + ... + a(n-1)*x^(n-1)} + higher order terms. The degree of polynomial \spad{p} can be different from \spad{n-1}.
906862`\spad{vertConcat(l)} vertically concatenates all members of \spad{l} Error: if the arrays do not have the same number of columns.
907013`\spad{vertConcat(x,{} y)} vertically concatenates two arrays with an equal number of columns. The entries of \spad{y} appear below of the entries of \spad{x}. Error: if the arrays do not have the same number of columns.
907279`\spad{vertSplit(a,{} [n1,{} ...,{} \spad{ni}])} splits a into arrays having \spad{n1},{} ...,{} \spad{ni} rows. Error: if number of rows of a is different than \spad{n1+} ... + \spad{ni}.
907383`\spad{vertSplit(a,{} n)} splits a into \spad{n} arrays of equal size row wise. Error: if number of rows of a is not divisible by \spad{n}.
907478`\spad{viewDefaults()} resets all the default graphics settings.
907535`\spad{viewDeltaXDefault()} returns the current default horizontal offset from the center of the viewport window.
907603`\spad{viewDeltaXDefault(dx)} sets the current default horizontal offset from the center of the viewport window to be \spad{dx} and returns \spad{dx}.
907676`\spad{viewDeltaYDefault()} returns the current default vertical offset from the center of the viewport window.
907744`\spad{viewDeltaYDefault(dy)} sets the current default vertical offset from the center of the viewport window to be \spad{dy} and returns \spad{dy}.
907817`\spad{viewPhiDefault()} returns the current default latitudinal view angle in radians.
907882`\spad{viewPhiDefault(p)} sets the current default latitudinal view angle in radians to the value \spad{p} and returns \spad{p}.
907952`\spad{viewpoint(v)} returns the current viewpoint setting of the given viewport,{} \spad{v}. This function is useful in the situation where the user has created a viewport,{} proceeded to interact with it via the control panel and desires to save the values of the viewpoint as the default setting
907952`--s for another viewport to be created using the system.
908163`\spad{viewpoint(vp)} creates a viewpoint data structure corresponding to the list of values. The values are interpreted as [theta,{} phi,{} scale,{} scaleX,{} scaleY,{} scaleZ,{} deltaX,{} deltaY]. This option is expressed in the form \spad{viewpoint == ls}.
908360`\spad{viewpoint(l,{} ls)} takes the list of draw options,{} \spad{l},{} and checks the list to see if it contains the option \spad{v
908360`--iewpoint}. IF the option does not exist,{} the value \spad{ls} is returned.
908736`\spad{viewpoint(v,{} viewpt)} sets the viewpoint for the viewport. The viewport record consists of the latitudal and longitudal angles,{} the zoom factor,{} the \spad{X},{} \spad{Y},{} and \spad{Z} scales,{} and the \spad{X} and \spad{Y} displacements.
908952`\spad{viewpoint(v,{} th,{} phi)} sets the longitudinal view angle to \spad{th} radians and the latitudinal view angle to \spad{phi} radians for the viewport \spad{v},{} which is of the domain \spadtype{ThreeDimensionalViewport}. The new viewpoint position is not displayed until the function \spadfun{makeViewport3D} is executed again for \spad{v}.
909025`\spad{viewpoint(v,{} rotx,{} roty,{} rotz)} sets the rotation about the \spad{x}-axis to be \spad{rotx} radians,{} sets the rotation about the \spad{y}-axis to be \spad{roty} radians,{} and sets the rotation about the \spad{z}-axis to be \spad{rotz} radians,{} for the viewport \spad{v},{} which is of the domain \spadtype{ThreeDimensionalViewport} and displays \spad{v} with the new view position.
909104`\spad{viewpoint(v,{} th,{} phi,{} s,{} dx,{} dy)} sets the longitudinal view angle to \spad{th} radians,{} the latitudinal view angle to \spad{phi} radians,{} the scale factor to \spad{s},{} the horizontal viewport offset to \spad{dx},{} and the vertical viewport offset to \spad{dy} for the viewport \spad{v},{} which is of the domain \spadtype{ThreeDimensionalViewport}. The new viewpoint position is not displayed 
909104`--until the function \spadfun{makeViewport3D} is executed again for \spad{v}.
909195`\spad{viewpoint(v,{} th,{} phi,{} s,{} dx,{} dy)} sets the longitudinal view angle to \spad{th} degrees,{} the latitudinal view angle to \spad{phi} degrees,{} the scale factor to \spad{s},{} the horizontal viewport offset to \spad{dx},{} and the vertical viewport offset to \spad{dy} for the viewport \spad{v},{} which is of the domain \spadtype{ThreeDimensionalViewport}. The new viewpoint position is not displa
909195`--yed until the function \spadfun{makeViewport3D} is executed again for \spad{v}.
909290`\spad{viewport2D()} returns an undefined two-dimensional viewport of the domain \spadtype{TwoDimensionalViewport} whose contents are empty.
909346`\spad{viewport3D()} returns an undefined three-dimensional viewport of the domain \spadtype{ThreeDimensionalViewport} whose contents are empty.
909404`\spad{viewPosDefault()} returns the default \spad{X} and \spad{Y} position of a viewport window unless overriden explicityly,{} newly created viewports will have this \spad{X} and \spad{Y} coordinate.
909483`\spad{viewPosDefault([x,{} y])} sets the default \spad{X} and \spad{Y} position of a viewport window unless overriden explicityly,{} newly created viewports will have th \spad{X} and \spad{Y} coordinates \spad{x},{} \spad{y}.
909586`\spad{viewSizeDefault()} returns the default viewport width and height.
909663`\spad{viewSizeDefault([w,{} h])} sets the default viewport width to \spad{w} and height to \spad{h}.
909761`\spad{viewThetaDefault()} returns the current default longitudinal view angle in radians.
909828`\spad{viewThetaDefault(t)} sets the current default longitudinal view angle in radians to the value \spad{t} and returns \spad{t}.
909900`\spad{viewWriteAvailable()} returns a list of available methods for writing,{} such as BITMAP,{} POSTSCRIPT,{} etc.
909971`\spad{viewWriteDefault()} returns the list of things to write in a viewport data file; a viewAlone file is always generated.
910040`\spad{viewWriteDefault(l)} sets the default list of things to write in a viewport data file to the strings in \spad{l}; a viewAlone file is always genereated.
910121`\spad{viewZoomDefault()} returns the current default graph scaling value.
910187`\spad{viewZoomDefault(s)} sets the current default graph scaling value to \spad{s} and returns \spad{s}.
910258`\spad{virtualDegree }\undocumented
910361`virtualDegree
910457`\spad{void()} produces a void object.
910489`\spad{vspace(n)} creates white space of height \spad{n}.
910536`evaluation routine
910656`evaluation routine
910816`modular reduction
910968`\spad{weakBiRank(x)} determines the number of linearly independent elements in the \spad{bi*x*bj},{} \spad{i,{} j=1,{} ...,{} n},{} where \spad{b=[b1,{} ...,{} bn]} is a basis.
911038`\spad{weberE(v,{} z)} is the Weber \spad{E} function
911100`\spad{weberE(v,{} z)} is the Weber \spad{E} function.
911158`\spad{weierstrass(v,{} ts)} where \spad{v} is a variable and \spad{ts} is \indented{1}{a TaylorSeries,{} implements the Weierstrass Preparation} \indented{1}{Theorem. The result is a list of TaylorSeries that} \indented{1}{are the coefficients of the equivalent series.}
911259`\spad{weierstrassHalfPeriods(g2,{} g3)} computes half periods of Weierstrass elliptic functions from invariants \spad{g2},{} \spad{g3}.
911374`\spad{weierstrassInvariants(w1,{} w2)} computes invariants \spad{g2},{} \spad{g3} of Weierstrass elliptic functions from half periods \spad{w1},{} \spad{w2}.
911488`\spad{weierstrassP0(g2,{} g3,{} x)} computes finite part of weierstrassP(\spad{g2},{} \spad{g3},{} \spad{x}). \spad{x} must have no term of order 0.
911586`\spad{weierstrassP(g2,{} g3,{} x)}
911656`\spad{weierstrassP(g2,{} g3,{} z)} is the Weierstrass \spad{P} function.
911723`\spad{weierstrassP(g2,{} g3,{} x)} is the Weierstrass \spad{P} function
911837`\spad{weierstrassP(g2,{} g3,{} x)} is the Weierstrass \spad{P} function
911915`\spad{weierstrassPInverse(g2,{} g3,{} z)} is the inverse of Weierstrass \spad{P} function,{} defined by the formula \spad{weierstrassP(g2,{} g3,{} weierstrassPInverse(g2,{} g3,{} z)) = z}
911992`\spad{weierstrassPInverse(g2,{} g3,{} z)} is the inverse of Weierstrass \spad{P} function,{} defined by the formula \spad{weierstrassP(g2,{} g3,{} weierstrassPInverse(g2,{} g3,{} z)) = z}.
912066`\spad{weierstrassPPrime0(g2,{} g3,{} x)} computes finite part of weierstrassPPrime(\spad{g2},{} \spad{g3},{} \spad{x}). \spad{x} must have no term of order 0.
912169`\spad{weierstrassPPrime(g2,{} g3,{} x)}
912244`\spad{weierstrassPPrime(g2,{} g3,{} z)} is the derivative of Weierstrass \spad{P} function.
912316`\spad{weierstrassPPrime(g2,{} g3,{} x)} is the derivative of the Weierstrass \spad{P} function
912435`\spad{weierstrassPPrime(g2,{} g3,{} x)} is the derivative of the Weierstrass \spad{P} function
912518`\spad{weierstrassSigma0(g2,{} g3,{} x)} computes weierstrassSigma(\spad{g2},{} \spad{g3},{} \spad{x}). \spad{x} must have no term of order 0.
912620`\spad{weierstrassSigma(g2,{} g3,{} x)}
912694`\spad{weierstrassSigma(g2,{} g3,{} z)} is the Weierstrass Sigma function.
912765`\spad{weierstrassZeta0(g2,{} g3,{} x)} computes finite part of weierstrassZeta(\spad{g2},{} \spad{g3},{} \spad{x}). \spad{x} must have no term of order 0.
912866`\spad{weierstrassZeta(g2,{} g3,{} x)}
912939`\spad{weierstrassZeta(g2,{} g3,{} z)} is the Weierstrass Zeta function.
913009`\spad{weight(jv)} assigns each jet variable a unique integer reflecting its position in the internal ordering. The variable with the greater weight is also greater in this ordering.
913294`\spad{weight(p)} returns the maximum weight of all differential monomials appearing in the differential polynomial \spad{p}.
913381`\spad{weight(v)} returns the weight of the derivative \spad{v}.
913460`\spad{weight(op)} returns the weight attached to \spad{op}.
913606`\spad{weight(op,{} n)} attaches the weight \spad{n} to \spad{op}.
913670`\spad{weight(p,{} s)} returns the maximum weight of all differential monomials appearing in the differential polynomial \spad{p} when \spad{p} is viewed as a differential polynomial in the differential indeterminate \spad{s} alone.
913759`\spad{weighted(l)} \undocumented
913852`The elements of the returned array will represent the distance weights between vertices. if there is no connection between the vertices then the element will be set to "disjoint"
913956`constructor for graph with given objects more objects and arrows can be added later if required.
914089`constructor for graph with given list of object names. Use this version of the constructor if you don\spad{'t} intend to create diagrams and therefore don\spad{'t} care about \spad{x},{} \spad{y} coordinates. more objects and arrows can be added later if required.
914151`constructor for graph with given objects and arrows more objects and arrows can be added later if required.
914439`\spad{weightedGraph(ob,{} ar)} constructs graph with objects on and arrows ar. More objects and arrows can be added later if required.
914718`constructor for graph with given objects and adjacency matrix.
914901`\spad{weights(p)} returns a list of weights of differential monomials appearing in differential polynomial \spad{p}.
915087`\spad{weights(p,{} s)} returns a list of weights of differential monomials appearing in the differential polynomial \spad{p} when \spad{p} is viewed as a differential polynomial in the differential indeterminate \spad{s} alone.
915183`\spad{whatInfinity(x)} returns 0 if \spad{x} is finite,{} 1 if \spad{x} is +infinity,{} and \spad{-1} if \spad{x} is -infinity.
915252`\spad{whileLoop(s,{} c)} creates a while loop in FORTRAN.
915305`\spad{whittakerM(k,{} m,{} z)} is the Whittaker \spad{M} function
915373`\spad{whittakerM(k,{} m,{} z)} is the Whittaker \spad{M} function.
915438`\spad{whittakerW(k,{} m,{} z)} is the Whittaker \spad{W} function
915506`\spad{whittakerW(k,{} m,{} z)} is the Whittaker \spad{W} function.
915571`\spad{wholePart x} returns the integer part of \spad{x}.
915627`\spad{wholePart(x)} extracts the whole part of \spadvar{\spad{x}}. That is,{} if \spad{x = continuedFraction(b0,{} [a1,{} a2,{} a3,{} ...],{} [b1,{} b2,{} b3,{} ...])},{} then \spad{wholePart(x) = b0}.
915681`\spad{wholePart(p)} extracts the whole part of the partial fraction \spad{p}.
915733`\spad{wholePart(x)} returns the whole part of the fraction \spad{x} \spadignore{i.e.} the truncated quotient of the numerator by the denominator.
915813`\spad{wholeRadix(l)} creates an integral radix expansion from a list of ragits. For example,{} \spad{wholeRadix([1,{} 3,{} 4])} will return \spad{134}.
915878`\spad{wholeRagits(rx)} returns the ragits of the integer part of a radix expansion.
915944`\spad{width(u)} returns \spad{sup(u) - inf(u)}.
915993`\spad{wignerDistribution(a)} produces a Wigner distribution of variance \spad{a}.
916071`\spad{withPredicates(p,{} [p1,{} ...,{} pn])} makes a copy of \spad{p} and attaches the predicate \spad{p1} and ... and \spad{pn} to the copy,{} which is returned.
916131`\spad{wordInGenerators(p,{} gp)} returns the word for the permutation \spad{p} in the original generators of the group {\em gp},{} represented by the indices of the list,{} given by {\em generators}.
916229`\spad{wordInStrongGenerators(p,{} gp)} returns the word for the permutation \spad{p} in the strong generators of the group {\em gp},{} represented by the indices of the list,{} given by {\em strongGenerators}.
916333`\spad{wordsForStrongGenerators(gp)} returns the words for the strong generators of the group {\em gp} in the original generators of {\em gp},{} represented by their indices in the list,{} given by {\em generators}.
916430`\spad{wreath(s1,{} s2)} is the cycle index of the wreath product \indented{1}{of the two groups whose cycle indices are \spad{s1} and} \indented{1}{\spad{s2}.}
916588`\spad{writable?(f)} tests if the named file be opened for writing. The named file need not already exist.
916644`\spad{write(v,{} s)} takes the given two-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{TwoDimensionalViewport},{} and creates a directory indicated by \spad{s},{} which contains the graph data files for \spad{v}.
916708`\spad{write!(f,{} s)} puts the value \spad{s} into the file \spad{f}. The state of \spad{f} is modified so subsequents call to \spad{write!} will append one after another.
916761`\spad{write(v,{} s)} takes the given three-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{ThreeDimensionalViewport},{} and creates a directory indicated by \spad{s},{} which contains the graph data file for \spad{v}.
916827`\spad{write(v,{} s,{} lf)} takes the given two-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{TwoDimensionalViewport},{} and creates a directory indicated by \spad{s},{} which contains the graph data files for \spad{v} and the optional file types indicated by the list \spad{lf}.
916904`\spad{write(v,{} s,{} f)} takes the given two-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{TwoDimensionalViewport},{} and creates a directory indicated by \spad{s},{} which contains the graph data files for \spad{v} and an optional file type \spad{f}.
916975`\spad{write(v,{} s,{} lf)} takes the given three-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{ThreeDimensionalViewport},{} and creates a directory indicated by \spad{s},{} which contains the graph data file for \spad{v} and the optional file types indicated by the list \spad{lf}.
917054`\spad{write(v,{} s,{} f)} takes the given three-dimensional viewport,{} \spad{v},{} which is of domain \spadtype{ThreeDimensionalViewport},{} and creates a directory indicated by \spad{s},{} which contains the graph data file for \spad{v} and an optional file type \spad{f}.
917127`writes a category to a file.
917207`\spad{writeLine!(f)} finishes the current line in the file \spad{f}. An empty string is returned. The call \spad{writeLine!(f)} is equivalent to \spad{writeLine!(f,{}"")}.
917255`\spad{writeLine!(f,{} s)} writes the contents of the string \spad{s} and finishes the current line in the file \spad{f}. The value of \spad{s} is returned.
917310`\spad{writeObj(n,{} filename)} writes an 'OBJ' (Wavefront) representation of node \spad{'n'} to the filename supplied.
917362`writes 3D SubSpace to a file in Wavefront (.OBJ) format
917434`writes a package to a file.
917527`\spad{writeSvg(n,{} filename)} writes an 'SVG' representation of node \spad{'n'} to the filename supplied.
917579`\spad{writeSvgQuantised(n,{} filename)} writes an 'SVG' representation of node \spad{'n'} to the filename supplied.
917640`\spad{writeVRML(n,{} filename)} writes an 'VRML' representation of node \spad{'n'} to the filename supplied.
917693`\spad{writeVRML(content,{} filename)} writes the element as \spad{VRML2}. \spad{VRML2} is not \spad{xml} but it has the same semantics and node names as \spad{X3D} but a different syntax so it makes sense to create an \spad{XML} structure and then format the output differently.
917754`writeX3d: (\spad{n},{} filename) writes an 'X3D' representation of node \spad{'n'} to the filename supplied.
917806`\spad{writeXml(content,{} filename)} writes an \spad{xml} element and all the elements below it to an \spad{xml} file. This assumes that all elements,{} in a file,{} have a single root which is usually the case.
917866`\spad{wronskianMatrix([f1,{} ...,{} fn])} returns the \spad{n x n} matrix \spad{m} whose i^th row is \spad{[f1^(i-1),{} ...,{} fn^(i-1)]}.
917935`\spad{wronskianMatrix([f1,{} ...,{} fn],{} q,{} D)} returns the \spad{q x n} matrix \spad{m} whose i^th row is \spad{[f1^(i-1),{} ...,{} fn^(i-1)]}.
918023`\spad{wrregime(l,{} s)} writes a list of regimes to a file named \spad{s} and returns the number of regimes written
918276`\spad{X()} generates the only independent variable.
918455`\spad{X(i)} generates the \spad{i}\spad{-}th independent variable.
918694`\spad{xCoord(pt)} returns the first element of the point,{} \spad{pt},{} although no assumptions are made as to the coordinate system being used. This function is defined for the convenience of the user dealing with a Cartesian coordinate system.
918746`\spad{xform(tr,{} inpt)} apply transform to a point producing another point
918794`like testComplexEquals,{} but expects failure.
918860`like testEquals,{} but expects failure.
918973`like testEquals,{} but expects failure.
919032`like testEquals,{} but expects failure.
919097`like testLibraryError,{} but expects failure.
919155`like testEquals,{} but expects failure.
919224`like testNotEquals,{} but expects failure.
919286`like testEquals,{} but expects failure.
919354`like testRealEquals,{} but expects failure.
919417`like testEquals,{} but expects failure.
919509`like testTrue,{} but expects failure.
919559`like testEquals,{} but expects failure.
919620`xmlAttribute: (name: String,{} values: List String) constructs a xmlAttribute from its name and list of values
919687`\spad{xmlAttribute(name,{} value)} construct a xmlAttribute from its \spad{name} and value
919748`\spad{xmlElement(name,{} elements,{} attributes)} construct an element with structured \spad{elements}
919826`\spad{xmlElement(name,{} txt,{} attributes)} construct an element with unstructured text
919902`\spad{xn(n)} returns the polynomial \spad{x^n-1}.
920008`\spad{xor(a,{} b)} returns the logical {\em exclusive-or} of bit aggregates \spad{a} and \spad{b}.
920052`\spad{xor(a,{} b)} returns the logical exclusive {\em or} of Boolean \spad{a} and \spad{b}.
920091`\spad{xor(n,{} m)} returns the bit-by-bit logical {\em xor} of the single integers \spad{n} and \spad{m}.
920136`\spad{xRange(c)} returns the range of the \spad{x}-coordinates of the points on the curve \spad{c}.
920213`\spad{xRange(c)} returns the range of the \spad{x}-coordinates of the points on the curve \spad{c}.
920290`\spad{Y(f)} computes a fixed point of the function \spad{f}.
920379`\spad{Y(g,{} n)} computes a fixed point of the function \spad{g},{} where \spad{g} takes a list of \spad{n} streams and returns a list of \spad{n} streams.
920494`\spad{yCoord(pt)} returns the second element of the point,{} \spad{pt},{} although no assumptions are made as to the coordinate system being used. This function is defined for the convenience of the user dealing with a Cartesian coordinate system.
920639`\spad{yCoordinates(f)} returns \spad{[[A1,{} ...,{} An],{} D]} such that \spad{f = (A1 + A2 y +...+ An y^(n-1)) / D}.
920736`\spad{yellow()} returns the position of the yellow hue from total hues.
920771`\spad{youngGroup([n1,{} ...,{} nk])} constructs the direct product of the symmetric groups {\em Sn1},{} ...,{} {\em Snk}.
920865`\spad{youngGroup(lambda)} constructs the direct product of the symmetric groups given by the parts of the partition {\em lambda}.
920955`\spad{yRange(c)} returns the range of the \spad{y}-coordinates of the points on the curve \spad{c}.
921032`\spad{yRange(c)} returns the range of the \spad{y}-coordinates of the points on the curve \spad{c}.
921109`\spad{zag(f,{} g)} creates a form for the continued fraction form for \spad{f} over \spad{g}.
921151`\spad{zCoord(pt)} returns the third element of the point,{} \spad{pt},{} although no assumptions are made as to the coordinate system being used. This function is defined for the convenience of the user dealing with a Cartesian or a cylindrical coordinate system.
921203`\spad{zero?(x)} checks if \spad{x} is zero.
921831`\spad{zero?(x)} tests if \spad{x} is equal to 0.
921880`\spad{zero?(m)} returns \spad{true} if \spad{m} is a zero matrix and \spad{false} otherwise.
921941`\spad{zero?(y)} returns \spad{true} if \spad{y} is a zero vector,{} \spad{true} otherwise
922014`\spad{zero?(I)} tests whether the ideal \spad{I} is the zero ideal
922087`\spad{zero(n)} creates a zero vector of length \spad{n}.
922346`\spad{zero(m,{} n)} returns an \spad{m}-by-\spad{n} zero matrix.
922436`\spad{zero?(pol,{} aRoot)} answers if \spad{pol} interpreted as \spad{aRoot} is \spad{0}
922530`\spad{zeroDim?(I)} tests if the ideal \spad{I} is zero dimensional,{} \spadignore{i.e.} all its associated primes are maximal,{} in the ring \spad{F[lvar]},{} where lvar are the variables appearing in \spad{I}
922606`\spad{zeroDim?(I,{} lvar)} tests if the ideal \spad{I} is zero dimensional,{} \spadignore{i.e.} all its associated primes are maximal,{} in the ring \spad{F[lvar]}
922695`\spad{zeroDimensional?(lp)} returns \spad{true} iff \spad{lp} generates a zero-dimensional ideal \spad{w}.\spad{r}.\spad{t}. the variables involved in \spad{lp}.
922830`\spad{zeroDimensional?(lq1)} returns \spad{true} iff \spad{lq1} generates a zero-dimensional ideal \spad{w}.\spad{r}.\spad{t}. the variables of \spad{ls}.
922916`\spad{zeroDimPrimary?(I)} tests if the ideal \spad{I} is 0-dimensional primary.
923143`\spad{zeroDimPrime?(I)} tests if the ideal \spad{I} is a 0-dimensional prime.
923368`\spad{zeroMatrix(i,{} j,{} k)} create a matrix with all zero terms
923494`\spad{zeroMatrix(s,{} p,{} q)} uses loop variables in the Fortran,{} \spad{I1} and \spad{I2}
923602`\spad{zeroMatrix(s,{} b,{} d)} in this version gives the user control over names of Fortran variables used in loops.
924112`\spad{zeroOf(p)} returns \spad{y} such that \spad{p(y) = 0}. The value \spad{y} is expressed in terms of radicals if possible,{} and otherwise as an implicit algebraic quantity. Error: if \spad{p} has more than one variable.
924179`\spad{zeroOf(p)} returns \spad{y} such that \spad{p(y) = 0}. If possible,{} \spad{y} is expressed in terms of radicals. Otherwise it is an implicit algebraic quantity. Error: if \spad{p} has more than one variable \spad{y}.
924247`\spad{zeroOf(p)} returns \spad{y} such that \spad{p(y) = 0}; if possible,{} \spad{y} is expressed in terms of radicals. Otherwise it is an implicit algebraic quantity.
924584`\spad{zeroOf(p,{} y)} returns \spad{y} such that \spad{p(y) = 0}. The value \spad{y} is expressed in terms of radicals if possible,{} and otherwise as an implicit algebraic quantity which displays as \spad{'y}.
924658`\spad{zeroOf(p,{} y)} returns \spad{y} such that \spad{p(y) = 0}; if possible,{} \spad{y} is expressed in terms of radicals. Otherwise it is an implicit algebraic quantity which displays as \spad{'y}.
924749`\spad{zeroSetSplit(lp)} returns a list \spad{lts} of triangular sets such that the zero set of \spad{lp} is the union of the closures of the regular zero sets of the members of \spad{lts}.
924828`\spad{zeroSetSplit(lp,{} norm?)} decomposes the variety associated with \spad{lp} into regular chains. Thus a point belongs to this variety iff it is a regular zero of a regular set in in the output. Note that \spad{lp} needs to generate a zero-dimensional ideal. If \spad{norm?} is \spad{true} then the regular sets are normalized.
924984`\spad{zeroSetSplit(lp,{} norm?)} decomposes the variety associated with \spad{lp} into square-free regular chains. Thus a point belongs to this variety iff it is a regular zero of a regular set in in the output. 
924984`--Note that \spad{lp} needs to generate a zero-dimensional ideal. If \spad{norm?} is \spad{true} then the regular sets are normalized.
925280`\spad{zeroSetSplit(lp,{} clos?)} has the same specifications as \spadopFrom{zeroSetSplit(\spad{lp},{} clos?)}{RegularTriangularSetCategory}.
925375`\spad{zeroSetSplit(lp,{} clos?)} returns \spad{lts} a split of Kalkbrener of the radical ideal associated with \spad{lp}. If \spad{clos?} is \spad{false},{} it is also a decomposition of the variety associated with \spad{lp} into the regular zero set of the \spad{ts} in \spad{lts} (or,{} in other words,{} a split of Lazard of this variety). See the example illustrating the \spadtype{RegularTriangularSet} constr
925375`--uctor for more explanations about decompositions by means of regular triangular sets.
925469`\spad{zeroSetSplit(lp,{} clos?,{} info?)} returns a list \spad{lts} of regular chains such that the union of the closures of their regular zero sets equals the affine variety associated with \spad{lp}. Moreover,{} if \spad{clos?} is \spad{false} then the union of the regular zero set of the \spad{ts} (for \spad{ts} in \spad{lts}) equals this variety. If \spad{info?}
925469`-- is \spad{true} then some information is displayed during the computations. See \spadopFrom{zeroSetSplit}{RegularTriangularSet}.
925609`\spad{zeroSetSplit(lp,{} clos?,{} info?)} has the same specifications as \spadopFrom{zeroSetSplit}{RegularTriangularSetCategory}. Moreover,{} if \spad{clos?} then solves in the sense of the Zariski closure else solves in the sense of the regular zeros. If \spad{info?} then do print messages during the computations.
925703`\spad{zeroSetSplit(lp,{} clos?,{} info?)} has the same specifications as \spadopFrom{zeroSetSplit}{RegularTriangularSetCategory} from \spadtype{RegularTriangularSetCategory} Moreover,{} if \spad{clos?} then solves in the sense of the Zariski closure else solves in the sense of the regular zeros. If \spad{info?} then do print messages during the computations.
925807`\spad{zeroSetSplit(lp,{} b1,{} b2.b3,{} b4)} is an internal subroutine,{} exported only for developement.
925917`\spad{zeroSetSplit(lp,{} b1,{} b2.b3,{} b4)} is an internal subroutine,{} exported only for developement.
926037`\spad{zeroSetSplitIntoTriangularSystems(lp)} returns a list of triangular systems \spad{[[ts1,{} qs1],{} ...,{} [tsn,{} qsn]]} such that the zero set of \spad{lp} is the union of the closures of the \spad{W_i} where \spad{W_i} consists of the zeros of \spad{ts} which do not cancel any polynomial in \spad{qsi}.
926569`\spad{zerosOf(p)} returns \spad{[y1,{} ...,{} yn]} such that \spad{p(\spad{yi}) = 0}. The \spad{yi}\spad{'s} are expressed in radicals if possible. Note: the returned values \spad{y1},{} ...,{} \spad{yn} contain new symbols which are bound in the interpreter to the respective values. Error: if \spad{p} has more than one variable.
926643`\spad{zerosOf(p)} returns \spad{[y1,{} ...,{} yn]} such that \spad{p(\spad{yi}) = 0}. The \spad{yi}\spad{'s} are expressed in radicals if possible. Otherwise they are implicit algebraic quantities containing new symbols. The new symbols are bound in the interpreter to the respective values. Error: if \spad{p} has more than one variable \spad{y}.
926718`\spad{zerosOf(p)} returns \spad{[y1,{} ...,{} yn]} such that \spad{p(\spad{yi}) = 0}. The \spad{yi}\spad{'s} are expressed in radicals if possible. Otherwise they are implicit algebraic quantities containing new symbols. The new symbols are bound in the interpreter to the respective values.
927083`\spad{zerosOf(p,{} y)} returns \spad{[y1,{} ...,{} yn]} such that \spad{p(\spad{yi}) = 0}. The \spad{yi}\spad{'s} are expressed in radicals if possible,{} and otherwise as implicit algebraic quantities containing new symbols which display as \spad{'\%z0},{} \spad{'\%z1},{} ...; The new symbols are bound in the interpreter to the respective values.
927164`\spad{zerosOf(p,{} y)} returns \spad{[y1,{} ...,{} yn]} such that \spad{p(\spad{yi}) = 0}. The \spad{yi}\spad{'s} are expressed in radicals if possible,{} and otherwise as implicit algebraic quantities containing new symbols which display as \spad{'\%z0},{} \spad{'\%z1},{} ...; The new symbols are bound in the interpreter to respective values.
927262`\spad{zeroSquareMatrix(s,{} p)} \undocumented{}
927356`\spad{zeroVector(s,{} p)} \undocumented{}
927444`\spad{zeta()} returns the function which is constantly one
927491`\spad{zoom(x,{} r)} \undocumented
927546`\spad{zoom(v,{} s)} sets the graph scaling factor to \spad{s},{} for the viewport \spad{v},{} which is of the domain \spadtype{ThreeDimensionalViewport}.
927608`\spad{zoom(x,{} r,{} s)} \undocumented
927684`\spad{zoom(x,{} r,{} s,{} t)} \undocumented
927783`\spad{zoom(v,{} sx,{} sy,{} sz)} sets the graph scaling factors for the \spad{x}-coordinate axis to \spad{sx},{} the \spad{y}-coordinate axis to \spad{sy} and the \spad{z}-coordinate axis to \spad{sz} for the viewport \spad{v},{} which is of the domain \spadtype{ThreeDimensionalViewport}.
927857`\spad{zRange(c)} returns the range of the \spad{z}-coordinates of the points on the curve \spad{c}.
927934`This package provides algebraic functions over an integral domain.
928023`algebraic Hermite redution.
928457`This package provides functions for integrating a function on an algebraic curve.
928698`This package provides functions for the integration of algebraic integrands over transcendental functions.
928811`AlgebraicManipulations provides functions to simplify and expand expressions involving algebraic operators.
928904`This package factors multivariate polynomials over the domain of \spadtype{AlgebraicNumber} by allowing the user to specify a list of algebraic numbers generating the particular extension to factor over.
929043`AlgebraPackage assembles a variety of useful functions for general algebras.
929141`Factorization of univariate polynomials with coefficients in \spadtype{AlgebraicNumber}.
929230`\spadtype{AnyFunctions1} implements several utility functions for working with \spadtype{Any}. These functions are used to go back and forth between objects of \spadtype{Any} and objects of other types.
929278`This package apply rewrite rules to expressions,{} calling the pattern matcher.
929391`\spad{ApplyUnivariateSkewPolynomial} (internal) allows univariate skew polynomials to be applied to appropriate modules.
929519`\spadtype{AssociatedEquations} provides functions to compute the associated equations needed for factoring operators
929638`Attaching predicates to symbols for pattern matching. Date Created: 21 Mar 1989
929691`This package provides balanced factorisations of polynomials.
929805`This package exports functions to set some commonly used properties of operators,{} including properties which contain functions.
929870`\spadtype{BezoutMatrix} contains functions for computing resultants and discriminants using Bezout matrices.
930051`\spadtype{BoundIntegerRoots} provides functions to find lower bounds on the integer roots of a polynomial.
930158`\indented{1}{Author: Frederic Lehobey,{} James \spad{H}. Davenport} Date Created: 28 June 1994 Basic Operations: brillhartIrreducible? Related Domains: Also See: AMS Classifications: Keywords: factorization Examples: References: [1] John Brillhart,{} Note on Irreducibility Testing,{} Mathematics of Computation,{} vol. 35,{} num. 35,{} Oct. 1980,{} 1379-1381 [2] James Davenport,{} On Brillhart Irreducibility. To appear. [
930158`--3] John Brillhart,{} On the Euler and Bernoulli polynomials,{} \spad{J}. Reine Angew. Math.,{} \spad{v}. 234,{} (1969),{} \spad{pp}. 45-64
930242`\spadtype{CartanKuranishi} is a package for the completion of a given differential equation to an involutive equation. Procedures for Cartan characters and Hilbert polynomial are also provided. Based on the Cartan-Kuranishi theorem as it is used in formal theory.
930342`This package provides functions to enable conversion of tensors given conversion of the components.
930479`Tools to send a point to infinity on an algebraic curve.
930645`This package implements characteristicPolynomials for monogenic algebras using resultants
930809`This package provides a characteristicPolynomial function for any matrix over a commutative ring.
930889`\indented{1}{Author: Clifton Williamson} Date Created: 9 August 1993 Basic Operations: chineseRemainder,{} factorList Related Domains: PAdicWildFunctionFieldIntegralBasis(\spad{K},{} \spad{R},{} UP,{} \spad{F}) Also See: WildFunctionFieldIntegralBasis,{} FunctionFieldIntegralBasis AMS Classifications: Keywords: function field,{} finite fiel
930889`--d,{} integral basis Examples: References: Description:
931055`CoerceVectorMatrixPackage: an unexposed,{} technical package for data conversions
931126`Provides combinatorial functions over an integral domain.
931222`CommonDenominator provides functions to compute the common denominator of a finite linear aggregate of elements of the quotient field of an integral domain.
931344`This package exports the elementary operators,{} with some semantics already attached to them. The semantics that is attached here is not dependent on the set in which the operators will be applied.
931391`A package for swapping the order of two variables in a tower of two UnivariatePolynomialCategory extensions.
931547`Maps abstract computational structures to real-world FriCAS code \blankline This allows FriCAS domains to be created from an instance of Lambda it also allows FriCAS categories to be created from an instance of intuitionisticLogic. \blankline So by the Curry-Howard isomorphism we can coerce to the intuitionisticLogic from Lambda. This gives an isomorphism where theorems in intuitionistic logic correspond to type signatures in combinatory logic and programs in intu
931547`--itionistic logic correspond to the proofs of those theorems in combinatory logic. \blankline As an example of this in Haskell see "Djinn,{} a theorem prover in Haskell,{} for Haskell" here: http: //lambda-the-ultimate.\spad{org/node/1178} http: //www.augustsson.net/Darcs/Djinn/ \blankline see also: Philip Wadler - Theorems for free! http: //homepages.inf.ed.ac.uk/wadler/topics/parametricity.html
931587`This package extends maps from underlying rings to maps between complex over those rings.
931674`This package provides the generalized euclidean algorithm which is needed as the basic step for factoring polynomials.
931798`This package supports converting complex expressions to patterns
931925`This package supports matching patterns involving complex expressions
932050`\spadtype{ComplexRootFindingPackage} provides functions to find all roots of a polynomial \spad{p} over the complex number by using Plesken\spad{'s} idea to calculate in the polynomial ring modulo \spad{f} and employing the Chinese Remainder Theorem. In this first version,{} the precision (see \spadfunFrom{digits}{Float}) is not increased when this is necessary to avoid rounding errors
932050`--. Hence it is the user\spad{'s} responsibility to increase the precision if necessary. Note also,{} if this package is called with \spadignore{e.g.} \spadtype{Fraction Integer},{} the precise calculations could require a lot of time. Also note that evaluating the zeros is not necessarily a good check whether the result is correct: already evaluation can cause rounding errors.
932170`\indented{2}{This package provides functions complexZeros} for finding the complex zeros of univariate polynomials with complex rational number coefficients. The results are to any user specified precision and are returned as either complex rational number or complex floating point numbers depending on the type of the second argument which specifies the precision.
932293`\spadtype{ComplexTrigonometricManipulations} provides function that compute the real and imaginary parts of complex functions.
932426`The compUtil package provides utilities to convert between the computational domains: Lambda,{} Ski and ILogic. Both Lambda are Ski are Turing complete and can be coerced to each other. Lambda and Ski are not equal and they are only isomorphic up to beta-equivalence and beta-equivalence is undecidable so there is not a direct correspondence between the nodes in their trees. Also the names of bound variables and other such constructions may be lost in Lam
932426`--bda \spad{->} Ski \spad{->} Lambda round trip. An element of ILogic cannot be coerced to the other types. However ILogic can be used to produce a theory which can be concerted to/from the other domains using Curry-Howard isomorphism.
932476`\spad{ConstantLinearDependence(R,{} F)} supports solving linear systems with coefficients in \spad{Expression(R)} over constants. The parameter \spad{ld} to each function is a list of derivations to use. By definition element \spad{f} from \spad{Expression(R)} is a constant if for each \spad{d} in \spad{ld} we have \spad{d(f) = 0}. We assume that inputs are normalized in such a way that field of cons
932476`--tants is generated by constant kernels.
932581`Solution of linear ordinary differential equations,{} constant coefficient case.
932750`CoordinateSystems provides coordinate transformation functions for plotting. Functions in this package return conversion functions which take points expressed in other coordinate systems and return points with the corresponding Cartesian coordinates.
932817`This package implements asymptotically efficient Chinese reconstruction
932876`Enumeration by cycle indices.
932921`This package provides tools for working with cyclic streams.
933008`This package \undocumented{}
933267`\spadtype{DefiniteIntegrationTools} provides common tools used by the definite integration of both rational and elementary functions.
933392`This package \undocumented{}
933479`This package generates logarithmic integrals and polylogs corresponding to denominator of the integrand.
933594`any solution of a homogeneous linear Diophantine equation can be represented as a sum of minimal solutions,{} which form a "basis" (a minimal solution cannot be represented as a nontrivial sum of solutions) in the case of an inhomogeneous linear Diophantine equation,{} each solution is the sum of a inhomogeneous solution and any number of homogeneous solutions therefore,{} it suffices to compute two sets: \indented{3}{1. all minimal inhomogeneous so
933594`--lutions} \indented{3}{2. all minimal homogeneous solutions} the algorithm implemented is a completion procedure,{} which enumerates all solutions in a recursive depth-first-search it can be seen as finding monotone paths in a graph for more details see Reference
933649`\indented{2}{This package provides operations which all take as arguments} direct products of elements of some type \spad{A} and functions from \spad{A} to another type \spad{B}. The operations all iterate over their vector argument and either return a value of type \spad{B} or a direct product over \spad{B}.
933745`DiscreteLogarithmPackage implements help functions for discrete logarithms in monoids using small cyclic groups.
933815`DisplayPackage allows one to print strings in a nice manner,{} including highlighting substrings.
933860`Package for the factorization of a univariate polynomial with coefficients in a finite field. The algorithm used is the "distinct degree" algorithm of Cantor-Zassenhaus,{} modified to use trace instead of the norm and a table for computing Frobenius as suggested by Naudin and Quitte .
933975`A package to compute Jacobi continued fractions of Cauchy transforms.
934071`A package to map distributions between different rings.
934165`Various popular distributions.
934232`A package to apply polynomial transformations to distributions and integrate polynomials with respect to distributions.
934382`\spad{DoubleFloatEllipticIntegrals} implements machine A package for computing machine precision real and complex elliptic integrals,{} using algorithms given by Carlson. Note: Complex versions may misbehave for very large/small arguments and close to branch cuts.
934441`This package provides special functions for double precision real and complex floating point.
934551`This package provides functions for computing the residues of a function on an algebraic curve.
934742`\spadtype{DrawComplex} provides some facilities for drawing complex functions.
934783`Hack for the draw interface. DrawNumericHack provides a "coercion" from something of the form \spad{x = a..b} where \spad{a} and \spad{b} are formal expressions to a binding of the form \spad{x = c..d} where \spad{c} and \spad{d} are the numerical values of \spad{a} and \spad{b}. This "coercion" fails if \spad{a} and \spad{b} contains symbolic variables,{} but is meant for expressions involving \%\spad{pi}.
934853`This package \undocumented{}
934903`This package \undocumented{}
934960`This is a package for the exact computation of eigenvalues and eigenvectors. This package works for matrices with coefficients which are rational functions over a ring where we can factor polynomials. Eigenvalues not in base field are represented by their minimal polynomial.
935010`Provides elementary functions over an integral domain.
935110`\spadtype{ElementaryFunctionDefiniteIntegration} provides functions to compute definite integrals of elementary functions.
935254`\spad{ElementaryFunctionLODESolver} provides the top-level functions for finding closed form solutions of linear ordinary differential equations and initial value problems.
935437`\spad{ElementaryFunctionODESolver} provides the top-level functions for finding closed form solutions of ordinary differential equations and initial value problems.
935568`This package provides functions to determine the sign of an elementary function around a point or infinity.
935688`ElementaryFunctionStructurePackage provides functions to test the algebraic independence of various elementary functions,{} using the Risch structure theorem (real and complex versions). It also provides transformations on elementary functions which are not considered simplifications.
935821`This package provides functions for integration,{} limited integration,{} extended integration and the risch differential equation for elemntary functions.
935934`\indented{1}{Risch differential equation,{} elementary case.} Author: Manuel Bronstein Date Created: 12 August 1992 Keywords: elementary,{} function,{} integration.
936056`Risch differential equation,{} wrapper for extended version.
936175`This package generates exponential integrals corresponding to polynomial part of the integral. \blankline
936298`The elliptic functions \spad{sn},{} \spad{sc} and \spad{dn} are expanded as Taylor series.
936428`This package provides operations for mapping the sides of equations.
936489`ErrorFunctions implements error functions callable from the system interpreter. Typically,{} these functions would be called in user functions. The simple forms of the functions take one argument which is either a string (an error message) or a list of strings which all together make up a message. The list can contain formatting codes (see below). The more sophisticated versions takes two arguments where the first argument is the name of the function from which
936489`-- the error was invoked and the second argument is either a string or a list of strings,{} as above. When you use the one argument version in an interpreter function,{} the system will automatically insert the name of the function as the new first argument. Thus in the user interpreter function \indented{2}{\spad{f x == if x < 0 then error "negative argument" else x}} the call to error will actually be of the form \indented{2}{\spad{error("f",{}"negative argument")}} because the interpreter wil
936489`--l have created a new first argument. \blankline Formatting codes: error messages may contain the following formatting codes (they should either start or end a string or else have blanks around them): \indented{3}{\spad{\%l}\space{6}start a new line} \indented{3}{\spad{\%b}\space{6}start printing in a bold font (where available)} \indented{3}{\spad{\%d}\space{6}stop\space{2}printing in a bold font (where available)} \indented{3}{\spad{ \%ceon}\space{2}start centering message lines} \indented{3}
936489`--{\spad{\%ceoff}\space{2}stop\space{2}centering message lines} \indented{3}{\spad{\%rjon}\space{3}start displaying lines "ragged left"} \indented{3}{\spad{\%rjoff}\space{2}stop\space{2}displaying lines "ragged left"} \indented{3}{\spad{\%i}\space{6}indent\space{3}following lines 3 additional spaces} \indented{3}{\spad{\%u}\space{6}unindent following lines 3 additional spaces} \indented{3}{\spad{\%xN}\space{5}insert \spad{N} blanks (eg,{} \spad{\%x10} inserts 10 blanks)} \blankline
936532`\spadtype{EuclideanGroebnerBasisPackage} computes groebner bases for polynomial ideals over euclidean domains. The basic computation provides a distinguished set of generators for these ideals. This basis allows an easy test for membership: the operation \spadfun{euclideanNormalForm} returns zero on ideal members.
936532`-- The string "info" and "redcrit" can be given as additional args to provide incremental information during the computation. If "info" is given,{} \indented{1}{a computational summary is given for each \spad{s}-polynomial. If "redcrit"} is given,{} the reduced critical pairs are printed. The term ordering is determined by the polynomial type used. Suggested types include \spadtype{DistributedMultivariatePolynomial},{} \spadtype{HomogeneousDistributedMultivariatePolynomial},{} \spadtype{GeneralD
936532`--istributedMultivariatePolynomial}.
936725`This package is to be used in conjuction with \indented{12}{the CycleIndicators package. It provides an evaluation} \indented{12}{function for SymmetricPolynomials.}
936808`This package provides support for exporting SubSpace and ThreeSpace structures to files.
936845`This package provides support for \spad{XML} files
936977`Lifting of maps to Expressions. Date Created: 16 Jan 1989
937062`Solver for linear systems represented as list \indented{1}{of expressions.\space{2}More efficient than using solve because} \indented{1}{it does not check that system really is linear.}
937377`This package allows a map from any expression space into any object to be lifted to a kernel over the expression set,{} using a given property of the operator of the kernel.
937456`This package allows a mapping \spad{E} \spad{->} \spad{F} to be lifted to a kernel over \spad{E}; This lifting can fail if the operator of the kernel cannot be applied in \spad{F}; Do not use this package with \spad{E} = \spad{F},{} since this may drop some properties of the operators.
937546`Taylor series solutions of explicit ODE\spad{'s}.
937647`\spadtype{ExpressionToOpenMath} provides support for converting objects of type \spadtype{Expression} into OpenMath.
937718`This package provides functions to convert functional expressions to power series.
937848`\indented{1}{Author: Clifton \spad{J}. Williamson} Date Created: Bastille Day 1989 Keywords: Examples: Package for constructing tubes around 3-dimensional parametric curves.
937898`computes various functions on factored arguments.
937964`\spadtype{FactoredFunctions2} contains functions that involve factored objects whose underlying domains may not be the same. For example,{} \spadfun{map} might be used to coerce an object of type \spadtype{Factored(Integer)} to \spadtype{Factored(Complex(Integer))}.
938045`\spadtype{FactoredFunctionUtilities} implements some utility functions for manipulating factored objects.
938117`This package provides utilities used by the factorizers which operate on polynomials represented as univariate polynomials with multivariate coefficients.
938251`This is just an interface between several packages and domains. The goal is to compute lexicographical Groebner bases of sets of polynomial with type \spadtype{Polynomial R} by the {\em FGLM} algorithm if this is possible (\spadignore{i.e.} if the input system generates a zero-dimensional ideal).
938327`\indented{1}{Finds the order of a divisor over a finite field} Author: Manuel Bronstein Date Created: 1988
938521`This package provides a mapping function for \spadtype{FiniteAbelianMonoidRing}
938702`\indented{1}{Lift a map to finite divisors.} Author: Manuel Bronstein Date Created: 1988
939056`FiniteFieldFunctions(\spad{GF}) is a package with functions concerning finite extension fields of the finite ground field {\em GF},{} \spadignore{e.g.} Zech logarithms.
939126`FiniteFieldHomomorphisms(\spad{F1},{} \spad{GF},{} \spad{F2}) exports coercion functions of elements between the fields {\em F1} and {\em F2},{} which both must be finite simple algebraic extensions of the finite ground field {\em GF}.
939282`This package provides a number of functions for generating,{} counting and testing irreducible,{} normal,{} primitive,{} random polynomials over finite fields.
939363`\spad{FiniteFieldPolynomialPackage2}(\spad{F},{} \spad{GF}) exports some functions concerning finite fields,{} which depend on a finite field {\em GF} and an algebraic extension \spad{F} of {\em GF},{} \spadignore{e.g.} a zero of a polynomial over {\em GF} in \spad{F}.
939488`This package solves linear diophantine equations for Bivariate polynomials over finite fields
939661`A package for permutation representations of finite groups.
939728`\spad{FiniteLinearAggregateFunctions2} provides functions involving two FiniteLinearAggregates where the underlying domains might be different. An example of this might be creating a list of rational numbers by mapping a function across a list of integers where the function divides each integer by 1000.
939873`This package exports 3 sorting algorithms which work over FiniteLinearAggregates.
939977`\spad{FiniteSetAggregateFunctions2} provides functions involving two finite set aggregates where the underlying domains might be different. An example of this is to create a set of rational numbers by mapping a function across a set of integers,{} where the function divides each integer by 1000.
940119`This package implements arbitrary precision numerical elliptic functions. The method is based on descending Landen transform.
940171`\indented{3}{This is a package for the approximation of complex solutions for} systems of equations of rational functions with complex rational coefficients. The results are expressed as either complex rational numbers or complex floats depending on the type of the precision parameter which can be either a rational number or a floating point number.
940244`\indented{3}{This is a package for the approximation of real solutions for} systems of polynomial equations over the rational numbers. The results are expressed as either rational numbers or floats depending on the type of the precision parameter which can be either a rational number or a floating point number.
940414`\spadtype{FortranCodePackage1} provides some utilities for producing useful objects in FortranCode domain. The Package may be used with the FortranCode domain and its \spad{printCode} or possibly via an outputAsFortran. (The package provides items of use in connection with ASPs in the AXIOM-NAG link and,{} where appropriate,{} naming accords with that in IRENA.) The easy-to-use functions use Fortran loop variables \spad{I1},{} \spad{I2},{} and it is users
940414`--' responsibility to check that this is sensible. The advanced functions use SegmentBinding to allow users control over Fortran loop variable names.
940503`Code to manipulate Fortran Output Stack
940555`provides an interface to the boot code for calling Fortran
940597`\indented{1}{Lifting of morphisms to fractional ideals.} Author: Manuel Bronstein Date Created: 1 Feb 1989 Keywords: ideal,{} algebra,{} module.
940914`This package implements the interpolation algorithm proposed in Beckermann,{} Bernhard and Labahn,{} George,{} Fraction-free computation of matrix rational interpolants and matrix GCDs,{} SIAM Journal on Matrix Analysis and Applications 22.
941039`This package lifts the interpolation functions from \spadtype{FractionFreeFastGaussian} to fractions.
941242`This package extends a map between integral domains to a map between Fractions over those domains by applying the map to the numerators and denominators.
941325`\spad{FramedNonAssociativeAlgebraFunctions2} implements functions between two framed non associative algebra domains defined over different rings. The function map is used to coerce between algebras over different domains having the same structural constants.
941504`A package for mappings between coefficients of free modules over the same base set.
941689`linear extensions of maps on the basis
941817`Provides some special functions over an integral domain.
941918`Lifts a map from rings to function fields over them.
942321`In this package \spad{R} is a Euclidean domain and \spad{F} is a framed algebra over \spad{R}. The package provides functions to compute the integral closure of \spad{R} in the quotient field of \spad{F}. It is assumed that \spad{char(R/P) = char(R)} for any prime \spad{P} of \spad{R}. A typical instance of this is when \spad{R = K[x]} and \spad{F} is a func
942321`--tion field over \spad{R}.
942469`Attaching assertions to symbols for pattern matching; Date Created: 21 Mar 1989
942559`Attaching predicates to symbols for pattern matching. Date Created: 21 Mar 1989
942665`\spadtype{FunctionSpaceComplexIntegration} provides functions for the indefinite integration of complex-valued functions.
942801`This package allows a mapping \spad{R} \spad{->} \spad{S} to be lifted to a mapping from a function space over \spad{R} to a function space over \spad{S}.
942931`\spadtype{FunctionSpaceIntegration} provides functions for the indefinite integration of real-valued functions.
943059`FunctionsSpacePrimitiveElement provides functions to compute primitive elements in functions spaces.
943271`This package provides function which replaces transcendental kernels in a function space by random integers. The correspondence between the kernels and the integers is fixed between calls to newReduc().
943365`computes sums of top-level expressions.
943470`This package converts expressions in some function space to exponential expansions.
943624`This package converts expressions in some function space to power series in a variable \spad
943624`--{x} with coefficients in that function space. The function \spadfun{exprToUPS} converts expressions to power series whose coefficients do not contain the variable \spad{x}. The function \spadfun{exprToGenUPS} converts functional expressions to power series whose coefficients may involve functions of \spad{log(x)}.
944040`This package converts expressions in some function space to power series in a variable \spad{x} with coefficients in
944040`-- that function space. The function \spadfun{exprToUPS} converts expressions to power series whose coefficients do not contain the variable \spad{x}. The function \spadfun{exprToGenUPS} converts functional expressions to power series whose coefficients may involve functions of \spad{log(x)}.
944432`\spadtype{GaloisGroupFactorizationUtilities} provides functions that will be used by the factorizer.
944578`\spadtype{GaloisGroupFactorizer} provides functions to factor resolvents.
944671`\spadtype{GaloisGroupPolynomialUtilities} provides useful functions for univariate polynomials which should be added to \spadtype{UnivariatePolynomialCategory} or to \spadtype{Factored} (July 1994).
944780`\spadtype{GaloisGroupUtilities} provides several useful functions.
944838`Package for the factorization of complex or gaussian integers.
944898`\spad{Gcd} basis provides functions to find structure of multiplicative group (and semigroup) generated by elements of \spad{Gcd} domain.
944958`\indented{1}{Author : \spad{P}.Gianni} General Hensel Lifting Used for Factorization of bivariate polynomials over a finite field.
945070`\indented{2}{This is the top level package for doing multivariate factorization} over basic domains like \spadtype{Integer} or \spadtype{Fraction Integer}.
945256`This package provides operations for \spad{GCD} computations on polynomials
945426`\spadtype{GenerateUnivariatePowerSeries} provides functions that create power series from explicit formulas for their \spad{n}th coefficient.
945555`\indented{1}{Author : \spad{P}.Gianni.} January 1990 The equation \spad{Af+Bg=h} and its generalization to \spad{n} polynomials is solved for solutions over the \spad{R},{} euclidean domain. A table containing the solutions of \spad{Af+Bg=x^k} is used. The operations are performed modulus a prime which are in principle big enough,{} but the solutions are tested and,{} in case of failure,{} a hensel lifting
945555`-- process is used to get to the right solutions. It will be used in the factorization of multivariate polynomials over finite field,{} with \spad{R=F[x]}.
945654`This internal package rationalises integrands on curves of the form: \indented{2}{\spad{y\^2 = a x\^2 + b x + c}} \indented{2}{\spad{y\^2 = (a x + b) / (c x + d)}} \indented{2}{\spad{f(x,{} y) = 0} where \spad{f} has degree 1 in \spad{x}} The rationalization is done for integration,{} limited integration,{} extended integration and the risch differential equation.
945774`This package provides support for gnuplot. These routines generate output files contain gnuplot scripts that may be processed directly by gnuplot. This is especially convenient in the axiom-wiki environment where gnuplot is called from LaTeX via gnuplottex.
945810`Gosper\spad{'s} summation algorithm.
946000`TwoDimensionalPlotSettings sets global flags and constants for 2-dimensional plotting.
946045`GrayCode provides a function for efficiently running through all subsets of a finite set,{} only changing one element by another one.
946081`\spadtype{GroebnerFactorizationPackage} provides the function groebnerFactor" which uses the factorization routines of \Language{} to factor each polynomial under consideration while doing the groebner basis algorithm. Then it writes the ideal as an intersection of ideals determined by the irreducible factors.
946081`-- Note that the whole ring may occur as well as other redundancies. We also use the fact,{} that from the second factor on we can assume that the preceding factors are not equal to 0 and we divide all polynomials under considerations by the elements of this list of "nonZeroRestrictions". The result is a list of groebner bases,{} whose union of solutions of the corresponding systems of equations is the solution of the system of equation corresponding to the input list. The term ordering is deter
946081`--mined by the polynomial type used. Suggested types include \spadtype{DistributedMultivariatePolynomial},{} \spadtype{HomogeneousDistributedMultivariatePolynomial},{} \spadtype{GeneralDistributedMultivariatePolynomial}.
946278`\indented{1}{Author:} Keywords: Description This package provides low level tools for Groebner basis computations
946459`\spadtype{GroebnerPackage} computes groebner bases for polynomial ideals. The basic computation provides a distinguished set of generators for polynomial ideals over fields. This basis allows an easy test for membership: the operation \spadfun{normalForm} returns zero on ideal members. When the provided coefficient domain,{} Dom,{} is not 
946459`--a field,{} the result is equivalent to considering the extended ideal with \spadtype{Fraction(Dom)} as coefficients,{} but considerably more efficient since all calculations are performed in Dom. Additional argument "info" and "redcrit" can be given to provide incremental information during computation. Argument "info" produces a computational summary for each \spad{s}-polynomial. Argument "redcrit" prints out the reduced critical pairs. The term ordering is determined by the polynomial type u
946459`--sed. Suggested types include \spadtype{DistributedMultivariatePolynomial},{} \spadtype{HomogeneousDistributedMultivariatePolynomial},{} \spadtype{GeneralDistributedMultivariatePolynomial}.
946626`\indented{1}{Author : \spad{P}.Gianni,{} Summer \spad{'88},{} revised November \spad{'89}} Solve systems of polynomial equations using Groebner bases Total order Groebner bases are computed and then converted to lex ones This package is mostly intended for internal use.
946713`This package implements guessing of sequences. Packages for the most common cases are provided as \spadtype{GuessInteger},{} \spadtype{GuessPolynomial},{} etc.
946853`This package exports guessing of sequences of rational functions
946904`This package implements guessing GuessExpRat and GuessBinRat functions of guessing package.
947052`This package exports guessing of sequences of numbers in a finite field
947125`This package exports coercion and retraction from EXPR INT to finite fields
947208`This package exports guessing of sequences of rational numbers
947252`This package exports guessing of sequences of rational functions
947304`This package exports coercion and retraction from EXPR INT to polynomials
947366`This package exports guessing of sequences of rational functions over the integers
947419`\indented{1}{Author : Larry Lambe} Date Created : August 1988 Related Constructors: OrderedSetInts,{} Commutator,{} FreeNilpotentLie AMS Classification: Primary 17B05,{} 17B30; Secondary 17A50 Keywords: free Lie algebra,{} Hall basis,{} basic commutators Description : Generate a basis for the free Lie algebra on \spad{n} generators over a ring \spad{R} with identity up to basic commutators of length \spad{c} using the algorithm of \spad{P}. Hall as given in Serre\spad{
947419`--'s} book Lie Groups \spad{
947419`--} Lie Algebras
947454`Package to generate Hankel matrices.
947503`This package provides the functions for the heuristic integer \spad{gcd}. Geddes\spad{'s} algorithm,{} for univariate polynomials with integer coefficients
947580`\indented{2}{This package provides functions for the primary decomposition of} polynomial ideals over the rational numbers. The ideals are members of the \spadtype{PolynomialIdeal} domain,{} and the polynomial generators are required to be from the \spadtype{DistributedMultivariatePolynomial} domain.
947652`This package provides operations to create incrementing functions.
947719`This package computes infinite products of univariate Taylor series
947833`Functions defined on streams with entries in two sets.
947902`Functions defined on streams with entries in two sets.
947980`Default infinity signatures for the interpreter; Date Created: 4 Oct 1989
948020`Factorization of univariate polynomials with coefficients in an algebraic extension of a field over which we can factor UP\spad{'s}.
948190`InnerCommonDenominator provides functions to compute the common denominator of a finite linear aggregate of elements of the quotient field of an integral domain.
948355`This is a package for the exact computation of eigenvalues and eigenvectors. This package works for matrices with coefficients from a field over which we can factor polynomials. Eigenvalues in base field are always explicitly computed while the other are expressed in terms of their minimal polynomial.
948407`\spadtype{InnerMatrixLinearAlgebraFunctions} is an internal package which provides standard linear algebra functions on domains in \spad{MatrixCategory}
948577`\spadtype{InnerMatrixQuotientFieldFunctions} provides functions on matrices over an integral domain which involve the quotient field of that integral domain. The functions rowEchelon and inver
948577`--se return matrices with entries in the quotient field.
948893`This file contains the functions for modular \spad{gcd} algorithm for univariate polynomials with coefficients in a non-trivial euclidean domain (\spadignore{i.e.} not a field). The package parametrised by the coefficient domain,{} the polynomial domain,{} a prime,{} and a function for choosing the next prime
949039`This package solves Hermite-Pade interpolation problem \indented{1}{over ring of integer polynomials.\space{2}We use reduction modulo primes} \indented{1}{and modular reconstruction to reduce problem to polynomials modulo} \indented{1}{\$\spad{Z_p}\$.\space{2}Then we use evaluation and Lagrange interpolation to} \indented{1}{reduce problem to solving over \$\spad{Z_p}\$.}
949092`\indented{2}{This is an inner package for factoring multivariate polynomials} over various coefficient domains in characteristic 0. The univariate factor operation is passed as a parameter. Multivariate hensel lifting is used to lift the univariate factorization
949243`InnerNormalBasisFieldFunctions(\spad{GF}) (unexposed): This package has functions used by every normal basis finite field extension domain.
949325`This package is the inner package to be used by NumericRealEigenPackage and NumericComplexEigenPackage for the computation of numeric eigenvalues and eigenvectors.
949419`This is an internal package for computing approximate solutions to systems of polynomial equations. The parameter \spad{K} specifies the coefficient field of the input polynomials and must be either \spad{Fraction(Integer)} or \spad{Complex(Fraction Integer)}. The parameter \spad{F} specifies where the solutions must lie and can be one of the following: \spad{Float},{} \spad{Fraction(Integer)},{} \spa
949419`--d{Complex(Float)},{} \spad{Complex(Fraction Integer)}. The last parameter specifies the type of the precision operand and must be either \spad{Fraction(Integer)} or \spad{Float}.
949523`Find the sign of a polynomial around a point or infinity.
949614`tools for the summation packages.
949747`This package provides transformations from trigonometric functions to exponentials and logarithms,{} and back. \spad{F} and \spad{FG} should be the same type of function space.
949912`Tools for manipulating input forms.
949969`This package provides functions to lookup bits in integers
950010`The \spadtype{IntegerCombinatoricFunctions} package provides some standard functions in combinatorics.
950092`\indented{1}{This Package contains basic methods for integer factorization.} The factor operation employs trial division up to 10,{} 000. It then tests to see if \spad{n} is a perfect power before using Pollards rho method. Because Pollards method may fail,{} the result of factor may contain composite factors. We should also employ Lenstra\spad{'s} eliptic curve method.
950172`Test for linear dependence over the integers.
950262`This package provides various number theoretic functions on the integers.
950322`The \spadtype{IntegerPrimesPackage} implements a modification of Rabin\spad{'s} probabilistic primality test and the utility functions \spadfun{nextPrime},{} \spadfun{prevPrime} and \spadfun{primes}.
950394`Provides integer testing and retraction functions. Date Created: March 1990
950467`The \spadtype{IntegerRoots} package computes square roots and \indented{2}{\spad{n}th roots of integers efficiently.}
950576`This package provides the implementation for the \spadfun{solveLinearPolynomialEquation} operation over the integers. It uses a lifting technique from the package GenExEuclid
950643`IntegralBasisPolynomialTools provides functions for \indented{1}{mapping functions on the coefficients of univariate and bivariate} \indented{1}{polynomials.}
950795`This package contains functions used in the packages FunctionFieldIntegralBasis and NumberFieldIntegralBasis.
950934`\spadtype{IntegrateSolutions} implements a method \indented{1}{to compute integral of solution of differential operator.}
951053`\indented{1}{Internally used by the integration packages} Author: Manuel Bronstein Date Created: 1987 Keywords: integration.
951125`\indented{2}{This package allows a sum of logs over the roots of a polynomial} \indented{2}{to be expressed as explicit logarithms and arc tangents,{} provided} \indented{2}{that the indexing polynomial can be factored into quadratics.} Date Created: 21 August 1988
951206`This package allows a sum of logs over the roots of a polynomial to be expressed as explicit logarithms and arc tangents,{} provided that the indexing polynomial can be factored into quadratics.
951335`\indented{1}{Tools for the integrator} Author: Manuel Bronstein Date Created: 25 April 1990 Keywords: elementary,{} function,{} integration.
951419`A package to print strings without line-feed nor carriage-return.
951470`\indented{1}{An internal package for computing the rational univariate representation} \indented{1}{of a zero-dimensional algebraic variety given by a square-free} \indented{1}{triangular set.} \indented{1}{The main operation is \spadopFrom{rur}{InternalRationalUni
951470`--variateRepresentationPackage}.} \indented{1}{It is based on the {\em generic} algorithm description in [1]. \newline References:} [1] \spad{D}. LAZARD "Solving Zero-dimensional Algebraic Systems" \indented{4}{Journal of Symbolic Computation,{} 1992,{} 13,{} 117-131}
951713`This package computes the inverse Laplace Transform.
951843`This package exports the function generateIrredPoly that computes a monic irreducible polynomial of degree \spad{n} over a finite field.
951922`IrrRepSymNatPackage contains functions for computing the ordinary irreducible representations of symmetric groups on \spad{n} letters {\em {1,{} 2,{} ...,{} n}} in Young\spad{'s} natural form and their dimensions. These representations can be labelled by number partitions of \spad{n},{} \spadignore{i.e.} a weakly decreasing sequence of integers summing up to \spad{n},{} \spadignore{e.g.} {\em [3,{} 3,{} 3,{} 1]} labels an irreducible representation for \spa
951922`--d{n} equals 10. Note: whenever a \spadtype{List Integer} appears in a signature,{} a partition required.
951969`\spadtype{JetCoordinateTransformation} implements changes of local coordinates. Given are the changes of the coordinates of the base space,{} \spadignore{i.e.} the independent and dependent variables. The transformations of the derivatives are computed via the chain rule. \spad{Y} (\spad{W}) contains expressions for the old variables 
951969`--in terms of the new ones.
952141`\spadtype{JetGroebner} provides a procedure to compute Groebner bases for arbitrary domains of jet polynomials. Two internal procedures transform to and from \spadtype{DistributedJetBundlePolynomial} where the actual computation is done. The argument \spad{LJV} contains all jet variables effectively occurring in the po
952141`--lynomials. The ordering is determined by the ordering in \spad{P}.
952329`This package exports some auxiliary functions on kernels
952404`\spadtype{Kovacic} provides a modified Kovacic\spad{'s} algorithm for solving explicitely irreducible 2nd order linear ordinary differential equations.
952513`This package computes the forward Laplace Transform.
952635`A package for solving polynomial systems by means of Lazard triangular sets [1]. This package provides two operations. One for solving in the sense of the regular zeros,{} and the other for solving in the sense of the Zariski closure. Both produce square-free reg
952635`--ular sets. Moreover,{} the decompositions do not contain any redundant component. However,{} only zero-dimensional regular sets are normalized,{} since normalization may be time consumming in positive dimension. The decomposition process is that of [2].\newline
952880`Package for leading coefficient determination in the lifting step. Package working for every \spad{R} euclidean with property \spad{"F"}. Uses algorithm given in section 3 of \spad{P}. \spad{S}. Wang "An improved multivariate polynomial factoring algorithm",{} Math. of Comput. 32,{} 1978,{} \spad{p}. 1215-\spad{-1231},{} generalized to arbitrary euclidea
952880`--n domain.
953032`A package for solving polynomial systems with finitely many solutions. The decompositions are given by means of regular triangular sets. The computations use lexicographical Groebner bases. The main operations are \spadopFrom{lexTriangular}{LexTriangularPackage} and \spadopFrom{squareFreeLexTriangular}{LexTriangularPackage}. The second one provide decompositions by means of square-free regular triangular sets. Both are ba
953032`--sed on the {\em lexTriangular} method described in [1]. They differ from the algorithm described in [2] by the fact that multiciplities of the roots are not kept. With the \spadopFrom{squareFreeLexTriangular}{LexTriangularPackage} operation all multiciplities are removed. With the other operation some multiciplities may remain. Both operations admit an optional argument to produce normalized triangular sets. \newline
953214`Test for linear dependence.
953311`\spad{LinearOrdinaryDifferentialOperator3Aux} is \indented{1}{a helper for \spad{LinearOrdinaryDifferentialOperator3}} \indented{1}{defining appropriate derivative.}
953477`\spadtype{LinearOrdinaryDifferentialOperatorFactorizer2} provides a factorizer for linear ordinary differential operators whose coefficients are rational functions.
953591`\spadtype{LinearOrdinaryDifferentialOperatorFactorizer} provides a factorizer for linear ordinary differential operators whose coefficients are rational functions.
953722`\spad{LinearOrdinaryDifferentialOperatorsOps} provides symmetric products and sums for linear ordinary differential operators.
953851`Given a PolynomialFactorizationExplicit ring,{} this package provides a defaulting rule for the \spad{solveLinearPolynomialEquation} operation,{} by moving into the field of fractions,{} and solving it there via the \spad{multiEuclidean} operation.
953951`This package solves linear system in the matrix form \spad{AX = B}. It is essentially a particular instantiation of the package \spadtype{LinearSystemMatrixPackage} for Matrix and Vector. This package\spad{'s} existence makes it easier to use \spadfun{solve} in the FriCAS interpreter.
954014`This package solves linear system in the matrix form \spad{AX = B}.
954193`this package finds the solutions of linear systems presented as a list of polynomials.
954345`\indented{1}{Given a Groebner basis \spad{B} with respect to the total degree ordering for a} zero-dimensional ideal \spad{I},{} compute a Groebner basis with respect to the lexicographical ordering by using linear algebra. This is an internal package,{} operations in this package may crash the system on invalid input.
954423`This package provides liouvillian functions over an integral domain.
954524`\spadtype{ListFunctions2} implements utility functions that operate on two kinds of lists,{} each with a possibly different type of element.
954583`\spadtype{ListFunctions3} implements utility functions that operate on three kinds of lists,{} each with a possibly different type of element.
954651`\spadtype{ListToMap} allows mappings to be described by a pair of lists of equal lengths. The image of an element \spad{x},{} which appears in position \spad{n} in the first list,{} is then the \spad{n}th element of the second list. A default value or default function can be specified to be used when \spad{x} does not appear in the first list. In the absence of defaults,{} an error will occur in that case.
954715`\spadtype{LODOConvertions} implements convertion between \indented{1}{\spadtype{LinearOrdinaryDifferentialOperator1} and} \indented{1}{\spadtype{LinearOrdinaryDifferentialOperator3} and back.}
954860`\spadtype{LUDecomposition} contains procedures to solve linear systems of equations or to compute inverses using a LU decomposition.
954910`transforms top-level objects into compiled functions.
955026`MakeFloatCompiledFunction transforms top-level objects into compiled Lisp functions whose arguments are Lisp floats. This by-passes the \Language{} compiler and interpreter,{} thereby gaining several orders of magnitude.
955109`transforms top-level objects into interpreter functions.
955178`MakeRecord is used internally by the interpreter to create record types which are used for doing parallel iterations on streams.
955236`transforms top-level objects into compiled functions.
955338`various Currying operations.
955398`various Currying operations.
955474`various Currying operations.
955566`various Currying operations.
955640`various Currying operations.
955730`various Currying operations.
955836`\spadtype{MatrixCategoryFunctions2} provides functions between two matrix domains. The functions provided are \spadfun{map} and \spadfun{reduce}.
956153`MatrixCommonDenominator provides functions to compute the common denominator of a matrix of elements of the quotient field of an integral domain.
956253`\spadtype{MatrixLinearAlgebraFunctions} provides functions to compute inverses and canonical forms.
956427`Some functions for manipulating (dense) matrices. Supported are various kinds of slicing,{} splitting and stacking of matrices. The functions resemble operations often used in numerical linear algebra algorithms.
956591`This package exports tools for merging lists
956644`\indented{1}{Author: Jim Wen} Keywords: Examples: References:
956710`This package computes \spad{gcd} over field of algebraic \indented{1}{functions over \spad{Q} using modular method based on \spad{M}. Monagan and} \indented{1}{van Hoej paper.} \indented{1}{Core modular operations are passed as parameter (MO) to this} \indented{1}{package.\space{2}Similarly,{} evaluation functions are passed as} \
956710`--indented{1}{parameter ME.}
956886`ModularAlgebraicGcd(\spad{MPT},{} \spad{MD},{} MO) is a compatibility \indented{1}{wrapper around \spad{ModularAlgebraicGcd2}.}
957019`This package supports factorization and gcds of univariate polynomials over the integers modulo different primes. The inputs are given as polynomials over the integers with the prime passed explicitly as an extra argument.
957121`This package provides modular Hermite-Pade solvers \indented{1}{for a few rings.\space{2}Solver over integers is implemented in this} \indented{1}{package.\space{2}Also it contains interfaces to solver over \$\spad{Z_p}\$ and} \indented{1}{solver over ring of integer polynomials.}
957168`This package provides generic interface to modular \indented{1}{Hermite-Pade solver.}
957260`\indented{1}{Modular hermitian row reduction.} Author: Manuel Bronstein Date Created: 22 February 1989 Keywords: matrix,{} reduction.
957338`An auxiliary package for various moment and cumulant transformations used in \spad{Distribution}.
957399`\spad{MonoidRingFunctions2} implements functions between two monoid rings defined with the same monoid over different rings.
957474`Tools for handling monomial extensions.
957576`\spadtype{MoreSystemCommands} implements an interface with the system command facility. These are the commands that are issued from source files or the system interpreter and they start with a close parenthesis,{} \spadignore{e.g.} \spadsyscom{what} commands.
957625`\indented{1}{Utilities for MPolyCat} Author: Manuel Bronstein Date Created: 1987
957850`This package \undocumented
958089`\indented{3}{This package exports a factor operation for multivariate polynomials} with coefficients which are polynomials over some ring \spad{R} over which we can factor. It is used internally by packages such as the solve package which need to work with polynomials in a specific set of variables with coefficients which are polynom
958089`--ials in all the other variables.
958262`\indented{3}{This package exports a factor operation for multivariate polynomials} with coefficients which are rational functions over some ring \spad{R} over which we can factor. It is used internally by packages such as primary decomposition which need to work with polynomials with rational function coefficient
958262`--s,{} \spadignore{i.e.} themselves fractions of polynomials.
958456`\indented{1}{MRationalFactorize contains the factor function for multivariate} polynomials over the quotient field of a ring \spad{R} such that the package MultivariateFactorize can factor multivariate polynomials over \spad{R}.
958621`Compute limits using Gruntz-Gonnet \spad{MRV} algorithm
958666`Package for factorization of multivariate polynomials over finite fields.
958819`Lifting of a map through 2 levels of polynomials.
959142`\indented{1}{\spadtype{MultiVariableCalculusFunctions} Package provides several} \indented{1}{functions for multivariable calculus.} These include gradient,{} hessian and jacobian,{} divergence and laplacian. Various forms for banded and sparse storage of matrices are included.
959320`\indented{2}{This is the top level package for doing multivariate factorization} over basic domains like \spadtype{Integer} or \spadtype{Fraction Integer}.
959479`This package provides the functions for the multivariate "lifting",{} using an algorithm of Paul Wang. This package will work for every euclidean domain \spad{R} which has property \spad{F},{} \spadignore{i.e.} there exists a factor operation in \spad{R[x]}.
959622`Author : \spad{P}.Gianni This package provides the functions for the computation of the square free decomposition of a multivariate polynomial. It uses the package GenExEuclid for the resolution of the equation \spad{Af + Bg = h} and its generalization to \spad{n} polynomials over an integral domain and the package \spad{MultivariateLifting} for the "multi
959622`--variate" lifting.
959772`This package solves (multipoint) Hermite-Pade \indented{1}{interpolation problem over \$\spad{Z_p}\$,{} where \$\spad{p}\$ is machine} \indented{1}{sized prime.\space{2}We use quadratic algorithm from 94} \indented{1}{Beckermann and Labahn paper (with modification to handle} \indented{1}{multipoint case).}
959828`This package lifts a mapping from coefficient rings \spad{R} to \spad{S} to a mapping from sparse univariate polynomial over \spad{R} to a sparse univariate polynomial over \spad{S}. Note that the mapping is assumed to send zero to zero,{} since it will only be applied to the non-zero coefficients of the polynomial.
959912`This package exports Newton interpolation for the special case where the result is known to be in the original integral domain
959978`This is package computes noncommutative Groebner basis. Based on commutative version. Note that this package accepts rings as base domain,{} however computed basis is over left fraction field. Computations are done in fraction free way (coefficients stay in base ring).
960164`\spadtype{NoneFunctions1} implements functions on \spadtype{None}. It particular it includes a particulary dangerous coercion from any other type to \spadtype{None}.
960214`NonLinearFirstOrderODESolver provides a function for finding closed form first integrals of nonlinear ordinary differential equations of order 1.
960346`NonLinearSolvePackage is an interface to \spadtype{SystemSolvePackage} that attempts to retract the coefficients of the equations before solving. The solutions are given in the algebraic closure of \spad{R} whenever possible.
960415`A package for computing normalized assocites of univariate polynomials with coefficients in a tower of simple extensions of a field.\newline
960605`This package implements the norm of a polynomial with coefficients in a monogenic algebra (using resultants)
960784`This package \undocumented
961009`Package for the determination of the coefficients in the lifting process. Used by \spadtype{MultivariateLifting}. This package will work for every integral domain \spad{R} which has property \spad{F},{} \spadignore{i.e.} there exists a factor operation in \spad{R[x]}.
961175`In this package \spad{F} is a framed algebra over the integers (typically \spad{F = Z[a]} for some algebraic integer a). The package provides functions to compute the integral closure of \spad{Z} in the quotient field of \spad{F}.
961303`NumberFormats provides function to format and read arabic and roman numbers,{} to convert numbers to strings and to read floating-point numbers.
961346`This package provides polynomials as functions on a ring.
961429`Numeric provides real and complex numerical evaluation functions for various symbolic types.
961490`This package is a suite of functions for the numerical integration of an ordinary differential equation of \spad{n} variables: \blankline \indented{8}{\center{dy/dx = \spad{f}(\spad{y},{} \spad{x})\space{5}\spad{y} is an \spad{n}-vector}} \blankline \par All the routines are based on a 4-th order Runge-Kutta kernel. These routines generally have as arguments: \spad{n},{} the number of dependent variables; \spad{x1},{} the initial point;
961490`-- \spad{h},{} the step size; \spad{y},{} a vector of initial conditions of length \spad{n} which upon exit contains the solution at \spad{x1 + h}; \spad{derivs},{} a function which computes the right hand side of the ordinary differential equation: \spad{derivs(dydx,{} y,{} x)} computes \spad{dydx},{} a vector which contains the derivative information. \blankline \par In order of increasing complexity: \begin{items} \blankline \item \spad{rk4(y,{} n,{} x1,{} h,{} derivs)} advances the solution 
961490`--vector to \spad{x1 + h} and return the values in \spad{y}. \blankline \item \spad{rk4(y,{} n,{} x1,{} h,{} derivs,{} t1,{} t2,{} t3,{} t4)} is the same as \spad{rk4(y,{} n,{} x1,{} h,{} derivs)} except that you must provide 4 scratch arrays \spad{t1}-\spad{t4} of size \spad{n}. \blankline \item Starting with \spad{y} at \spad{x1},{} \spad{rk4f(y,{} n,{} x1,{} x2,{} ns,{} derivs)} uses \spad{ns} fixed steps of a 4-th order Runge-Kutta integrator to advance the solution vector to \spad{x2} and r
961490`--eturn the values in \spad{y}. Argument \spad{x2},{} is the final point,{} and \spad{ns},{} the number of steps to take. \blankline \item \spad{rk4qc(y,{} n,{} x1,{} step,{} eps,{} yscal,{} derivs)} takes a 5-th order Runge-Kutta step with monitoring of local truncation to ensure accuracy and adjust stepsize. The function takes two half steps and one full step and scales the difference in solutions at the final point. If the error is within \spad{eps},{} the step is taken and the result is retu
961490`--rned. If the error is not within \spad{eps},{} the stepsize if decreased and the procedure is tried again until the desired accuracy is reached. Upon input,{} an trial step size must be given and upon return,{} an estimate of the next step size to use is returned as well as the step size which produced the desired accuracy. The scaled error is computed as \center{\spad{error = MAX(ABS((y2steps(i) - y1step(i))/yscal(i)))}} and this is compared against \spad{eps}. If this is greater than \spad{e
961490`--ps},{} the step size is reduced accordingly to \center{\spad{hnew = 0.9 * hdid * (error/eps)^(-1/4)}} If the error criterion is satisfied,{} then we check if the step size was too fine and return a more efficient one. If \spad{error > \spad{eps} * (6.0E-04)} then the next step size should be \center{\spad{hnext = 0.9 * hdid * (error/\spad{eps})^(\spad{-1/5})}} Otherwise \spad{hnext = 4.0 * hdid} is returned. A more detailed discussion of this and related topics can be found in the book "Numeri
961490`--cal Recipies" by \spad{W}.Press,{} \spad{B}.\spad{P}. Flannery,{} \spad{S}.A. Teukolsky,{} \spad{W}.\spad{T}. Vetterling published by Cambridge University Press. Argument \spad{step} is a record of 3 floating point numbers \spad{(to_try ,{} did ,{} next)},{} \spad{eps} is the required accuracy,{} \spad{yscal} is the scaling vector for the difference in solutions. On input,{} \spad{step.to_try} should be the guess at a step size to achieve the accuracy. On output,{} \spad{step.did} contains the
961490`-- step size which achieved the accuracy and \spad{step.next} is the next step size to use. \blankline \item \spad{rk4qc(y,{} n,{} x1,{} step,{} eps,{} yscal,{} derivs,{} t1,{} t2,{} t3,{} t4,{} t5,{} t6,{} t7)} is the same as \spad{rk4qc(y,{} n,{} x1,{} step,{} eps,{} yscal,{} derivs)} except that the user must provide the 7 scratch arrays \spad{t1-t7} of size \spad{n}. \blankline \item \spad{rk4a(y,{} n,{} x1,{} x2,{} eps,{} h,{} ns,{} derivs)} is a driver program which uses \spad{rk4qc} to in
961490`--tegrate \spad{n} ordinary differential equations starting at \spad{x1} to \spad{x2},{} keeping the local truncation error to within \spad{eps} by changing the local step size. The scaling vector is defined as \center{\spad{yscal(i) = abs(y(i)) + abs(h*dydx(i)) + tiny}} where \spad{y(i)} is the solution at location \spad{x},{} \spad{dydx} is the ordinary differential equation\spad{'s} right hand side,{} \spad{h} is the current step size and \spad{tiny} is 10 times the smallest positive number r
961490`--epresentable. The user must supply an estimate for a trial step size and the maximum number of calls to \spad{rk4qc} to use. Argument \spad{x2} is the final point,{} \spad{eps} is local truncation,{} \spad{ns} is the maximum number of call to \spad{rk4qc} to use. \end{items}
961558`This suite of routines performs numerical quadrature using algorithms derived from the basic trapezoidal rule. Because the error term of this rule contains only even powers of the step size (for open and closed versions),{} fast convergence can be obtained if the integrand is sufficiently smooth. \blankline Each routine returns a Record of type TrapAns,{} which contains\indent{3} \newline value (\spadtype{Float}): \tab{20} estimate of the integral \newli
961558`--ne error (\spadtype{Float}): \tab{20} estimate of the error in the computation \newline totalpts (\spadtype{Integer}): \tab{20} total number of function evaluations \newline success (\spadtype{Boolean}): \tab{20} if the integral was computed within the user specified error criterion \indent{0}\indent{0} To produce this estimate,{} each routine generates an internal sequence of sub-estimates,{} denoted by {\em S(i)},{} depending on the routine,{} to which the various convergence criteria are ap
961558`--plied. The user must supply a relative accuracy,{} \spad{eps_r},{} and an absolute accuracy,{} \spad{eps_a}. Convergence is obtained when either \center{\spad{ABS(S(i) - S(i-1)) < eps_r * ABS(S(i-1))}} \center{or \spad{ABS(S(i) - S(i-1)) < eps_a}} are \spad{true} statements. \blankline The routines come in three families and three flavors: \newline\tab{3} closed: \tab{20}romberg,{} \tab{30}simpson,{} \tab{42}trapezoidal \newline\tab{3} open: \tab{20}rombergo,{} \tab{30}simpsono,{} \tab{42}trap
961558`--ezoidalo \newline\tab{3} adaptive closed: \tab{20}aromberg,{} \tab{30}asimpson,{} \tab{42}atrapezoidal \par The {\em S(i)} for the trapezoidal family is the value of the integral using an equally spaced absicca trapezoidal rule for that level of refinement. \par The {\em S(i)} for the simpson family is the value of the integral using an equally spaced absicca simpson rule for that level of refinement. \par The {\em S(i)} for the romberg family is the estimate of the integral using an equally s
961558`--paced absicca romberg method. For the \spad{i}\spad{-}th level,{} this is an appropriate combination of all the previous trapezodial estimates so that the error term starts with the \spad{2*(i+1)} power only. \par The three families come in a closed version,{} where the formulas include the endpoints,{} an open version where the formulas do not include the endpoints and an adaptive version,{} where the user is required to input the number of subintervals over which the appropriate closed famil
961558`--y integrator will apply with the usual convergence parmeters for each subinterval. This is useful where a large number of points are needed only in a small fraction of the entire domain. \par Each routine takes as arguments: \newline \spad{f}\tab{10} integrand \newline a\tab{10} starting point \newline \spad{b}\tab{10} ending point \newline \spad{eps_r}\tab{10} relative error \newline \spad{eps_a}\tab{10} absolute error \newline \spad{nmin} \tab{10} refinement level when to start checking for 
961558`--convergence (> 1) \newline \spad{nmax} \tab{10} maximum level of refinement \par The adaptive routines take as an additional parameter \newline \spad{nint}\tab{10} the number of independent intervals to apply a closed \indented{1}{family integrator of the same name.} \par Notes: \newline Closed family level \spad{i} uses \spad{1 + 2^i} points. \newline Open family level \spad{i} uses \spad{1 + 3^i} points.
961608`This package computes explicitly eigenvalues and eigenvectors of matrices with entries over the complex rational numbers. The results are expressed either as complex floating numbers or as complex rational numbers depending on the type of the precision parameter.
961682`\spadtype{NumericContinuedFraction} provides functions \indented{2}{for converting floating point numbers to continued fractions.}
961760`This package computes explicitly eigenvalues and eigenvectors of matrices with entries over the Rational Numbers. The results are expressed as floating numbers or as rational numbers depending on the type of the parameter Par.
961831`\indented{1}{Author: Clifton \spad{J}. Williamson} Date Created: Bastille Day 1989 Keywords: Examples: Package for constructing tubes around 3-dimensional parametric curves.
961911`\spad{OctonionCategoryFunctions2} implements functions between two octonion domains defined over different rings. The function map is used to coerce between octonion types.
962056`\spadtype{ODEIntegration} provides an interface to the integrator. This package is intended for use by the differential equations solver but not at top-level.
962175`\spad{ODETools} provides tools for the linear ODE solver.
962281`\indented{1}{This package provides tools for operating on one-dimensional arrays} with unary and binary functions involving different underlying types
962357`Lifting of maps to one-point completions. Date Created: 4 Oct 1989
962447`\spadtype{OpenMathPackage} provides some simple utilities to make reading OpenMath objects easier.
962491`\spadtype{OpenMathServerPackage} provides the necessary operations to run AXIOM as an OpenMath server,{} reading/writing objects to/from a port. Please note the facilities available here are very basic. The idea is that a user calls \spadignore{e.g.} \spad{Omserve(4000,{} 60)} and then another process sends OpenMath objects to port 4000 and reads the result.
962544`This package exports tools to create FriCAS Library information databases.
962590`Lifting of maps to ordered completions. Date Created: 4 Oct 1989
962679`\indented{3}{This package provides ordering functions on vectors which} are suitable parameters for OrderedDirectProduct.
962880`This package provides orthogonal polynomials as functions on a ring.
962997`OutPackage allows pretty-printing from programs.
963037`\indented{1}{This package computes reliable Pad&ea. approximants using} a generalized Viskovatov continued fraction algorithm. Authors: Trager,{} Burge,{} Hassner & Watt. Date Created: April 1987 Keywords: Pade,{} series Examples: References: \indented{2}{"Pade Approximants,{} Part I: Basic Theory",{} Baker & Graves-Morris.}
963119`\indented{1}{This package computes reliable Pad&ea. approximants using} a generalized Viskovatov continued fraction algorithm. Authors: Burge,{} Hassner & Watt. Date Created: April 1987 Keywords: Pade,{} series Examples: References: \indented{2}{"Pade Approximants,{} Part I: Basic Theory",{} Baker & Graves-Morris.}
963251`In this package \spad{K} is a finite field,{} \spad{R} is a ring of univariate polynomials over \spad{K},{} and \spad{F} is a monogenic algebra over \spad{R}. We require that \spad{F} is monogenic,{} \spadignore{i.e.} that \spad{F = K[x,{} y]/(f(x,{} y))},{} because the integral basis algorithm used will factor the p
963251`--olynomial \spad{f(x,{} y)}. The package provides a function to compute the integral closure of \spad{R} in the quotient field of \spad{F} as well as a function to compute a "local integral basis" at a specific prime.
963441`This package implements fixed-point computations on streams.
963738`This package completely solves a parametric linear system of equations by decomposing the set of all parametric values for which the linear system is consistent into a union of quasi-algebraic sets (which need not be irredundant,{} but most of the time is). Each quasi-algebraic set is described by a list of polynomials 
963738`--that vanish on the set,{} and a list of polynomials that vanish at no point of the set. For each quasi-algebraic set,{} the solution of the linear system is given,{} as a particular solution and a basis of the homogeneous system. The parametric linear system should be given in matrix form,{} with a coefficient matrix and a right hand side vector. The entries of the coefficient matrix and right hand side vector should be polynomials in the parametric variables,{} over a Euclidean domain of char
963738`--acteristic zero. \blankline If the system is homogeneous,{} the right hand side need not be given. The right hand side can also be replaced by an indeterminate vector,{} in which case,{} the conditions required for consistency will also be given.
963925`This package \undocumented
964117`This package \undocumented
964199`This package \undocumented
964493`The package \spadtype{PartialFractionPackage} gives an easier to use interfact the domain \spadtype{PartialFraction}. The user gives a fraction of polynomials,{} and a variable and the package converts it to the proper datatype for the \spadtype{PartialFraction} domain.
964669`PartitionsAndPermutations contains functions for generating streams of integer partitions,{} and streams of sequences of integers composed from a multi-set.
964726`A package for weighted Motzkin paths over a ring.
964780`Tools for patterns.
964852`Lifts maps to patterns.
964931`This package provides the top-level pattern macthing functions.
965073`Attaching assertions to symbols for pattern matching. Date Created: 21 Mar 1989
965124`This package provides pattern matching functions on function spaces.
965253`This package provides pattern matching functions on integers.
965335`\spadtype{PatternMatchIntegration} provides functions that use the pattern matcher to find some indefinite and definite integrals involving special functions and found in the literature.
965451`This package provides pattern matching functions on kernels.
965542`This package provides pattern matching functions on lists.
965659`This package provides pattern matching functions on polynomials.
965838`This packages provides tools for matching recursively in type towers.
965954`This package provides pattern matching functions on quotients.
966092`Lifts maps to pattern matching results.
966197`This package provides pattern matching functions on symbols.
966258`This package provides tools for the pattern matcher.
966366`Permanent implements the functions {\em permanent},{} the permanent for square matrices.
966442`PermutationGroupExamples provides permutation groups for some classes of groups: symmetric,{} alternating,{} dihedral,{} cyclic,{} direct products of cyclic,{} which are in fact the finite abelian groups of symmetric groups called Young subgroups. Furthermore,{} Rubik\spad{'s} group as permutation group of 48 integers and a list of sporadic simple groups derived from the atlas of finite groups.
966493`\indented{1}{Provides a coercion from the symbolic fractions in \%\spad{pi} with} integer coefficients to any Expression type. Date Created: 21 Feb 1990
966559`\spad{PlotFunctions1} provides facilities for plotting curves where functions \spad{SF} \spad{->} \spad{SF} are specified by giving an expression
966629`This package exports plotting tools
966670`This package \undocumented
966735`This package \undocumented
966784`This package provides function for testing whether a divisor on a curve is a torsion divisor.
967007`This package provides function for testing whether a divisor on a curve is a torsion divisor.
967222`\indented{1}{Utilities for PFOQ and PFO} Author: Manuel Bronstein Date Created: 25 Aug 1988
967385`Package with the conversion functions among different kind of polynomials
967450`Groebner functions for \spad{P} \spad{F} \indented{2}{This package is an interface package to the groebner basis} package which allows you to compute groebner bases for polynomials in either lexicographic ordering or total degree ordering refined by reverse lex. The input is the ordinary polynomial type which is internally converted to a type with the required ordering. The resulting grobner basis is converted back to ordinary polynomials. The orderi
967450`--ng among the variables is controlled by an explicit list of variables which is passed as a second argument. The coefficient domain is allowed to be any \spad{gcd} domain,{} but the groebner basis is computed as if the polynomials were over a field.
967504`This package provides a coerce from polynomials over algebraic numbers to \spadtype{Expression AlgebraicNumber}.
967559`This package provides a very general map function,{} which given a set \spad{S} and polynomials over \spad{R} with maps from the variables into \spad{S} and the coefficients into \spad{S},{} maps polynomials into \spad{S}. \spad{S} is assumed to support \spad{+},{} \spad{*} and \spad{^}.
967746`This package transforms multivariate polynomials or fractions into univariate polynomials or fractions,{} and back.
967915`PolynomialCommonDenominator provides \indented{1}{functions to compute and clear the common denominator of the} \indented{1}{coefficients of polynomials over the quotient field.}
968107`This package \undocumented
968199`This package \undocumented
968296`This package implements evaluation functions \indented{1}{useful for modular algoritms.\space{2}Computations work} \indented{1}{on integer polynomials,{} but most is done modulo a prime} \indented{1}{which is a provided via parameters,{} either explicitely or} \indented{1}{trough a state parameter (state also caches needed\space{2}buffers).} \indented{1}{Some functions work on fractions.\space{2}To avoid useless \spad{GCD}} \indented{1}{computa
968296`--tions during evaluation fractions may be represented} \indented{1}{as a record.}
968356`PolynomialFactorizationByRecursion(\spad{R},{} \spad{E},{} \spad{VarSet},{} \spad{S}) is used for factorization of sparse univariate polynomials over a domain \spad{S} of multivariate polynomials over \spad{R}.
968542`\indented{2}{This package takes a mapping between coefficient rings,{} and lifts} it to a mapping between polynomials over those rings.
968607`\indented{2}{This package computes multivariate polynomial \spad{gcd}\spad{'s} using} a hensel lifting strategy. The contraint on the coefficient domain is imposed by the lifting strategy. It is assumed that the coefficient domain has the property that almost all specializations preserve the degree of the \spad{gcd}.
968751`This package exports interpolation algorithms
968825`This package exports interpolation algorithms
968936`This package provides various polynomial number theoretic functions over the integers.
969113`computes \spad{n}-th roots of quotients of multivariate polynomials
969272`This package provides modest routines for polynomial system solving. The aim of many of the operations of this package is to remove certain factors in some polynomials in order to avoid unnecessary computations in algorithms involving splitting techniques by partial factorization.
969432`This package factors the formulas out of the general solve code,{} allowing their recursive use over different domains. Care is taken to introduce few radicals so that radical extension domains can more easily simplify the results.
969544`This package computes square-free decomposition of multivariate polynomials over a coefficient ring which is an arbitrary \spad{gcd} domain. The requirement on the coefficient domain guarantees that the \spadfun{content} can be removed so that factors will be primitive as well as square-free. Over an infinite ring of finite characteristic,{} it may not
969544`-- be possible to guarantee that the factors are square-free.
969698`This package is primarily to help the interpreter do coercions. It allows you to view a polynomial as a univariate polynomial in one of its variables with coefficients which are again a polynomial in all the other variables.
969779`PowerSeriesLimitPackage implements limits of expressions in one or more variables as one of the variables approaches a limiting value. Included are two-sided limits,{} left- and right- hand limits,{} and limits at plus or minus infinity.
969898`\spadtype{PrecomputedAssociatedEquations} stores some generic precomputations which speed up the computations of the associated equations needed for factoring operators.
970029`This is unfinished package for computing primitive \indented{1}{\spad{gcd} over algebraic extensions.\space{2}Algebraic extension is defined} \indented{1}{by list of polynomial forming triangular system.} \indented{1}{Currently implemented is only trial division.}
970067`\indented{1}{This package provides tools for operating on primitive arrays} with unary and binary functions involving different underlying types
970139`PrimitiveElement provides functions to compute primitive elements in algebraic extensions.
970204`\spad{PrimitiveRatDE} provides functions for in-field solutions of linear \indented{1}{ordinary differential equations,{} in the transcendental case.} \indented{1}{The derivation to use is given by the parameter \spad{L}.}
970421`In-field solution of Riccati equations,{} primitive case.
970639`PrintPackage provides a print function for output forms.
970680`PseudoLinearNormalForm provides a function for computing a block-companion form for pseudo-linear operators.
970742`This package contains some functions: \spadopFrom{discriminant}{PseudoRemainderSequence},{} \spadopFrom{resultant}{PseudoRemainderSequence},{} \spadopFrom{subResultantGcd}{PseudoRemainderSequence},{} \spadopFrom{chainSubResultants}{PseudoRemainderSequence},{} \spadopFrom{degreeSubResultant}{PseudoRemainderSequence},{} \spadopFrom{lastSubResultant}{PseudoRemainderSequence},{} \spadopFrom{resulta
970742`--ntEuclidean}{PseudoRemainderSequence},{} \spadopFrom{subResultantGcdEuclidean}{PseudoRemainderSequence},{} \spadopFrom{\spad{semiSubResultantGcdEuclidean1}}{PseudoRemainderSequence},{} \spadopFrom{\spad{semiSubResultantGcdEuclidean2}}{PseudoRemainderSequence},{} etc. This procedures are coming from improvements of the subresultants algorithm. \indented{2}{Version: 7} \indented{2}{References: Lionel Ducos "Optimizations of the subresultant algorithm"} \indented{2}{to appear in the Journal of Pu
970742`--re and Applied Algebra.} \indented{2}{Author: Ducos Lionel \spad{Lionel.Ducos@mathlabo.univ-poitiers.fr}}
970853`This package provides functions for integration,{} limited integration,{} extended integration and the risch differential equation for pure algebraic integrands.
970978`In-field solution of an linear ordinary differential equation,{} pure algebraic case.
971173`This package \undocumented{}
971328`\spadtype{QuasiAlgebraicSet2} adds a function \spadfun{radicalSimplify} which uses \spadtype{IdealDecompositionPackage} to simplify the representation of a quasi-algebraic set. A quasi-algebraic set is the intersection of a Zariski closed set,{} defined as the common zeros of a given list of polynomials (the defining polynomials for equations),{} and a principal Zariski open set,{} defined as the complement of the common zeros of a polyno
971328`--mial \spad{f} (the defining polynomial for the inequation). Quasi-algebraic sets are implemented in the domain \spadtype{QuasiAlgebraicSet},{} where two simplification routines are provided: \spadfun{idealSimplify} and \spadfun{simplify}. The function \spadfun{radicalSimplify} is added for comparison study only. Because the domain \spadtype{IdealDecompositionPackage} provides facilities for computing with radical ideals,{} it is necessary to restrict the ground ring to the domain \spadtype{Fra
971328`--ction Integer},{} and the polynomial ring to be of type \spadtype{DistributedMultivariatePolynomial}. The routine \spadfun{radicalSimplify} uses these to compute groebner basis of radical ideals and is inefficient and restricted when compared to the two in \spadtype{QuasiAlgebraicSet}.
971394`A package for removing redundant quasi-components and redundant branches when decomposing a variety by means of quasi-components of regular triangular sets. \newline
971586`\spadtype{QuaternionCategoryFunctions2} implements functions between two quaternion domains. The function \spadfun{map} is used by the system interpreter to coerce between quaternion types.
971738`This package extends a function between integral domains to a mapping between their quotient fields.
971895`Package for the computation of eigenvalues and eigenvectors. This package works for matrices with coefficients which are rational functions over the integers. (see \spadtype{Fraction Polynomial Integer}). The eigenvalues and eigenvectors are expressed in terms of radicals.
971941`This package tries to find solutions expressed in terms of radicals for systems of equations of rational functions with coefficients in an integral domain \spad{R}.
972020`This package provides tools for creating radix expansions.
972065`This package exports random distributions
972127`This package exports random floating-point distributions
972181`This package exports integer distributions
972237`Random number generators \indented{1}{All random numbers used in the system should originate from} \indented{1}{the same generator.\space{2}This package is intended to be the source.}
972286`\indented{1}{Author: \spad{P}. Gianni} Factorization of extended polynomials with rational coefficients. This package implements factorization of extended polynomials whose coefficients are rational numbers. It does this by taking the \spad{lcm} of the coefficients of the polynomial and creating a polynomial with integer coefficients. The algorithm in \spadtype{GaloisGroupFactorizer} is then used to factor
972286`-- the integer polynomial. The result is normalized with respect to the original \spad{lcm} of the denominators. Keywords: factorization,{} hensel,{} rational number
972385`Utilities that provide the same top-level manipulations on fractions than on polynomials.
972444`\spadtype{RationalFunctionDefiniteIntegration} provides functions to compute definite integrals of rational functions.
972539`Factorization of univariate polynomials with coefficients which are rational functions with integer coefficients.
972654`\spadtype{RationalFunctionFactorizer} contains the factor function (called factorFraction) which factors fractions of polynomials by factoring the numerator and denominator. Since any non zero fraction is a unit the usual factor operation will just return the original fraction.
972730`This package provides functions for the integration of rational functions.
972813`Computation of limits for rational functions.
972884`Find the sign of a rational function around a point or infinity.
972946`Computes sums of rational functions.
973021`This package provides functions for the base case of the Risch algorithm.
973128`This package exports rational interpolation algorithms
973200`\spad{RationalLODE} provides functions for in-field solutions of linear \indented{1}{ordinary differential equations,{} in the rational case.}
973300`rational number testing and retraction functions. Date Created: March 1990
973384`In-field solution of Riccati equations,{} rational case.
973487`\indented{1}{A package for computing the rational univariate representation} \indented{1}{of a zero-dimensional algebraic variety given by a regular} \indented{1}{triangular set. This package is essentially an interface for the} \spadtype{InternalRationalUnivariateRepresentationPackage} constructor. It is used in the \spadtype{ZeroDimensionalSolvePackage} for solving polynomial systems with fi
973487`--nitely many solutions.
973637`\spadtype{RealPolynomialUtilitiesPackage} provides common functions used by interval coding.
973777`\indented{1}{This package provides numerical solutions of systems of polynomial} equations for use in ACPLOT.
973825`\indented{2}{This package provides functions for finding the real zeros} of univariate polynomials over the integers to arbitrary user-specified precision. The results are returned as a list of isolating intervals which are expressed as records with "left" and "right" rational number components.
973911`\indented{2}{This package provides functions for finding the real zeros} of univariate polynomials over the rational numbers to arbitrary user-specified precision. The results are returned as a list of isolating intervals,{} expressed as records with "left" and "right" rational number components.
974009`\spadtype{RectangularMatrixCategoryFunctions2} provides functions between two matrix domains. Th
974009`--e functions provided are \spadfun{map} and \spadfun{reduce}.
974421`This package provides an operator for the \spad{n}-th term of a recurrence and an operator for the coefficient of \spad{x^n} in a function specified by a functional equation.
974524`\indented{1}{Finds the order of a divisor over a finite field} Author: Manuel Bronstein Date Created: 1988
974731`Elimination of an algebraic from the coefficients of a linear ordinary differential equation.
974948`\spadtype{ReductionOfOrder} provides functions for reducing the order of linear ordinary differential equations once some solutions are known.
975056`A package providing a new algorithm for solving polynomial systems by means of regular chains. Two ways of solving are proposed: in the sense of Zariski closure (like in Kalkbrener\spad{'s} algorithm) or in the sense of the regular zeros (like in Wu,{} Wang or Lazard methods). This algorithm is valid for n
975056`--ay type of regular set. It does not care about the way a polynomial is added in an regular set,{} or how two quasi-components are compared (by an inclusion-test),{} or how the invertibility test is made in the tower of simple extensions associated with a regular set. These operations are realized respectively by the domain \spad{TS} and the packages \spadtype{QCMPACK}(\spad{R},{} \spad{E},{} \spad{V},{} \spad{P},{} \spad{TS}) and \spadtype{RSETGCD}(\spad{R},{} \spad{E},{} \spad{V},{} \spad{P},
975056`--{} \spad{TS}). The same way it does not care about the way univariate polynomial \spad{gcd} (with coefficients in the tower of simple extensions associated with a regular set) are computed. The only requirement is that these \spad{gcd} need to have invertible initials (normalized or not). WARNING. There is no need for a user to call diectly any operation of this package since they can be accessed by the domain \spad{TS}. Thus,{} the operations of this package are not documented.\newline
975257`An internal package for computing gcds and resultants of univariate polynomials with coefficients in a tower of simple extensions of a field.\newline
975458`Implements multiplication by repeated addition
975527`Implements exponentiation by repeated squaring
975596`\spad{RepresentationPackage1} provides functions for representation theory for finite groups and algebras. The package creates permutation representations and uses tensor products and its symmetric and antisymmetric components to create new representations of larger degree from given ones. Note: instead of having parameters from \spadtype{Permutation} this package allows list notation of permutations as well: \spadignore{e.g.} \spad{[1,{} 4,{} 3,{
975596`--} 2]} denotes permutes 2 and 4 and fixes 1 and 3.
975653`\spad{RepresentationPackage2} provides functions for working with modular representations of finite groups and algebra. The routines in this package are created,{} using ideas of \spad{R}. Parker,{} (the meat-Axe) to get smaller representations from bigger ones,{} \spadignore{i.e.} finding sub- and factormodules,{} or to show,{} that such the representations are irreducible. Note: most functions are randomized functions of Las Vegas type \spadigno
975653`--re{i.e.} every answer is correct,{} but with small probability the algorithm fails to get an answer.
975710`This package provides coercions for the special types \spadtype{Exit} and \spadtype{Void}.
975772`RetractSolvePackage is an interface to \spadtype{SystemSolvePackage} that attempts to retract the coefficients of the equations before solving.
975999`\spadtype{ScriptFormulaFormat1} provides a utility coercion for changing to SCRIPT formula format anything that has a coercion to the standard output format.
976065`This package provides operations for mapping functions onto \spadtype{SegmentBinding}\spad{s}.
976137`This package provides operations for mapping functions onto segments.
976198`A domain for mappings between sequences.
976286`\indented{1}{Package to allow simplify to be called on AlgebraicNumbers} by converting to EXPR(INT)
976353`\spadtype{SmithNormalForm} is a package which provides some standard canonical forms for matrices.
976513`A sorted cache of a cachable set \spad{S} is a dynamic structure that keeps the elements of \spad{S} sorted and assigns an integer to each element of \spad{S} once it is in the cache. This way,{} equality and ordering on \spad{S} are tested directly on the integers associated with the elements of \spad{S},{} once they have been entered in the cache.
976568`This package exports sorting algorithnms
976778`This package lifts a mapping from coefficient rings \spad{R} to \spad{S} to a mapping from sparse univariate polynomial over \spad{R} to a sparse univariate polynomial over \spad{S}. Note that the mapping is assumed to send zero to zero,{} since it will only be applied to the non-zero coefficients of the polynomial.
976980`SpecialOutputPackage allows FORTRAN,{} Tex and \indented{2}{Script Formula Formatter output from programs.}
977031`A internal package for removing redundant quasi-components and redundant branches when decomposing a variety by means of quasi-components of regular triangular sets. \newline
977233`A package providing a new algorithm for solving polynomial systems by means of regular chains. Two ways of solving are provided: in the sense of Zariski closure (like in Kalkbrener\spad{'s} algorithm) or in the sense of the regular zeros (like in Wu,{} Wang or Lazard- Moreno methods). T
977233`--his algorithm is valid for nay type of regular set. It does not care about the way a polynomial is added in an regular set,{} or how two quasi-components are compared (by an inclusion-test),{} or how the invertibility test is made in the tower of simple extensions associated with a regular set. These operations are realized respectively by the domain \spad{TS} and the packages \spad{QCMPPK(R,{} E,{} V,{} P,{} TS)} and \spad{RSETGCD(R,{} E,{} V,{} P,{} TS)}. The same way it does not care about 
977233`--the way univariate polynomial gcds (with coefficients in the tower of simple extensions associated with a regular set) are computed. The only requirement is that these gcds need to have invertible initials (normalized or not). WARNING. There is no need for a user to call diectly any operation of this package since they can be accessed by the domain \spadtype{TS}. Thus,{} the operations of this package are not documented.\newline
977454`A internal package for computing gcds and resultants of univariate polynomials with coefficients in a tower of simple extensions of a field. There is no need to use directly this package since its main operations are available from \spad{TS}. \newline
977664`This package provides standard arithmetic operations on matrices. The functions in this package store the results of computations in existing matrices,{} rather than creating new matrices. This package works only for matrices of type Matrix and uses the internal representation of this type.
977734`A package to computes Taylor and Puiseux series of \spad{S}-transforms.
977977`StreamExponentialSeriesOperations implements arithmetic of exponential power series,{} where a power series is represented by a stream of its coefficients.
978061`\indented{1}{StreamExponentialSeriesTranscendentalFunctions implements} \indented{1}{exp and log of exponential power series,{}} where a power series is represented by a stream of its coefficients.
978180`Functions defined on streams with entries in one set.
978234`Functions defined on streams with entries in two sets.
978297`Functions defined on streams with entries in three sets.
978369`StreamTaylorSeriesOperations implements Taylor series arithmetic,{} where a Taylor series is represented by a stream of its coefficients.
978478`StreamTranscendentalFunctions implements transcendental functions on Taylor series,{} where a Taylor series is represented by a stream of its coefficients.
978567`StreamTranscendentalFunctionsNonCommutative implements transcendental functions on Taylor series over a non-commutative ring,{} where a Taylor series is represented by a stream of its coefficients.
978672`StructuralConstantsPackage provides functions creating structural constants from a multiplication tables or a basis of a matrix algebra and other useful functions in this context.
978735`This package produces functions for counting etc. real roots of univariate polynomials in \spad{x} over \spad{R},{} which must be an OrderedIntegralDomain
978816`This package computes the subresultants of two polynomials which is needed for the `Lazard Rioboo' enhancement to Tragers integrations formula For efficiency reasons this has been rewritten to call Lionel Ducos package which is currently the best one. \blankline
978923`Computes all the symmetric functions in \spad{n} variables.
978979`SymmetricGroupCombinatoricFunctions contains combinatoric functions concerning symmetric groups and representation theory: list young tableaus,{} improper partitions,{} subsets bijection of Coleman.
979042`\spad{SymmetryAnalysis(JB,{} \spad{xi},{} eta)} provides procedures for the symmetry analysis of differential equations over a given jet bundle. Currently there exist only some procedures to set up the determining system for the symmetry generators of Lie point symmetries.
979178`SystemODESolver provides tools for triangulating and solving some systems of linear ordinary differential equations.
979285`Symbolic solver for systems of rational functions with coefficients in an integral domain \spad{R}. The systems are solved in the field of rational functions over \spad{R}. Solutions are exact of the form variable = value when the value is a member of the coefficient domain \spad{R}. Otherwise the solutions are implicitly expressed as roots of univariate polynomial equations over \spad{R}. Care is taken to guarantee that the denominators 
979285`--of the input equations do not vanish on the solution sets. The arguments to solve can either be given as equations or as rational functions interpreted as equal to zero. The user can specify an explicit list of symbols to be solved for,{} treating all other symbols appearing as parameters or omit the list of symbols in which case the system tries to solve with respect to all symbols appearing in the input.
979351`TableauBumpers implements the Schenstead-Knuth correspondence between sequences and pairs of Young tableaux. The 2 Young tableaux are represented as a single tableau with pairs as components.
979411`\spad{TabulatedComputationPackage(Key ,{} Entry)} provides some modest support for dealing with operations with type \spad{Key -> Entry}. The result of such operations can be stored and retrieved with this package by using a hash-table. The user does not need to worry about the management of this hash-table. However,{} onnly one hash-table is built by calling \spad{TabulatedComputationPackage(Key ,{} Entry)
979411`--}.
979509`Expands tangents of sums and scalar products.
979744`This package provides functions for template manipulation
979791`linear extensions of maps on the basis
979945`\spadtype{TexFormat1} provides a utility coercion for changing to TeX format anything that has a coercion to the standard output format.
979997`Tools for the sign finding utilities.
980048`TopLevelDrawFunctions provides top level functions for drawing graphics of expressions.
980135`TopLevelDrawFunctionsForAlgebraicCurves provides top level functions for drawing non-singular algebraic curves.
980258`TopLevelDrawFunctionsForCompiledFunctions provides top level functions for drawing graphics of expressions.
980331`TopLevelDrawFunctionsForPoints provides top level functions for drawing curves and surfaces described by sets of points.
980391`This package exports a function for making a \spadtype{ThreeSpace}
980438`Hermite integration,{} transcendental case.
980550`This package provides functions for the transcendental case of the Risch algorithm.
980652`TranscendentalManipulations provides functions to simplify and expand expressions involving transcendental operators.
980766`\indented{1}{Risch differential equation system,{} transcendental case.} Author: Manuel Bronstein Date Created: 17 August 1992
980881`This package tries to find solutions of equations of type Expression(\spad{R}). This means expressions involving transcendental,{} exponential,{} logarithmic and nthRoot functions. After trying to transform different kernels to one kernel by applying several rules,{} it calls zerosOf for the SparseUnivariatePolynomial in the remaining kernel. For example the expression \spad{sin(x)*cos(x)-2} will be transformed to \indented{3}{\spad
980881`--{-2 tan(x/2)^4 -2 tan(x/2)^3 -4 tan(x/2)^2 +2 tan(x/2) -2}} by using the function normalize and then to \indented{3}{\spad{-2 tan(x)^2 + tan(x) -2}} with help of subsTan. This function tries to express the given function in terms of \spad{tan(x/2)} to express in terms of \spad{tan(x)} . Other examples are the expressions \spad{sqrt(x+1)+sqrt(x+7)+1} or \indented{1}{\spad{sqrt(sin(x))+1} .}
980953`This package finds the function \spad{func3} where \spad{func1} and \spad{func2} \indented{1}{are given and\space{2}\spad{func1} = \spad{func3}(\spad{func2}) .\space{2}If there is no solution then} \indented{1}{function \spad{func1} will be returned.} \indented{1}{An example would be\space{2}\spad{func1 := 8*X^3+32*X^2-14*X ::EXPR INT} and} \indented{1}{\spad{func2 := 2*X ::EXPR INT} convert them via univariate} \indented{1}{
980953`--to FRAC SUP EXPR INT and then the solution is \spad{func3 := X^3+X^2-X}} \indented{1}{of type FRAC SUP EXPR INT}
981032`This package provides functions that compute "fraction-free" inverses of upper and lower triangular matrices over a integral domain. By "fraction-free inverses" we mean the following: given a matrix \spad{B} with entries in \spad{R} and an element \spad{d} of \spad{R} such that \spad{d} * inv(\spad{B}) also has entries in \spad{R},{} w
981032`--e return \spad{d} * inv(\spad{B}). Thus,{} it is not necessary to pass to the quotient field in any of our computations.
981203`\spadtype{TrigonometricManipulations} provides transformations from trigonometric functions to complex exponentials and logarithms,{} and back.
981324`Tools for constructing tubes around 3-dimensional parametric curves.
981650`\indented{1}{The purpose of this package is to provide reasonable plots of} functions with singularities.
981704`A basic package for the factorization of bivariate polynomials over a finite field. The functions here represent the base step for the multivariate factorizer.
981769`This is a low-level package which implements operations \indented{1}{on vectors treated as univariate modular polynomials.\space{2}Most} \indented{1}{operations takes modulus as parameter.\space{2}Modulus is machine} \indented{1}{sized prime which should be small enough to avoid overflow} \indented{1}{in intermediate calculations.}
981829`\indented{1}{References:} \indented{2}{\spad{J}-\spad{G}. Dumas,{} \spad{F}. Heckenbach,{} \spad{D}. Sauders,{} \spad{V}. Welker:} \indented{2}{Computing simplicial homology based on efficient Smith} \indented{2}{normal form algorithms.} Descrition: Gaussion elimination using only 1 or \spad{-1} as pivots \blankline
981882`Unittest is a package that provides functions for regression \indented{13}{testing.\space{2}Note that it calls the interpreter,{} thus,{} all} \indented{13}{functions require that there arguments be passed as strings.}
981922`UnittestAux is an auxiliary package to Unittest,{} that performs \indented{13}{checking of tests,{} dealing also with fatal errors.}
981976`UnittestCount is a package that keeps track of statistics \indented{13}{collected during testing.\space{2}It is separate from} \indented{13}{\spadtype{UnittestAux} because the latter takes an argument,{}} \indented{13}{and we want the state to be common for all arguments.}
982089`Mapping package for univariate Laurent series \indented{2}{This package allows one to apply a function to the coefficients of} \indented{2}{a univariate Laurent series.}
982250`Mapping from polynomials over \spad{R} to polynomials over \spad{S} given a map from \spad{R} to \spad{S} assumed to send zero to zero.
982586`UnivariatePolynomialDecompositionPackage implements functional decomposition of univariate polynomial with coefficients in an \spad{IntegralDomain} of \spad{CharacteristicZero}.
982725`UnivariatePolynomialDivisionPackage provides a division for non monic univarite polynomials with coefficients in an \spad{IntegralDomain}.
982847`This package lifts a mapping from coefficient rings \spad{R} to \spad{S} to a mapping from \spadtype{UnivariatePolynomial}(\spad{x},{} \spad{R}) to \spadtype{UnivariatePolynomial}(\spad{y},{} \spad{S}). Note that the mapping is assumed to send zero to zero,{} since it will only be applied to the non-zero coefficients of the polynomial.
982942`This package implements Karatsuba\spad{'s} trick for multiplying (large) univariate polynomials. It could be improved with a version doing the work on place and also with a special case for squares. We've done this in Basicmath,{} but we believe that this out of the scope of FriCAS.
983056`This package provides for square-free decomposition of univariate polynomials over arbitrary rings,{} \spadignore{i.e.} a partial factorization such that each factor is a product of irreducibles with multiplicity one and the factors are pairwise relatively prime. If the ring has characteristic zero,{} the result is guaranteed to satisfy this condition. If the ring is an infin
983056`--ite ring of finite characteristic,{} then it may not be possible to decide when polynomials contain factors which are \spad{p}th powers. In this case,{} the flag associated with that polynomial is set to "nil" (meaning that that polynomials are not guaranteed to be square-free).
983186`Mapping package for univariate Puiseux series. This package allows one to apply a function to the coefficients of a univariate Puiseux series.
983348`\spad{UnivariateSkewPolynomialCategoryOps} provides products and \indented{1}{divisions of univariate skew polynomials.}
983463`Mapping package for univariate Taylor series. \indented{2}{This package allows one to apply a function to the coefficients of} \indented{2}{a univariate Taylor series.}
983653`\indented{1}{This package provides Taylor series solutions to regular} linear or non-linear ordinary differential equations of arbitrary order.
983796`This package provides operations for mapping functions onto segments.
983869`Provides functions to force a partial ordering on any set.
983937`This packages provides functions to allow the user to select the ordering on the variables and operators for displaying polynomials,{} fractions and expressions. The ordering affects the display only and not the computations.
983992`\spad{RUTSodetools} provides tools to interface with the series \indented{1}{ODE solver when presented with linear ODEs.}
984175`\indented{2}{This package provides operations which all take as arguments} vectors of elements of some type \spad{A} and functions from \spad{A} to another of type \spad{B}. The operations all iterate over their vector argument and either return a value of type \spad{B} or a vector over \spad{B}.
984286`ViewportDefaultsPackage describes default and user definable values for graphics
984336`ViewportPackage provides functions for creating GraphImages and TwoDimensionalViewports from lists of lists of points.
984379`This package implements the Weierstrass preparation theorem \spad{f} for multivariate power series. weierstrass(\spad{v},{} \spad{p}) where \spad{v} is a variable,{} and \spad{p} is a TaylorSeries(\spad{R}) in which there is term of form c*v^s where \spad{c} is a constant. Let \spad{s} be minimal as above. The result is a list of TaylorSeries coefficients A[\spad{i}] of the equivalent polynomial A = A[0] + A[1]\spad{*v} + A[2]\spad{*v^2} + ... +
984379`-- A[\spad{s}-1]\spad{*v^}(\spad{s}-1) + \spad{v^s} such that p=A*B ,{} \spad{B} being a TaylorSeries of minimum degree 0
984438`In this package \spad{K} is a finite field,{} \spad{R} is a ring of univariate polynomials over \spad{K},{} and \spad{F} is a framed algebra over \spad{R}. The package provides a function to compute the integral closure of \spad{R} in the quotient field of \spad{F} as well as a function to compute a "local integral basis" at
984438`-- a specific prime.
984620`This package provides computations of logarithms and exponentials for polynomials in non-commutative variables. \newline Author: Michel Petitot (petitot@lifl.\spad{fr}).
984752`A package for computing symbolically the complex and real roots of zero-dimensional algebraic systems over the integer or rational numbers. Complex roots are given by means of univariate representations of irreducible regular chains. Real roots are given by means of tuples of coordinates lying in the \spadtype{RealClosure} of the coefficient ring. This constructor takes three argumen
984752`--ts. The first one \spad{R} is the coefficient ring. The second one \spad{ls} is the list of variables involved in the systems to solve. The third one must be \spad{concat(ls,{} s)} where \spad{s} is an additional symbol used for the univariate representations. WARNING: The third argument is not checked. All operations are based on triangular decompositions. The default is to compute these decompositions directly from the input system by using the \spadtype{RegularChain} domain constructor. The
984752`-- lexTriangular algorithm can also be used for computing these decompositions (see the \spadtype{LexTriangularPackage} package constructor). For that purpose,{} the operations \spadopFrom{univariateSolve}{ZeroDimensionalSolvePackage},{} \spadopFrom{realSolve}{ZeroDimensionalSolvePackage} and \spadopFrom{positiveSolve}{ZeroDimensionalSolvePackage} admit an optional argument. \newline Author: Marc Moreno Maza.
984874`The class of abelian groups,{} \spadignore{i.e.} additive monoids where each element has an additive inverse. \blankline
984934`The class of multiplicative monoids,{} \spadignore{i.e.} semigroups with an additive identity element. \blankline
984996`Abelian monoid ring elements (not necessarily of finite support) of this ring are of the form formal SUM (r_i * e_i) where the r_i are coefficents and the e_i,{} elements of the ordered abelian monoid,{} are thought of as exponents or monomials. The monomials commute with each other,{} but in general do not commute with the coefficients (which themselves may or may not be commutative). S
984996`--ee \spadtype{FiniteAbelianMonoidRing} for the case of finite support. A useful common model for polynomials and power series. Conceptually at least,{} only the non-zero terms are ever operated on.
985114`the class of all additive (commutative) semigroups,{} \spadignore{i.e.} a set with a commutative and associative operation \spadop{+}. \blankline
985181`The notion of aggregate serves to model any data structure aggregate,{} designating any collection of objects,{} with heterogenous or homogeneous members,{} with a finite or infinite number of members,{} explicitly or implicitly represented. An aggregate can in principle represent everything from a string of characters to abstract sets such as "the set of \spad{x} satisfying relation {\em r(x)}" An attribute \spadatt{finiteAggregate} is used to assert th
985181`--at a domain has a finite number of elements.
985231`The category of associative algebras (modules which are themselves rings). \blankline
985304`Model for algebraically closed fields.
985384`Model for algebraically closed function spaces.
985507`Category for the inverse trigonometric functions.
985605`A bag aggregate is an aggregate for which one can insert and extract objects,{} and where the order in which objects are inserted determines the order of extraction. Examples of bags are stacks,{} queues,{} and dequeues.
985675`\spadtype{BasicType} is the basic category for describing a collection of elements with \spadop{=} (equality).
985729`A binary-recursive aggregate has 0,{} 1 or 2 children and serves as a model for a binary tree or a doubly-linked aggregate structure
985823`\spadtype{BinaryTreeCategory(S)} is the category of binary trees: a tree which is either empty or else is a \spadfun{node} consisting of a value and a \spadfun{left} and \spadfun{right},{} both binary trees.
985912`The bit aggregate category models aggregates representing large quantities of Boolean data.
985970`A collection is a homogeneous aggregate which can built from list of members. The operation used to build the aggregate is generically named \spadfun{construct}. However,{} each collection provides its own special function with the same name as the data type,{} except with an initial lower case letter,{} \spadignore{e.g.} \spadfun{list} for \spadtype{List},{} \spadfun{flexibleArray} for \spadtype{FlexibleArray},{} and so on.
986036`This category represents the extension of a ring by a square root of \spad{-1}.
986125`A dictionary is an aggregate in which entries can be inserted,{} searched for and removed. Duplicates are thrown away on insertion. This category models the usual notion of dictionary which involves large amounts of data where copying is impractical. Principal operations are thus destructive (non-copying) ones.
986191`This category is a collection of operations common to both categories \spadtype{Dictionary} and \spadtype{MultiDictionary}
986277`Differential extensions of a ring \spad{R}. Given a differentiation on \spad{R},{} extend it to a differentiation on \%.
986366`\spadtype{DifferentialPolynomialCategory} is a category constructor specifying basic functions in an ordinary differential polynomial ring with a given ordered set of differential indeterminates. In addition,{} it implements defaults for the basic functions. The functions \spadfun{order} and \spadfun{weight} are e
986366`--xtended from the set of derivatives of differential indeterminates to the set of differential polynomials. Other operations provided on differential polynomials are \spadfun{leader},{} \spadfun{initial},{} \spadfun{separant},{} \spadfun{differentialVariables},{} and \spadfun{isobaric?}. Furthermore,{} if the ground ring is a differential ring,{} then evaluation (substitution of differential indeterminates by elements of the ground ring or by differential polynomials) is provided by \spadfun{ev
986366`--al}. A convenient way of referencing derivatives is provided by the functions \spadfun{makeVariable}. \blankline To construct a domain using this constructor,{} one needs to provide a ground ring \spad{R},{} an ordered set \spad{S} of differential indeterminates,{} a ranking \spad{V} on the set of derivatives of the differential indeterminates,{} and a set \spad{E} of exponents in bijection with the set of differential monomials in the given differential indeterminates. \blankline
986559`An ordinary differential ring,{} that is,{} a ring with an operation \spadfun{differentiate}. \blankline
986627`\spadtype{DifferentialVariableCategory} constructs the set of derivatives of a given set of (ordinary) differential indeterminates. If \spad{x},{} ...,{} \spad{y} is an ordered set of differential indeterminates,{} and the prime notation is used for differentiation,{} then the set of derivatives (including zero-th order) of the differential indeterminates is \spad{x},{} \spad{x'},{} \spad{x''},{
986627`--} ...,{} \spad{y},{} \spad{y'},{} \spad{y''},{} ... (Note: in the interpreter,{} the \spad{n}-th derivative of \spad{y} is displayed as \spad{y} with a subscript \spad{n}.) This set is viewed as a set of algebraic indeterminates,{} totally ordered in a way compatible with differentiation and the given order on the differential indeterminates. Such a total order is called a ranking of the differential indeterminates. \blankline A domain in this category is needed to construct a differential pol
986627`--ynomial domain. Differential polynomials are ordered by a ranking on the derivatives,{} and by an order (extending the ranking) on on the set of differential monomials. One may thus associate a domain in this category with a ranking of the differential indeterminates,{} just as one associates a domain in the category \spadtype{OrderedAbelianMonoidSup} with an ordering of the set of monomials in a set of algebraic indeterminates. The ranking is specified through the binary relation \spadfun{<}.
986627`-- For example,{} one may define one derivative to be less than another by lexicographically comparing first the \spadfun{order},{} then the given order of the differential indeterminates appearing in the derivatives. This is the default implementation. \blankline The notion of weight generalizes that of degree. A polynomial domain may be made into a graded ring if a weight function is given on the set of indeterminates,{} Very often,{} a grading is the first step in ordering the set of monomial
986627`--s. For differential polynomial domains,{} this constructor provides a function \spadfun{weight},{} which allows the assignment of a non-negative number to each derivative of a differential indeterminate. For example,{} one may define the weight of a derivative to be simply its \spadfun{order} (this is the default assignment). This weight function can then be extended to the set of all differential polynomials,{} providing a graded ring structure.
986737`attribute to indicate an aggregate of finite size
986854`A division ring (sometimes called a skew field),{} \spadignore{i.e.} a not necessarily commutative ring where all non-zero elements have multiplicative inverses.
986914`Category for the elementary functions.
987002`An eltable aggregate is one which can be viewed as a function. For example,{} the list \spad{[1,{} 7,{} 4]} can applied to 0,{} 1,{} and 2 respectively will return the integers 1,{} 7,{} and 4; thus this list may be viewed as mapping 0 to 1,{} 1 to 7 and 2 to 4. In general,{} an aggregate can map members of a domain {\em Dom} to an image domain {\em Im}.
987101`Entire Rings (non-commutative Integral Domains),{} \spadignore{i.e.} a ring not necessarily commutative which has no zero divisors. \blankline
987157`A constructive euclidean domain,{} \spadignore{i.e.} one can divide producing a quotient and a remainder where the remainder is either zero or is smaller (\spadfun{euclideanSize}) than the divisor. \blankline Conditional attributes: \indented{2}{multiplicativeValuation\tab{25}\spad{Size(a*b)=Size(a)*Size(b)}} \indented{2}{additiveValuation\tab{25}\spad{Size(a*b)=Size(a)+Size(b)}}
987222`This category provides \spadfun{eval} operations. A domain may belong to this category if it is possible to make ``evaluation\spad{''} substitutions.
987292`An expression space is a set which is closed under certain operators.
987353`An extensible aggregate is one which allows insertion and deletion of entries. These aggregates are models of lists and streams which are represented by linked structures so as to make insertion,{} deletion,{} and concatenation efficient. However,{} access to elements of these extensible aggregates is generally slow since access is made from the end. See \spadtype{FlexibleArray} for an exception.
987449`ExtensionField {\em F} is the category of fields which extend the field \spad{F}
987519`The category of commutative fields,{} \spadignore{i.e.} commutative rings where all non-zero elements have multiplicative inverses. The \spadfun{factor} operation while trivial is useful to have defined. \blankline
987563`FieldOfPrimeCharacteristic is the category of fields of prime characteristic,{} \spadignore{e.g.} finite fields,{} algebraic closures of fields of prime characteristic,{} transcendental extensions of of fields of prime characteristic.
987647`The category of domains composed of a finite set of elements. We include the functions \spadfun{lookup} and \spadfun{index} to give a bijection between the finite set and an initial segment of positive integers. \blankline
987694`This category is similar to AbelianMonoidRing,{} except that the sum is assumed to be finite. It is a useful model for polynomials,{} but is somewhat more general.
987825`FiniteAlgebraicExtensionField {\em F} is the category of fields which are finite algebraic extensions of the field {\em F}. If {\em F} is finite then any finite algebraic extension of {\em F} is finite,{} too. Let {\em K} be a finite algebraic extension of the finite field {\em F}. The exponentiation of elements of {\em K} defines a \spad{Z}-module structure on the multiplicative group of {\em K}. The
987825`-- additive group of {\em K} becomes a module over the ring of polynomials over {\em F} via the operation \spadfun{linearAssociatedExp}(a: \spad{K},{} \spad{f:} SparseUnivariatePolynomial \spad{F}) which is linear over {\em F},{} \spadignore{i.e.} for elements {\em a} from {\em K},{} {\em c,{} d} from {\em F} and {\em f,{} g} univariate polynomials over {\em F} we have \spadfun{linearAssociatedExp}(a,{} cf+dg) equals {\em c} times \spadfun{linearAssociatedExp}(a,{} \spad{f}) plus {\em d} times \
987825`--spadfun{linearAssociatedExp}(a,{} \spad{g}). Therefore \spadfun{linearAssociatedExp} is defined completely by its action on monomials from {\em F[X]}: \spadfun{linearAssociatedExp}(a,{} monomial(1,{} \spad{k})\spad{\$}SUP(\spad{F})) is defined to be \spadfun{Frobenius}(a,{} \spad{k}) which is {\em a^(q^k)} where {\em q=size()\$F}. The operations order and discreteLog associated with the multiplicative exponentiation have additive analogues associated to the operation \spadfun{linearAssociatedE
987825`--xp}. These are the functions \spadfun{linearAssociatedOrder} and \spadfun{linearAssociatedLog},{} respectively.
987929`This category describes finite rational divisors on a curve,{} that is finite formal sums SUM(\spad{n} * \spad{P}) where the \spad{n}\spad{'s} are integers and the \spad{P}\spad{'s} are finite rational points on the curve.
988158`FiniteFieldCategory is the category of finite fields
988232`Category of finite graphs,{} allows us to model graph theory \blankline
988307`The category of finite groups.
988364`A FiniteRankAlgebra is an algebra over a commutative ring \spad{R} which is a free \spad{R}-module of finite rank.
988498`A FiniteRankNonAssociativeAlgebra is a non associative algebra over a commutative ring \spad{R} which is a free \spad{R}-module of finite rank.
988619`A finite-set aggregate models the notion of a finite set,{} that is,{} a collection of elements characterized by membership,{} but not by order or multiplicity. See \spadtype{Set} for an example.
988708`This category is intended as a model for floating point systems. A floating point system is a model for the real numbers. In fact,{} it is an approximation in the sense that not all real numbers are exactly representable by floating point numbers. A floating point system is characterized by the following: \blankline \indented{2}{1: \spadfunFrom{base}{FloatingPointSystem} of the \spadfunFrom{exponent}{FloatingPointSystem}.} \indented{9
988708`--}{(actual implemenations are usually binary or decimal)} \indented{2}{2: \spadfunFrom{precision}{FloatingPointSystem} of the \spadfunFrom{mantissa}{FloatingPointSystem} (arbitrary or fixed)} \indented{2}{3: rounding error for operations} \blankline Because a Float is an approximation to the real numbers,{} even though it is defined to be a join of a Field and OrderedRing,{} some of the attributes do not hold. In particular associative(\spad{"+"}) does not hold. Algorithms defined over a field 
988708`--need special considerations when the field is a floating point system.
988778`A \spadtype{FramedAlgebra} is a \spadtype{FiniteRankAlgebra} together with a fixed \spad{R}-module basis.
988904`FramedNonAssociativeAlgebra(\spad{R}) is a \spadtype{FiniteRankNonAssociativeAlgebra} (\spadignore{i.e.} a non associative algebra over \spad{R} which is a free \spad{R}-module of finite rank) over a commutative ring \spad{R} together with a fixed \spad{R}-module basis.
989017`A domain of this category implements formal linear combinations of elements from a domain \spad{Basis} with coefficients in a domain \spad{R}. The domain \spad{Basis} needs only to belong to the category \spadtype{SetCategory} and \spad{R} to the category \spadtype{Ring}. Thus the coefficient ring may be non-commutative. See the \spadtype{XDistributedPolynomial} constructor for examples of domai
989017`--ns built with the \spadtype{FreeModuleCategory} category constructor. Author: Michel Petitot (petitot@lifl.\spad{fr}) \blankline Note (Franz Lehner,{} June 2009): Since \spad{leadingTerm} makes no sense for unordered base sets,{} and at the time of this writing this domain was never used for such,{} the base set is required to be \spad{Comparable}. \spad{FreeModule} originally was not of FreeModuleCategory. Some functions (like \spad{support},{} \spad{coefficients},{} \spad{monomials},{} ...) 
989017`--from here could be moved to \spad{IndexedDirectProductCategory} but at the moment there is no need for this.
989127`This category provides a selection of evaluation operations depending on what the argument type \spad{R} provides.
989216`\spad{S} is \spadtype{FullyLinearlyExplicitRingOver R} means that \spad{S} is a \spadtype{LinearlyExplicitRingOver R} and,{} in addition,{} if \spad{R} is a \spadtype{LinearlyExplicitRingOver Integer},{} then so is \spad{S}
989322`\indented{2}{A is fully retractable to \spad{B} means that A is retractable to \spad{B},{} and,{}} \indented{2}{in addition,{} if \spad{B} is retractable to the integers or rational} \indented{2}{numbers then so is A.} \indented{2}{In particular,{} what we are asserting is that there are no integers} \indented{2}{(rationals) in A which don\spad{'t} retract into \spad{B}.} Date Created: March 1990
989406`This category is a model for the function field of a plane algebraic curve.
989614`A space of formal functions with arguments in an arbitrary ordered set.
989689`This category describes domains where \spadfun{\spad{gcd}} can be computed but where there is no guarantee of the existence of \spadfun{factor} operation for factorisation into irreducibles. However,{} if such a \spadfun{factor} operation exist,{} factorization will be unique up to order and units.
989742`GradedAlgebra(\spad{R},{} \spad{E}) denotes ``E-graded \spad{R}-algebra\spad{''}. A graded algebra is a graded module together with a degree preserving \spad{R}-linear map,{} called the {\em product}. \blankline The name ``product\spad{''} is written out in full so inner and outer products with the same mapping type can be distinguished by name.
989845`GradedModule(\spad{R},{} \spad{E}) denotes ``E-graded \spad{R}-module\spad{''},{} \spadignore{i.e.} collection of \spad{R}-modules indexed by an abelian monoid \spad{E}. An element \spad{g} of \spad{G[s]} for some specific \spad{s} in \spad{E} is said to be an element of \spad{G} with {\em degree} \spad{s}. Sums are defined in each module \spad{G[s]} so two elements of \spad{G} have a sum if they have the 
989845`--same degree. \blankline Morphisms can be defined and composed by degree to give the mathematical category of graded modules.
989944`The class of multiplicative groups,{} \spadignore{i.e.} monoids with multiplicative inverses. \blankline
989988`A homogeneous aggregate is an aggregate of elements all of the same type. In the current system,{} all aggregates are homogeneous. Two attributes characterize classes of aggregates. Aggregates from domains with attribute \spadatt{finiteAggregate} have a finite number of members. Of course,{} such a domain may have an infinite number of elements,{} like,{} for example \spadtype{List}. Those domains with attribute \spada
989988`--tt{shallowlyMutable} allow an element to be modified or updated without changing its overall value.
990074`Category for the hyperbolic trigonometric functions.
990161`An indexed aggregate is a many-to-one mapping of indices to entries. For example,{} a one-dimensional-array is an indexed aggregate where the index is an integer. Also,{} a table is an indexed aggregate where the indices and entries may have any type.
990274`This category provides \spadfun{eval} operations. A domain may belong to this category if it is possible to make ``evaluation\spad{''} substitutions. The difference between this and \spadtype{Evalable} is that the operations in this category specify the substitution as a pair of arguments rather than as an equation.
990366`An \spad{IntegerNumberSystem} is a model for the integers.
990436`\spadtype{JetBundleBaseFunctionCategory} defines the category of functions (local sections) of the base space of a jet bundle,{} \spadignore{i.e.} functions depending only on the independent variables. Such a category is needed \spadignore{e.g.} for the representation of solutions.
990553`\spadtype{JetBundleCategory} provides basic data structures and procedures for jet bundles. Nearly all necessary functions are implemented already here. Only the representation and functions which direct access to it must be implemented in a domain. Two notations of derivatives are supported. Default is multi-index notation,{} where the \spad{i}-th entry of the index denotes the number of differentiations taken with respect to \spad{x^i}.
990553`-- In repeated index notation each entry \spad{i} in the index denotes a differentiation with respect to \spad{x^i}. The choice affects,{} however,{} only in- and output. Internally,{} multi-index notation is used throughout.
990619`\spadtype{JetBundleFunctionCategory} defines the category of functions (local sections) over a jet bundle. The formal derivative is defined already here. It uses the Jacobi matrix of the functions. The columns of the matrices are enumerated by jet variables. Thus they are represented as a \spadtype{Record} of the matrix and a list of the jet variables. Several simplification routines are implem
990619`--ented already here.
990730`A keyed dictionary is a dictionary of key-entry pairs for which there is a unique entry for each key.
990835`LazyStreamAggregate is the category of streams with lazy evaluation. It is understood that the function 'empty?' will cause lazy evaluation if necessary to determine if there are entries. Functions which call 'empty?',{} \spadignore{e.g.} 'first' and 'rest',{} will also cause lazy evaluation if necessary.
990921`The category of all left algebras over an arbitrary ring.
990988`The category of Lie Algebras. It is used by the following domains of non-commutative algebra: \spadtype{LiePolynomial} and \spadtype{XPBWPolynomial}. \newline Author : Michel Petitot (petitot@lifl.\spad{fr}).
991066`A linear aggregate is an aggregate whose elements are indexed by integers. Examples of linear aggregates are strings,{} lists,{} and arrays. Most of the exported operations for linear aggregates are non-destructive but are not always efficient for a particular aggregate. For example,{} \spadfun{concat} of two lists needs only to copy its first argument,{} whereas \spadfun{concat} of two arrays needs to copy both arguments. Most 
991066`--of the operations exported here apply to infinite objects (\spadignore{e.g.} streams) as well to finite ones. If the aggreagate is a finite aggregate then it has several additional exports exports such as \spadfun{reverse},{} \spadfun{sort},{} and so on.
991142`\spad{LinearOrdinaryDifferentialOperatorCategory} is the category of differential operators with coefficients in a ring A with a given derivation. Multiplication of operators corresponds to functional composition: \indented{4}{\spad{(L1 * L2).(f) = L1 L2 f}}
991272`A list aggregate is a model for a linked list data structure. A linked list is a versatile data structure. Insertion and deletion are efficient and searching is a linear operation.
991344``Logic' provides the basic operations for lattices,{} \spadignore{e.g.} boolean algebra.
991388`Magma is the class of all multiplicative magmas,{} \spadignore{i.e.} sets with a binary operation.
991432`\indented{1}{MagmaWithUnit is the class of multiplicative monads with unit,{}} \indented{1}{\spadignore{i.e.} sets with a binary operation and a unit element.} Axioms \indented{3}{leftIdentity("*":(\%,{}\%)\spad{->}\%,{}1)\space{3}\tab{30} 1*x=x} \indented{3}{rightIdentity("*":(\%,{}\%)\spad{->}\%,{}1)\space{2}\tab{30} x*1=x} Common Additional Axioms \indented{3}{unitsKnown
991432`---if "recip" says "failed",{} that PROVES input wasn\spad{'t} a unit}
991494`\spadtype{MatrixCategory} is a general matrix category which allows different representations and indexing schemes. Rows and columns may be extracted with rows returned as objects of type Row and colums returned as objects of type Col. A domain belonging to this category will be shallowly mutable. The index of the 'first' row may be obtained by
991494`-- calling the function \spadfun{minRowIndex}. The index of the 'first' column may be obtained by calling the function \spadfun{minColIndex}. The index of the first element of a Row is the same as the index of the first column in a matrix and vice versa.
991656`The category for general multi-variate possibly skew polynomials over a ring \spad{R},{} in variables from VarSet,{} with exponents from the \spadtype{OrderedAbelianMonoidSup}.
991833`The category of modules over a commutative ring. \blankline
991903`A \spadtype{MonogenicAlgebra} is an algebra of finite rank which can be generated by a single element.
992035`The class of multiplicative monoids,{} \spadignore{i.e.} semigroups with a multiplicative identity element. \blankline
992082`\spadtype{MultivariateTaylorSeriesCategory} is the most general multivariate Taylor series category.
992225`NonAssociativeAlgebra is the category of non associative algebras (modules which are themselves non associative rngs). Axioms \indented{3}{\spad{r*}(a*b) = (r*a)\spad{*b} = a*(\spad{r*b})}
992322`A NonAssociativeRing is a non associative \spad{rng} which has a unit,{} the multiplication is not necessarily commutative or associative.
992393`NonAssociativeRng is a basic ring-type structure,{} not necessarily commutative or associative,{} and not necessarily with unit. Axioms \indented{2}{\spad{x*}(\spad{y+z}) = x*y + \spad{x*z}} \indented{2}{(x+y)\spad{*z} = \spad{x*z} + \spad{y*z}} Common Additional Axioms \indented{2}{noZeroDivisors\space{2}ab = 0 \spad{=>} \spad{a=0} or \spad{b=0}}
992461`The category of semirings,{} not necessarily associative,{} not necessarily commutative,{} and not necessarily with a 1.
992538`OctonionCategory gives the categorial frame for the octonions,{} and eight-dimensional non-associative algebra,{} doubling the the quaternions in the same way as doubling the Complex numbers to get the quaternions.
992624`One-dimensional-array aggregates serves as models for one-dimensional arrays. Categorically,{} these aggregates are finite linear aggregates with the \spadatt{shallowlyMutable} property,{} that is,{} any component of the array may be changed without affecting the identity of the overall array. Array data structures are typically represented by a fixed area in storage and therefore cannot efficiently gro
992624`--w or shrink on demand as can list structures (see however \spadtype{FlexibleArray} for a data structure which is a cross between a list and an array). Iteration over,{} and access to,{} elements of arrays is extremely fast (and often can be optimized to open-code). Insertion and deletion however is generally slow since an entirely new data structure must be created for the result.
992726`\spadtype{OpenMath} provides operations for exporting an object in OpenMath format.
992773`Ordered sets which are also rings,{} that is,{} domains where the ring operations are compatible with the ordering. \blankline
992831`The class of totally ordered sets,{} that is,{} sets such that for each pair of elements \spad{(a,{} b)} exactly one of the following relations holds \spad{a<b or a=b or b<a} and the relation is transitive,{} \spadignore{i.e.} \spad{a<b and b<c => a<c}. This order should be the natural order on given structure.
992886`A partial differential ring with differentiations indexed by a parameter type \spad{S}. \blankline
992986`The class of partially ordered sets,{} that is sets equipped with transitive and reflexive relation \spad{<=}.
993045`The category for general multi-variate polynomials over a ring \spad{R},{} in variables from VarSet,{} with exponents from the \spadtype{OrderedAbelianMonoidSup}. Here variables commute with the coefficients.
993204`This is the category of domains that know "enough" about themselves in order to factor univariate polynomials over themselves.
993301`A category for finite subsets of a polynomial ring. Such a set is only regarded as a set of polynomials and not identified to the ideal it generates. So two distinct sets may generate the same the ideal. Furthermore,{} for \spad{R} being an integral domain,{} a set of polynomials may be viewed as a representa
993301`--tion of the ideal it generates in the polynomial ring \spad{(R)^(-1) P},{} or the set of its zeros (described for instance by the radical of the previous ideal,{} or a split of the associated affine variety) and so on. So this category provides operations about those different notions.
993499`\spadtype{PowerSeriesCategory} is the most general power series category with exponents in an ordered abelian monoid.
993654`\spadtype{QuaternionCategory} describes the category of quaternions and implements functions that are not representation specific.
993749`QuotientField(\spad{S}) is the category of fractions of an Integral Domain \spad{S}.
993847`The \spad{RadicalCategory} is a model for the rational numbers.
993912`\spadtype{RealClosedField} provides common acces functions for all real closed fields.
993978`The real number system category is intended as a model for the real numbers. The real numbers form an ordered normed field. Note that we have purposely not included \spadtype{DifferentialRing} or the elementary functions (see \spadtype{TranscendentalFunctionCategory}) in the definition.
994042`\spadtype{RealRootCharacterizationCategory} provides common acces functions for all real root codings.
994252`\spadtype{RectangularMatrixCategory} is a category of matrices of fixed dimensions. The dimensions of the matrix will be parameters of the domain. Domains in this category will be \spad{R}-modules and will be non-mutable.
994491`A recursive aggregate over a type \spad{S} is a model for a a directed graph containing values of type \spad{S}. Recursively,{} a recursive aggregate is a {\em node} consisting of a \spadfun{value} from \spad{S} and 0 or more \spadfun{children} which are recursive aggregates. A node with no children is called a \spadfun{leaf} node. A recursive aggregate may be cyclic for which some operations as noted may go into an infini
994491`--te loop.
994573`A category for general multi-variate polynomials with coefficients in a ring,{} variables in an ordered set,{} and exponents from an ordered abelian monoid,{} with a \spadfun{sup} operation. When not constant,{} such a polynomial is viewed as a univariate polynomial in its main variable \spad{w}. \spad{r}. \spad{t}. to the total ordering on the elements in 
994573`--the ordered set,{} so that some operations usually defined for univariate polynomials make sense here.
994722`The category of regular triangular sets,{} introduced under the name regular chains in [1] (and other papers). In [3] it is proved that regular triangular sets and towers of simple extensions of a field are equivalent notions. In the following definitions,{} all polynomials and ideals are taken from the polyno
994722`--mial ring \spad{k[x1,{} ...,{} xn]} where \spad{k} is the fraction field of \spad{R}. The triangular set \spad{[t1,{} ...,{} tm]} is regular iff for every \spad{i} the initial of \spad{ti+1} is invertible in the tower of simple extensions associated with \spad{[t1,{} ...,{} \spad{ti}]}. A family \spad{[T1,{} ...,{} Ts]} of regular triangular sets is a split of Kalkbrener of a given ideal \spad{I} iff the radical of \spad{I} is equal to the intersection of the radical ideals generated by the sa
994722`--turated ideals of the \spad{[T1,{} ...,{} \spad{Ti}]}. A family \spad{[T1,{} ...,{} Ts]} of regular triangular sets is a split of Kalkbrener of a given triangular set \spad{T} iff it is a split of Kalkbrener of the saturated ideal of \spad{T}. Let \spad{K} be an algebraic closure of \spad{k}. Assume that \spad{V} is finite with cardinality \spad{n} and let \spad{A} be the affine space \spad{K^n}. For a regular triangular set \spad{T} let denote by \spad{W(T)} the set of regular zeros of \spad{
994722`--T}. A family \spad{[T1,{} ...,{} Ts]} of regular triangular sets is a split of Lazard of a given subset \spad{S} of \spad{A} iff the union of the \spad{W(\spad{Ti})} contains \spad{S} and is contained in the closure of \spad{S} (\spad{w}.\spad{r}.\spad{t}. Zariski topology). A family \spad{[T1,{} ...,{} Ts]} of regular triangular sets is a split of Lazard of a given triangular set \spad{T} if it is a split of Lazard of \spad{W(T)}. Note that if \spad{[T1,{} ...,{} Ts]} is a split of Lazard of 
994722`--\spad{T} then it is also a split of Kalkbrener of \spad{T}. The converse is \spad{false}. This category provides operations related to both kinds of splits,{} the former being related to ideals decomposition whereas the latter deals with varieties decomposition. See the example illustrating the \spadtype{RegularTriangularSet} constructor for more explanations about decompositions by means of regular triangular sets. \newline
994919`\spad{B} is retractable from A means that some elements in A can be converted into elements of \spad{B} and any element of \spad{B} can be converted into an element of A.
994997`A is retractable to \spad{B} means that some elementsif A can be converted into elements of \spad{B} and any element of \spad{B} can be converted into an element of A.
995071`The category of rings with unity,{} always associative,{} but not necessarily commutative.
995112`The category of associative rings,{} not necessarily commutative,{} and not necessarily with a 1. This is a combination of an abelian group and a semigroup,{} with multiplication distributing over addition. \blankline
995150`the class of all multiplicative semigroups,{} \spadignore{i.e.} a set with an associative operation \spadop{*}. \blankline
995203`A set category lists a collection of set-theoretic operations useful for both finite sets and multisets. Note however that finite sets are distinct from multisets. Although the operations defined for set categories are common to both,{} the relationship between the two cannot be described by inclusion or inheritance.
995281`\spadtype{SetCategory} is the basic category for describing a collection of elements with \spadop{=} (equality) and \spadfun{coerce} to output form. \blankline Conditional Attributes: \indented{3}{canonical\tab{15}data structure equality is the same as \spadop{=}}
995338`PointCategory is the category of points and vectors in space. Points may be used to represent shapes in a scenegraph such as: the vertices of a cube or points along a line. Shapes such as these may be defined explicitly or may be plotted. We implement SetCategory to allow us to curry transforms from one point to another.
995401`\spadtype{SquareMatrixCategory} is a general square matrix category which allows different representations and indexing schemes. Rows and columns may be extracted with rows returned as objects of type Row and colums returned as objects of type Col.
995620`A stream aggregate is a linear aggregate which possibly has an infinite number of elements. A basic domain constructor which builds stream aggregates is \spadtype{Stream}. From streams,{} a number of infinite structures such as power series can be built.
995696`A string aggregate is a category for strings,{} that is,{} one dimensional arrays of characters.
995760`A table aggregate is a model of a table,{} \spadignore{i.e.} a discrete many-to-one mapping from keys to entries.
996134`Category of tensor powers of modules over commutative rings.
996269`Category for the transcendental elementary functions.
996365`The category of triangular sets of multivariate polynomials with coefficients in an integral domain. Let \spad{R} be an integral domain and \spad{V} a finite ordered set of variables,{} say \spad{X1 < X2 < ... < Xn}. A set \spad{S} of polynomials in \spad{R[X1,{} X2,{} ...,{} Xn]} is triangular if no elements of \spad{
996365`--S} lies in \spad{R},{} and if two distinct elements of \spad{S} have distinct main variables. Note that the empty set is a triangular set. A triangular set is not necessarily a (lexicographical) Groebner basis and the notion of reduction related to triangular sets is based on the recursive view of polynomials. We recall this notion here and refer to [1] for more details. A polynomial \spad{P} is reduced \spad{w}.\spad{r}.\spad{t} a non-constant polynomial \spad{Q} if the degree of \spad{P} in 
996365`--the main variable of \spad{Q} is less than the main degree of \spad{Q}. A polynomial \spad{P} is reduced \spad{w}.\spad{r}.\spad{t} a triangular set \spad{T} if it is reduced \spad{w}.\spad{r}.\spad{t}. every polynomial of \spad{T}. \newline
996553`Category for the trigonometric functions.
996647`\indented{1}{TwoDimensionalArrayCategory is a general array category which} allows different representations and indexing schemes. Rows and columns may be extracted with rows returned as objects of type Row and columns returned as objects of type Col. The index of the 'first' row may be obtained by calling the function 'minR
996647`--owIndex'. The index of the 'first' column may be obtained by calling the function 'minColIndex'. The index of the first element of a 'Row' is the same as the index of the first column in an array and vice versa.
996829`A unary-recursive aggregate is a one where nodes may have either 0 or 1 children. This aggregate models,{} though not precisely,{} a linked list possibly with a single cycle. A node with one children models a non-empty list,{} with the \spadfun{value} of the list designating the head,{} or \spadfun{first},{} of the list,{} and the child designating the tail,{} or \spadfun{rest},{} of the list. A node with no chil
996829`--d then designates the empty list. Since these aggregates are recursive aggregates,{} they may be cyclic.
996921`A constructive unique factorization domain,{} \spadignore{i.e.} where we can constructively factor members into a product of a finite number of irreducible elements.
997003`\spadtype{UnivariateLaurentSeriesCategory} is the category of Laurent series in one variable.
997121`This is a category of univariate Laurent series constructed from univariate Taylor series. A Laurent series is represented by a pair \spad{[n,{} f(x)]},{} where \spad{n} is an arbitrary integer and \spad{f(x)} is a Taylor series. This pair represents the Laurent series \spad{x^n * f(x)}.
997311`The category of univariate polynomials over a ring \spad{R}. No particular model is assumed - implementations can be either sparse or dense.
997427`\spadtype{UnivariatePowerSeriesCategory} is the most general univariate power series category with exponents in an ordered abelian monoid. Note: this category exports a substitution function if it is possible to multiply exponents. Note: this category exports a derivative operation if it is possible to multiply coefficients by exponents.
997580`This is a category of univariate Puiseux series constructed from univariate Laurent series. A Puiseux series is represented by a pair \spad{[r,{} f(x)]},{} where \spad{r} is a positive rational number and \spad{f(x)} is a Laurent series. This pair represents the Puiseux series \spad{f(x^r)}.
997771`This is the category of univariate skew polynomials over an Ore coefficient ring. The multiplication is given by \spad{x a = \sigma(a) x + \delta a}. This category is an evolution of the types \indented{2}{MonogenicLinearOperator,{} OppositeMonogenicLinearOperator,{} and} \indented{2}{NonCommutativeOperatorDivision} developped by Jean Della Dora and Stephen \spad{M}. Watt.
997883`\spadtype{UnivariateTaylorSeriesCategory} is the category of Taylor series in one variable.
997999`\spadtype{VectorCategory} represents the type of vector like objects,{} \spadignore{i.e.} finite sequences indexed by some finite segment of the integers. The operations available on vectors depend on the structure of the underlying components. Many operations from the component domain are defined for vectors componentwise. It can by assumed that extraction or updating components can be done in constant time.
998075`Vector Spaces (not necessarily finite dimensional) over a field.
